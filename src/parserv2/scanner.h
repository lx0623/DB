#pragma once

#ifndef YY_DECL
#define YY_DECL \
aries_parser::Parser::token_type aries_parser::Scanner::lex(aries_parser::Parser::semantic_type* yylval, \
    aries_parser::Parser::location_type* yylloc\
)

#endif

#ifndef __FLEX_LEXER_H
#define yyFlexLexer AriesFlexLexer
#include "FlexLexer.h"
#undef yyFlexLexer
#endif
#include "common.h"
#include "parser.hh"

namespace aries_parser {

class Scanner : public AriesFlexLexer {
public:
    /** Create a new scanner object. The streams arg_yyin and arg_yyout default
     * to cin and cout, but that assignment is only made when initializing in
     * yylex(). */
    Scanner(std::istream* arg_yyin = 0,
	    std::ostream* arg_yyout = 0);
    
    /** Required for virtual functions */
    virtual ~Scanner();

    /** This is the main lexing function. It is generated by flex according to
     * the macro declaration YY_DECL above. The generated bison parser then
     * calls this virtual function to fetch new tokens. */
    virtual Parser::token_type lex(Parser::semantic_type* yylval, Parser::location_type* yylloc);

    /** Enable debug output (via arg_yyout) if compiled into the scanner. */
    void set_debug(bool b);

private:
    int yycolumn = 1;
};

} // namespace aries_parser 
