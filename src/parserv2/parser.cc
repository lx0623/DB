// A Bison parser, made by GNU Bison 3.5.

// Skeleton implementation for Bison LALR(1) parsers in C++

// Copyright (C) 2002-2015, 2018-2019 Free Software Foundation, Inc.

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

// As a special exception, you may create a larger work that contains
// part or all of the Bison parser skeleton and distribute that work
// under terms of your choice, so long as that work isn't itself a
// parser generator using the skeleton or a modified version thereof
// as a parser skeleton.  Alternatively, if you modify or redistribute
// the parser skeleton itself, you may (at your option) remove this
// special exception, which will cause the skeleton and the resulting
// Bison output files to be licensed under the GNU General Public
// License without this special exception.

// This special exception was added by the Free Software Foundation in
// version 2.2 of Bison.

// Undocumented macros, especially those whose name start with YY_,
// are private implementation details.  Do not rely on them.


// Take the name prefix into account.
#define yylex   aries_parserlex

// First part of user prologue.
#line 1 "parser.yy"

#include "common.h"
#include "driver.h"
#include "scanner.h"
#include "utils/string_util.h"


void yyerror(const char * msg);

/* this "connects" the bison parser in the driver to the flex scanner class
 * object. it defines the yylex() function call to pull the next token from the
 * current lexer object of the driver context. */
#undef yylex
#define yylex driver.lexer->lex

#define ADD_SELECT_ITEM(list, part) \
do { \
  std::shared_ptr<string> alias_ptr = nullptr; \
  auto expr = std::get<0>(part); \
  auto alias = std::get<1>(part); \
  if (!alias.empty()) { \
    alias_ptr = std::make_shared<string>(alias); \
  } \
  list->AddSelectExpr(expr, alias_ptr); \
} while(0)

using namespace aries_parser;


#line 72 "parser.cc"


#include "parser.hh"




#ifndef YY_
# if defined YYENABLE_NLS && YYENABLE_NLS
#  if ENABLE_NLS
#   include <libintl.h> // FIXME: INFRINGES ON USER NAME SPACE.
#   define YY_(msgid) dgettext ("bison-runtime", msgid)
#  endif
# endif
# ifndef YY_
#  define YY_(msgid) msgid
# endif
#endif

// Whether we are compiled with exception support.
#ifndef YY_EXCEPTIONS
# if defined __GNUC__ && !defined __EXCEPTIONS
#  define YY_EXCEPTIONS 0
# else
#  define YY_EXCEPTIONS 1
# endif
#endif

#define YYRHSLOC(Rhs, K) ((Rhs)[K].location)
/* YYLLOC_DEFAULT -- Set CURRENT to span from RHS[1] to RHS[N].
   If N is 0, then set CURRENT to the empty location which ends
   the previous symbol: RHS[0] (always defined).  */

# ifndef YYLLOC_DEFAULT
#  define YYLLOC_DEFAULT(Current, Rhs, N)                               \
    do                                                                  \
      if (N)                                                            \
        {                                                               \
          (Current).begin  = YYRHSLOC (Rhs, 1).begin;                   \
          (Current).end    = YYRHSLOC (Rhs, N).end;                     \
        }                                                               \
      else                                                              \
        {                                                               \
          (Current).begin = (Current).end = YYRHSLOC (Rhs, 0).end;      \
        }                                                               \
    while (false)
# endif


// Enable debugging if requested.
#if ARIES_PARSERDEBUG

// A pseudo ostream that takes yydebug_ into account.
# define YYCDEBUG if (yydebug_) (*yycdebug_)

# define YY_SYMBOL_PRINT(Title, Symbol)         \
  do {                                          \
    if (yydebug_)                               \
    {                                           \
      *yycdebug_ << Title << ' ';               \
      yy_print_ (*yycdebug_, Symbol);           \
      *yycdebug_ << '\n';                       \
    }                                           \
  } while (false)

# define YY_REDUCE_PRINT(Rule)          \
  do {                                  \
    if (yydebug_)                       \
      yy_reduce_print_ (Rule);          \
  } while (false)

# define YY_STACK_PRINT()               \
  do {                                  \
    if (yydebug_)                       \
      yystack_print_ ();                \
  } while (false)

#else // !ARIES_PARSERDEBUG

# define YYCDEBUG if (false) std::cerr
# define YY_SYMBOL_PRINT(Title, Symbol)  YYUSE (Symbol)
# define YY_REDUCE_PRINT(Rule)           static_cast<void> (0)
# define YY_STACK_PRINT()                static_cast<void> (0)

#endif // !ARIES_PARSERDEBUG

#define yyerrok         (yyerrstatus_ = 0)
#define yyclearin       (yyla.clear ())

#define YYACCEPT        goto yyacceptlab
#define YYABORT         goto yyabortlab
#define YYERROR         goto yyerrorlab
#define YYRECOVERING()  (!!yyerrstatus_)

namespace aries_parser {
#line 168 "parser.cc"


  /// Build a parser object.
  Parser::Parser (class Driver& driver_yyarg)
#if ARIES_PARSERDEBUG
    : yydebug_ (false),
      yycdebug_ (&std::cerr),
#else
    :
#endif
      driver (driver_yyarg)
  {}

  Parser::~Parser ()
  {}

  Parser::syntax_error::~syntax_error () YY_NOEXCEPT YY_NOTHROW
  {}

  /*---------------.
  | Symbol types.  |
  `---------------*/

  // basic_symbol.
#if 201103L <= YY_CPLUSPLUS
  template <typename Base>
  Parser::basic_symbol<Base>::basic_symbol (basic_symbol&& that)
    : Base (std::move (that))
    , value ()
    , location (std::move (that.location))
  {
    switch (this->type_get ())
    {
      case 775: // drop_table_stmt
      case 776: // drop_user_stmt
      case 777: // drop_view_stmt
      case 778: // drop_database_stmt
      case 827: // create
      case 871: // create_table_stmt
      case 875: // view_or_trigger_or_sp_or_event
      case 877: // no_definer_tail
      case 946: // view_tail
      case 1328: // use
        value.move< AbstractCommandPointer > (std::move (that.value));
        break;

      case 837: // user
      case 839: // create_user
        value.move< AccountSPtr > (std::move (that.value));
        break;

      case 1329: // kill
      case 1336: // shutdown_stmt
        value.move< AdminStmtStructurePtr > (std::move (that.value));
        break;

      case 1110: // cast_type
        value.move< CastType > (std::move (that.value));
        break;

      case 1204: // opt_column_attribute_list
      case 1205: // column_attribute_list
        value.move< ColAttrList > (std::move (that.value));
        break;

      case 990: // opt_create_table_options_etc
        value.move< CreateTableOptions > (std::move (that.value));
        break;

      case 1320: // delete_stmt
        value.move< DeleteStructurePtr > (std::move (that.value));
        break;

      case 796: // expr
      case 797: // bool_pri
      case 798: // predicate
      case 799: // bit_expr
      case 806: // simple_expr
      case 807: // case_expr
      case 808: // function_call_keyword
      case 809: // function_call_nonkeyword
      case 810: // function_call_conflict
      case 811: // function_call_generic
      case 814: // udf_expr
      case 815: // set_function_specification
      case 817: // sum_expr
      case 823: // row_subquery
      case 1029: // param_marker
      case 1057: // variable
      case 1109: // set_expr_or_default
      case 1111: // in_sum_expr
      case 1117: // opt_expr
      case 1118: // opt_else
      case 1145: // opt_where_clause
      case 1146: // opt_where_clause_expr
      case 1147: // opt_having_clause
      case 1170: // table_wild
      case 1172: // grouping_expr
      case 1200: // func_datetime_precision
      case 1210: // now_or_signed_literal
      case 1211: // now
      case 1311: // expr_or_default
        value.move< Expression > (std::move (that.value));
        break;

      case 1185: // field_def
        value.move< Field_def_ptr > (std::move (that.value));
        break;

      case 868: // field_options
      case 869: // field_opt_list
      case 870: // field_option
        value.move< Field_option > (std::move (that.value));
        break;

      case 1343: // opt_field_term
      case 1344: // field_term_list
      case 1345: // field_term
        value.move< Field_separators > (std::move (that.value));
        break;

      case 785: // opt_from_clause
      case 786: // from_clause
        value.move< FromPartStructurePointer > (std::move (that.value));
        break;

      case 1157: // opt_group_clause
        value.move< GroupbyStructurePointer > (std::move (that.value));
        break;

      case 1299: // insert_stmt
        value.move< InsertStructurePtr > (std::move (that.value));
        break;

      case 1120: // table_reference
      case 1121: // joined_table
      case 1129: // table_factor
      case 1131: // single_table_parens
      case 1132: // single_table
      case 1133: // joined_table_parens
      case 1134: // derived_table
        value.move< JoinStructurePointer > (std::move (that.value));
        break;

      case 1122: // natural_join_type
      case 1123: // inner_join_type
      case 1124: // outer_join_type
        value.move< JoinType > (std::move (that.value));
        break;

      case 1165: // opt_limit_clause
      case 1166: // limit_clause
      case 1167: // limit_options
      case 1321: // opt_simple_limit
        value.move< LimitStructurePointer > (std::move (that.value));
        break;

      case 1346: // opt_line_term
      case 1347: // line_term_list
      case 1348: // line_term
        value.move< Line_separators > (std::move (that.value));
        break;

      case 1030: // signed_literal
      case 1031: // literal
      case 1032: // NUM_literal
        value.move< Literal > (std::move (that.value));
        break;

      case 1337: // load_stmt
        value.move< LoadDataStructurePtr > (std::move (that.value));
        break;

      case 844: // duplicate
      case 1341: // opt_duplicate
        value.move< On_duplicate > (std::move (that.value));
        break;

      case 1171: // order_expr
        value.move< OrderItem > (std::move (that.value));
        break;

      case 1160: // opt_order_clause
      case 1161: // order_clause
        value.move< OrderbyStructurePointer > (std::move (that.value));
        break;

      case 1188: // type
        value.move< PT_ColumnType_ptr > (std::move (that.value));
        break;

      case 1206: // column_attribute
        value.move< PT_column_attr_base_ptr > (std::move (that.value));
        break;

      case 1106: // option_value_following_option_type
        value.move< PT_option_value_following_option_type_ptr > (std::move (that.value));
        break;

      case 1005: // part_definition
        value.move< PartDef > (std::move (that.value));
        break;

      case 1003: // opt_part_defs
      case 1004: // part_def_list
        value.move< PartDefList > (std::move (that.value));
        break;

      case 995: // part_type_def
        value.move< PartTypeDef > (std::move (that.value));
        break;

      case 1012: // part_value_item
        value.move< PartValueItem > (std::move (that.value));
        break;

      case 1007: // part_func_max
      case 1010: // part_value_item_list_paren
      case 1011: // part_value_item_list
        value.move< PartValueItemsSPtr > (std::move (that.value));
        break;

      case 1006: // opt_part_values
        value.move< PartValuesSPtr > (std::move (that.value));
        break;

      case 991: // opt_create_partitioning_etc
      case 994: // partition_clause
        value.move< PartitionStructureSPtr > (std::move (that.value));
        break;

      case 1197: // float_options
      case 1198: // precision
      case 1203: // opt_precision
        value.move< Precision_ptr > (std::move (that.value));
        break;

      case 1020: // prepare_src
        value.move< PrepareSrcPtr > (std::move (that.value));
        break;

      case 1019: // prepare
      case 1021: // execute
      case 1025: // deallocate
        value.move< PreparedStmtStructurePtr > (std::move (that.value));
        break;

      case 1259: // show_engine_param
        value.move< SHOW_CMD > (std::move (that.value));
        break;

      case 1169: // insert_ident
      case 1173: // simple_ident
      case 1174: // simple_ident_nospvar
      case 1175: // simple_ident_q
        value.move< SQLIdentPtr > (std::move (that.value));
        break;

      case 792: // select_item_list
        value.move< SelectPartStructurePointer > (std::move (that.value));
        break;

      case 779: // select_stmt
      case 780: // query_expression
      case 781: // query_expression_body
      case 782: // query_expression_parens
      case 783: // query_primary
      case 784: // query_specification
      case 824: // table_subquery
      case 825: // subquery
      case 947: // view_select
      case 1298: // query_expression_or_parens
      case 1317: // explain_stmt
        value.move< SelectStructurePointer > (std::move (that.value));
        break;

      case 822: // union_option
        value.move< SetOperationType > (std::move (that.value));
        break;

      case 1101: // option_value
      case 1107: // option_value_no_option_type
        value.move< SetStructurePtr > (std::move (that.value));
        break;

      case 1256: // describe_stmt
      case 1257: // show
      case 1258: // show_param
        value.move< ShowStructurePtr > (std::move (that.value));
        break;

      case 1267: // opt_show_cmd_type
        value.move< Show_cmd_type > (std::move (that.value));
        break;

      case 856: // opt_table_list
      case 857: // table_list
      case 1325: // table_alias_ref_list
        value.move< TABLE_LIST > (std::move (that.value));
        break;

      case 859: // table_element
      case 860: // column_def
      case 862: // table_constraint_def
        value.move< TableElementDescriptionPtr > (std::move (that.value));
        break;

      case 1358: // start
      case 1362: // begin_stmt
      case 1367: // commit
      case 1368: // rollback
        value.move< TransactionStructurePtr > (std::move (that.value));
        break;

      case 1313: // update_stmt
        value.move< UpdateStructurePtr > (std::move (that.value));
        break;

      case 1308: // row_value
      case 1309: // opt_values
      case 1310: // values
        value.move< VALUES > (std::move (that.value));
        break;

      case 1058: // variable_aux
        value.move< VariableStructurePtr > (std::move (that.value));
        break;

      case 1261: // opt_wild_or_where
      case 1262: // opt_wild_or_where_for_show
        value.move< WildOrWhere_ptr > (std::move (that.value));
        break;

      case 818: // opt_distinct
      case 845: // opt_if_not_exists
      case 865: // opt_not
      case 872: // if_exists
      case 873: // opt_temporary
      case 996: // opt_linear
      case 1080: // visibility
      case 1265: // opt_full
      case 1266: // opt_extended
      case 1301: // opt_ignore
      case 1339: // opt_local
        value.move< bool > (std::move (that.value));
        break;

      case 1338: // data_or_xml
        value.move< enum_filetype > (std::move (that.value));
        break;

      case 1102: // option_type
      case 1103: // opt_var_type
      case 1104: // opt_var_ident_type
      case 1105: // opt_set_var_ident_type
        value.move< enum_var_type > (std::move (that.value));
        break;

      case 1364: // opt_chain
      case 1365: // opt_release
        value.move< enum_yes_no_unknown > (std::move (that.value));
        break;

      case 789: // select_options
      case 790: // select_option_list
      case 791: // select_option
      case 804: // comp_op
      case 826: // query_spec_option
      case 1330: // kill_option
        value.move< int > (std::move (that.value));
        break;

      case 1064: // constraint_key_type
        value.move< keytype > (std::move (that.value));
        break;

      case 1315: // update_elem
        value.move< pair< BiaodashiPointer, BiaodashiPointer > > (std::move (that.value));
        break;

      case 1303: // insert_query_expression
        value.move< pair< EXPR_LIST, SelectStructurePointer > > (std::move (that.value));
        break;

      case 1207: // encode_type
        value.move< pair< aries::EncodeType, string > > (std::move (that.value));
        break;

      case 861: // opt_references
      case 1060: // references
        value.move< pair< shared_ptr<BasicRel>, vector< string > > > (std::move (that.value));
        break;

      case 1312: // opt_insert_update_list
      case 1314: // update_list
        value.move< pair< vector< BiaodashiPointer >, vector< BiaodashiPointer > >  > (std::move (that.value));
        break;

      case 838: // user_list
      case 840: // create_user_list
        value.move< shared_ptr< vector< AccountSPtr > > > (std::move (that.value));
        break;

      case 1176: // table_ident
      case 1242: // sp_name
      case 1326: // table_ident_opt_wild
        value.move< shared_ptr<BasicRel> > (std::move (that.value));
        break;

      case 1098: // option_value_list_continued
      case 1099: // start_option_value_list_following_option_type
      case 1100: // option_value_list
      case 1286: // set
      case 1287: // start_option_value_list
        value.move< shared_ptr<vector<SetStructurePtr>> > (std::move (that.value));
        break;

      case 858: // table_element_list
        value.move< shared_ptr<vector<TableElementDescriptionPtr>> > (std::move (that.value));
        break;

      case 5: // ACCOUNT_SYM
      case 6: // ACTION
      case 8: // ADDDATE_SYM
      case 9: // AFTER_SYM
      case 10: // AGAINST
      case 11: // AGGREGATE_SYM
      case 12: // ALGORITHM_SYM
      case 15: // ALWAYS_SYM
      case 20: // ANY_SYM
      case 22: // ASC
      case 23: // ASCII_SYM
      case 25: // AT_SYM
      case 26: // AUTOEXTEND_SIZE_SYM
      case 27: // AUTO_INC
      case 28: // AVG_ROW_LENGTH
      case 29: // AVG_SYM
      case 30: // BACKUP_SYM
      case 32: // BEGIN_SYM
      case 36: // BINLOG_SYM
      case 40: // BIT_SYM
      case 43: // BLOCK_SYM
      case 44: // BOOLEAN_SYM
      case 45: // BOOL_SYM
      case 47: // BTREE_SYM
      case 49: // BYTE_SYM
      case 50: // CACHE_SYM
      case 53: // CASCADED
      case 56: // CATALOG_NAME_SYM
      case 57: // CHAIN_SYM
      case 59: // CHANGED
      case 60: // CHANNEL_SYM
      case 61: // CHARSET
      case 63: // CHECKSUM_SYM
      case 65: // CIPHER_SYM
      case 66: // CLASS_ORIGIN_SYM
      case 67: // CLIENT_SYM
      case 68: // CLOSE_SYM
      case 69: // COALESCE
      case 70: // CODE_SYM
      case 72: // COLLATION_SYM
      case 73: // COLUMNS
      case 75: // COLUMN_FORMAT_SYM
      case 76: // COLUMN_NAME_SYM
      case 77: // COMMENT_SYM
      case 78: // COMMITTED_SYM
      case 79: // COMMIT_SYM
      case 80: // COMPACT_SYM
      case 81: // COMPLETION_SYM
      case 82: // COMPRESSED_SYM
      case 83: // COMPRESSION_SYM
      case 84: // ENCRYPTION_SYM
      case 85: // CONCURRENT
      case 88: // CONNECTION_SYM
      case 89: // CONSISTENT_SYM
      case 91: // CONSTRAINT_CATALOG_SYM
      case 92: // CONSTRAINT_NAME_SYM
      case 93: // CONSTRAINT_SCHEMA_SYM
      case 94: // CONTAINS_SYM
      case 95: // CONTEXT_SYM
      case 99: // CPU_SYM
      case 100: // CREATE
      case 104: // CURRENT_SYM
      case 107: // CURSOR_NAME_SYM
      case 111: // DATAFILE_SYM
      case 112: // DATA_SYM
      case 113: // DATETIME_SYM
      case 116: // DATE_SYM
      case 121: // DAY_SYM
      case 122: // DEALLOCATE_SYM
      case 123: // DECIMAL_NUM
      case 128: // DEFAULT_AUTH_SYM
      case 129: // DEFINER_SYM
      case 131: // DELAY_KEY_WRITE_SYM
      case 133: // DESC
      case 137: // DIAGNOSTICS_SYM
      case 138: // BYTEDICT_SYM
      case 139: // SHORTDICT_SYM
      case 140: // INTDICT_SYM
      case 142: // DIRECTORY_SYM
      case 143: // DISABLE_SYM
      case 144: // DISCARD_SYM
      case 145: // DISK_SYM
      case 149: // DO_SYM
      case 152: // DUMPFILE
      case 153: // DUPLICATE_SYM
      case 154: // DYNAMIC_SYM
      case 158: // ENABLE_SYM
      case 161: // END
      case 162: // ENDS_SYM
      case 163: // ENGINES_SYM
      case 164: // ENGINE_SYM
      case 165: // ENUM_SYM
      case 168: // ERROR_SYM
      case 169: // ERRORS
      case 171: // ESCAPE_SYM
      case 172: // EVENTS_SYM
      case 173: // EVENT_SYM
      case 174: // EVERY_SYM
      case 175: // EXCHANGE_SYM
      case 176: // EXECUTE_SYM
      case 179: // EXPANSION_SYM
      case 180: // EXPIRE_SYM
      case 181: // EXPORT_SYM
      case 182: // EXTENDED_SYM
      case 183: // EXTENT_SIZE_SYM
      case 186: // FAST_SYM
      case 187: // FAULTS_SYM
      case 189: // FILE_SYM
      case 190: // FILE_BLOCK_SIZE_SYM
      case 191: // FILTER_SYM
      case 192: // FIRST_SYM
      case 193: // FIXED_SYM
      case 194: // FLOAT_NUM
      case 196: // FLUSH_SYM
      case 197: // FOLLOWS_SYM
      case 201: // FORMAT_SYM
      case 202: // FOUND_SYM
      case 204: // FULL
      case 208: // GENERAL
      case 210: // GROUP_REPLICATION
      case 211: // GEOMETRYCOLLECTION_SYM
      case 212: // GEOMETRY_SYM
      case 213: // GET_FORMAT
      case 215: // GLOBAL_SYM
      case 217: // GRANTS
      case 221: // HANDLER_SYM
      case 222: // HASH_SYM
      case 224: // HELP_SYM
      case 225: // HEX_NUM
      case 227: // HOST_SYM
      case 228: // HOSTS_SYM
      case 232: // HOUR_SYM
      case 233: // IDENT
      case 234: // IDENTIFIED_SYM
      case 238: // IGNORE_SERVER_IDS_SYM
      case 239: // IMPORT
      case 240: // INDEXES
      case 243: // INITIAL_SIZE_SYM
      case 248: // INSERT_METHOD
      case 249: // INSTANCE_SYM
      case 250: // INSTALL_SYM
      case 251: // INTERVAL_SYM
      case 255: // INVOKER_SYM
      case 259: // IO_SYM
      case 260: // IPC_SYM
      case 262: // ISOLATION
      case 263: // ISSUER_SYM
      case 267: // JSON_SYM
      case 269: // KEY_BLOCK_SIZE
      case 272: // LANGUAGE_SYM
      case 273: // LAST_SYM
      case 276: // LEAVES
      case 279: // LESS_SYM
      case 280: // LEVEL_SYM
      case 281: // LEX_HOSTNAME
      case 286: // LINESTRING_SYM
      case 287: // LIST_SYM
      case 289: // LOCAL_SYM
      case 291: // LOCKS_SYM
      case 293: // LOGFILE_SYM
      case 294: // LOGS_SYM
      case 297: // LONG_NUM
      case 302: // MASTER_AUTO_POSITION_SYM
      case 304: // MASTER_CONNECT_RETRY_SYM
      case 305: // MASTER_DELAY_SYM
      case 306: // MASTER_HOST_SYM
      case 307: // MASTER_LOG_FILE_SYM
      case 308: // MASTER_LOG_POS_SYM
      case 309: // MASTER_PASSWORD_SYM
      case 310: // MASTER_PORT_SYM
      case 311: // MASTER_RETRY_COUNT_SYM
      case 312: // MASTER_SERVER_ID_SYM
      case 313: // MASTER_SSL_CAPATH_SYM
      case 314: // MASTER_TLS_VERSION_SYM
      case 315: // MASTER_SSL_CA_SYM
      case 316: // MASTER_SSL_CERT_SYM
      case 317: // MASTER_SSL_CIPHER_SYM
      case 318: // MASTER_SSL_CRL_SYM
      case 319: // MASTER_SSL_CRLPATH_SYM
      case 320: // MASTER_SSL_KEY_SYM
      case 321: // MASTER_SSL_SYM
      case 323: // MASTER_SYM
      case 324: // MASTER_USER_SYM
      case 325: // MASTER_HEARTBEAT_PERIOD_SYM
      case 327: // MAX_CONNECTIONS_PER_HOUR
      case 328: // MAX_QUERIES_PER_HOUR
      case 329: // MAX_ROWS
      case 330: // MAX_SIZE_SYM
      case 332: // MAX_UPDATES_PER_HOUR
      case 333: // MAX_USER_CONNECTIONS_SYM
      case 338: // MEDIUM_SYM
      case 339: // MEMORY_SYM
      case 340: // MERGE_SYM
      case 341: // MESSAGE_TEXT_SYM
      case 342: // MICROSECOND_SYM
      case 343: // MIGRATE_SYM
      case 346: // MINUTE_SYM
      case 347: // MIN_ROWS
      case 349: // MODE_SYM
      case 351: // MODIFY_SYM
      case 353: // MONTH_SYM
      case 354: // MULTILINESTRING_SYM
      case 355: // MULTIPOINT_SYM
      case 356: // MULTIPOLYGON_SYM
      case 357: // MUTEX_SYM
      case 358: // MYSQL_ERRNO_SYM
      case 359: // NAMES_SYM
      case 360: // NAME_SYM
      case 361: // NATIONAL_SYM
      case 364: // NCHAR_SYM
      case 365: // NDBCLUSTER_SYM
      case 368: // NEVER_SYM
      case 369: // NEW_SYM
      case 370: // NEXT_SYM
      case 371: // NODEGROUP_SYM
      case 372: // NONE_SYM
      case 376: // NO_SYM
      case 377: // NO_WAIT_SYM
      case 380: // NUM
      case 381: // NUMBER_SYM
      case 383: // NVARCHAR_SYM
      case 384: // OFFSET_SYM
      case 386: // ONE_SYM
      case 387: // ONLY_SYM
      case 388: // OPEN_SYM
      case 391: // OPTIONS_SYM
      case 401: // OWNER_SYM
      case 402: // PACK_KEYS_SYM
      case 403: // PAGE_SYM
      case 405: // PARSER_SYM
      case 407: // PARTIAL
      case 409: // PARTITIONS_SYM
      case 410: // PARTITIONING_SYM
      case 411: // PASSWORD
      case 412: // PHASE_SYM
      case 413: // PLUGIN_DIR_SYM
      case 414: // PLUGIN_SYM
      case 415: // PLUGINS_SYM
      case 416: // "."
      case 417: // POLYGON_SYM
      case 418: // PORT_SYM
      case 420: // PRECEDES_SYM
      case 422: // PREPARE_SYM
      case 423: // PRESERVE_SYM
      case 424: // PREV_SYM
      case 426: // PRIVILEGES
      case 428: // PROCESS
      case 429: // PROCESSLIST_SYM
      case 430: // PROFILE_SYM
      case 431: // PROFILES_SYM
      case 432: // PROXY_SYM
      case 434: // QUARTER_SYM
      case 435: // QUERY_SYM
      case 436: // QUICK
      case 439: // READ_ONLY_SYM
      case 443: // REBUILD_SYM
      case 444: // RECOVER_SYM
      case 446: // REDO_BUFFER_SIZE_SYM
      case 447: // REDUNDANT_SYM
      case 450: // RELAY
      case 451: // RELAYLOG_SYM
      case 452: // RELAY_LOG_FILE_SYM
      case 453: // RELAY_LOG_POS_SYM
      case 454: // RELAY_THREAD
      case 456: // RELOAD
      case 457: // REMOVE_SYM
      case 459: // REORGANIZE_SYM
      case 460: // REPAIR
      case 461: // REPEATABLE_SYM
      case 464: // REPLICATION
      case 465: // REPLICATE_DO_DB
      case 466: // REPLICATE_IGNORE_DB
      case 467: // REPLICATE_DO_TABLE
      case 468: // REPLICATE_IGNORE_TABLE
      case 469: // REPLICATE_WILD_DO_TABLE
      case 470: // REPLICATE_WILD_IGNORE_TABLE
      case 471: // REPLICATE_REWRITE_DB
      case 473: // RESET_SYM
      case 475: // RESOURCES
      case 476: // RESTORE_SYM
      case 478: // RESUME_SYM
      case 479: // RETURNED_SQLSTATE_SYM
      case 480: // RETURNS_SYM
      case 482: // REVERSE_SYM
      case 485: // ROLLBACK_SYM
      case 486: // ROLLUP_SYM
      case 487: // ROTATE_SYM
      case 488: // ROUTINE_SYM
      case 490: // ROW_FORMAT_SYM
      case 492: // ROW_COUNT_SYM
      case 493: // RTREE_SYM
      case 494: // SAVEPOINT_SYM
      case 495: // SCHEDULE_SYM
      case 496: // SCHEMA_NAME_SYM
      case 499: // SECOND_SYM
      case 500: // SECURITY_SYM
      case 504: // SERIALIZABLE_SYM
      case 505: // SERIAL_SYM
      case 506: // SESSION_SYM
      case 507: // SERVER_SYM
      case 511: // SHARE_SYM
      case 512: // SHARES_SYM
      case 516: // SHUTDOWN
      case 518: // SIGNED_SYM
      case 519: // SIMPLE_SYM
      case 520: // SLAVE
      case 521: // SLOW
      case 523: // SNAPSHOT_SYM
      case 524: // SOCKET_SYM
      case 525: // SONAME_SYM
      case 526: // SOUNDS_SYM
      case 527: // SOURCE_SYM
      case 533: // SQL_AFTER_GTIDS
      case 534: // SQL_AFTER_MTS_GAPS
      case 535: // SQL_BEFORE_GTIDS
      case 537: // SQL_BUFFER_RESULT
      case 540: // SQL_NO_CACHE_SYM
      case 543: // SQL_THREAD
      case 545: // STACKED_SYM
      case 547: // STARTS_SYM
      case 548: // START_SYM
      case 549: // STATS_AUTO_RECALC_SYM
      case 550: // STATS_PERSISTENT_SYM
      case 551: // STATS_SAMPLE_PAGES_SYM
      case 552: // STATUS_SYM
      case 555: // STOP_SYM
      case 556: // STORAGE_SYM
      case 559: // STRING_SYM
      case 560: // SUBCLASS_ORIGIN_SYM
      case 561: // SUBDATE_SYM
      case 562: // SUBJECT_SYM
      case 563: // SUBPARTITIONS_SYM
      case 564: // SUBPARTITION_SYM
      case 567: // SUPER_SYM
      case 568: // SUSPEND_SYM
      case 569: // SWAPS_SYM
      case 570: // SWITCHES_SYM
      case 572: // TABLES
      case 573: // VIEWS
      case 574: // TABLESPACE_SYM
      case 577: // TABLE_CHECKSUM_SYM
      case 578: // TABLE_NAME_SYM
      case 579: // TEMPORARY
      case 580: // TEMPTABLE_SYM
      case 582: // TEXT_STRING
      case 583: // TEXT_SYM
      case 584: // THAN_SYM
      case 586: // TIMESTAMP_SYM
      case 587: // TIMESTAMP_ADD
      case 588: // TIMESTAMP_DIFF
      case 589: // TIME_SYM
      case 595: // TRANSACTION_SYM
      case 596: // TRIGGERS_SYM
      case 600: // TRUNCATE_SYM
      case 601: // TYPES_SYM
      case 602: // TYPE_SYM
      case 604: // ULONGLONG_NUM
      case 605: // UNCOMMITTED_SYM
      case 606: // UNDEFINED_SYM
      case 608: // UNDOFILE_SYM
      case 609: // UNDO_BUFFER_SIZE_SYM
      case 611: // UNICODE_SYM
      case 612: // UNINSTALL_SYM
      case 615: // UNKNOWN_SYM
      case 618: // UNTIL_SYM
      case 620: // UPGRADE_SYM
      case 622: // USER
      case 623: // USE_FRM
      case 629: // VALIDATION_SYM
      case 631: // VALUE_SYM
      case 632: // VARBINARY_SYM
      case 634: // VARIABLES
      case 639: // VIEW_SYM
      case 641: // WAIT_SYM
      case 642: // WARNINGS
      case 643: // WEEK_SYM
      case 644: // WEIGHT_STRING_SYM
      case 651: // WITHOUT_SYM
      case 652: // WORK_SYM
      case 653: // WRAPPER_SYM
      case 655: // X509_SYM
      case 656: // XA_SYM
      case 657: // XID_SYM
      case 658: // XML_SYM
      case 661: // YEAR_SYM
      case 667: // PERSIST_SYM
      case 668: // ROLE_SYM
      case 669: // ADMIN_SYM
      case 670: // INVISIBLE_SYM
      case 671: // VISIBLE_SYM
      case 673: // COMPONENT_SYM
      case 682: // SKIP_SYM
      case 683: // LOCKED_SYM
      case 684: // NOWAIT_SYM
      case 686: // PERSIST_ONLY_SYM
      case 687: // HISTOGRAM_SYM
      case 688: // BUCKETS_SYM
      case 689: // OBSOLETE_TOKEN_930
      case 690: // CLONE_SYM
      case 693: // EXCLUDE_SYM
      case 695: // FOLLOWING_SYM
      case 702: // NULLS_SYM
      case 703: // OTHERS_SYM
      case 706: // PRECEDING_SYM
      case 708: // RESPECT_SYM
      case 710: // TIES_SYM
      case 711: // UNBOUNDED_SYM
      case 715: // NESTED_SYM
      case 716: // ORDINALITY_SYM
      case 717: // PATH_SYM
      case 718: // HISTORY_SYM
      case 719: // REUSE_SYM
      case 720: // SRID_SYM
      case 721: // THREAD_PRIORITY_SYM
      case 722: // RESOURCE_SYM
      case 724: // VCPU_SYM
      case 725: // MASTER_PUBLIC_KEY_PATH_SYM
      case 726: // GET_MASTER_PUBLIC_KEY_SYM
      case 727: // RESTART_SYM
      case 728: // DEFINITION_SYM
      case 729: // DESCRIPTION_SYM
      case 730: // ORGANIZATION_SYM
      case 731: // REFERENCE_SYM
      case 732: // ACTIVE_SYM
      case 733: // INACTIVE_SYM
      case 735: // OPTIONAL_SYM
      case 736: // SECONDARY_SYM
      case 737: // SECONDARY_ENGINE_SYM
      case 738: // SECONDARY_LOAD_SYM
      case 739: // SECONDARY_UNLOAD_SYM
      case 740: // RETAIN_SYM
      case 741: // OLD_SYM
      case 742: // ENFORCED_SYM
      case 743: // OJ_SYM
      case 744: // NETWORK_NAMESPACE_SYM
      case 794: // select_alias
      case 864: // opt_constraint_name
      case 1024: // execute_var_ident
      case 1027: // text_literal
      case 1028: // text_string
      case 1078: // opt_index_name_and_type
      case 1083: // key_part
      case 1085: // key_part_with_expression
      case 1086: // opt_ident
      case 1087: // opt_component
      case 1088: // charset_name
      case 1108: // internal_variable_name
      case 1139: // interval
      case 1140: // interval_time_stamp
      case 1143: // opt_table_alias
      case 1163: // opt_ordering_direction
      case 1164: // ordering_direction
      case 1168: // limit_option
      case 1177: // IDENT_sys
      case 1178: // TEXT_STRING_sys
      case 1179: // TEXT_STRING_literal
      case 1180: // TEXT_STRING_filesystem
      case 1181: // TEXT_STRING_password
      case 1182: // TEXT_STRING_hash
      case 1183: // ident
      case 1184: // ident_or_text
      case 1190: // nchar
      case 1191: // varchar
      case 1192: // nvarchar
      case 1193: // int_type
      case 1194: // real_type
      case 1196: // numeric_type
      case 1199: // type_datetime_precision
      case 1201: // field_length
      case 1202: // opt_field_length
      case 1212: // ident_keyword
      case 1214: // ident_keywords_ambiguous_2_labels
      case 1217: // ident_keywords_unambiguous
      case 1218: // lvalue_keyword
      case 1220: // TEXT_STRING_sys_nonewline
      case 1255: // opt_describe_column
      case 1264: // opt_db
      case 1285: // lvalue_ident
      case 1288: // password
      case 1342: // opt_load_data_charset
      case 1349: // opt_xml_rows_identified_by
        value.move< string > (std::move (that.value));
        break;

      case 1340: // load_data_lock
        value.move< thr_lock_type > (std::move (that.value));
        break;

      case 793: // select_item
        value.move< tuple<Expression, string> > (std::move (that.value));
        break;

      case 998: // opt_num_parts
      case 1002: // opt_num_subparts
      case 1271: // ulong_num
      case 1350: // opt_ignore_lines
        value.move< ulong > (std::move (that.value));
        break;

      case 989: // size_number
      case 1272: // real_ulong_num
      case 1273: // ulonglong_num
      case 1274: // real_ulonglong_num
        value.move< ulonglong > (std::move (that.value));
        break;

      case 1008: // part_values_in
      case 1009: // part_value_list
        value.move< vector< PartValueItemsSPtr > > (std::move (that.value));
        break;

      case 812: // opt_udf_expr_list
      case 813: // udf_expr_list
      case 1112: // opt_expr_list
      case 1114: // expr_list
      case 1158: // group_list
      case 1304: // insert_from_constructor
      case 1327: // fields
        value.move< vector<Expression> > (std::move (that.value));
        break;

      case 787: // from_tables
      case 788: // table_reference_list
        value.move< vector<JoinStructurePointer> > (std::move (that.value));
        break;

      case 1162: // order_list
        value.move< vector<OrderItem> > (std::move (that.value));
        break;

      case 1022: // execute_using
      case 1023: // execute_var_list
      case 1082: // key_list
      case 1084: // key_list_with_expression
      case 1151: // opt_derived_column_list
      case 1152: // simple_ident_list
        value.move< vector<string> > (std::move (that.value));
        break;

      case 1119: // when_list
        value.move< vector<tuple<Expression, Expression>> > (std::move (that.value));
        break;

      default:
        break;
    }

  }
#endif

  template <typename Base>
  Parser::basic_symbol<Base>::basic_symbol (const basic_symbol& that)
    : Base (that)
    , value ()
    , location (that.location)
  {
    switch (this->type_get ())
    {
      case 775: // drop_table_stmt
      case 776: // drop_user_stmt
      case 777: // drop_view_stmt
      case 778: // drop_database_stmt
      case 827: // create
      case 871: // create_table_stmt
      case 875: // view_or_trigger_or_sp_or_event
      case 877: // no_definer_tail
      case 946: // view_tail
      case 1328: // use
        value.copy< AbstractCommandPointer > (YY_MOVE (that.value));
        break;

      case 837: // user
      case 839: // create_user
        value.copy< AccountSPtr > (YY_MOVE (that.value));
        break;

      case 1329: // kill
      case 1336: // shutdown_stmt
        value.copy< AdminStmtStructurePtr > (YY_MOVE (that.value));
        break;

      case 1110: // cast_type
        value.copy< CastType > (YY_MOVE (that.value));
        break;

      case 1204: // opt_column_attribute_list
      case 1205: // column_attribute_list
        value.copy< ColAttrList > (YY_MOVE (that.value));
        break;

      case 990: // opt_create_table_options_etc
        value.copy< CreateTableOptions > (YY_MOVE (that.value));
        break;

      case 1320: // delete_stmt
        value.copy< DeleteStructurePtr > (YY_MOVE (that.value));
        break;

      case 796: // expr
      case 797: // bool_pri
      case 798: // predicate
      case 799: // bit_expr
      case 806: // simple_expr
      case 807: // case_expr
      case 808: // function_call_keyword
      case 809: // function_call_nonkeyword
      case 810: // function_call_conflict
      case 811: // function_call_generic
      case 814: // udf_expr
      case 815: // set_function_specification
      case 817: // sum_expr
      case 823: // row_subquery
      case 1029: // param_marker
      case 1057: // variable
      case 1109: // set_expr_or_default
      case 1111: // in_sum_expr
      case 1117: // opt_expr
      case 1118: // opt_else
      case 1145: // opt_where_clause
      case 1146: // opt_where_clause_expr
      case 1147: // opt_having_clause
      case 1170: // table_wild
      case 1172: // grouping_expr
      case 1200: // func_datetime_precision
      case 1210: // now_or_signed_literal
      case 1211: // now
      case 1311: // expr_or_default
        value.copy< Expression > (YY_MOVE (that.value));
        break;

      case 1185: // field_def
        value.copy< Field_def_ptr > (YY_MOVE (that.value));
        break;

      case 868: // field_options
      case 869: // field_opt_list
      case 870: // field_option
        value.copy< Field_option > (YY_MOVE (that.value));
        break;

      case 1343: // opt_field_term
      case 1344: // field_term_list
      case 1345: // field_term
        value.copy< Field_separators > (YY_MOVE (that.value));
        break;

      case 785: // opt_from_clause
      case 786: // from_clause
        value.copy< FromPartStructurePointer > (YY_MOVE (that.value));
        break;

      case 1157: // opt_group_clause
        value.copy< GroupbyStructurePointer > (YY_MOVE (that.value));
        break;

      case 1299: // insert_stmt
        value.copy< InsertStructurePtr > (YY_MOVE (that.value));
        break;

      case 1120: // table_reference
      case 1121: // joined_table
      case 1129: // table_factor
      case 1131: // single_table_parens
      case 1132: // single_table
      case 1133: // joined_table_parens
      case 1134: // derived_table
        value.copy< JoinStructurePointer > (YY_MOVE (that.value));
        break;

      case 1122: // natural_join_type
      case 1123: // inner_join_type
      case 1124: // outer_join_type
        value.copy< JoinType > (YY_MOVE (that.value));
        break;

      case 1165: // opt_limit_clause
      case 1166: // limit_clause
      case 1167: // limit_options
      case 1321: // opt_simple_limit
        value.copy< LimitStructurePointer > (YY_MOVE (that.value));
        break;

      case 1346: // opt_line_term
      case 1347: // line_term_list
      case 1348: // line_term
        value.copy< Line_separators > (YY_MOVE (that.value));
        break;

      case 1030: // signed_literal
      case 1031: // literal
      case 1032: // NUM_literal
        value.copy< Literal > (YY_MOVE (that.value));
        break;

      case 1337: // load_stmt
        value.copy< LoadDataStructurePtr > (YY_MOVE (that.value));
        break;

      case 844: // duplicate
      case 1341: // opt_duplicate
        value.copy< On_duplicate > (YY_MOVE (that.value));
        break;

      case 1171: // order_expr
        value.copy< OrderItem > (YY_MOVE (that.value));
        break;

      case 1160: // opt_order_clause
      case 1161: // order_clause
        value.copy< OrderbyStructurePointer > (YY_MOVE (that.value));
        break;

      case 1188: // type
        value.copy< PT_ColumnType_ptr > (YY_MOVE (that.value));
        break;

      case 1206: // column_attribute
        value.copy< PT_column_attr_base_ptr > (YY_MOVE (that.value));
        break;

      case 1106: // option_value_following_option_type
        value.copy< PT_option_value_following_option_type_ptr > (YY_MOVE (that.value));
        break;

      case 1005: // part_definition
        value.copy< PartDef > (YY_MOVE (that.value));
        break;

      case 1003: // opt_part_defs
      case 1004: // part_def_list
        value.copy< PartDefList > (YY_MOVE (that.value));
        break;

      case 995: // part_type_def
        value.copy< PartTypeDef > (YY_MOVE (that.value));
        break;

      case 1012: // part_value_item
        value.copy< PartValueItem > (YY_MOVE (that.value));
        break;

      case 1007: // part_func_max
      case 1010: // part_value_item_list_paren
      case 1011: // part_value_item_list
        value.copy< PartValueItemsSPtr > (YY_MOVE (that.value));
        break;

      case 1006: // opt_part_values
        value.copy< PartValuesSPtr > (YY_MOVE (that.value));
        break;

      case 991: // opt_create_partitioning_etc
      case 994: // partition_clause
        value.copy< PartitionStructureSPtr > (YY_MOVE (that.value));
        break;

      case 1197: // float_options
      case 1198: // precision
      case 1203: // opt_precision
        value.copy< Precision_ptr > (YY_MOVE (that.value));
        break;

      case 1020: // prepare_src
        value.copy< PrepareSrcPtr > (YY_MOVE (that.value));
        break;

      case 1019: // prepare
      case 1021: // execute
      case 1025: // deallocate
        value.copy< PreparedStmtStructurePtr > (YY_MOVE (that.value));
        break;

      case 1259: // show_engine_param
        value.copy< SHOW_CMD > (YY_MOVE (that.value));
        break;

      case 1169: // insert_ident
      case 1173: // simple_ident
      case 1174: // simple_ident_nospvar
      case 1175: // simple_ident_q
        value.copy< SQLIdentPtr > (YY_MOVE (that.value));
        break;

      case 792: // select_item_list
        value.copy< SelectPartStructurePointer > (YY_MOVE (that.value));
        break;

      case 779: // select_stmt
      case 780: // query_expression
      case 781: // query_expression_body
      case 782: // query_expression_parens
      case 783: // query_primary
      case 784: // query_specification
      case 824: // table_subquery
      case 825: // subquery
      case 947: // view_select
      case 1298: // query_expression_or_parens
      case 1317: // explain_stmt
        value.copy< SelectStructurePointer > (YY_MOVE (that.value));
        break;

      case 822: // union_option
        value.copy< SetOperationType > (YY_MOVE (that.value));
        break;

      case 1101: // option_value
      case 1107: // option_value_no_option_type
        value.copy< SetStructurePtr > (YY_MOVE (that.value));
        break;

      case 1256: // describe_stmt
      case 1257: // show
      case 1258: // show_param
        value.copy< ShowStructurePtr > (YY_MOVE (that.value));
        break;

      case 1267: // opt_show_cmd_type
        value.copy< Show_cmd_type > (YY_MOVE (that.value));
        break;

      case 856: // opt_table_list
      case 857: // table_list
      case 1325: // table_alias_ref_list
        value.copy< TABLE_LIST > (YY_MOVE (that.value));
        break;

      case 859: // table_element
      case 860: // column_def
      case 862: // table_constraint_def
        value.copy< TableElementDescriptionPtr > (YY_MOVE (that.value));
        break;

      case 1358: // start
      case 1362: // begin_stmt
      case 1367: // commit
      case 1368: // rollback
        value.copy< TransactionStructurePtr > (YY_MOVE (that.value));
        break;

      case 1313: // update_stmt
        value.copy< UpdateStructurePtr > (YY_MOVE (that.value));
        break;

      case 1308: // row_value
      case 1309: // opt_values
      case 1310: // values
        value.copy< VALUES > (YY_MOVE (that.value));
        break;

      case 1058: // variable_aux
        value.copy< VariableStructurePtr > (YY_MOVE (that.value));
        break;

      case 1261: // opt_wild_or_where
      case 1262: // opt_wild_or_where_for_show
        value.copy< WildOrWhere_ptr > (YY_MOVE (that.value));
        break;

      case 818: // opt_distinct
      case 845: // opt_if_not_exists
      case 865: // opt_not
      case 872: // if_exists
      case 873: // opt_temporary
      case 996: // opt_linear
      case 1080: // visibility
      case 1265: // opt_full
      case 1266: // opt_extended
      case 1301: // opt_ignore
      case 1339: // opt_local
        value.copy< bool > (YY_MOVE (that.value));
        break;

      case 1338: // data_or_xml
        value.copy< enum_filetype > (YY_MOVE (that.value));
        break;

      case 1102: // option_type
      case 1103: // opt_var_type
      case 1104: // opt_var_ident_type
      case 1105: // opt_set_var_ident_type
        value.copy< enum_var_type > (YY_MOVE (that.value));
        break;

      case 1364: // opt_chain
      case 1365: // opt_release
        value.copy< enum_yes_no_unknown > (YY_MOVE (that.value));
        break;

      case 789: // select_options
      case 790: // select_option_list
      case 791: // select_option
      case 804: // comp_op
      case 826: // query_spec_option
      case 1330: // kill_option
        value.copy< int > (YY_MOVE (that.value));
        break;

      case 1064: // constraint_key_type
        value.copy< keytype > (YY_MOVE (that.value));
        break;

      case 1315: // update_elem
        value.copy< pair< BiaodashiPointer, BiaodashiPointer > > (YY_MOVE (that.value));
        break;

      case 1303: // insert_query_expression
        value.copy< pair< EXPR_LIST, SelectStructurePointer > > (YY_MOVE (that.value));
        break;

      case 1207: // encode_type
        value.copy< pair< aries::EncodeType, string > > (YY_MOVE (that.value));
        break;

      case 861: // opt_references
      case 1060: // references
        value.copy< pair< shared_ptr<BasicRel>, vector< string > > > (YY_MOVE (that.value));
        break;

      case 1312: // opt_insert_update_list
      case 1314: // update_list
        value.copy< pair< vector< BiaodashiPointer >, vector< BiaodashiPointer > >  > (YY_MOVE (that.value));
        break;

      case 838: // user_list
      case 840: // create_user_list
        value.copy< shared_ptr< vector< AccountSPtr > > > (YY_MOVE (that.value));
        break;

      case 1176: // table_ident
      case 1242: // sp_name
      case 1326: // table_ident_opt_wild
        value.copy< shared_ptr<BasicRel> > (YY_MOVE (that.value));
        break;

      case 1098: // option_value_list_continued
      case 1099: // start_option_value_list_following_option_type
      case 1100: // option_value_list
      case 1286: // set
      case 1287: // start_option_value_list
        value.copy< shared_ptr<vector<SetStructurePtr>> > (YY_MOVE (that.value));
        break;

      case 858: // table_element_list
        value.copy< shared_ptr<vector<TableElementDescriptionPtr>> > (YY_MOVE (that.value));
        break;

      case 5: // ACCOUNT_SYM
      case 6: // ACTION
      case 8: // ADDDATE_SYM
      case 9: // AFTER_SYM
      case 10: // AGAINST
      case 11: // AGGREGATE_SYM
      case 12: // ALGORITHM_SYM
      case 15: // ALWAYS_SYM
      case 20: // ANY_SYM
      case 22: // ASC
      case 23: // ASCII_SYM
      case 25: // AT_SYM
      case 26: // AUTOEXTEND_SIZE_SYM
      case 27: // AUTO_INC
      case 28: // AVG_ROW_LENGTH
      case 29: // AVG_SYM
      case 30: // BACKUP_SYM
      case 32: // BEGIN_SYM
      case 36: // BINLOG_SYM
      case 40: // BIT_SYM
      case 43: // BLOCK_SYM
      case 44: // BOOLEAN_SYM
      case 45: // BOOL_SYM
      case 47: // BTREE_SYM
      case 49: // BYTE_SYM
      case 50: // CACHE_SYM
      case 53: // CASCADED
      case 56: // CATALOG_NAME_SYM
      case 57: // CHAIN_SYM
      case 59: // CHANGED
      case 60: // CHANNEL_SYM
      case 61: // CHARSET
      case 63: // CHECKSUM_SYM
      case 65: // CIPHER_SYM
      case 66: // CLASS_ORIGIN_SYM
      case 67: // CLIENT_SYM
      case 68: // CLOSE_SYM
      case 69: // COALESCE
      case 70: // CODE_SYM
      case 72: // COLLATION_SYM
      case 73: // COLUMNS
      case 75: // COLUMN_FORMAT_SYM
      case 76: // COLUMN_NAME_SYM
      case 77: // COMMENT_SYM
      case 78: // COMMITTED_SYM
      case 79: // COMMIT_SYM
      case 80: // COMPACT_SYM
      case 81: // COMPLETION_SYM
      case 82: // COMPRESSED_SYM
      case 83: // COMPRESSION_SYM
      case 84: // ENCRYPTION_SYM
      case 85: // CONCURRENT
      case 88: // CONNECTION_SYM
      case 89: // CONSISTENT_SYM
      case 91: // CONSTRAINT_CATALOG_SYM
      case 92: // CONSTRAINT_NAME_SYM
      case 93: // CONSTRAINT_SCHEMA_SYM
      case 94: // CONTAINS_SYM
      case 95: // CONTEXT_SYM
      case 99: // CPU_SYM
      case 100: // CREATE
      case 104: // CURRENT_SYM
      case 107: // CURSOR_NAME_SYM
      case 111: // DATAFILE_SYM
      case 112: // DATA_SYM
      case 113: // DATETIME_SYM
      case 116: // DATE_SYM
      case 121: // DAY_SYM
      case 122: // DEALLOCATE_SYM
      case 123: // DECIMAL_NUM
      case 128: // DEFAULT_AUTH_SYM
      case 129: // DEFINER_SYM
      case 131: // DELAY_KEY_WRITE_SYM
      case 133: // DESC
      case 137: // DIAGNOSTICS_SYM
      case 138: // BYTEDICT_SYM
      case 139: // SHORTDICT_SYM
      case 140: // INTDICT_SYM
      case 142: // DIRECTORY_SYM
      case 143: // DISABLE_SYM
      case 144: // DISCARD_SYM
      case 145: // DISK_SYM
      case 149: // DO_SYM
      case 152: // DUMPFILE
      case 153: // DUPLICATE_SYM
      case 154: // DYNAMIC_SYM
      case 158: // ENABLE_SYM
      case 161: // END
      case 162: // ENDS_SYM
      case 163: // ENGINES_SYM
      case 164: // ENGINE_SYM
      case 165: // ENUM_SYM
      case 168: // ERROR_SYM
      case 169: // ERRORS
      case 171: // ESCAPE_SYM
      case 172: // EVENTS_SYM
      case 173: // EVENT_SYM
      case 174: // EVERY_SYM
      case 175: // EXCHANGE_SYM
      case 176: // EXECUTE_SYM
      case 179: // EXPANSION_SYM
      case 180: // EXPIRE_SYM
      case 181: // EXPORT_SYM
      case 182: // EXTENDED_SYM
      case 183: // EXTENT_SIZE_SYM
      case 186: // FAST_SYM
      case 187: // FAULTS_SYM
      case 189: // FILE_SYM
      case 190: // FILE_BLOCK_SIZE_SYM
      case 191: // FILTER_SYM
      case 192: // FIRST_SYM
      case 193: // FIXED_SYM
      case 194: // FLOAT_NUM
      case 196: // FLUSH_SYM
      case 197: // FOLLOWS_SYM
      case 201: // FORMAT_SYM
      case 202: // FOUND_SYM
      case 204: // FULL
      case 208: // GENERAL
      case 210: // GROUP_REPLICATION
      case 211: // GEOMETRYCOLLECTION_SYM
      case 212: // GEOMETRY_SYM
      case 213: // GET_FORMAT
      case 215: // GLOBAL_SYM
      case 217: // GRANTS
      case 221: // HANDLER_SYM
      case 222: // HASH_SYM
      case 224: // HELP_SYM
      case 225: // HEX_NUM
      case 227: // HOST_SYM
      case 228: // HOSTS_SYM
      case 232: // HOUR_SYM
      case 233: // IDENT
      case 234: // IDENTIFIED_SYM
      case 238: // IGNORE_SERVER_IDS_SYM
      case 239: // IMPORT
      case 240: // INDEXES
      case 243: // INITIAL_SIZE_SYM
      case 248: // INSERT_METHOD
      case 249: // INSTANCE_SYM
      case 250: // INSTALL_SYM
      case 251: // INTERVAL_SYM
      case 255: // INVOKER_SYM
      case 259: // IO_SYM
      case 260: // IPC_SYM
      case 262: // ISOLATION
      case 263: // ISSUER_SYM
      case 267: // JSON_SYM
      case 269: // KEY_BLOCK_SIZE
      case 272: // LANGUAGE_SYM
      case 273: // LAST_SYM
      case 276: // LEAVES
      case 279: // LESS_SYM
      case 280: // LEVEL_SYM
      case 281: // LEX_HOSTNAME
      case 286: // LINESTRING_SYM
      case 287: // LIST_SYM
      case 289: // LOCAL_SYM
      case 291: // LOCKS_SYM
      case 293: // LOGFILE_SYM
      case 294: // LOGS_SYM
      case 297: // LONG_NUM
      case 302: // MASTER_AUTO_POSITION_SYM
      case 304: // MASTER_CONNECT_RETRY_SYM
      case 305: // MASTER_DELAY_SYM
      case 306: // MASTER_HOST_SYM
      case 307: // MASTER_LOG_FILE_SYM
      case 308: // MASTER_LOG_POS_SYM
      case 309: // MASTER_PASSWORD_SYM
      case 310: // MASTER_PORT_SYM
      case 311: // MASTER_RETRY_COUNT_SYM
      case 312: // MASTER_SERVER_ID_SYM
      case 313: // MASTER_SSL_CAPATH_SYM
      case 314: // MASTER_TLS_VERSION_SYM
      case 315: // MASTER_SSL_CA_SYM
      case 316: // MASTER_SSL_CERT_SYM
      case 317: // MASTER_SSL_CIPHER_SYM
      case 318: // MASTER_SSL_CRL_SYM
      case 319: // MASTER_SSL_CRLPATH_SYM
      case 320: // MASTER_SSL_KEY_SYM
      case 321: // MASTER_SSL_SYM
      case 323: // MASTER_SYM
      case 324: // MASTER_USER_SYM
      case 325: // MASTER_HEARTBEAT_PERIOD_SYM
      case 327: // MAX_CONNECTIONS_PER_HOUR
      case 328: // MAX_QUERIES_PER_HOUR
      case 329: // MAX_ROWS
      case 330: // MAX_SIZE_SYM
      case 332: // MAX_UPDATES_PER_HOUR
      case 333: // MAX_USER_CONNECTIONS_SYM
      case 338: // MEDIUM_SYM
      case 339: // MEMORY_SYM
      case 340: // MERGE_SYM
      case 341: // MESSAGE_TEXT_SYM
      case 342: // MICROSECOND_SYM
      case 343: // MIGRATE_SYM
      case 346: // MINUTE_SYM
      case 347: // MIN_ROWS
      case 349: // MODE_SYM
      case 351: // MODIFY_SYM
      case 353: // MONTH_SYM
      case 354: // MULTILINESTRING_SYM
      case 355: // MULTIPOINT_SYM
      case 356: // MULTIPOLYGON_SYM
      case 357: // MUTEX_SYM
      case 358: // MYSQL_ERRNO_SYM
      case 359: // NAMES_SYM
      case 360: // NAME_SYM
      case 361: // NATIONAL_SYM
      case 364: // NCHAR_SYM
      case 365: // NDBCLUSTER_SYM
      case 368: // NEVER_SYM
      case 369: // NEW_SYM
      case 370: // NEXT_SYM
      case 371: // NODEGROUP_SYM
      case 372: // NONE_SYM
      case 376: // NO_SYM
      case 377: // NO_WAIT_SYM
      case 380: // NUM
      case 381: // NUMBER_SYM
      case 383: // NVARCHAR_SYM
      case 384: // OFFSET_SYM
      case 386: // ONE_SYM
      case 387: // ONLY_SYM
      case 388: // OPEN_SYM
      case 391: // OPTIONS_SYM
      case 401: // OWNER_SYM
      case 402: // PACK_KEYS_SYM
      case 403: // PAGE_SYM
      case 405: // PARSER_SYM
      case 407: // PARTIAL
      case 409: // PARTITIONS_SYM
      case 410: // PARTITIONING_SYM
      case 411: // PASSWORD
      case 412: // PHASE_SYM
      case 413: // PLUGIN_DIR_SYM
      case 414: // PLUGIN_SYM
      case 415: // PLUGINS_SYM
      case 416: // "."
      case 417: // POLYGON_SYM
      case 418: // PORT_SYM
      case 420: // PRECEDES_SYM
      case 422: // PREPARE_SYM
      case 423: // PRESERVE_SYM
      case 424: // PREV_SYM
      case 426: // PRIVILEGES
      case 428: // PROCESS
      case 429: // PROCESSLIST_SYM
      case 430: // PROFILE_SYM
      case 431: // PROFILES_SYM
      case 432: // PROXY_SYM
      case 434: // QUARTER_SYM
      case 435: // QUERY_SYM
      case 436: // QUICK
      case 439: // READ_ONLY_SYM
      case 443: // REBUILD_SYM
      case 444: // RECOVER_SYM
      case 446: // REDO_BUFFER_SIZE_SYM
      case 447: // REDUNDANT_SYM
      case 450: // RELAY
      case 451: // RELAYLOG_SYM
      case 452: // RELAY_LOG_FILE_SYM
      case 453: // RELAY_LOG_POS_SYM
      case 454: // RELAY_THREAD
      case 456: // RELOAD
      case 457: // REMOVE_SYM
      case 459: // REORGANIZE_SYM
      case 460: // REPAIR
      case 461: // REPEATABLE_SYM
      case 464: // REPLICATION
      case 465: // REPLICATE_DO_DB
      case 466: // REPLICATE_IGNORE_DB
      case 467: // REPLICATE_DO_TABLE
      case 468: // REPLICATE_IGNORE_TABLE
      case 469: // REPLICATE_WILD_DO_TABLE
      case 470: // REPLICATE_WILD_IGNORE_TABLE
      case 471: // REPLICATE_REWRITE_DB
      case 473: // RESET_SYM
      case 475: // RESOURCES
      case 476: // RESTORE_SYM
      case 478: // RESUME_SYM
      case 479: // RETURNED_SQLSTATE_SYM
      case 480: // RETURNS_SYM
      case 482: // REVERSE_SYM
      case 485: // ROLLBACK_SYM
      case 486: // ROLLUP_SYM
      case 487: // ROTATE_SYM
      case 488: // ROUTINE_SYM
      case 490: // ROW_FORMAT_SYM
      case 492: // ROW_COUNT_SYM
      case 493: // RTREE_SYM
      case 494: // SAVEPOINT_SYM
      case 495: // SCHEDULE_SYM
      case 496: // SCHEMA_NAME_SYM
      case 499: // SECOND_SYM
      case 500: // SECURITY_SYM
      case 504: // SERIALIZABLE_SYM
      case 505: // SERIAL_SYM
      case 506: // SESSION_SYM
      case 507: // SERVER_SYM
      case 511: // SHARE_SYM
      case 512: // SHARES_SYM
      case 516: // SHUTDOWN
      case 518: // SIGNED_SYM
      case 519: // SIMPLE_SYM
      case 520: // SLAVE
      case 521: // SLOW
      case 523: // SNAPSHOT_SYM
      case 524: // SOCKET_SYM
      case 525: // SONAME_SYM
      case 526: // SOUNDS_SYM
      case 527: // SOURCE_SYM
      case 533: // SQL_AFTER_GTIDS
      case 534: // SQL_AFTER_MTS_GAPS
      case 535: // SQL_BEFORE_GTIDS
      case 537: // SQL_BUFFER_RESULT
      case 540: // SQL_NO_CACHE_SYM
      case 543: // SQL_THREAD
      case 545: // STACKED_SYM
      case 547: // STARTS_SYM
      case 548: // START_SYM
      case 549: // STATS_AUTO_RECALC_SYM
      case 550: // STATS_PERSISTENT_SYM
      case 551: // STATS_SAMPLE_PAGES_SYM
      case 552: // STATUS_SYM
      case 555: // STOP_SYM
      case 556: // STORAGE_SYM
      case 559: // STRING_SYM
      case 560: // SUBCLASS_ORIGIN_SYM
      case 561: // SUBDATE_SYM
      case 562: // SUBJECT_SYM
      case 563: // SUBPARTITIONS_SYM
      case 564: // SUBPARTITION_SYM
      case 567: // SUPER_SYM
      case 568: // SUSPEND_SYM
      case 569: // SWAPS_SYM
      case 570: // SWITCHES_SYM
      case 572: // TABLES
      case 573: // VIEWS
      case 574: // TABLESPACE_SYM
      case 577: // TABLE_CHECKSUM_SYM
      case 578: // TABLE_NAME_SYM
      case 579: // TEMPORARY
      case 580: // TEMPTABLE_SYM
      case 582: // TEXT_STRING
      case 583: // TEXT_SYM
      case 584: // THAN_SYM
      case 586: // TIMESTAMP_SYM
      case 587: // TIMESTAMP_ADD
      case 588: // TIMESTAMP_DIFF
      case 589: // TIME_SYM
      case 595: // TRANSACTION_SYM
      case 596: // TRIGGERS_SYM
      case 600: // TRUNCATE_SYM
      case 601: // TYPES_SYM
      case 602: // TYPE_SYM
      case 604: // ULONGLONG_NUM
      case 605: // UNCOMMITTED_SYM
      case 606: // UNDEFINED_SYM
      case 608: // UNDOFILE_SYM
      case 609: // UNDO_BUFFER_SIZE_SYM
      case 611: // UNICODE_SYM
      case 612: // UNINSTALL_SYM
      case 615: // UNKNOWN_SYM
      case 618: // UNTIL_SYM
      case 620: // UPGRADE_SYM
      case 622: // USER
      case 623: // USE_FRM
      case 629: // VALIDATION_SYM
      case 631: // VALUE_SYM
      case 632: // VARBINARY_SYM
      case 634: // VARIABLES
      case 639: // VIEW_SYM
      case 641: // WAIT_SYM
      case 642: // WARNINGS
      case 643: // WEEK_SYM
      case 644: // WEIGHT_STRING_SYM
      case 651: // WITHOUT_SYM
      case 652: // WORK_SYM
      case 653: // WRAPPER_SYM
      case 655: // X509_SYM
      case 656: // XA_SYM
      case 657: // XID_SYM
      case 658: // XML_SYM
      case 661: // YEAR_SYM
      case 667: // PERSIST_SYM
      case 668: // ROLE_SYM
      case 669: // ADMIN_SYM
      case 670: // INVISIBLE_SYM
      case 671: // VISIBLE_SYM
      case 673: // COMPONENT_SYM
      case 682: // SKIP_SYM
      case 683: // LOCKED_SYM
      case 684: // NOWAIT_SYM
      case 686: // PERSIST_ONLY_SYM
      case 687: // HISTOGRAM_SYM
      case 688: // BUCKETS_SYM
      case 689: // OBSOLETE_TOKEN_930
      case 690: // CLONE_SYM
      case 693: // EXCLUDE_SYM
      case 695: // FOLLOWING_SYM
      case 702: // NULLS_SYM
      case 703: // OTHERS_SYM
      case 706: // PRECEDING_SYM
      case 708: // RESPECT_SYM
      case 710: // TIES_SYM
      case 711: // UNBOUNDED_SYM
      case 715: // NESTED_SYM
      case 716: // ORDINALITY_SYM
      case 717: // PATH_SYM
      case 718: // HISTORY_SYM
      case 719: // REUSE_SYM
      case 720: // SRID_SYM
      case 721: // THREAD_PRIORITY_SYM
      case 722: // RESOURCE_SYM
      case 724: // VCPU_SYM
      case 725: // MASTER_PUBLIC_KEY_PATH_SYM
      case 726: // GET_MASTER_PUBLIC_KEY_SYM
      case 727: // RESTART_SYM
      case 728: // DEFINITION_SYM
      case 729: // DESCRIPTION_SYM
      case 730: // ORGANIZATION_SYM
      case 731: // REFERENCE_SYM
      case 732: // ACTIVE_SYM
      case 733: // INACTIVE_SYM
      case 735: // OPTIONAL_SYM
      case 736: // SECONDARY_SYM
      case 737: // SECONDARY_ENGINE_SYM
      case 738: // SECONDARY_LOAD_SYM
      case 739: // SECONDARY_UNLOAD_SYM
      case 740: // RETAIN_SYM
      case 741: // OLD_SYM
      case 742: // ENFORCED_SYM
      case 743: // OJ_SYM
      case 744: // NETWORK_NAMESPACE_SYM
      case 794: // select_alias
      case 864: // opt_constraint_name
      case 1024: // execute_var_ident
      case 1027: // text_literal
      case 1028: // text_string
      case 1078: // opt_index_name_and_type
      case 1083: // key_part
      case 1085: // key_part_with_expression
      case 1086: // opt_ident
      case 1087: // opt_component
      case 1088: // charset_name
      case 1108: // internal_variable_name
      case 1139: // interval
      case 1140: // interval_time_stamp
      case 1143: // opt_table_alias
      case 1163: // opt_ordering_direction
      case 1164: // ordering_direction
      case 1168: // limit_option
      case 1177: // IDENT_sys
      case 1178: // TEXT_STRING_sys
      case 1179: // TEXT_STRING_literal
      case 1180: // TEXT_STRING_filesystem
      case 1181: // TEXT_STRING_password
      case 1182: // TEXT_STRING_hash
      case 1183: // ident
      case 1184: // ident_or_text
      case 1190: // nchar
      case 1191: // varchar
      case 1192: // nvarchar
      case 1193: // int_type
      case 1194: // real_type
      case 1196: // numeric_type
      case 1199: // type_datetime_precision
      case 1201: // field_length
      case 1202: // opt_field_length
      case 1212: // ident_keyword
      case 1214: // ident_keywords_ambiguous_2_labels
      case 1217: // ident_keywords_unambiguous
      case 1218: // lvalue_keyword
      case 1220: // TEXT_STRING_sys_nonewline
      case 1255: // opt_describe_column
      case 1264: // opt_db
      case 1285: // lvalue_ident
      case 1288: // password
      case 1342: // opt_load_data_charset
      case 1349: // opt_xml_rows_identified_by
        value.copy< string > (YY_MOVE (that.value));
        break;

      case 1340: // load_data_lock
        value.copy< thr_lock_type > (YY_MOVE (that.value));
        break;

      case 793: // select_item
        value.copy< tuple<Expression, string> > (YY_MOVE (that.value));
        break;

      case 998: // opt_num_parts
      case 1002: // opt_num_subparts
      case 1271: // ulong_num
      case 1350: // opt_ignore_lines
        value.copy< ulong > (YY_MOVE (that.value));
        break;

      case 989: // size_number
      case 1272: // real_ulong_num
      case 1273: // ulonglong_num
      case 1274: // real_ulonglong_num
        value.copy< ulonglong > (YY_MOVE (that.value));
        break;

      case 1008: // part_values_in
      case 1009: // part_value_list
        value.copy< vector< PartValueItemsSPtr > > (YY_MOVE (that.value));
        break;

      case 812: // opt_udf_expr_list
      case 813: // udf_expr_list
      case 1112: // opt_expr_list
      case 1114: // expr_list
      case 1158: // group_list
      case 1304: // insert_from_constructor
      case 1327: // fields
        value.copy< vector<Expression> > (YY_MOVE (that.value));
        break;

      case 787: // from_tables
      case 788: // table_reference_list
        value.copy< vector<JoinStructurePointer> > (YY_MOVE (that.value));
        break;

      case 1162: // order_list
        value.copy< vector<OrderItem> > (YY_MOVE (that.value));
        break;

      case 1022: // execute_using
      case 1023: // execute_var_list
      case 1082: // key_list
      case 1084: // key_list_with_expression
      case 1151: // opt_derived_column_list
      case 1152: // simple_ident_list
        value.copy< vector<string> > (YY_MOVE (that.value));
        break;

      case 1119: // when_list
        value.copy< vector<tuple<Expression, Expression>> > (YY_MOVE (that.value));
        break;

      default:
        break;
    }

  }



  template <typename Base>
  bool
  Parser::basic_symbol<Base>::empty () const YY_NOEXCEPT
  {
    return Base::type_get () == empty_symbol;
  }

  template <typename Base>
  void
  Parser::basic_symbol<Base>::move (basic_symbol& s)
  {
    super_type::move (s);
    switch (this->type_get ())
    {
      case 775: // drop_table_stmt
      case 776: // drop_user_stmt
      case 777: // drop_view_stmt
      case 778: // drop_database_stmt
      case 827: // create
      case 871: // create_table_stmt
      case 875: // view_or_trigger_or_sp_or_event
      case 877: // no_definer_tail
      case 946: // view_tail
      case 1328: // use
        value.move< AbstractCommandPointer > (YY_MOVE (s.value));
        break;

      case 837: // user
      case 839: // create_user
        value.move< AccountSPtr > (YY_MOVE (s.value));
        break;

      case 1329: // kill
      case 1336: // shutdown_stmt
        value.move< AdminStmtStructurePtr > (YY_MOVE (s.value));
        break;

      case 1110: // cast_type
        value.move< CastType > (YY_MOVE (s.value));
        break;

      case 1204: // opt_column_attribute_list
      case 1205: // column_attribute_list
        value.move< ColAttrList > (YY_MOVE (s.value));
        break;

      case 990: // opt_create_table_options_etc
        value.move< CreateTableOptions > (YY_MOVE (s.value));
        break;

      case 1320: // delete_stmt
        value.move< DeleteStructurePtr > (YY_MOVE (s.value));
        break;

      case 796: // expr
      case 797: // bool_pri
      case 798: // predicate
      case 799: // bit_expr
      case 806: // simple_expr
      case 807: // case_expr
      case 808: // function_call_keyword
      case 809: // function_call_nonkeyword
      case 810: // function_call_conflict
      case 811: // function_call_generic
      case 814: // udf_expr
      case 815: // set_function_specification
      case 817: // sum_expr
      case 823: // row_subquery
      case 1029: // param_marker
      case 1057: // variable
      case 1109: // set_expr_or_default
      case 1111: // in_sum_expr
      case 1117: // opt_expr
      case 1118: // opt_else
      case 1145: // opt_where_clause
      case 1146: // opt_where_clause_expr
      case 1147: // opt_having_clause
      case 1170: // table_wild
      case 1172: // grouping_expr
      case 1200: // func_datetime_precision
      case 1210: // now_or_signed_literal
      case 1211: // now
      case 1311: // expr_or_default
        value.move< Expression > (YY_MOVE (s.value));
        break;

      case 1185: // field_def
        value.move< Field_def_ptr > (YY_MOVE (s.value));
        break;

      case 868: // field_options
      case 869: // field_opt_list
      case 870: // field_option
        value.move< Field_option > (YY_MOVE (s.value));
        break;

      case 1343: // opt_field_term
      case 1344: // field_term_list
      case 1345: // field_term
        value.move< Field_separators > (YY_MOVE (s.value));
        break;

      case 785: // opt_from_clause
      case 786: // from_clause
        value.move< FromPartStructurePointer > (YY_MOVE (s.value));
        break;

      case 1157: // opt_group_clause
        value.move< GroupbyStructurePointer > (YY_MOVE (s.value));
        break;

      case 1299: // insert_stmt
        value.move< InsertStructurePtr > (YY_MOVE (s.value));
        break;

      case 1120: // table_reference
      case 1121: // joined_table
      case 1129: // table_factor
      case 1131: // single_table_parens
      case 1132: // single_table
      case 1133: // joined_table_parens
      case 1134: // derived_table
        value.move< JoinStructurePointer > (YY_MOVE (s.value));
        break;

      case 1122: // natural_join_type
      case 1123: // inner_join_type
      case 1124: // outer_join_type
        value.move< JoinType > (YY_MOVE (s.value));
        break;

      case 1165: // opt_limit_clause
      case 1166: // limit_clause
      case 1167: // limit_options
      case 1321: // opt_simple_limit
        value.move< LimitStructurePointer > (YY_MOVE (s.value));
        break;

      case 1346: // opt_line_term
      case 1347: // line_term_list
      case 1348: // line_term
        value.move< Line_separators > (YY_MOVE (s.value));
        break;

      case 1030: // signed_literal
      case 1031: // literal
      case 1032: // NUM_literal
        value.move< Literal > (YY_MOVE (s.value));
        break;

      case 1337: // load_stmt
        value.move< LoadDataStructurePtr > (YY_MOVE (s.value));
        break;

      case 844: // duplicate
      case 1341: // opt_duplicate
        value.move< On_duplicate > (YY_MOVE (s.value));
        break;

      case 1171: // order_expr
        value.move< OrderItem > (YY_MOVE (s.value));
        break;

      case 1160: // opt_order_clause
      case 1161: // order_clause
        value.move< OrderbyStructurePointer > (YY_MOVE (s.value));
        break;

      case 1188: // type
        value.move< PT_ColumnType_ptr > (YY_MOVE (s.value));
        break;

      case 1206: // column_attribute
        value.move< PT_column_attr_base_ptr > (YY_MOVE (s.value));
        break;

      case 1106: // option_value_following_option_type
        value.move< PT_option_value_following_option_type_ptr > (YY_MOVE (s.value));
        break;

      case 1005: // part_definition
        value.move< PartDef > (YY_MOVE (s.value));
        break;

      case 1003: // opt_part_defs
      case 1004: // part_def_list
        value.move< PartDefList > (YY_MOVE (s.value));
        break;

      case 995: // part_type_def
        value.move< PartTypeDef > (YY_MOVE (s.value));
        break;

      case 1012: // part_value_item
        value.move< PartValueItem > (YY_MOVE (s.value));
        break;

      case 1007: // part_func_max
      case 1010: // part_value_item_list_paren
      case 1011: // part_value_item_list
        value.move< PartValueItemsSPtr > (YY_MOVE (s.value));
        break;

      case 1006: // opt_part_values
        value.move< PartValuesSPtr > (YY_MOVE (s.value));
        break;

      case 991: // opt_create_partitioning_etc
      case 994: // partition_clause
        value.move< PartitionStructureSPtr > (YY_MOVE (s.value));
        break;

      case 1197: // float_options
      case 1198: // precision
      case 1203: // opt_precision
        value.move< Precision_ptr > (YY_MOVE (s.value));
        break;

      case 1020: // prepare_src
        value.move< PrepareSrcPtr > (YY_MOVE (s.value));
        break;

      case 1019: // prepare
      case 1021: // execute
      case 1025: // deallocate
        value.move< PreparedStmtStructurePtr > (YY_MOVE (s.value));
        break;

      case 1259: // show_engine_param
        value.move< SHOW_CMD > (YY_MOVE (s.value));
        break;

      case 1169: // insert_ident
      case 1173: // simple_ident
      case 1174: // simple_ident_nospvar
      case 1175: // simple_ident_q
        value.move< SQLIdentPtr > (YY_MOVE (s.value));
        break;

      case 792: // select_item_list
        value.move< SelectPartStructurePointer > (YY_MOVE (s.value));
        break;

      case 779: // select_stmt
      case 780: // query_expression
      case 781: // query_expression_body
      case 782: // query_expression_parens
      case 783: // query_primary
      case 784: // query_specification
      case 824: // table_subquery
      case 825: // subquery
      case 947: // view_select
      case 1298: // query_expression_or_parens
      case 1317: // explain_stmt
        value.move< SelectStructurePointer > (YY_MOVE (s.value));
        break;

      case 822: // union_option
        value.move< SetOperationType > (YY_MOVE (s.value));
        break;

      case 1101: // option_value
      case 1107: // option_value_no_option_type
        value.move< SetStructurePtr > (YY_MOVE (s.value));
        break;

      case 1256: // describe_stmt
      case 1257: // show
      case 1258: // show_param
        value.move< ShowStructurePtr > (YY_MOVE (s.value));
        break;

      case 1267: // opt_show_cmd_type
        value.move< Show_cmd_type > (YY_MOVE (s.value));
        break;

      case 856: // opt_table_list
      case 857: // table_list
      case 1325: // table_alias_ref_list
        value.move< TABLE_LIST > (YY_MOVE (s.value));
        break;

      case 859: // table_element
      case 860: // column_def
      case 862: // table_constraint_def
        value.move< TableElementDescriptionPtr > (YY_MOVE (s.value));
        break;

      case 1358: // start
      case 1362: // begin_stmt
      case 1367: // commit
      case 1368: // rollback
        value.move< TransactionStructurePtr > (YY_MOVE (s.value));
        break;

      case 1313: // update_stmt
        value.move< UpdateStructurePtr > (YY_MOVE (s.value));
        break;

      case 1308: // row_value
      case 1309: // opt_values
      case 1310: // values
        value.move< VALUES > (YY_MOVE (s.value));
        break;

      case 1058: // variable_aux
        value.move< VariableStructurePtr > (YY_MOVE (s.value));
        break;

      case 1261: // opt_wild_or_where
      case 1262: // opt_wild_or_where_for_show
        value.move< WildOrWhere_ptr > (YY_MOVE (s.value));
        break;

      case 818: // opt_distinct
      case 845: // opt_if_not_exists
      case 865: // opt_not
      case 872: // if_exists
      case 873: // opt_temporary
      case 996: // opt_linear
      case 1080: // visibility
      case 1265: // opt_full
      case 1266: // opt_extended
      case 1301: // opt_ignore
      case 1339: // opt_local
        value.move< bool > (YY_MOVE (s.value));
        break;

      case 1338: // data_or_xml
        value.move< enum_filetype > (YY_MOVE (s.value));
        break;

      case 1102: // option_type
      case 1103: // opt_var_type
      case 1104: // opt_var_ident_type
      case 1105: // opt_set_var_ident_type
        value.move< enum_var_type > (YY_MOVE (s.value));
        break;

      case 1364: // opt_chain
      case 1365: // opt_release
        value.move< enum_yes_no_unknown > (YY_MOVE (s.value));
        break;

      case 789: // select_options
      case 790: // select_option_list
      case 791: // select_option
      case 804: // comp_op
      case 826: // query_spec_option
      case 1330: // kill_option
        value.move< int > (YY_MOVE (s.value));
        break;

      case 1064: // constraint_key_type
        value.move< keytype > (YY_MOVE (s.value));
        break;

      case 1315: // update_elem
        value.move< pair< BiaodashiPointer, BiaodashiPointer > > (YY_MOVE (s.value));
        break;

      case 1303: // insert_query_expression
        value.move< pair< EXPR_LIST, SelectStructurePointer > > (YY_MOVE (s.value));
        break;

      case 1207: // encode_type
        value.move< pair< aries::EncodeType, string > > (YY_MOVE (s.value));
        break;

      case 861: // opt_references
      case 1060: // references
        value.move< pair< shared_ptr<BasicRel>, vector< string > > > (YY_MOVE (s.value));
        break;

      case 1312: // opt_insert_update_list
      case 1314: // update_list
        value.move< pair< vector< BiaodashiPointer >, vector< BiaodashiPointer > >  > (YY_MOVE (s.value));
        break;

      case 838: // user_list
      case 840: // create_user_list
        value.move< shared_ptr< vector< AccountSPtr > > > (YY_MOVE (s.value));
        break;

      case 1176: // table_ident
      case 1242: // sp_name
      case 1326: // table_ident_opt_wild
        value.move< shared_ptr<BasicRel> > (YY_MOVE (s.value));
        break;

      case 1098: // option_value_list_continued
      case 1099: // start_option_value_list_following_option_type
      case 1100: // option_value_list
      case 1286: // set
      case 1287: // start_option_value_list
        value.move< shared_ptr<vector<SetStructurePtr>> > (YY_MOVE (s.value));
        break;

      case 858: // table_element_list
        value.move< shared_ptr<vector<TableElementDescriptionPtr>> > (YY_MOVE (s.value));
        break;

      case 5: // ACCOUNT_SYM
      case 6: // ACTION
      case 8: // ADDDATE_SYM
      case 9: // AFTER_SYM
      case 10: // AGAINST
      case 11: // AGGREGATE_SYM
      case 12: // ALGORITHM_SYM
      case 15: // ALWAYS_SYM
      case 20: // ANY_SYM
      case 22: // ASC
      case 23: // ASCII_SYM
      case 25: // AT_SYM
      case 26: // AUTOEXTEND_SIZE_SYM
      case 27: // AUTO_INC
      case 28: // AVG_ROW_LENGTH
      case 29: // AVG_SYM
      case 30: // BACKUP_SYM
      case 32: // BEGIN_SYM
      case 36: // BINLOG_SYM
      case 40: // BIT_SYM
      case 43: // BLOCK_SYM
      case 44: // BOOLEAN_SYM
      case 45: // BOOL_SYM
      case 47: // BTREE_SYM
      case 49: // BYTE_SYM
      case 50: // CACHE_SYM
      case 53: // CASCADED
      case 56: // CATALOG_NAME_SYM
      case 57: // CHAIN_SYM
      case 59: // CHANGED
      case 60: // CHANNEL_SYM
      case 61: // CHARSET
      case 63: // CHECKSUM_SYM
      case 65: // CIPHER_SYM
      case 66: // CLASS_ORIGIN_SYM
      case 67: // CLIENT_SYM
      case 68: // CLOSE_SYM
      case 69: // COALESCE
      case 70: // CODE_SYM
      case 72: // COLLATION_SYM
      case 73: // COLUMNS
      case 75: // COLUMN_FORMAT_SYM
      case 76: // COLUMN_NAME_SYM
      case 77: // COMMENT_SYM
      case 78: // COMMITTED_SYM
      case 79: // COMMIT_SYM
      case 80: // COMPACT_SYM
      case 81: // COMPLETION_SYM
      case 82: // COMPRESSED_SYM
      case 83: // COMPRESSION_SYM
      case 84: // ENCRYPTION_SYM
      case 85: // CONCURRENT
      case 88: // CONNECTION_SYM
      case 89: // CONSISTENT_SYM
      case 91: // CONSTRAINT_CATALOG_SYM
      case 92: // CONSTRAINT_NAME_SYM
      case 93: // CONSTRAINT_SCHEMA_SYM
      case 94: // CONTAINS_SYM
      case 95: // CONTEXT_SYM
      case 99: // CPU_SYM
      case 100: // CREATE
      case 104: // CURRENT_SYM
      case 107: // CURSOR_NAME_SYM
      case 111: // DATAFILE_SYM
      case 112: // DATA_SYM
      case 113: // DATETIME_SYM
      case 116: // DATE_SYM
      case 121: // DAY_SYM
      case 122: // DEALLOCATE_SYM
      case 123: // DECIMAL_NUM
      case 128: // DEFAULT_AUTH_SYM
      case 129: // DEFINER_SYM
      case 131: // DELAY_KEY_WRITE_SYM
      case 133: // DESC
      case 137: // DIAGNOSTICS_SYM
      case 138: // BYTEDICT_SYM
      case 139: // SHORTDICT_SYM
      case 140: // INTDICT_SYM
      case 142: // DIRECTORY_SYM
      case 143: // DISABLE_SYM
      case 144: // DISCARD_SYM
      case 145: // DISK_SYM
      case 149: // DO_SYM
      case 152: // DUMPFILE
      case 153: // DUPLICATE_SYM
      case 154: // DYNAMIC_SYM
      case 158: // ENABLE_SYM
      case 161: // END
      case 162: // ENDS_SYM
      case 163: // ENGINES_SYM
      case 164: // ENGINE_SYM
      case 165: // ENUM_SYM
      case 168: // ERROR_SYM
      case 169: // ERRORS
      case 171: // ESCAPE_SYM
      case 172: // EVENTS_SYM
      case 173: // EVENT_SYM
      case 174: // EVERY_SYM
      case 175: // EXCHANGE_SYM
      case 176: // EXECUTE_SYM
      case 179: // EXPANSION_SYM
      case 180: // EXPIRE_SYM
      case 181: // EXPORT_SYM
      case 182: // EXTENDED_SYM
      case 183: // EXTENT_SIZE_SYM
      case 186: // FAST_SYM
      case 187: // FAULTS_SYM
      case 189: // FILE_SYM
      case 190: // FILE_BLOCK_SIZE_SYM
      case 191: // FILTER_SYM
      case 192: // FIRST_SYM
      case 193: // FIXED_SYM
      case 194: // FLOAT_NUM
      case 196: // FLUSH_SYM
      case 197: // FOLLOWS_SYM
      case 201: // FORMAT_SYM
      case 202: // FOUND_SYM
      case 204: // FULL
      case 208: // GENERAL
      case 210: // GROUP_REPLICATION
      case 211: // GEOMETRYCOLLECTION_SYM
      case 212: // GEOMETRY_SYM
      case 213: // GET_FORMAT
      case 215: // GLOBAL_SYM
      case 217: // GRANTS
      case 221: // HANDLER_SYM
      case 222: // HASH_SYM
      case 224: // HELP_SYM
      case 225: // HEX_NUM
      case 227: // HOST_SYM
      case 228: // HOSTS_SYM
      case 232: // HOUR_SYM
      case 233: // IDENT
      case 234: // IDENTIFIED_SYM
      case 238: // IGNORE_SERVER_IDS_SYM
      case 239: // IMPORT
      case 240: // INDEXES
      case 243: // INITIAL_SIZE_SYM
      case 248: // INSERT_METHOD
      case 249: // INSTANCE_SYM
      case 250: // INSTALL_SYM
      case 251: // INTERVAL_SYM
      case 255: // INVOKER_SYM
      case 259: // IO_SYM
      case 260: // IPC_SYM
      case 262: // ISOLATION
      case 263: // ISSUER_SYM
      case 267: // JSON_SYM
      case 269: // KEY_BLOCK_SIZE
      case 272: // LANGUAGE_SYM
      case 273: // LAST_SYM
      case 276: // LEAVES
      case 279: // LESS_SYM
      case 280: // LEVEL_SYM
      case 281: // LEX_HOSTNAME
      case 286: // LINESTRING_SYM
      case 287: // LIST_SYM
      case 289: // LOCAL_SYM
      case 291: // LOCKS_SYM
      case 293: // LOGFILE_SYM
      case 294: // LOGS_SYM
      case 297: // LONG_NUM
      case 302: // MASTER_AUTO_POSITION_SYM
      case 304: // MASTER_CONNECT_RETRY_SYM
      case 305: // MASTER_DELAY_SYM
      case 306: // MASTER_HOST_SYM
      case 307: // MASTER_LOG_FILE_SYM
      case 308: // MASTER_LOG_POS_SYM
      case 309: // MASTER_PASSWORD_SYM
      case 310: // MASTER_PORT_SYM
      case 311: // MASTER_RETRY_COUNT_SYM
      case 312: // MASTER_SERVER_ID_SYM
      case 313: // MASTER_SSL_CAPATH_SYM
      case 314: // MASTER_TLS_VERSION_SYM
      case 315: // MASTER_SSL_CA_SYM
      case 316: // MASTER_SSL_CERT_SYM
      case 317: // MASTER_SSL_CIPHER_SYM
      case 318: // MASTER_SSL_CRL_SYM
      case 319: // MASTER_SSL_CRLPATH_SYM
      case 320: // MASTER_SSL_KEY_SYM
      case 321: // MASTER_SSL_SYM
      case 323: // MASTER_SYM
      case 324: // MASTER_USER_SYM
      case 325: // MASTER_HEARTBEAT_PERIOD_SYM
      case 327: // MAX_CONNECTIONS_PER_HOUR
      case 328: // MAX_QUERIES_PER_HOUR
      case 329: // MAX_ROWS
      case 330: // MAX_SIZE_SYM
      case 332: // MAX_UPDATES_PER_HOUR
      case 333: // MAX_USER_CONNECTIONS_SYM
      case 338: // MEDIUM_SYM
      case 339: // MEMORY_SYM
      case 340: // MERGE_SYM
      case 341: // MESSAGE_TEXT_SYM
      case 342: // MICROSECOND_SYM
      case 343: // MIGRATE_SYM
      case 346: // MINUTE_SYM
      case 347: // MIN_ROWS
      case 349: // MODE_SYM
      case 351: // MODIFY_SYM
      case 353: // MONTH_SYM
      case 354: // MULTILINESTRING_SYM
      case 355: // MULTIPOINT_SYM
      case 356: // MULTIPOLYGON_SYM
      case 357: // MUTEX_SYM
      case 358: // MYSQL_ERRNO_SYM
      case 359: // NAMES_SYM
      case 360: // NAME_SYM
      case 361: // NATIONAL_SYM
      case 364: // NCHAR_SYM
      case 365: // NDBCLUSTER_SYM
      case 368: // NEVER_SYM
      case 369: // NEW_SYM
      case 370: // NEXT_SYM
      case 371: // NODEGROUP_SYM
      case 372: // NONE_SYM
      case 376: // NO_SYM
      case 377: // NO_WAIT_SYM
      case 380: // NUM
      case 381: // NUMBER_SYM
      case 383: // NVARCHAR_SYM
      case 384: // OFFSET_SYM
      case 386: // ONE_SYM
      case 387: // ONLY_SYM
      case 388: // OPEN_SYM
      case 391: // OPTIONS_SYM
      case 401: // OWNER_SYM
      case 402: // PACK_KEYS_SYM
      case 403: // PAGE_SYM
      case 405: // PARSER_SYM
      case 407: // PARTIAL
      case 409: // PARTITIONS_SYM
      case 410: // PARTITIONING_SYM
      case 411: // PASSWORD
      case 412: // PHASE_SYM
      case 413: // PLUGIN_DIR_SYM
      case 414: // PLUGIN_SYM
      case 415: // PLUGINS_SYM
      case 416: // "."
      case 417: // POLYGON_SYM
      case 418: // PORT_SYM
      case 420: // PRECEDES_SYM
      case 422: // PREPARE_SYM
      case 423: // PRESERVE_SYM
      case 424: // PREV_SYM
      case 426: // PRIVILEGES
      case 428: // PROCESS
      case 429: // PROCESSLIST_SYM
      case 430: // PROFILE_SYM
      case 431: // PROFILES_SYM
      case 432: // PROXY_SYM
      case 434: // QUARTER_SYM
      case 435: // QUERY_SYM
      case 436: // QUICK
      case 439: // READ_ONLY_SYM
      case 443: // REBUILD_SYM
      case 444: // RECOVER_SYM
      case 446: // REDO_BUFFER_SIZE_SYM
      case 447: // REDUNDANT_SYM
      case 450: // RELAY
      case 451: // RELAYLOG_SYM
      case 452: // RELAY_LOG_FILE_SYM
      case 453: // RELAY_LOG_POS_SYM
      case 454: // RELAY_THREAD
      case 456: // RELOAD
      case 457: // REMOVE_SYM
      case 459: // REORGANIZE_SYM
      case 460: // REPAIR
      case 461: // REPEATABLE_SYM
      case 464: // REPLICATION
      case 465: // REPLICATE_DO_DB
      case 466: // REPLICATE_IGNORE_DB
      case 467: // REPLICATE_DO_TABLE
      case 468: // REPLICATE_IGNORE_TABLE
      case 469: // REPLICATE_WILD_DO_TABLE
      case 470: // REPLICATE_WILD_IGNORE_TABLE
      case 471: // REPLICATE_REWRITE_DB
      case 473: // RESET_SYM
      case 475: // RESOURCES
      case 476: // RESTORE_SYM
      case 478: // RESUME_SYM
      case 479: // RETURNED_SQLSTATE_SYM
      case 480: // RETURNS_SYM
      case 482: // REVERSE_SYM
      case 485: // ROLLBACK_SYM
      case 486: // ROLLUP_SYM
      case 487: // ROTATE_SYM
      case 488: // ROUTINE_SYM
      case 490: // ROW_FORMAT_SYM
      case 492: // ROW_COUNT_SYM
      case 493: // RTREE_SYM
      case 494: // SAVEPOINT_SYM
      case 495: // SCHEDULE_SYM
      case 496: // SCHEMA_NAME_SYM
      case 499: // SECOND_SYM
      case 500: // SECURITY_SYM
      case 504: // SERIALIZABLE_SYM
      case 505: // SERIAL_SYM
      case 506: // SESSION_SYM
      case 507: // SERVER_SYM
      case 511: // SHARE_SYM
      case 512: // SHARES_SYM
      case 516: // SHUTDOWN
      case 518: // SIGNED_SYM
      case 519: // SIMPLE_SYM
      case 520: // SLAVE
      case 521: // SLOW
      case 523: // SNAPSHOT_SYM
      case 524: // SOCKET_SYM
      case 525: // SONAME_SYM
      case 526: // SOUNDS_SYM
      case 527: // SOURCE_SYM
      case 533: // SQL_AFTER_GTIDS
      case 534: // SQL_AFTER_MTS_GAPS
      case 535: // SQL_BEFORE_GTIDS
      case 537: // SQL_BUFFER_RESULT
      case 540: // SQL_NO_CACHE_SYM
      case 543: // SQL_THREAD
      case 545: // STACKED_SYM
      case 547: // STARTS_SYM
      case 548: // START_SYM
      case 549: // STATS_AUTO_RECALC_SYM
      case 550: // STATS_PERSISTENT_SYM
      case 551: // STATS_SAMPLE_PAGES_SYM
      case 552: // STATUS_SYM
      case 555: // STOP_SYM
      case 556: // STORAGE_SYM
      case 559: // STRING_SYM
      case 560: // SUBCLASS_ORIGIN_SYM
      case 561: // SUBDATE_SYM
      case 562: // SUBJECT_SYM
      case 563: // SUBPARTITIONS_SYM
      case 564: // SUBPARTITION_SYM
      case 567: // SUPER_SYM
      case 568: // SUSPEND_SYM
      case 569: // SWAPS_SYM
      case 570: // SWITCHES_SYM
      case 572: // TABLES
      case 573: // VIEWS
      case 574: // TABLESPACE_SYM
      case 577: // TABLE_CHECKSUM_SYM
      case 578: // TABLE_NAME_SYM
      case 579: // TEMPORARY
      case 580: // TEMPTABLE_SYM
      case 582: // TEXT_STRING
      case 583: // TEXT_SYM
      case 584: // THAN_SYM
      case 586: // TIMESTAMP_SYM
      case 587: // TIMESTAMP_ADD
      case 588: // TIMESTAMP_DIFF
      case 589: // TIME_SYM
      case 595: // TRANSACTION_SYM
      case 596: // TRIGGERS_SYM
      case 600: // TRUNCATE_SYM
      case 601: // TYPES_SYM
      case 602: // TYPE_SYM
      case 604: // ULONGLONG_NUM
      case 605: // UNCOMMITTED_SYM
      case 606: // UNDEFINED_SYM
      case 608: // UNDOFILE_SYM
      case 609: // UNDO_BUFFER_SIZE_SYM
      case 611: // UNICODE_SYM
      case 612: // UNINSTALL_SYM
      case 615: // UNKNOWN_SYM
      case 618: // UNTIL_SYM
      case 620: // UPGRADE_SYM
      case 622: // USER
      case 623: // USE_FRM
      case 629: // VALIDATION_SYM
      case 631: // VALUE_SYM
      case 632: // VARBINARY_SYM
      case 634: // VARIABLES
      case 639: // VIEW_SYM
      case 641: // WAIT_SYM
      case 642: // WARNINGS
      case 643: // WEEK_SYM
      case 644: // WEIGHT_STRING_SYM
      case 651: // WITHOUT_SYM
      case 652: // WORK_SYM
      case 653: // WRAPPER_SYM
      case 655: // X509_SYM
      case 656: // XA_SYM
      case 657: // XID_SYM
      case 658: // XML_SYM
      case 661: // YEAR_SYM
      case 667: // PERSIST_SYM
      case 668: // ROLE_SYM
      case 669: // ADMIN_SYM
      case 670: // INVISIBLE_SYM
      case 671: // VISIBLE_SYM
      case 673: // COMPONENT_SYM
      case 682: // SKIP_SYM
      case 683: // LOCKED_SYM
      case 684: // NOWAIT_SYM
      case 686: // PERSIST_ONLY_SYM
      case 687: // HISTOGRAM_SYM
      case 688: // BUCKETS_SYM
      case 689: // OBSOLETE_TOKEN_930
      case 690: // CLONE_SYM
      case 693: // EXCLUDE_SYM
      case 695: // FOLLOWING_SYM
      case 702: // NULLS_SYM
      case 703: // OTHERS_SYM
      case 706: // PRECEDING_SYM
      case 708: // RESPECT_SYM
      case 710: // TIES_SYM
      case 711: // UNBOUNDED_SYM
      case 715: // NESTED_SYM
      case 716: // ORDINALITY_SYM
      case 717: // PATH_SYM
      case 718: // HISTORY_SYM
      case 719: // REUSE_SYM
      case 720: // SRID_SYM
      case 721: // THREAD_PRIORITY_SYM
      case 722: // RESOURCE_SYM
      case 724: // VCPU_SYM
      case 725: // MASTER_PUBLIC_KEY_PATH_SYM
      case 726: // GET_MASTER_PUBLIC_KEY_SYM
      case 727: // RESTART_SYM
      case 728: // DEFINITION_SYM
      case 729: // DESCRIPTION_SYM
      case 730: // ORGANIZATION_SYM
      case 731: // REFERENCE_SYM
      case 732: // ACTIVE_SYM
      case 733: // INACTIVE_SYM
      case 735: // OPTIONAL_SYM
      case 736: // SECONDARY_SYM
      case 737: // SECONDARY_ENGINE_SYM
      case 738: // SECONDARY_LOAD_SYM
      case 739: // SECONDARY_UNLOAD_SYM
      case 740: // RETAIN_SYM
      case 741: // OLD_SYM
      case 742: // ENFORCED_SYM
      case 743: // OJ_SYM
      case 744: // NETWORK_NAMESPACE_SYM
      case 794: // select_alias
      case 864: // opt_constraint_name
      case 1024: // execute_var_ident
      case 1027: // text_literal
      case 1028: // text_string
      case 1078: // opt_index_name_and_type
      case 1083: // key_part
      case 1085: // key_part_with_expression
      case 1086: // opt_ident
      case 1087: // opt_component
      case 1088: // charset_name
      case 1108: // internal_variable_name
      case 1139: // interval
      case 1140: // interval_time_stamp
      case 1143: // opt_table_alias
      case 1163: // opt_ordering_direction
      case 1164: // ordering_direction
      case 1168: // limit_option
      case 1177: // IDENT_sys
      case 1178: // TEXT_STRING_sys
      case 1179: // TEXT_STRING_literal
      case 1180: // TEXT_STRING_filesystem
      case 1181: // TEXT_STRING_password
      case 1182: // TEXT_STRING_hash
      case 1183: // ident
      case 1184: // ident_or_text
      case 1190: // nchar
      case 1191: // varchar
      case 1192: // nvarchar
      case 1193: // int_type
      case 1194: // real_type
      case 1196: // numeric_type
      case 1199: // type_datetime_precision
      case 1201: // field_length
      case 1202: // opt_field_length
      case 1212: // ident_keyword
      case 1214: // ident_keywords_ambiguous_2_labels
      case 1217: // ident_keywords_unambiguous
      case 1218: // lvalue_keyword
      case 1220: // TEXT_STRING_sys_nonewline
      case 1255: // opt_describe_column
      case 1264: // opt_db
      case 1285: // lvalue_ident
      case 1288: // password
      case 1342: // opt_load_data_charset
      case 1349: // opt_xml_rows_identified_by
        value.move< string > (YY_MOVE (s.value));
        break;

      case 1340: // load_data_lock
        value.move< thr_lock_type > (YY_MOVE (s.value));
        break;

      case 793: // select_item
        value.move< tuple<Expression, string> > (YY_MOVE (s.value));
        break;

      case 998: // opt_num_parts
      case 1002: // opt_num_subparts
      case 1271: // ulong_num
      case 1350: // opt_ignore_lines
        value.move< ulong > (YY_MOVE (s.value));
        break;

      case 989: // size_number
      case 1272: // real_ulong_num
      case 1273: // ulonglong_num
      case 1274: // real_ulonglong_num
        value.move< ulonglong > (YY_MOVE (s.value));
        break;

      case 1008: // part_values_in
      case 1009: // part_value_list
        value.move< vector< PartValueItemsSPtr > > (YY_MOVE (s.value));
        break;

      case 812: // opt_udf_expr_list
      case 813: // udf_expr_list
      case 1112: // opt_expr_list
      case 1114: // expr_list
      case 1158: // group_list
      case 1304: // insert_from_constructor
      case 1327: // fields
        value.move< vector<Expression> > (YY_MOVE (s.value));
        break;

      case 787: // from_tables
      case 788: // table_reference_list
        value.move< vector<JoinStructurePointer> > (YY_MOVE (s.value));
        break;

      case 1162: // order_list
        value.move< vector<OrderItem> > (YY_MOVE (s.value));
        break;

      case 1022: // execute_using
      case 1023: // execute_var_list
      case 1082: // key_list
      case 1084: // key_list_with_expression
      case 1151: // opt_derived_column_list
      case 1152: // simple_ident_list
        value.move< vector<string> > (YY_MOVE (s.value));
        break;

      case 1119: // when_list
        value.move< vector<tuple<Expression, Expression>> > (YY_MOVE (s.value));
        break;

      default:
        break;
    }

    location = YY_MOVE (s.location);
  }

  // by_type.
  Parser::by_type::by_type ()
    : type (empty_symbol)
  {}

#if 201103L <= YY_CPLUSPLUS
  Parser::by_type::by_type (by_type&& that)
    : type (that.type)
  {
    that.clear ();
  }
#endif

  Parser::by_type::by_type (const by_type& that)
    : type (that.type)
  {}

  Parser::by_type::by_type (token_type t)
    : type (yytranslate_ (t))
  {}

  void
  Parser::by_type::clear ()
  {
    type = empty_symbol;
  }

  void
  Parser::by_type::move (by_type& that)
  {
    type = that.type;
    that.clear ();
  }

  int
  Parser::by_type::type_get () const YY_NOEXCEPT
  {
    return type;
  }


  // by_state.
  Parser::by_state::by_state () YY_NOEXCEPT
    : state (empty_state)
  {}

  Parser::by_state::by_state (const by_state& that) YY_NOEXCEPT
    : state (that.state)
  {}

  void
  Parser::by_state::clear () YY_NOEXCEPT
  {
    state = empty_state;
  }

  void
  Parser::by_state::move (by_state& that)
  {
    state = that.state;
    that.clear ();
  }

  Parser::by_state::by_state (state_type s) YY_NOEXCEPT
    : state (s)
  {}

  Parser::symbol_number_type
  Parser::by_state::type_get () const YY_NOEXCEPT
  {
    if (state == empty_state)
      return empty_symbol;
    else
      return yystos_[state];
  }

  Parser::stack_symbol_type::stack_symbol_type ()
  {}

  Parser::stack_symbol_type::stack_symbol_type (YY_RVREF (stack_symbol_type) that)
    : super_type (YY_MOVE (that.state), YY_MOVE (that.location))
  {
    switch (that.type_get ())
    {
      case 775: // drop_table_stmt
      case 776: // drop_user_stmt
      case 777: // drop_view_stmt
      case 778: // drop_database_stmt
      case 827: // create
      case 871: // create_table_stmt
      case 875: // view_or_trigger_or_sp_or_event
      case 877: // no_definer_tail
      case 946: // view_tail
      case 1328: // use
        value.YY_MOVE_OR_COPY< AbstractCommandPointer > (YY_MOVE (that.value));
        break;

      case 837: // user
      case 839: // create_user
        value.YY_MOVE_OR_COPY< AccountSPtr > (YY_MOVE (that.value));
        break;

      case 1329: // kill
      case 1336: // shutdown_stmt
        value.YY_MOVE_OR_COPY< AdminStmtStructurePtr > (YY_MOVE (that.value));
        break;

      case 1110: // cast_type
        value.YY_MOVE_OR_COPY< CastType > (YY_MOVE (that.value));
        break;

      case 1204: // opt_column_attribute_list
      case 1205: // column_attribute_list
        value.YY_MOVE_OR_COPY< ColAttrList > (YY_MOVE (that.value));
        break;

      case 990: // opt_create_table_options_etc
        value.YY_MOVE_OR_COPY< CreateTableOptions > (YY_MOVE (that.value));
        break;

      case 1320: // delete_stmt
        value.YY_MOVE_OR_COPY< DeleteStructurePtr > (YY_MOVE (that.value));
        break;

      case 796: // expr
      case 797: // bool_pri
      case 798: // predicate
      case 799: // bit_expr
      case 806: // simple_expr
      case 807: // case_expr
      case 808: // function_call_keyword
      case 809: // function_call_nonkeyword
      case 810: // function_call_conflict
      case 811: // function_call_generic
      case 814: // udf_expr
      case 815: // set_function_specification
      case 817: // sum_expr
      case 823: // row_subquery
      case 1029: // param_marker
      case 1057: // variable
      case 1109: // set_expr_or_default
      case 1111: // in_sum_expr
      case 1117: // opt_expr
      case 1118: // opt_else
      case 1145: // opt_where_clause
      case 1146: // opt_where_clause_expr
      case 1147: // opt_having_clause
      case 1170: // table_wild
      case 1172: // grouping_expr
      case 1200: // func_datetime_precision
      case 1210: // now_or_signed_literal
      case 1211: // now
      case 1311: // expr_or_default
        value.YY_MOVE_OR_COPY< Expression > (YY_MOVE (that.value));
        break;

      case 1185: // field_def
        value.YY_MOVE_OR_COPY< Field_def_ptr > (YY_MOVE (that.value));
        break;

      case 868: // field_options
      case 869: // field_opt_list
      case 870: // field_option
        value.YY_MOVE_OR_COPY< Field_option > (YY_MOVE (that.value));
        break;

      case 1343: // opt_field_term
      case 1344: // field_term_list
      case 1345: // field_term
        value.YY_MOVE_OR_COPY< Field_separators > (YY_MOVE (that.value));
        break;

      case 785: // opt_from_clause
      case 786: // from_clause
        value.YY_MOVE_OR_COPY< FromPartStructurePointer > (YY_MOVE (that.value));
        break;

      case 1157: // opt_group_clause
        value.YY_MOVE_OR_COPY< GroupbyStructurePointer > (YY_MOVE (that.value));
        break;

      case 1299: // insert_stmt
        value.YY_MOVE_OR_COPY< InsertStructurePtr > (YY_MOVE (that.value));
        break;

      case 1120: // table_reference
      case 1121: // joined_table
      case 1129: // table_factor
      case 1131: // single_table_parens
      case 1132: // single_table
      case 1133: // joined_table_parens
      case 1134: // derived_table
        value.YY_MOVE_OR_COPY< JoinStructurePointer > (YY_MOVE (that.value));
        break;

      case 1122: // natural_join_type
      case 1123: // inner_join_type
      case 1124: // outer_join_type
        value.YY_MOVE_OR_COPY< JoinType > (YY_MOVE (that.value));
        break;

      case 1165: // opt_limit_clause
      case 1166: // limit_clause
      case 1167: // limit_options
      case 1321: // opt_simple_limit
        value.YY_MOVE_OR_COPY< LimitStructurePointer > (YY_MOVE (that.value));
        break;

      case 1346: // opt_line_term
      case 1347: // line_term_list
      case 1348: // line_term
        value.YY_MOVE_OR_COPY< Line_separators > (YY_MOVE (that.value));
        break;

      case 1030: // signed_literal
      case 1031: // literal
      case 1032: // NUM_literal
        value.YY_MOVE_OR_COPY< Literal > (YY_MOVE (that.value));
        break;

      case 1337: // load_stmt
        value.YY_MOVE_OR_COPY< LoadDataStructurePtr > (YY_MOVE (that.value));
        break;

      case 844: // duplicate
      case 1341: // opt_duplicate
        value.YY_MOVE_OR_COPY< On_duplicate > (YY_MOVE (that.value));
        break;

      case 1171: // order_expr
        value.YY_MOVE_OR_COPY< OrderItem > (YY_MOVE (that.value));
        break;

      case 1160: // opt_order_clause
      case 1161: // order_clause
        value.YY_MOVE_OR_COPY< OrderbyStructurePointer > (YY_MOVE (that.value));
        break;

      case 1188: // type
        value.YY_MOVE_OR_COPY< PT_ColumnType_ptr > (YY_MOVE (that.value));
        break;

      case 1206: // column_attribute
        value.YY_MOVE_OR_COPY< PT_column_attr_base_ptr > (YY_MOVE (that.value));
        break;

      case 1106: // option_value_following_option_type
        value.YY_MOVE_OR_COPY< PT_option_value_following_option_type_ptr > (YY_MOVE (that.value));
        break;

      case 1005: // part_definition
        value.YY_MOVE_OR_COPY< PartDef > (YY_MOVE (that.value));
        break;

      case 1003: // opt_part_defs
      case 1004: // part_def_list
        value.YY_MOVE_OR_COPY< PartDefList > (YY_MOVE (that.value));
        break;

      case 995: // part_type_def
        value.YY_MOVE_OR_COPY< PartTypeDef > (YY_MOVE (that.value));
        break;

      case 1012: // part_value_item
        value.YY_MOVE_OR_COPY< PartValueItem > (YY_MOVE (that.value));
        break;

      case 1007: // part_func_max
      case 1010: // part_value_item_list_paren
      case 1011: // part_value_item_list
        value.YY_MOVE_OR_COPY< PartValueItemsSPtr > (YY_MOVE (that.value));
        break;

      case 1006: // opt_part_values
        value.YY_MOVE_OR_COPY< PartValuesSPtr > (YY_MOVE (that.value));
        break;

      case 991: // opt_create_partitioning_etc
      case 994: // partition_clause
        value.YY_MOVE_OR_COPY< PartitionStructureSPtr > (YY_MOVE (that.value));
        break;

      case 1197: // float_options
      case 1198: // precision
      case 1203: // opt_precision
        value.YY_MOVE_OR_COPY< Precision_ptr > (YY_MOVE (that.value));
        break;

      case 1020: // prepare_src
        value.YY_MOVE_OR_COPY< PrepareSrcPtr > (YY_MOVE (that.value));
        break;

      case 1019: // prepare
      case 1021: // execute
      case 1025: // deallocate
        value.YY_MOVE_OR_COPY< PreparedStmtStructurePtr > (YY_MOVE (that.value));
        break;

      case 1259: // show_engine_param
        value.YY_MOVE_OR_COPY< SHOW_CMD > (YY_MOVE (that.value));
        break;

      case 1169: // insert_ident
      case 1173: // simple_ident
      case 1174: // simple_ident_nospvar
      case 1175: // simple_ident_q
        value.YY_MOVE_OR_COPY< SQLIdentPtr > (YY_MOVE (that.value));
        break;

      case 792: // select_item_list
        value.YY_MOVE_OR_COPY< SelectPartStructurePointer > (YY_MOVE (that.value));
        break;

      case 779: // select_stmt
      case 780: // query_expression
      case 781: // query_expression_body
      case 782: // query_expression_parens
      case 783: // query_primary
      case 784: // query_specification
      case 824: // table_subquery
      case 825: // subquery
      case 947: // view_select
      case 1298: // query_expression_or_parens
      case 1317: // explain_stmt
        value.YY_MOVE_OR_COPY< SelectStructurePointer > (YY_MOVE (that.value));
        break;

      case 822: // union_option
        value.YY_MOVE_OR_COPY< SetOperationType > (YY_MOVE (that.value));
        break;

      case 1101: // option_value
      case 1107: // option_value_no_option_type
        value.YY_MOVE_OR_COPY< SetStructurePtr > (YY_MOVE (that.value));
        break;

      case 1256: // describe_stmt
      case 1257: // show
      case 1258: // show_param
        value.YY_MOVE_OR_COPY< ShowStructurePtr > (YY_MOVE (that.value));
        break;

      case 1267: // opt_show_cmd_type
        value.YY_MOVE_OR_COPY< Show_cmd_type > (YY_MOVE (that.value));
        break;

      case 856: // opt_table_list
      case 857: // table_list
      case 1325: // table_alias_ref_list
        value.YY_MOVE_OR_COPY< TABLE_LIST > (YY_MOVE (that.value));
        break;

      case 859: // table_element
      case 860: // column_def
      case 862: // table_constraint_def
        value.YY_MOVE_OR_COPY< TableElementDescriptionPtr > (YY_MOVE (that.value));
        break;

      case 1358: // start
      case 1362: // begin_stmt
      case 1367: // commit
      case 1368: // rollback
        value.YY_MOVE_OR_COPY< TransactionStructurePtr > (YY_MOVE (that.value));
        break;

      case 1313: // update_stmt
        value.YY_MOVE_OR_COPY< UpdateStructurePtr > (YY_MOVE (that.value));
        break;

      case 1308: // row_value
      case 1309: // opt_values
      case 1310: // values
        value.YY_MOVE_OR_COPY< VALUES > (YY_MOVE (that.value));
        break;

      case 1058: // variable_aux
        value.YY_MOVE_OR_COPY< VariableStructurePtr > (YY_MOVE (that.value));
        break;

      case 1261: // opt_wild_or_where
      case 1262: // opt_wild_or_where_for_show
        value.YY_MOVE_OR_COPY< WildOrWhere_ptr > (YY_MOVE (that.value));
        break;

      case 818: // opt_distinct
      case 845: // opt_if_not_exists
      case 865: // opt_not
      case 872: // if_exists
      case 873: // opt_temporary
      case 996: // opt_linear
      case 1080: // visibility
      case 1265: // opt_full
      case 1266: // opt_extended
      case 1301: // opt_ignore
      case 1339: // opt_local
        value.YY_MOVE_OR_COPY< bool > (YY_MOVE (that.value));
        break;

      case 1338: // data_or_xml
        value.YY_MOVE_OR_COPY< enum_filetype > (YY_MOVE (that.value));
        break;

      case 1102: // option_type
      case 1103: // opt_var_type
      case 1104: // opt_var_ident_type
      case 1105: // opt_set_var_ident_type
        value.YY_MOVE_OR_COPY< enum_var_type > (YY_MOVE (that.value));
        break;

      case 1364: // opt_chain
      case 1365: // opt_release
        value.YY_MOVE_OR_COPY< enum_yes_no_unknown > (YY_MOVE (that.value));
        break;

      case 789: // select_options
      case 790: // select_option_list
      case 791: // select_option
      case 804: // comp_op
      case 826: // query_spec_option
      case 1330: // kill_option
        value.YY_MOVE_OR_COPY< int > (YY_MOVE (that.value));
        break;

      case 1064: // constraint_key_type
        value.YY_MOVE_OR_COPY< keytype > (YY_MOVE (that.value));
        break;

      case 1315: // update_elem
        value.YY_MOVE_OR_COPY< pair< BiaodashiPointer, BiaodashiPointer > > (YY_MOVE (that.value));
        break;

      case 1303: // insert_query_expression
        value.YY_MOVE_OR_COPY< pair< EXPR_LIST, SelectStructurePointer > > (YY_MOVE (that.value));
        break;

      case 1207: // encode_type
        value.YY_MOVE_OR_COPY< pair< aries::EncodeType, string > > (YY_MOVE (that.value));
        break;

      case 861: // opt_references
      case 1060: // references
        value.YY_MOVE_OR_COPY< pair< shared_ptr<BasicRel>, vector< string > > > (YY_MOVE (that.value));
        break;

      case 1312: // opt_insert_update_list
      case 1314: // update_list
        value.YY_MOVE_OR_COPY< pair< vector< BiaodashiPointer >, vector< BiaodashiPointer > >  > (YY_MOVE (that.value));
        break;

      case 838: // user_list
      case 840: // create_user_list
        value.YY_MOVE_OR_COPY< shared_ptr< vector< AccountSPtr > > > (YY_MOVE (that.value));
        break;

      case 1176: // table_ident
      case 1242: // sp_name
      case 1326: // table_ident_opt_wild
        value.YY_MOVE_OR_COPY< shared_ptr<BasicRel> > (YY_MOVE (that.value));
        break;

      case 1098: // option_value_list_continued
      case 1099: // start_option_value_list_following_option_type
      case 1100: // option_value_list
      case 1286: // set
      case 1287: // start_option_value_list
        value.YY_MOVE_OR_COPY< shared_ptr<vector<SetStructurePtr>> > (YY_MOVE (that.value));
        break;

      case 858: // table_element_list
        value.YY_MOVE_OR_COPY< shared_ptr<vector<TableElementDescriptionPtr>> > (YY_MOVE (that.value));
        break;

      case 5: // ACCOUNT_SYM
      case 6: // ACTION
      case 8: // ADDDATE_SYM
      case 9: // AFTER_SYM
      case 10: // AGAINST
      case 11: // AGGREGATE_SYM
      case 12: // ALGORITHM_SYM
      case 15: // ALWAYS_SYM
      case 20: // ANY_SYM
      case 22: // ASC
      case 23: // ASCII_SYM
      case 25: // AT_SYM
      case 26: // AUTOEXTEND_SIZE_SYM
      case 27: // AUTO_INC
      case 28: // AVG_ROW_LENGTH
      case 29: // AVG_SYM
      case 30: // BACKUP_SYM
      case 32: // BEGIN_SYM
      case 36: // BINLOG_SYM
      case 40: // BIT_SYM
      case 43: // BLOCK_SYM
      case 44: // BOOLEAN_SYM
      case 45: // BOOL_SYM
      case 47: // BTREE_SYM
      case 49: // BYTE_SYM
      case 50: // CACHE_SYM
      case 53: // CASCADED
      case 56: // CATALOG_NAME_SYM
      case 57: // CHAIN_SYM
      case 59: // CHANGED
      case 60: // CHANNEL_SYM
      case 61: // CHARSET
      case 63: // CHECKSUM_SYM
      case 65: // CIPHER_SYM
      case 66: // CLASS_ORIGIN_SYM
      case 67: // CLIENT_SYM
      case 68: // CLOSE_SYM
      case 69: // COALESCE
      case 70: // CODE_SYM
      case 72: // COLLATION_SYM
      case 73: // COLUMNS
      case 75: // COLUMN_FORMAT_SYM
      case 76: // COLUMN_NAME_SYM
      case 77: // COMMENT_SYM
      case 78: // COMMITTED_SYM
      case 79: // COMMIT_SYM
      case 80: // COMPACT_SYM
      case 81: // COMPLETION_SYM
      case 82: // COMPRESSED_SYM
      case 83: // COMPRESSION_SYM
      case 84: // ENCRYPTION_SYM
      case 85: // CONCURRENT
      case 88: // CONNECTION_SYM
      case 89: // CONSISTENT_SYM
      case 91: // CONSTRAINT_CATALOG_SYM
      case 92: // CONSTRAINT_NAME_SYM
      case 93: // CONSTRAINT_SCHEMA_SYM
      case 94: // CONTAINS_SYM
      case 95: // CONTEXT_SYM
      case 99: // CPU_SYM
      case 100: // CREATE
      case 104: // CURRENT_SYM
      case 107: // CURSOR_NAME_SYM
      case 111: // DATAFILE_SYM
      case 112: // DATA_SYM
      case 113: // DATETIME_SYM
      case 116: // DATE_SYM
      case 121: // DAY_SYM
      case 122: // DEALLOCATE_SYM
      case 123: // DECIMAL_NUM
      case 128: // DEFAULT_AUTH_SYM
      case 129: // DEFINER_SYM
      case 131: // DELAY_KEY_WRITE_SYM
      case 133: // DESC
      case 137: // DIAGNOSTICS_SYM
      case 138: // BYTEDICT_SYM
      case 139: // SHORTDICT_SYM
      case 140: // INTDICT_SYM
      case 142: // DIRECTORY_SYM
      case 143: // DISABLE_SYM
      case 144: // DISCARD_SYM
      case 145: // DISK_SYM
      case 149: // DO_SYM
      case 152: // DUMPFILE
      case 153: // DUPLICATE_SYM
      case 154: // DYNAMIC_SYM
      case 158: // ENABLE_SYM
      case 161: // END
      case 162: // ENDS_SYM
      case 163: // ENGINES_SYM
      case 164: // ENGINE_SYM
      case 165: // ENUM_SYM
      case 168: // ERROR_SYM
      case 169: // ERRORS
      case 171: // ESCAPE_SYM
      case 172: // EVENTS_SYM
      case 173: // EVENT_SYM
      case 174: // EVERY_SYM
      case 175: // EXCHANGE_SYM
      case 176: // EXECUTE_SYM
      case 179: // EXPANSION_SYM
      case 180: // EXPIRE_SYM
      case 181: // EXPORT_SYM
      case 182: // EXTENDED_SYM
      case 183: // EXTENT_SIZE_SYM
      case 186: // FAST_SYM
      case 187: // FAULTS_SYM
      case 189: // FILE_SYM
      case 190: // FILE_BLOCK_SIZE_SYM
      case 191: // FILTER_SYM
      case 192: // FIRST_SYM
      case 193: // FIXED_SYM
      case 194: // FLOAT_NUM
      case 196: // FLUSH_SYM
      case 197: // FOLLOWS_SYM
      case 201: // FORMAT_SYM
      case 202: // FOUND_SYM
      case 204: // FULL
      case 208: // GENERAL
      case 210: // GROUP_REPLICATION
      case 211: // GEOMETRYCOLLECTION_SYM
      case 212: // GEOMETRY_SYM
      case 213: // GET_FORMAT
      case 215: // GLOBAL_SYM
      case 217: // GRANTS
      case 221: // HANDLER_SYM
      case 222: // HASH_SYM
      case 224: // HELP_SYM
      case 225: // HEX_NUM
      case 227: // HOST_SYM
      case 228: // HOSTS_SYM
      case 232: // HOUR_SYM
      case 233: // IDENT
      case 234: // IDENTIFIED_SYM
      case 238: // IGNORE_SERVER_IDS_SYM
      case 239: // IMPORT
      case 240: // INDEXES
      case 243: // INITIAL_SIZE_SYM
      case 248: // INSERT_METHOD
      case 249: // INSTANCE_SYM
      case 250: // INSTALL_SYM
      case 251: // INTERVAL_SYM
      case 255: // INVOKER_SYM
      case 259: // IO_SYM
      case 260: // IPC_SYM
      case 262: // ISOLATION
      case 263: // ISSUER_SYM
      case 267: // JSON_SYM
      case 269: // KEY_BLOCK_SIZE
      case 272: // LANGUAGE_SYM
      case 273: // LAST_SYM
      case 276: // LEAVES
      case 279: // LESS_SYM
      case 280: // LEVEL_SYM
      case 281: // LEX_HOSTNAME
      case 286: // LINESTRING_SYM
      case 287: // LIST_SYM
      case 289: // LOCAL_SYM
      case 291: // LOCKS_SYM
      case 293: // LOGFILE_SYM
      case 294: // LOGS_SYM
      case 297: // LONG_NUM
      case 302: // MASTER_AUTO_POSITION_SYM
      case 304: // MASTER_CONNECT_RETRY_SYM
      case 305: // MASTER_DELAY_SYM
      case 306: // MASTER_HOST_SYM
      case 307: // MASTER_LOG_FILE_SYM
      case 308: // MASTER_LOG_POS_SYM
      case 309: // MASTER_PASSWORD_SYM
      case 310: // MASTER_PORT_SYM
      case 311: // MASTER_RETRY_COUNT_SYM
      case 312: // MASTER_SERVER_ID_SYM
      case 313: // MASTER_SSL_CAPATH_SYM
      case 314: // MASTER_TLS_VERSION_SYM
      case 315: // MASTER_SSL_CA_SYM
      case 316: // MASTER_SSL_CERT_SYM
      case 317: // MASTER_SSL_CIPHER_SYM
      case 318: // MASTER_SSL_CRL_SYM
      case 319: // MASTER_SSL_CRLPATH_SYM
      case 320: // MASTER_SSL_KEY_SYM
      case 321: // MASTER_SSL_SYM
      case 323: // MASTER_SYM
      case 324: // MASTER_USER_SYM
      case 325: // MASTER_HEARTBEAT_PERIOD_SYM
      case 327: // MAX_CONNECTIONS_PER_HOUR
      case 328: // MAX_QUERIES_PER_HOUR
      case 329: // MAX_ROWS
      case 330: // MAX_SIZE_SYM
      case 332: // MAX_UPDATES_PER_HOUR
      case 333: // MAX_USER_CONNECTIONS_SYM
      case 338: // MEDIUM_SYM
      case 339: // MEMORY_SYM
      case 340: // MERGE_SYM
      case 341: // MESSAGE_TEXT_SYM
      case 342: // MICROSECOND_SYM
      case 343: // MIGRATE_SYM
      case 346: // MINUTE_SYM
      case 347: // MIN_ROWS
      case 349: // MODE_SYM
      case 351: // MODIFY_SYM
      case 353: // MONTH_SYM
      case 354: // MULTILINESTRING_SYM
      case 355: // MULTIPOINT_SYM
      case 356: // MULTIPOLYGON_SYM
      case 357: // MUTEX_SYM
      case 358: // MYSQL_ERRNO_SYM
      case 359: // NAMES_SYM
      case 360: // NAME_SYM
      case 361: // NATIONAL_SYM
      case 364: // NCHAR_SYM
      case 365: // NDBCLUSTER_SYM
      case 368: // NEVER_SYM
      case 369: // NEW_SYM
      case 370: // NEXT_SYM
      case 371: // NODEGROUP_SYM
      case 372: // NONE_SYM
      case 376: // NO_SYM
      case 377: // NO_WAIT_SYM
      case 380: // NUM
      case 381: // NUMBER_SYM
      case 383: // NVARCHAR_SYM
      case 384: // OFFSET_SYM
      case 386: // ONE_SYM
      case 387: // ONLY_SYM
      case 388: // OPEN_SYM
      case 391: // OPTIONS_SYM
      case 401: // OWNER_SYM
      case 402: // PACK_KEYS_SYM
      case 403: // PAGE_SYM
      case 405: // PARSER_SYM
      case 407: // PARTIAL
      case 409: // PARTITIONS_SYM
      case 410: // PARTITIONING_SYM
      case 411: // PASSWORD
      case 412: // PHASE_SYM
      case 413: // PLUGIN_DIR_SYM
      case 414: // PLUGIN_SYM
      case 415: // PLUGINS_SYM
      case 416: // "."
      case 417: // POLYGON_SYM
      case 418: // PORT_SYM
      case 420: // PRECEDES_SYM
      case 422: // PREPARE_SYM
      case 423: // PRESERVE_SYM
      case 424: // PREV_SYM
      case 426: // PRIVILEGES
      case 428: // PROCESS
      case 429: // PROCESSLIST_SYM
      case 430: // PROFILE_SYM
      case 431: // PROFILES_SYM
      case 432: // PROXY_SYM
      case 434: // QUARTER_SYM
      case 435: // QUERY_SYM
      case 436: // QUICK
      case 439: // READ_ONLY_SYM
      case 443: // REBUILD_SYM
      case 444: // RECOVER_SYM
      case 446: // REDO_BUFFER_SIZE_SYM
      case 447: // REDUNDANT_SYM
      case 450: // RELAY
      case 451: // RELAYLOG_SYM
      case 452: // RELAY_LOG_FILE_SYM
      case 453: // RELAY_LOG_POS_SYM
      case 454: // RELAY_THREAD
      case 456: // RELOAD
      case 457: // REMOVE_SYM
      case 459: // REORGANIZE_SYM
      case 460: // REPAIR
      case 461: // REPEATABLE_SYM
      case 464: // REPLICATION
      case 465: // REPLICATE_DO_DB
      case 466: // REPLICATE_IGNORE_DB
      case 467: // REPLICATE_DO_TABLE
      case 468: // REPLICATE_IGNORE_TABLE
      case 469: // REPLICATE_WILD_DO_TABLE
      case 470: // REPLICATE_WILD_IGNORE_TABLE
      case 471: // REPLICATE_REWRITE_DB
      case 473: // RESET_SYM
      case 475: // RESOURCES
      case 476: // RESTORE_SYM
      case 478: // RESUME_SYM
      case 479: // RETURNED_SQLSTATE_SYM
      case 480: // RETURNS_SYM
      case 482: // REVERSE_SYM
      case 485: // ROLLBACK_SYM
      case 486: // ROLLUP_SYM
      case 487: // ROTATE_SYM
      case 488: // ROUTINE_SYM
      case 490: // ROW_FORMAT_SYM
      case 492: // ROW_COUNT_SYM
      case 493: // RTREE_SYM
      case 494: // SAVEPOINT_SYM
      case 495: // SCHEDULE_SYM
      case 496: // SCHEMA_NAME_SYM
      case 499: // SECOND_SYM
      case 500: // SECURITY_SYM
      case 504: // SERIALIZABLE_SYM
      case 505: // SERIAL_SYM
      case 506: // SESSION_SYM
      case 507: // SERVER_SYM
      case 511: // SHARE_SYM
      case 512: // SHARES_SYM
      case 516: // SHUTDOWN
      case 518: // SIGNED_SYM
      case 519: // SIMPLE_SYM
      case 520: // SLAVE
      case 521: // SLOW
      case 523: // SNAPSHOT_SYM
      case 524: // SOCKET_SYM
      case 525: // SONAME_SYM
      case 526: // SOUNDS_SYM
      case 527: // SOURCE_SYM
      case 533: // SQL_AFTER_GTIDS
      case 534: // SQL_AFTER_MTS_GAPS
      case 535: // SQL_BEFORE_GTIDS
      case 537: // SQL_BUFFER_RESULT
      case 540: // SQL_NO_CACHE_SYM
      case 543: // SQL_THREAD
      case 545: // STACKED_SYM
      case 547: // STARTS_SYM
      case 548: // START_SYM
      case 549: // STATS_AUTO_RECALC_SYM
      case 550: // STATS_PERSISTENT_SYM
      case 551: // STATS_SAMPLE_PAGES_SYM
      case 552: // STATUS_SYM
      case 555: // STOP_SYM
      case 556: // STORAGE_SYM
      case 559: // STRING_SYM
      case 560: // SUBCLASS_ORIGIN_SYM
      case 561: // SUBDATE_SYM
      case 562: // SUBJECT_SYM
      case 563: // SUBPARTITIONS_SYM
      case 564: // SUBPARTITION_SYM
      case 567: // SUPER_SYM
      case 568: // SUSPEND_SYM
      case 569: // SWAPS_SYM
      case 570: // SWITCHES_SYM
      case 572: // TABLES
      case 573: // VIEWS
      case 574: // TABLESPACE_SYM
      case 577: // TABLE_CHECKSUM_SYM
      case 578: // TABLE_NAME_SYM
      case 579: // TEMPORARY
      case 580: // TEMPTABLE_SYM
      case 582: // TEXT_STRING
      case 583: // TEXT_SYM
      case 584: // THAN_SYM
      case 586: // TIMESTAMP_SYM
      case 587: // TIMESTAMP_ADD
      case 588: // TIMESTAMP_DIFF
      case 589: // TIME_SYM
      case 595: // TRANSACTION_SYM
      case 596: // TRIGGERS_SYM
      case 600: // TRUNCATE_SYM
      case 601: // TYPES_SYM
      case 602: // TYPE_SYM
      case 604: // ULONGLONG_NUM
      case 605: // UNCOMMITTED_SYM
      case 606: // UNDEFINED_SYM
      case 608: // UNDOFILE_SYM
      case 609: // UNDO_BUFFER_SIZE_SYM
      case 611: // UNICODE_SYM
      case 612: // UNINSTALL_SYM
      case 615: // UNKNOWN_SYM
      case 618: // UNTIL_SYM
      case 620: // UPGRADE_SYM
      case 622: // USER
      case 623: // USE_FRM
      case 629: // VALIDATION_SYM
      case 631: // VALUE_SYM
      case 632: // VARBINARY_SYM
      case 634: // VARIABLES
      case 639: // VIEW_SYM
      case 641: // WAIT_SYM
      case 642: // WARNINGS
      case 643: // WEEK_SYM
      case 644: // WEIGHT_STRING_SYM
      case 651: // WITHOUT_SYM
      case 652: // WORK_SYM
      case 653: // WRAPPER_SYM
      case 655: // X509_SYM
      case 656: // XA_SYM
      case 657: // XID_SYM
      case 658: // XML_SYM
      case 661: // YEAR_SYM
      case 667: // PERSIST_SYM
      case 668: // ROLE_SYM
      case 669: // ADMIN_SYM
      case 670: // INVISIBLE_SYM
      case 671: // VISIBLE_SYM
      case 673: // COMPONENT_SYM
      case 682: // SKIP_SYM
      case 683: // LOCKED_SYM
      case 684: // NOWAIT_SYM
      case 686: // PERSIST_ONLY_SYM
      case 687: // HISTOGRAM_SYM
      case 688: // BUCKETS_SYM
      case 689: // OBSOLETE_TOKEN_930
      case 690: // CLONE_SYM
      case 693: // EXCLUDE_SYM
      case 695: // FOLLOWING_SYM
      case 702: // NULLS_SYM
      case 703: // OTHERS_SYM
      case 706: // PRECEDING_SYM
      case 708: // RESPECT_SYM
      case 710: // TIES_SYM
      case 711: // UNBOUNDED_SYM
      case 715: // NESTED_SYM
      case 716: // ORDINALITY_SYM
      case 717: // PATH_SYM
      case 718: // HISTORY_SYM
      case 719: // REUSE_SYM
      case 720: // SRID_SYM
      case 721: // THREAD_PRIORITY_SYM
      case 722: // RESOURCE_SYM
      case 724: // VCPU_SYM
      case 725: // MASTER_PUBLIC_KEY_PATH_SYM
      case 726: // GET_MASTER_PUBLIC_KEY_SYM
      case 727: // RESTART_SYM
      case 728: // DEFINITION_SYM
      case 729: // DESCRIPTION_SYM
      case 730: // ORGANIZATION_SYM
      case 731: // REFERENCE_SYM
      case 732: // ACTIVE_SYM
      case 733: // INACTIVE_SYM
      case 735: // OPTIONAL_SYM
      case 736: // SECONDARY_SYM
      case 737: // SECONDARY_ENGINE_SYM
      case 738: // SECONDARY_LOAD_SYM
      case 739: // SECONDARY_UNLOAD_SYM
      case 740: // RETAIN_SYM
      case 741: // OLD_SYM
      case 742: // ENFORCED_SYM
      case 743: // OJ_SYM
      case 744: // NETWORK_NAMESPACE_SYM
      case 794: // select_alias
      case 864: // opt_constraint_name
      case 1024: // execute_var_ident
      case 1027: // text_literal
      case 1028: // text_string
      case 1078: // opt_index_name_and_type
      case 1083: // key_part
      case 1085: // key_part_with_expression
      case 1086: // opt_ident
      case 1087: // opt_component
      case 1088: // charset_name
      case 1108: // internal_variable_name
      case 1139: // interval
      case 1140: // interval_time_stamp
      case 1143: // opt_table_alias
      case 1163: // opt_ordering_direction
      case 1164: // ordering_direction
      case 1168: // limit_option
      case 1177: // IDENT_sys
      case 1178: // TEXT_STRING_sys
      case 1179: // TEXT_STRING_literal
      case 1180: // TEXT_STRING_filesystem
      case 1181: // TEXT_STRING_password
      case 1182: // TEXT_STRING_hash
      case 1183: // ident
      case 1184: // ident_or_text
      case 1190: // nchar
      case 1191: // varchar
      case 1192: // nvarchar
      case 1193: // int_type
      case 1194: // real_type
      case 1196: // numeric_type
      case 1199: // type_datetime_precision
      case 1201: // field_length
      case 1202: // opt_field_length
      case 1212: // ident_keyword
      case 1214: // ident_keywords_ambiguous_2_labels
      case 1217: // ident_keywords_unambiguous
      case 1218: // lvalue_keyword
      case 1220: // TEXT_STRING_sys_nonewline
      case 1255: // opt_describe_column
      case 1264: // opt_db
      case 1285: // lvalue_ident
      case 1288: // password
      case 1342: // opt_load_data_charset
      case 1349: // opt_xml_rows_identified_by
        value.YY_MOVE_OR_COPY< string > (YY_MOVE (that.value));
        break;

      case 1340: // load_data_lock
        value.YY_MOVE_OR_COPY< thr_lock_type > (YY_MOVE (that.value));
        break;

      case 793: // select_item
        value.YY_MOVE_OR_COPY< tuple<Expression, string> > (YY_MOVE (that.value));
        break;

      case 998: // opt_num_parts
      case 1002: // opt_num_subparts
      case 1271: // ulong_num
      case 1350: // opt_ignore_lines
        value.YY_MOVE_OR_COPY< ulong > (YY_MOVE (that.value));
        break;

      case 989: // size_number
      case 1272: // real_ulong_num
      case 1273: // ulonglong_num
      case 1274: // real_ulonglong_num
        value.YY_MOVE_OR_COPY< ulonglong > (YY_MOVE (that.value));
        break;

      case 1008: // part_values_in
      case 1009: // part_value_list
        value.YY_MOVE_OR_COPY< vector< PartValueItemsSPtr > > (YY_MOVE (that.value));
        break;

      case 812: // opt_udf_expr_list
      case 813: // udf_expr_list
      case 1112: // opt_expr_list
      case 1114: // expr_list
      case 1158: // group_list
      case 1304: // insert_from_constructor
      case 1327: // fields
        value.YY_MOVE_OR_COPY< vector<Expression> > (YY_MOVE (that.value));
        break;

      case 787: // from_tables
      case 788: // table_reference_list
        value.YY_MOVE_OR_COPY< vector<JoinStructurePointer> > (YY_MOVE (that.value));
        break;

      case 1162: // order_list
        value.YY_MOVE_OR_COPY< vector<OrderItem> > (YY_MOVE (that.value));
        break;

      case 1022: // execute_using
      case 1023: // execute_var_list
      case 1082: // key_list
      case 1084: // key_list_with_expression
      case 1151: // opt_derived_column_list
      case 1152: // simple_ident_list
        value.YY_MOVE_OR_COPY< vector<string> > (YY_MOVE (that.value));
        break;

      case 1119: // when_list
        value.YY_MOVE_OR_COPY< vector<tuple<Expression, Expression>> > (YY_MOVE (that.value));
        break;

      default:
        break;
    }

#if 201103L <= YY_CPLUSPLUS
    // that is emptied.
    that.state = empty_state;
#endif
  }

  Parser::stack_symbol_type::stack_symbol_type (state_type s, YY_MOVE_REF (symbol_type) that)
    : super_type (s, YY_MOVE (that.location))
  {
    switch (that.type_get ())
    {
      case 775: // drop_table_stmt
      case 776: // drop_user_stmt
      case 777: // drop_view_stmt
      case 778: // drop_database_stmt
      case 827: // create
      case 871: // create_table_stmt
      case 875: // view_or_trigger_or_sp_or_event
      case 877: // no_definer_tail
      case 946: // view_tail
      case 1328: // use
        value.move< AbstractCommandPointer > (YY_MOVE (that.value));
        break;

      case 837: // user
      case 839: // create_user
        value.move< AccountSPtr > (YY_MOVE (that.value));
        break;

      case 1329: // kill
      case 1336: // shutdown_stmt
        value.move< AdminStmtStructurePtr > (YY_MOVE (that.value));
        break;

      case 1110: // cast_type
        value.move< CastType > (YY_MOVE (that.value));
        break;

      case 1204: // opt_column_attribute_list
      case 1205: // column_attribute_list
        value.move< ColAttrList > (YY_MOVE (that.value));
        break;

      case 990: // opt_create_table_options_etc
        value.move< CreateTableOptions > (YY_MOVE (that.value));
        break;

      case 1320: // delete_stmt
        value.move< DeleteStructurePtr > (YY_MOVE (that.value));
        break;

      case 796: // expr
      case 797: // bool_pri
      case 798: // predicate
      case 799: // bit_expr
      case 806: // simple_expr
      case 807: // case_expr
      case 808: // function_call_keyword
      case 809: // function_call_nonkeyword
      case 810: // function_call_conflict
      case 811: // function_call_generic
      case 814: // udf_expr
      case 815: // set_function_specification
      case 817: // sum_expr
      case 823: // row_subquery
      case 1029: // param_marker
      case 1057: // variable
      case 1109: // set_expr_or_default
      case 1111: // in_sum_expr
      case 1117: // opt_expr
      case 1118: // opt_else
      case 1145: // opt_where_clause
      case 1146: // opt_where_clause_expr
      case 1147: // opt_having_clause
      case 1170: // table_wild
      case 1172: // grouping_expr
      case 1200: // func_datetime_precision
      case 1210: // now_or_signed_literal
      case 1211: // now
      case 1311: // expr_or_default
        value.move< Expression > (YY_MOVE (that.value));
        break;

      case 1185: // field_def
        value.move< Field_def_ptr > (YY_MOVE (that.value));
        break;

      case 868: // field_options
      case 869: // field_opt_list
      case 870: // field_option
        value.move< Field_option > (YY_MOVE (that.value));
        break;

      case 1343: // opt_field_term
      case 1344: // field_term_list
      case 1345: // field_term
        value.move< Field_separators > (YY_MOVE (that.value));
        break;

      case 785: // opt_from_clause
      case 786: // from_clause
        value.move< FromPartStructurePointer > (YY_MOVE (that.value));
        break;

      case 1157: // opt_group_clause
        value.move< GroupbyStructurePointer > (YY_MOVE (that.value));
        break;

      case 1299: // insert_stmt
        value.move< InsertStructurePtr > (YY_MOVE (that.value));
        break;

      case 1120: // table_reference
      case 1121: // joined_table
      case 1129: // table_factor
      case 1131: // single_table_parens
      case 1132: // single_table
      case 1133: // joined_table_parens
      case 1134: // derived_table
        value.move< JoinStructurePointer > (YY_MOVE (that.value));
        break;

      case 1122: // natural_join_type
      case 1123: // inner_join_type
      case 1124: // outer_join_type
        value.move< JoinType > (YY_MOVE (that.value));
        break;

      case 1165: // opt_limit_clause
      case 1166: // limit_clause
      case 1167: // limit_options
      case 1321: // opt_simple_limit
        value.move< LimitStructurePointer > (YY_MOVE (that.value));
        break;

      case 1346: // opt_line_term
      case 1347: // line_term_list
      case 1348: // line_term
        value.move< Line_separators > (YY_MOVE (that.value));
        break;

      case 1030: // signed_literal
      case 1031: // literal
      case 1032: // NUM_literal
        value.move< Literal > (YY_MOVE (that.value));
        break;

      case 1337: // load_stmt
        value.move< LoadDataStructurePtr > (YY_MOVE (that.value));
        break;

      case 844: // duplicate
      case 1341: // opt_duplicate
        value.move< On_duplicate > (YY_MOVE (that.value));
        break;

      case 1171: // order_expr
        value.move< OrderItem > (YY_MOVE (that.value));
        break;

      case 1160: // opt_order_clause
      case 1161: // order_clause
        value.move< OrderbyStructurePointer > (YY_MOVE (that.value));
        break;

      case 1188: // type
        value.move< PT_ColumnType_ptr > (YY_MOVE (that.value));
        break;

      case 1206: // column_attribute
        value.move< PT_column_attr_base_ptr > (YY_MOVE (that.value));
        break;

      case 1106: // option_value_following_option_type
        value.move< PT_option_value_following_option_type_ptr > (YY_MOVE (that.value));
        break;

      case 1005: // part_definition
        value.move< PartDef > (YY_MOVE (that.value));
        break;

      case 1003: // opt_part_defs
      case 1004: // part_def_list
        value.move< PartDefList > (YY_MOVE (that.value));
        break;

      case 995: // part_type_def
        value.move< PartTypeDef > (YY_MOVE (that.value));
        break;

      case 1012: // part_value_item
        value.move< PartValueItem > (YY_MOVE (that.value));
        break;

      case 1007: // part_func_max
      case 1010: // part_value_item_list_paren
      case 1011: // part_value_item_list
        value.move< PartValueItemsSPtr > (YY_MOVE (that.value));
        break;

      case 1006: // opt_part_values
        value.move< PartValuesSPtr > (YY_MOVE (that.value));
        break;

      case 991: // opt_create_partitioning_etc
      case 994: // partition_clause
        value.move< PartitionStructureSPtr > (YY_MOVE (that.value));
        break;

      case 1197: // float_options
      case 1198: // precision
      case 1203: // opt_precision
        value.move< Precision_ptr > (YY_MOVE (that.value));
        break;

      case 1020: // prepare_src
        value.move< PrepareSrcPtr > (YY_MOVE (that.value));
        break;

      case 1019: // prepare
      case 1021: // execute
      case 1025: // deallocate
        value.move< PreparedStmtStructurePtr > (YY_MOVE (that.value));
        break;

      case 1259: // show_engine_param
        value.move< SHOW_CMD > (YY_MOVE (that.value));
        break;

      case 1169: // insert_ident
      case 1173: // simple_ident
      case 1174: // simple_ident_nospvar
      case 1175: // simple_ident_q
        value.move< SQLIdentPtr > (YY_MOVE (that.value));
        break;

      case 792: // select_item_list
        value.move< SelectPartStructurePointer > (YY_MOVE (that.value));
        break;

      case 779: // select_stmt
      case 780: // query_expression
      case 781: // query_expression_body
      case 782: // query_expression_parens
      case 783: // query_primary
      case 784: // query_specification
      case 824: // table_subquery
      case 825: // subquery
      case 947: // view_select
      case 1298: // query_expression_or_parens
      case 1317: // explain_stmt
        value.move< SelectStructurePointer > (YY_MOVE (that.value));
        break;

      case 822: // union_option
        value.move< SetOperationType > (YY_MOVE (that.value));
        break;

      case 1101: // option_value
      case 1107: // option_value_no_option_type
        value.move< SetStructurePtr > (YY_MOVE (that.value));
        break;

      case 1256: // describe_stmt
      case 1257: // show
      case 1258: // show_param
        value.move< ShowStructurePtr > (YY_MOVE (that.value));
        break;

      case 1267: // opt_show_cmd_type
        value.move< Show_cmd_type > (YY_MOVE (that.value));
        break;

      case 856: // opt_table_list
      case 857: // table_list
      case 1325: // table_alias_ref_list
        value.move< TABLE_LIST > (YY_MOVE (that.value));
        break;

      case 859: // table_element
      case 860: // column_def
      case 862: // table_constraint_def
        value.move< TableElementDescriptionPtr > (YY_MOVE (that.value));
        break;

      case 1358: // start
      case 1362: // begin_stmt
      case 1367: // commit
      case 1368: // rollback
        value.move< TransactionStructurePtr > (YY_MOVE (that.value));
        break;

      case 1313: // update_stmt
        value.move< UpdateStructurePtr > (YY_MOVE (that.value));
        break;

      case 1308: // row_value
      case 1309: // opt_values
      case 1310: // values
        value.move< VALUES > (YY_MOVE (that.value));
        break;

      case 1058: // variable_aux
        value.move< VariableStructurePtr > (YY_MOVE (that.value));
        break;

      case 1261: // opt_wild_or_where
      case 1262: // opt_wild_or_where_for_show
        value.move< WildOrWhere_ptr > (YY_MOVE (that.value));
        break;

      case 818: // opt_distinct
      case 845: // opt_if_not_exists
      case 865: // opt_not
      case 872: // if_exists
      case 873: // opt_temporary
      case 996: // opt_linear
      case 1080: // visibility
      case 1265: // opt_full
      case 1266: // opt_extended
      case 1301: // opt_ignore
      case 1339: // opt_local
        value.move< bool > (YY_MOVE (that.value));
        break;

      case 1338: // data_or_xml
        value.move< enum_filetype > (YY_MOVE (that.value));
        break;

      case 1102: // option_type
      case 1103: // opt_var_type
      case 1104: // opt_var_ident_type
      case 1105: // opt_set_var_ident_type
        value.move< enum_var_type > (YY_MOVE (that.value));
        break;

      case 1364: // opt_chain
      case 1365: // opt_release
        value.move< enum_yes_no_unknown > (YY_MOVE (that.value));
        break;

      case 789: // select_options
      case 790: // select_option_list
      case 791: // select_option
      case 804: // comp_op
      case 826: // query_spec_option
      case 1330: // kill_option
        value.move< int > (YY_MOVE (that.value));
        break;

      case 1064: // constraint_key_type
        value.move< keytype > (YY_MOVE (that.value));
        break;

      case 1315: // update_elem
        value.move< pair< BiaodashiPointer, BiaodashiPointer > > (YY_MOVE (that.value));
        break;

      case 1303: // insert_query_expression
        value.move< pair< EXPR_LIST, SelectStructurePointer > > (YY_MOVE (that.value));
        break;

      case 1207: // encode_type
        value.move< pair< aries::EncodeType, string > > (YY_MOVE (that.value));
        break;

      case 861: // opt_references
      case 1060: // references
        value.move< pair< shared_ptr<BasicRel>, vector< string > > > (YY_MOVE (that.value));
        break;

      case 1312: // opt_insert_update_list
      case 1314: // update_list
        value.move< pair< vector< BiaodashiPointer >, vector< BiaodashiPointer > >  > (YY_MOVE (that.value));
        break;

      case 838: // user_list
      case 840: // create_user_list
        value.move< shared_ptr< vector< AccountSPtr > > > (YY_MOVE (that.value));
        break;

      case 1176: // table_ident
      case 1242: // sp_name
      case 1326: // table_ident_opt_wild
        value.move< shared_ptr<BasicRel> > (YY_MOVE (that.value));
        break;

      case 1098: // option_value_list_continued
      case 1099: // start_option_value_list_following_option_type
      case 1100: // option_value_list
      case 1286: // set
      case 1287: // start_option_value_list
        value.move< shared_ptr<vector<SetStructurePtr>> > (YY_MOVE (that.value));
        break;

      case 858: // table_element_list
        value.move< shared_ptr<vector<TableElementDescriptionPtr>> > (YY_MOVE (that.value));
        break;

      case 5: // ACCOUNT_SYM
      case 6: // ACTION
      case 8: // ADDDATE_SYM
      case 9: // AFTER_SYM
      case 10: // AGAINST
      case 11: // AGGREGATE_SYM
      case 12: // ALGORITHM_SYM
      case 15: // ALWAYS_SYM
      case 20: // ANY_SYM
      case 22: // ASC
      case 23: // ASCII_SYM
      case 25: // AT_SYM
      case 26: // AUTOEXTEND_SIZE_SYM
      case 27: // AUTO_INC
      case 28: // AVG_ROW_LENGTH
      case 29: // AVG_SYM
      case 30: // BACKUP_SYM
      case 32: // BEGIN_SYM
      case 36: // BINLOG_SYM
      case 40: // BIT_SYM
      case 43: // BLOCK_SYM
      case 44: // BOOLEAN_SYM
      case 45: // BOOL_SYM
      case 47: // BTREE_SYM
      case 49: // BYTE_SYM
      case 50: // CACHE_SYM
      case 53: // CASCADED
      case 56: // CATALOG_NAME_SYM
      case 57: // CHAIN_SYM
      case 59: // CHANGED
      case 60: // CHANNEL_SYM
      case 61: // CHARSET
      case 63: // CHECKSUM_SYM
      case 65: // CIPHER_SYM
      case 66: // CLASS_ORIGIN_SYM
      case 67: // CLIENT_SYM
      case 68: // CLOSE_SYM
      case 69: // COALESCE
      case 70: // CODE_SYM
      case 72: // COLLATION_SYM
      case 73: // COLUMNS
      case 75: // COLUMN_FORMAT_SYM
      case 76: // COLUMN_NAME_SYM
      case 77: // COMMENT_SYM
      case 78: // COMMITTED_SYM
      case 79: // COMMIT_SYM
      case 80: // COMPACT_SYM
      case 81: // COMPLETION_SYM
      case 82: // COMPRESSED_SYM
      case 83: // COMPRESSION_SYM
      case 84: // ENCRYPTION_SYM
      case 85: // CONCURRENT
      case 88: // CONNECTION_SYM
      case 89: // CONSISTENT_SYM
      case 91: // CONSTRAINT_CATALOG_SYM
      case 92: // CONSTRAINT_NAME_SYM
      case 93: // CONSTRAINT_SCHEMA_SYM
      case 94: // CONTAINS_SYM
      case 95: // CONTEXT_SYM
      case 99: // CPU_SYM
      case 100: // CREATE
      case 104: // CURRENT_SYM
      case 107: // CURSOR_NAME_SYM
      case 111: // DATAFILE_SYM
      case 112: // DATA_SYM
      case 113: // DATETIME_SYM
      case 116: // DATE_SYM
      case 121: // DAY_SYM
      case 122: // DEALLOCATE_SYM
      case 123: // DECIMAL_NUM
      case 128: // DEFAULT_AUTH_SYM
      case 129: // DEFINER_SYM
      case 131: // DELAY_KEY_WRITE_SYM
      case 133: // DESC
      case 137: // DIAGNOSTICS_SYM
      case 138: // BYTEDICT_SYM
      case 139: // SHORTDICT_SYM
      case 140: // INTDICT_SYM
      case 142: // DIRECTORY_SYM
      case 143: // DISABLE_SYM
      case 144: // DISCARD_SYM
      case 145: // DISK_SYM
      case 149: // DO_SYM
      case 152: // DUMPFILE
      case 153: // DUPLICATE_SYM
      case 154: // DYNAMIC_SYM
      case 158: // ENABLE_SYM
      case 161: // END
      case 162: // ENDS_SYM
      case 163: // ENGINES_SYM
      case 164: // ENGINE_SYM
      case 165: // ENUM_SYM
      case 168: // ERROR_SYM
      case 169: // ERRORS
      case 171: // ESCAPE_SYM
      case 172: // EVENTS_SYM
      case 173: // EVENT_SYM
      case 174: // EVERY_SYM
      case 175: // EXCHANGE_SYM
      case 176: // EXECUTE_SYM
      case 179: // EXPANSION_SYM
      case 180: // EXPIRE_SYM
      case 181: // EXPORT_SYM
      case 182: // EXTENDED_SYM
      case 183: // EXTENT_SIZE_SYM
      case 186: // FAST_SYM
      case 187: // FAULTS_SYM
      case 189: // FILE_SYM
      case 190: // FILE_BLOCK_SIZE_SYM
      case 191: // FILTER_SYM
      case 192: // FIRST_SYM
      case 193: // FIXED_SYM
      case 194: // FLOAT_NUM
      case 196: // FLUSH_SYM
      case 197: // FOLLOWS_SYM
      case 201: // FORMAT_SYM
      case 202: // FOUND_SYM
      case 204: // FULL
      case 208: // GENERAL
      case 210: // GROUP_REPLICATION
      case 211: // GEOMETRYCOLLECTION_SYM
      case 212: // GEOMETRY_SYM
      case 213: // GET_FORMAT
      case 215: // GLOBAL_SYM
      case 217: // GRANTS
      case 221: // HANDLER_SYM
      case 222: // HASH_SYM
      case 224: // HELP_SYM
      case 225: // HEX_NUM
      case 227: // HOST_SYM
      case 228: // HOSTS_SYM
      case 232: // HOUR_SYM
      case 233: // IDENT
      case 234: // IDENTIFIED_SYM
      case 238: // IGNORE_SERVER_IDS_SYM
      case 239: // IMPORT
      case 240: // INDEXES
      case 243: // INITIAL_SIZE_SYM
      case 248: // INSERT_METHOD
      case 249: // INSTANCE_SYM
      case 250: // INSTALL_SYM
      case 251: // INTERVAL_SYM
      case 255: // INVOKER_SYM
      case 259: // IO_SYM
      case 260: // IPC_SYM
      case 262: // ISOLATION
      case 263: // ISSUER_SYM
      case 267: // JSON_SYM
      case 269: // KEY_BLOCK_SIZE
      case 272: // LANGUAGE_SYM
      case 273: // LAST_SYM
      case 276: // LEAVES
      case 279: // LESS_SYM
      case 280: // LEVEL_SYM
      case 281: // LEX_HOSTNAME
      case 286: // LINESTRING_SYM
      case 287: // LIST_SYM
      case 289: // LOCAL_SYM
      case 291: // LOCKS_SYM
      case 293: // LOGFILE_SYM
      case 294: // LOGS_SYM
      case 297: // LONG_NUM
      case 302: // MASTER_AUTO_POSITION_SYM
      case 304: // MASTER_CONNECT_RETRY_SYM
      case 305: // MASTER_DELAY_SYM
      case 306: // MASTER_HOST_SYM
      case 307: // MASTER_LOG_FILE_SYM
      case 308: // MASTER_LOG_POS_SYM
      case 309: // MASTER_PASSWORD_SYM
      case 310: // MASTER_PORT_SYM
      case 311: // MASTER_RETRY_COUNT_SYM
      case 312: // MASTER_SERVER_ID_SYM
      case 313: // MASTER_SSL_CAPATH_SYM
      case 314: // MASTER_TLS_VERSION_SYM
      case 315: // MASTER_SSL_CA_SYM
      case 316: // MASTER_SSL_CERT_SYM
      case 317: // MASTER_SSL_CIPHER_SYM
      case 318: // MASTER_SSL_CRL_SYM
      case 319: // MASTER_SSL_CRLPATH_SYM
      case 320: // MASTER_SSL_KEY_SYM
      case 321: // MASTER_SSL_SYM
      case 323: // MASTER_SYM
      case 324: // MASTER_USER_SYM
      case 325: // MASTER_HEARTBEAT_PERIOD_SYM
      case 327: // MAX_CONNECTIONS_PER_HOUR
      case 328: // MAX_QUERIES_PER_HOUR
      case 329: // MAX_ROWS
      case 330: // MAX_SIZE_SYM
      case 332: // MAX_UPDATES_PER_HOUR
      case 333: // MAX_USER_CONNECTIONS_SYM
      case 338: // MEDIUM_SYM
      case 339: // MEMORY_SYM
      case 340: // MERGE_SYM
      case 341: // MESSAGE_TEXT_SYM
      case 342: // MICROSECOND_SYM
      case 343: // MIGRATE_SYM
      case 346: // MINUTE_SYM
      case 347: // MIN_ROWS
      case 349: // MODE_SYM
      case 351: // MODIFY_SYM
      case 353: // MONTH_SYM
      case 354: // MULTILINESTRING_SYM
      case 355: // MULTIPOINT_SYM
      case 356: // MULTIPOLYGON_SYM
      case 357: // MUTEX_SYM
      case 358: // MYSQL_ERRNO_SYM
      case 359: // NAMES_SYM
      case 360: // NAME_SYM
      case 361: // NATIONAL_SYM
      case 364: // NCHAR_SYM
      case 365: // NDBCLUSTER_SYM
      case 368: // NEVER_SYM
      case 369: // NEW_SYM
      case 370: // NEXT_SYM
      case 371: // NODEGROUP_SYM
      case 372: // NONE_SYM
      case 376: // NO_SYM
      case 377: // NO_WAIT_SYM
      case 380: // NUM
      case 381: // NUMBER_SYM
      case 383: // NVARCHAR_SYM
      case 384: // OFFSET_SYM
      case 386: // ONE_SYM
      case 387: // ONLY_SYM
      case 388: // OPEN_SYM
      case 391: // OPTIONS_SYM
      case 401: // OWNER_SYM
      case 402: // PACK_KEYS_SYM
      case 403: // PAGE_SYM
      case 405: // PARSER_SYM
      case 407: // PARTIAL
      case 409: // PARTITIONS_SYM
      case 410: // PARTITIONING_SYM
      case 411: // PASSWORD
      case 412: // PHASE_SYM
      case 413: // PLUGIN_DIR_SYM
      case 414: // PLUGIN_SYM
      case 415: // PLUGINS_SYM
      case 416: // "."
      case 417: // POLYGON_SYM
      case 418: // PORT_SYM
      case 420: // PRECEDES_SYM
      case 422: // PREPARE_SYM
      case 423: // PRESERVE_SYM
      case 424: // PREV_SYM
      case 426: // PRIVILEGES
      case 428: // PROCESS
      case 429: // PROCESSLIST_SYM
      case 430: // PROFILE_SYM
      case 431: // PROFILES_SYM
      case 432: // PROXY_SYM
      case 434: // QUARTER_SYM
      case 435: // QUERY_SYM
      case 436: // QUICK
      case 439: // READ_ONLY_SYM
      case 443: // REBUILD_SYM
      case 444: // RECOVER_SYM
      case 446: // REDO_BUFFER_SIZE_SYM
      case 447: // REDUNDANT_SYM
      case 450: // RELAY
      case 451: // RELAYLOG_SYM
      case 452: // RELAY_LOG_FILE_SYM
      case 453: // RELAY_LOG_POS_SYM
      case 454: // RELAY_THREAD
      case 456: // RELOAD
      case 457: // REMOVE_SYM
      case 459: // REORGANIZE_SYM
      case 460: // REPAIR
      case 461: // REPEATABLE_SYM
      case 464: // REPLICATION
      case 465: // REPLICATE_DO_DB
      case 466: // REPLICATE_IGNORE_DB
      case 467: // REPLICATE_DO_TABLE
      case 468: // REPLICATE_IGNORE_TABLE
      case 469: // REPLICATE_WILD_DO_TABLE
      case 470: // REPLICATE_WILD_IGNORE_TABLE
      case 471: // REPLICATE_REWRITE_DB
      case 473: // RESET_SYM
      case 475: // RESOURCES
      case 476: // RESTORE_SYM
      case 478: // RESUME_SYM
      case 479: // RETURNED_SQLSTATE_SYM
      case 480: // RETURNS_SYM
      case 482: // REVERSE_SYM
      case 485: // ROLLBACK_SYM
      case 486: // ROLLUP_SYM
      case 487: // ROTATE_SYM
      case 488: // ROUTINE_SYM
      case 490: // ROW_FORMAT_SYM
      case 492: // ROW_COUNT_SYM
      case 493: // RTREE_SYM
      case 494: // SAVEPOINT_SYM
      case 495: // SCHEDULE_SYM
      case 496: // SCHEMA_NAME_SYM
      case 499: // SECOND_SYM
      case 500: // SECURITY_SYM
      case 504: // SERIALIZABLE_SYM
      case 505: // SERIAL_SYM
      case 506: // SESSION_SYM
      case 507: // SERVER_SYM
      case 511: // SHARE_SYM
      case 512: // SHARES_SYM
      case 516: // SHUTDOWN
      case 518: // SIGNED_SYM
      case 519: // SIMPLE_SYM
      case 520: // SLAVE
      case 521: // SLOW
      case 523: // SNAPSHOT_SYM
      case 524: // SOCKET_SYM
      case 525: // SONAME_SYM
      case 526: // SOUNDS_SYM
      case 527: // SOURCE_SYM
      case 533: // SQL_AFTER_GTIDS
      case 534: // SQL_AFTER_MTS_GAPS
      case 535: // SQL_BEFORE_GTIDS
      case 537: // SQL_BUFFER_RESULT
      case 540: // SQL_NO_CACHE_SYM
      case 543: // SQL_THREAD
      case 545: // STACKED_SYM
      case 547: // STARTS_SYM
      case 548: // START_SYM
      case 549: // STATS_AUTO_RECALC_SYM
      case 550: // STATS_PERSISTENT_SYM
      case 551: // STATS_SAMPLE_PAGES_SYM
      case 552: // STATUS_SYM
      case 555: // STOP_SYM
      case 556: // STORAGE_SYM
      case 559: // STRING_SYM
      case 560: // SUBCLASS_ORIGIN_SYM
      case 561: // SUBDATE_SYM
      case 562: // SUBJECT_SYM
      case 563: // SUBPARTITIONS_SYM
      case 564: // SUBPARTITION_SYM
      case 567: // SUPER_SYM
      case 568: // SUSPEND_SYM
      case 569: // SWAPS_SYM
      case 570: // SWITCHES_SYM
      case 572: // TABLES
      case 573: // VIEWS
      case 574: // TABLESPACE_SYM
      case 577: // TABLE_CHECKSUM_SYM
      case 578: // TABLE_NAME_SYM
      case 579: // TEMPORARY
      case 580: // TEMPTABLE_SYM
      case 582: // TEXT_STRING
      case 583: // TEXT_SYM
      case 584: // THAN_SYM
      case 586: // TIMESTAMP_SYM
      case 587: // TIMESTAMP_ADD
      case 588: // TIMESTAMP_DIFF
      case 589: // TIME_SYM
      case 595: // TRANSACTION_SYM
      case 596: // TRIGGERS_SYM
      case 600: // TRUNCATE_SYM
      case 601: // TYPES_SYM
      case 602: // TYPE_SYM
      case 604: // ULONGLONG_NUM
      case 605: // UNCOMMITTED_SYM
      case 606: // UNDEFINED_SYM
      case 608: // UNDOFILE_SYM
      case 609: // UNDO_BUFFER_SIZE_SYM
      case 611: // UNICODE_SYM
      case 612: // UNINSTALL_SYM
      case 615: // UNKNOWN_SYM
      case 618: // UNTIL_SYM
      case 620: // UPGRADE_SYM
      case 622: // USER
      case 623: // USE_FRM
      case 629: // VALIDATION_SYM
      case 631: // VALUE_SYM
      case 632: // VARBINARY_SYM
      case 634: // VARIABLES
      case 639: // VIEW_SYM
      case 641: // WAIT_SYM
      case 642: // WARNINGS
      case 643: // WEEK_SYM
      case 644: // WEIGHT_STRING_SYM
      case 651: // WITHOUT_SYM
      case 652: // WORK_SYM
      case 653: // WRAPPER_SYM
      case 655: // X509_SYM
      case 656: // XA_SYM
      case 657: // XID_SYM
      case 658: // XML_SYM
      case 661: // YEAR_SYM
      case 667: // PERSIST_SYM
      case 668: // ROLE_SYM
      case 669: // ADMIN_SYM
      case 670: // INVISIBLE_SYM
      case 671: // VISIBLE_SYM
      case 673: // COMPONENT_SYM
      case 682: // SKIP_SYM
      case 683: // LOCKED_SYM
      case 684: // NOWAIT_SYM
      case 686: // PERSIST_ONLY_SYM
      case 687: // HISTOGRAM_SYM
      case 688: // BUCKETS_SYM
      case 689: // OBSOLETE_TOKEN_930
      case 690: // CLONE_SYM
      case 693: // EXCLUDE_SYM
      case 695: // FOLLOWING_SYM
      case 702: // NULLS_SYM
      case 703: // OTHERS_SYM
      case 706: // PRECEDING_SYM
      case 708: // RESPECT_SYM
      case 710: // TIES_SYM
      case 711: // UNBOUNDED_SYM
      case 715: // NESTED_SYM
      case 716: // ORDINALITY_SYM
      case 717: // PATH_SYM
      case 718: // HISTORY_SYM
      case 719: // REUSE_SYM
      case 720: // SRID_SYM
      case 721: // THREAD_PRIORITY_SYM
      case 722: // RESOURCE_SYM
      case 724: // VCPU_SYM
      case 725: // MASTER_PUBLIC_KEY_PATH_SYM
      case 726: // GET_MASTER_PUBLIC_KEY_SYM
      case 727: // RESTART_SYM
      case 728: // DEFINITION_SYM
      case 729: // DESCRIPTION_SYM
      case 730: // ORGANIZATION_SYM
      case 731: // REFERENCE_SYM
      case 732: // ACTIVE_SYM
      case 733: // INACTIVE_SYM
      case 735: // OPTIONAL_SYM
      case 736: // SECONDARY_SYM
      case 737: // SECONDARY_ENGINE_SYM
      case 738: // SECONDARY_LOAD_SYM
      case 739: // SECONDARY_UNLOAD_SYM
      case 740: // RETAIN_SYM
      case 741: // OLD_SYM
      case 742: // ENFORCED_SYM
      case 743: // OJ_SYM
      case 744: // NETWORK_NAMESPACE_SYM
      case 794: // select_alias
      case 864: // opt_constraint_name
      case 1024: // execute_var_ident
      case 1027: // text_literal
      case 1028: // text_string
      case 1078: // opt_index_name_and_type
      case 1083: // key_part
      case 1085: // key_part_with_expression
      case 1086: // opt_ident
      case 1087: // opt_component
      case 1088: // charset_name
      case 1108: // internal_variable_name
      case 1139: // interval
      case 1140: // interval_time_stamp
      case 1143: // opt_table_alias
      case 1163: // opt_ordering_direction
      case 1164: // ordering_direction
      case 1168: // limit_option
      case 1177: // IDENT_sys
      case 1178: // TEXT_STRING_sys
      case 1179: // TEXT_STRING_literal
      case 1180: // TEXT_STRING_filesystem
      case 1181: // TEXT_STRING_password
      case 1182: // TEXT_STRING_hash
      case 1183: // ident
      case 1184: // ident_or_text
      case 1190: // nchar
      case 1191: // varchar
      case 1192: // nvarchar
      case 1193: // int_type
      case 1194: // real_type
      case 1196: // numeric_type
      case 1199: // type_datetime_precision
      case 1201: // field_length
      case 1202: // opt_field_length
      case 1212: // ident_keyword
      case 1214: // ident_keywords_ambiguous_2_labels
      case 1217: // ident_keywords_unambiguous
      case 1218: // lvalue_keyword
      case 1220: // TEXT_STRING_sys_nonewline
      case 1255: // opt_describe_column
      case 1264: // opt_db
      case 1285: // lvalue_ident
      case 1288: // password
      case 1342: // opt_load_data_charset
      case 1349: // opt_xml_rows_identified_by
        value.move< string > (YY_MOVE (that.value));
        break;

      case 1340: // load_data_lock
        value.move< thr_lock_type > (YY_MOVE (that.value));
        break;

      case 793: // select_item
        value.move< tuple<Expression, string> > (YY_MOVE (that.value));
        break;

      case 998: // opt_num_parts
      case 1002: // opt_num_subparts
      case 1271: // ulong_num
      case 1350: // opt_ignore_lines
        value.move< ulong > (YY_MOVE (that.value));
        break;

      case 989: // size_number
      case 1272: // real_ulong_num
      case 1273: // ulonglong_num
      case 1274: // real_ulonglong_num
        value.move< ulonglong > (YY_MOVE (that.value));
        break;

      case 1008: // part_values_in
      case 1009: // part_value_list
        value.move< vector< PartValueItemsSPtr > > (YY_MOVE (that.value));
        break;

      case 812: // opt_udf_expr_list
      case 813: // udf_expr_list
      case 1112: // opt_expr_list
      case 1114: // expr_list
      case 1158: // group_list
      case 1304: // insert_from_constructor
      case 1327: // fields
        value.move< vector<Expression> > (YY_MOVE (that.value));
        break;

      case 787: // from_tables
      case 788: // table_reference_list
        value.move< vector<JoinStructurePointer> > (YY_MOVE (that.value));
        break;

      case 1162: // order_list
        value.move< vector<OrderItem> > (YY_MOVE (that.value));
        break;

      case 1022: // execute_using
      case 1023: // execute_var_list
      case 1082: // key_list
      case 1084: // key_list_with_expression
      case 1151: // opt_derived_column_list
      case 1152: // simple_ident_list
        value.move< vector<string> > (YY_MOVE (that.value));
        break;

      case 1119: // when_list
        value.move< vector<tuple<Expression, Expression>> > (YY_MOVE (that.value));
        break;

      default:
        break;
    }

    // that is emptied.
    that.type = empty_symbol;
  }

#if YY_CPLUSPLUS < 201103L
  Parser::stack_symbol_type&
  Parser::stack_symbol_type::operator= (const stack_symbol_type& that)
  {
    state = that.state;
    switch (that.type_get ())
    {
      case 775: // drop_table_stmt
      case 776: // drop_user_stmt
      case 777: // drop_view_stmt
      case 778: // drop_database_stmt
      case 827: // create
      case 871: // create_table_stmt
      case 875: // view_or_trigger_or_sp_or_event
      case 877: // no_definer_tail
      case 946: // view_tail
      case 1328: // use
        value.copy< AbstractCommandPointer > (that.value);
        break;

      case 837: // user
      case 839: // create_user
        value.copy< AccountSPtr > (that.value);
        break;

      case 1329: // kill
      case 1336: // shutdown_stmt
        value.copy< AdminStmtStructurePtr > (that.value);
        break;

      case 1110: // cast_type
        value.copy< CastType > (that.value);
        break;

      case 1204: // opt_column_attribute_list
      case 1205: // column_attribute_list
        value.copy< ColAttrList > (that.value);
        break;

      case 990: // opt_create_table_options_etc
        value.copy< CreateTableOptions > (that.value);
        break;

      case 1320: // delete_stmt
        value.copy< DeleteStructurePtr > (that.value);
        break;

      case 796: // expr
      case 797: // bool_pri
      case 798: // predicate
      case 799: // bit_expr
      case 806: // simple_expr
      case 807: // case_expr
      case 808: // function_call_keyword
      case 809: // function_call_nonkeyword
      case 810: // function_call_conflict
      case 811: // function_call_generic
      case 814: // udf_expr
      case 815: // set_function_specification
      case 817: // sum_expr
      case 823: // row_subquery
      case 1029: // param_marker
      case 1057: // variable
      case 1109: // set_expr_or_default
      case 1111: // in_sum_expr
      case 1117: // opt_expr
      case 1118: // opt_else
      case 1145: // opt_where_clause
      case 1146: // opt_where_clause_expr
      case 1147: // opt_having_clause
      case 1170: // table_wild
      case 1172: // grouping_expr
      case 1200: // func_datetime_precision
      case 1210: // now_or_signed_literal
      case 1211: // now
      case 1311: // expr_or_default
        value.copy< Expression > (that.value);
        break;

      case 1185: // field_def
        value.copy< Field_def_ptr > (that.value);
        break;

      case 868: // field_options
      case 869: // field_opt_list
      case 870: // field_option
        value.copy< Field_option > (that.value);
        break;

      case 1343: // opt_field_term
      case 1344: // field_term_list
      case 1345: // field_term
        value.copy< Field_separators > (that.value);
        break;

      case 785: // opt_from_clause
      case 786: // from_clause
        value.copy< FromPartStructurePointer > (that.value);
        break;

      case 1157: // opt_group_clause
        value.copy< GroupbyStructurePointer > (that.value);
        break;

      case 1299: // insert_stmt
        value.copy< InsertStructurePtr > (that.value);
        break;

      case 1120: // table_reference
      case 1121: // joined_table
      case 1129: // table_factor
      case 1131: // single_table_parens
      case 1132: // single_table
      case 1133: // joined_table_parens
      case 1134: // derived_table
        value.copy< JoinStructurePointer > (that.value);
        break;

      case 1122: // natural_join_type
      case 1123: // inner_join_type
      case 1124: // outer_join_type
        value.copy< JoinType > (that.value);
        break;

      case 1165: // opt_limit_clause
      case 1166: // limit_clause
      case 1167: // limit_options
      case 1321: // opt_simple_limit
        value.copy< LimitStructurePointer > (that.value);
        break;

      case 1346: // opt_line_term
      case 1347: // line_term_list
      case 1348: // line_term
        value.copy< Line_separators > (that.value);
        break;

      case 1030: // signed_literal
      case 1031: // literal
      case 1032: // NUM_literal
        value.copy< Literal > (that.value);
        break;

      case 1337: // load_stmt
        value.copy< LoadDataStructurePtr > (that.value);
        break;

      case 844: // duplicate
      case 1341: // opt_duplicate
        value.copy< On_duplicate > (that.value);
        break;

      case 1171: // order_expr
        value.copy< OrderItem > (that.value);
        break;

      case 1160: // opt_order_clause
      case 1161: // order_clause
        value.copy< OrderbyStructurePointer > (that.value);
        break;

      case 1188: // type
        value.copy< PT_ColumnType_ptr > (that.value);
        break;

      case 1206: // column_attribute
        value.copy< PT_column_attr_base_ptr > (that.value);
        break;

      case 1106: // option_value_following_option_type
        value.copy< PT_option_value_following_option_type_ptr > (that.value);
        break;

      case 1005: // part_definition
        value.copy< PartDef > (that.value);
        break;

      case 1003: // opt_part_defs
      case 1004: // part_def_list
        value.copy< PartDefList > (that.value);
        break;

      case 995: // part_type_def
        value.copy< PartTypeDef > (that.value);
        break;

      case 1012: // part_value_item
        value.copy< PartValueItem > (that.value);
        break;

      case 1007: // part_func_max
      case 1010: // part_value_item_list_paren
      case 1011: // part_value_item_list
        value.copy< PartValueItemsSPtr > (that.value);
        break;

      case 1006: // opt_part_values
        value.copy< PartValuesSPtr > (that.value);
        break;

      case 991: // opt_create_partitioning_etc
      case 994: // partition_clause
        value.copy< PartitionStructureSPtr > (that.value);
        break;

      case 1197: // float_options
      case 1198: // precision
      case 1203: // opt_precision
        value.copy< Precision_ptr > (that.value);
        break;

      case 1020: // prepare_src
        value.copy< PrepareSrcPtr > (that.value);
        break;

      case 1019: // prepare
      case 1021: // execute
      case 1025: // deallocate
        value.copy< PreparedStmtStructurePtr > (that.value);
        break;

      case 1259: // show_engine_param
        value.copy< SHOW_CMD > (that.value);
        break;

      case 1169: // insert_ident
      case 1173: // simple_ident
      case 1174: // simple_ident_nospvar
      case 1175: // simple_ident_q
        value.copy< SQLIdentPtr > (that.value);
        break;

      case 792: // select_item_list
        value.copy< SelectPartStructurePointer > (that.value);
        break;

      case 779: // select_stmt
      case 780: // query_expression
      case 781: // query_expression_body
      case 782: // query_expression_parens
      case 783: // query_primary
      case 784: // query_specification
      case 824: // table_subquery
      case 825: // subquery
      case 947: // view_select
      case 1298: // query_expression_or_parens
      case 1317: // explain_stmt
        value.copy< SelectStructurePointer > (that.value);
        break;

      case 822: // union_option
        value.copy< SetOperationType > (that.value);
        break;

      case 1101: // option_value
      case 1107: // option_value_no_option_type
        value.copy< SetStructurePtr > (that.value);
        break;

      case 1256: // describe_stmt
      case 1257: // show
      case 1258: // show_param
        value.copy< ShowStructurePtr > (that.value);
        break;

      case 1267: // opt_show_cmd_type
        value.copy< Show_cmd_type > (that.value);
        break;

      case 856: // opt_table_list
      case 857: // table_list
      case 1325: // table_alias_ref_list
        value.copy< TABLE_LIST > (that.value);
        break;

      case 859: // table_element
      case 860: // column_def
      case 862: // table_constraint_def
        value.copy< TableElementDescriptionPtr > (that.value);
        break;

      case 1358: // start
      case 1362: // begin_stmt
      case 1367: // commit
      case 1368: // rollback
        value.copy< TransactionStructurePtr > (that.value);
        break;

      case 1313: // update_stmt
        value.copy< UpdateStructurePtr > (that.value);
        break;

      case 1308: // row_value
      case 1309: // opt_values
      case 1310: // values
        value.copy< VALUES > (that.value);
        break;

      case 1058: // variable_aux
        value.copy< VariableStructurePtr > (that.value);
        break;

      case 1261: // opt_wild_or_where
      case 1262: // opt_wild_or_where_for_show
        value.copy< WildOrWhere_ptr > (that.value);
        break;

      case 818: // opt_distinct
      case 845: // opt_if_not_exists
      case 865: // opt_not
      case 872: // if_exists
      case 873: // opt_temporary
      case 996: // opt_linear
      case 1080: // visibility
      case 1265: // opt_full
      case 1266: // opt_extended
      case 1301: // opt_ignore
      case 1339: // opt_local
        value.copy< bool > (that.value);
        break;

      case 1338: // data_or_xml
        value.copy< enum_filetype > (that.value);
        break;

      case 1102: // option_type
      case 1103: // opt_var_type
      case 1104: // opt_var_ident_type
      case 1105: // opt_set_var_ident_type
        value.copy< enum_var_type > (that.value);
        break;

      case 1364: // opt_chain
      case 1365: // opt_release
        value.copy< enum_yes_no_unknown > (that.value);
        break;

      case 789: // select_options
      case 790: // select_option_list
      case 791: // select_option
      case 804: // comp_op
      case 826: // query_spec_option
      case 1330: // kill_option
        value.copy< int > (that.value);
        break;

      case 1064: // constraint_key_type
        value.copy< keytype > (that.value);
        break;

      case 1315: // update_elem
        value.copy< pair< BiaodashiPointer, BiaodashiPointer > > (that.value);
        break;

      case 1303: // insert_query_expression
        value.copy< pair< EXPR_LIST, SelectStructurePointer > > (that.value);
        break;

      case 1207: // encode_type
        value.copy< pair< aries::EncodeType, string > > (that.value);
        break;

      case 861: // opt_references
      case 1060: // references
        value.copy< pair< shared_ptr<BasicRel>, vector< string > > > (that.value);
        break;

      case 1312: // opt_insert_update_list
      case 1314: // update_list
        value.copy< pair< vector< BiaodashiPointer >, vector< BiaodashiPointer > >  > (that.value);
        break;

      case 838: // user_list
      case 840: // create_user_list
        value.copy< shared_ptr< vector< AccountSPtr > > > (that.value);
        break;

      case 1176: // table_ident
      case 1242: // sp_name
      case 1326: // table_ident_opt_wild
        value.copy< shared_ptr<BasicRel> > (that.value);
        break;

      case 1098: // option_value_list_continued
      case 1099: // start_option_value_list_following_option_type
      case 1100: // option_value_list
      case 1286: // set
      case 1287: // start_option_value_list
        value.copy< shared_ptr<vector<SetStructurePtr>> > (that.value);
        break;

      case 858: // table_element_list
        value.copy< shared_ptr<vector<TableElementDescriptionPtr>> > (that.value);
        break;

      case 5: // ACCOUNT_SYM
      case 6: // ACTION
      case 8: // ADDDATE_SYM
      case 9: // AFTER_SYM
      case 10: // AGAINST
      case 11: // AGGREGATE_SYM
      case 12: // ALGORITHM_SYM
      case 15: // ALWAYS_SYM
      case 20: // ANY_SYM
      case 22: // ASC
      case 23: // ASCII_SYM
      case 25: // AT_SYM
      case 26: // AUTOEXTEND_SIZE_SYM
      case 27: // AUTO_INC
      case 28: // AVG_ROW_LENGTH
      case 29: // AVG_SYM
      case 30: // BACKUP_SYM
      case 32: // BEGIN_SYM
      case 36: // BINLOG_SYM
      case 40: // BIT_SYM
      case 43: // BLOCK_SYM
      case 44: // BOOLEAN_SYM
      case 45: // BOOL_SYM
      case 47: // BTREE_SYM
      case 49: // BYTE_SYM
      case 50: // CACHE_SYM
      case 53: // CASCADED
      case 56: // CATALOG_NAME_SYM
      case 57: // CHAIN_SYM
      case 59: // CHANGED
      case 60: // CHANNEL_SYM
      case 61: // CHARSET
      case 63: // CHECKSUM_SYM
      case 65: // CIPHER_SYM
      case 66: // CLASS_ORIGIN_SYM
      case 67: // CLIENT_SYM
      case 68: // CLOSE_SYM
      case 69: // COALESCE
      case 70: // CODE_SYM
      case 72: // COLLATION_SYM
      case 73: // COLUMNS
      case 75: // COLUMN_FORMAT_SYM
      case 76: // COLUMN_NAME_SYM
      case 77: // COMMENT_SYM
      case 78: // COMMITTED_SYM
      case 79: // COMMIT_SYM
      case 80: // COMPACT_SYM
      case 81: // COMPLETION_SYM
      case 82: // COMPRESSED_SYM
      case 83: // COMPRESSION_SYM
      case 84: // ENCRYPTION_SYM
      case 85: // CONCURRENT
      case 88: // CONNECTION_SYM
      case 89: // CONSISTENT_SYM
      case 91: // CONSTRAINT_CATALOG_SYM
      case 92: // CONSTRAINT_NAME_SYM
      case 93: // CONSTRAINT_SCHEMA_SYM
      case 94: // CONTAINS_SYM
      case 95: // CONTEXT_SYM
      case 99: // CPU_SYM
      case 100: // CREATE
      case 104: // CURRENT_SYM
      case 107: // CURSOR_NAME_SYM
      case 111: // DATAFILE_SYM
      case 112: // DATA_SYM
      case 113: // DATETIME_SYM
      case 116: // DATE_SYM
      case 121: // DAY_SYM
      case 122: // DEALLOCATE_SYM
      case 123: // DECIMAL_NUM
      case 128: // DEFAULT_AUTH_SYM
      case 129: // DEFINER_SYM
      case 131: // DELAY_KEY_WRITE_SYM
      case 133: // DESC
      case 137: // DIAGNOSTICS_SYM
      case 138: // BYTEDICT_SYM
      case 139: // SHORTDICT_SYM
      case 140: // INTDICT_SYM
      case 142: // DIRECTORY_SYM
      case 143: // DISABLE_SYM
      case 144: // DISCARD_SYM
      case 145: // DISK_SYM
      case 149: // DO_SYM
      case 152: // DUMPFILE
      case 153: // DUPLICATE_SYM
      case 154: // DYNAMIC_SYM
      case 158: // ENABLE_SYM
      case 161: // END
      case 162: // ENDS_SYM
      case 163: // ENGINES_SYM
      case 164: // ENGINE_SYM
      case 165: // ENUM_SYM
      case 168: // ERROR_SYM
      case 169: // ERRORS
      case 171: // ESCAPE_SYM
      case 172: // EVENTS_SYM
      case 173: // EVENT_SYM
      case 174: // EVERY_SYM
      case 175: // EXCHANGE_SYM
      case 176: // EXECUTE_SYM
      case 179: // EXPANSION_SYM
      case 180: // EXPIRE_SYM
      case 181: // EXPORT_SYM
      case 182: // EXTENDED_SYM
      case 183: // EXTENT_SIZE_SYM
      case 186: // FAST_SYM
      case 187: // FAULTS_SYM
      case 189: // FILE_SYM
      case 190: // FILE_BLOCK_SIZE_SYM
      case 191: // FILTER_SYM
      case 192: // FIRST_SYM
      case 193: // FIXED_SYM
      case 194: // FLOAT_NUM
      case 196: // FLUSH_SYM
      case 197: // FOLLOWS_SYM
      case 201: // FORMAT_SYM
      case 202: // FOUND_SYM
      case 204: // FULL
      case 208: // GENERAL
      case 210: // GROUP_REPLICATION
      case 211: // GEOMETRYCOLLECTION_SYM
      case 212: // GEOMETRY_SYM
      case 213: // GET_FORMAT
      case 215: // GLOBAL_SYM
      case 217: // GRANTS
      case 221: // HANDLER_SYM
      case 222: // HASH_SYM
      case 224: // HELP_SYM
      case 225: // HEX_NUM
      case 227: // HOST_SYM
      case 228: // HOSTS_SYM
      case 232: // HOUR_SYM
      case 233: // IDENT
      case 234: // IDENTIFIED_SYM
      case 238: // IGNORE_SERVER_IDS_SYM
      case 239: // IMPORT
      case 240: // INDEXES
      case 243: // INITIAL_SIZE_SYM
      case 248: // INSERT_METHOD
      case 249: // INSTANCE_SYM
      case 250: // INSTALL_SYM
      case 251: // INTERVAL_SYM
      case 255: // INVOKER_SYM
      case 259: // IO_SYM
      case 260: // IPC_SYM
      case 262: // ISOLATION
      case 263: // ISSUER_SYM
      case 267: // JSON_SYM
      case 269: // KEY_BLOCK_SIZE
      case 272: // LANGUAGE_SYM
      case 273: // LAST_SYM
      case 276: // LEAVES
      case 279: // LESS_SYM
      case 280: // LEVEL_SYM
      case 281: // LEX_HOSTNAME
      case 286: // LINESTRING_SYM
      case 287: // LIST_SYM
      case 289: // LOCAL_SYM
      case 291: // LOCKS_SYM
      case 293: // LOGFILE_SYM
      case 294: // LOGS_SYM
      case 297: // LONG_NUM
      case 302: // MASTER_AUTO_POSITION_SYM
      case 304: // MASTER_CONNECT_RETRY_SYM
      case 305: // MASTER_DELAY_SYM
      case 306: // MASTER_HOST_SYM
      case 307: // MASTER_LOG_FILE_SYM
      case 308: // MASTER_LOG_POS_SYM
      case 309: // MASTER_PASSWORD_SYM
      case 310: // MASTER_PORT_SYM
      case 311: // MASTER_RETRY_COUNT_SYM
      case 312: // MASTER_SERVER_ID_SYM
      case 313: // MASTER_SSL_CAPATH_SYM
      case 314: // MASTER_TLS_VERSION_SYM
      case 315: // MASTER_SSL_CA_SYM
      case 316: // MASTER_SSL_CERT_SYM
      case 317: // MASTER_SSL_CIPHER_SYM
      case 318: // MASTER_SSL_CRL_SYM
      case 319: // MASTER_SSL_CRLPATH_SYM
      case 320: // MASTER_SSL_KEY_SYM
      case 321: // MASTER_SSL_SYM
      case 323: // MASTER_SYM
      case 324: // MASTER_USER_SYM
      case 325: // MASTER_HEARTBEAT_PERIOD_SYM
      case 327: // MAX_CONNECTIONS_PER_HOUR
      case 328: // MAX_QUERIES_PER_HOUR
      case 329: // MAX_ROWS
      case 330: // MAX_SIZE_SYM
      case 332: // MAX_UPDATES_PER_HOUR
      case 333: // MAX_USER_CONNECTIONS_SYM
      case 338: // MEDIUM_SYM
      case 339: // MEMORY_SYM
      case 340: // MERGE_SYM
      case 341: // MESSAGE_TEXT_SYM
      case 342: // MICROSECOND_SYM
      case 343: // MIGRATE_SYM
      case 346: // MINUTE_SYM
      case 347: // MIN_ROWS
      case 349: // MODE_SYM
      case 351: // MODIFY_SYM
      case 353: // MONTH_SYM
      case 354: // MULTILINESTRING_SYM
      case 355: // MULTIPOINT_SYM
      case 356: // MULTIPOLYGON_SYM
      case 357: // MUTEX_SYM
      case 358: // MYSQL_ERRNO_SYM
      case 359: // NAMES_SYM
      case 360: // NAME_SYM
      case 361: // NATIONAL_SYM
      case 364: // NCHAR_SYM
      case 365: // NDBCLUSTER_SYM
      case 368: // NEVER_SYM
      case 369: // NEW_SYM
      case 370: // NEXT_SYM
      case 371: // NODEGROUP_SYM
      case 372: // NONE_SYM
      case 376: // NO_SYM
      case 377: // NO_WAIT_SYM
      case 380: // NUM
      case 381: // NUMBER_SYM
      case 383: // NVARCHAR_SYM
      case 384: // OFFSET_SYM
      case 386: // ONE_SYM
      case 387: // ONLY_SYM
      case 388: // OPEN_SYM
      case 391: // OPTIONS_SYM
      case 401: // OWNER_SYM
      case 402: // PACK_KEYS_SYM
      case 403: // PAGE_SYM
      case 405: // PARSER_SYM
      case 407: // PARTIAL
      case 409: // PARTITIONS_SYM
      case 410: // PARTITIONING_SYM
      case 411: // PASSWORD
      case 412: // PHASE_SYM
      case 413: // PLUGIN_DIR_SYM
      case 414: // PLUGIN_SYM
      case 415: // PLUGINS_SYM
      case 416: // "."
      case 417: // POLYGON_SYM
      case 418: // PORT_SYM
      case 420: // PRECEDES_SYM
      case 422: // PREPARE_SYM
      case 423: // PRESERVE_SYM
      case 424: // PREV_SYM
      case 426: // PRIVILEGES
      case 428: // PROCESS
      case 429: // PROCESSLIST_SYM
      case 430: // PROFILE_SYM
      case 431: // PROFILES_SYM
      case 432: // PROXY_SYM
      case 434: // QUARTER_SYM
      case 435: // QUERY_SYM
      case 436: // QUICK
      case 439: // READ_ONLY_SYM
      case 443: // REBUILD_SYM
      case 444: // RECOVER_SYM
      case 446: // REDO_BUFFER_SIZE_SYM
      case 447: // REDUNDANT_SYM
      case 450: // RELAY
      case 451: // RELAYLOG_SYM
      case 452: // RELAY_LOG_FILE_SYM
      case 453: // RELAY_LOG_POS_SYM
      case 454: // RELAY_THREAD
      case 456: // RELOAD
      case 457: // REMOVE_SYM
      case 459: // REORGANIZE_SYM
      case 460: // REPAIR
      case 461: // REPEATABLE_SYM
      case 464: // REPLICATION
      case 465: // REPLICATE_DO_DB
      case 466: // REPLICATE_IGNORE_DB
      case 467: // REPLICATE_DO_TABLE
      case 468: // REPLICATE_IGNORE_TABLE
      case 469: // REPLICATE_WILD_DO_TABLE
      case 470: // REPLICATE_WILD_IGNORE_TABLE
      case 471: // REPLICATE_REWRITE_DB
      case 473: // RESET_SYM
      case 475: // RESOURCES
      case 476: // RESTORE_SYM
      case 478: // RESUME_SYM
      case 479: // RETURNED_SQLSTATE_SYM
      case 480: // RETURNS_SYM
      case 482: // REVERSE_SYM
      case 485: // ROLLBACK_SYM
      case 486: // ROLLUP_SYM
      case 487: // ROTATE_SYM
      case 488: // ROUTINE_SYM
      case 490: // ROW_FORMAT_SYM
      case 492: // ROW_COUNT_SYM
      case 493: // RTREE_SYM
      case 494: // SAVEPOINT_SYM
      case 495: // SCHEDULE_SYM
      case 496: // SCHEMA_NAME_SYM
      case 499: // SECOND_SYM
      case 500: // SECURITY_SYM
      case 504: // SERIALIZABLE_SYM
      case 505: // SERIAL_SYM
      case 506: // SESSION_SYM
      case 507: // SERVER_SYM
      case 511: // SHARE_SYM
      case 512: // SHARES_SYM
      case 516: // SHUTDOWN
      case 518: // SIGNED_SYM
      case 519: // SIMPLE_SYM
      case 520: // SLAVE
      case 521: // SLOW
      case 523: // SNAPSHOT_SYM
      case 524: // SOCKET_SYM
      case 525: // SONAME_SYM
      case 526: // SOUNDS_SYM
      case 527: // SOURCE_SYM
      case 533: // SQL_AFTER_GTIDS
      case 534: // SQL_AFTER_MTS_GAPS
      case 535: // SQL_BEFORE_GTIDS
      case 537: // SQL_BUFFER_RESULT
      case 540: // SQL_NO_CACHE_SYM
      case 543: // SQL_THREAD
      case 545: // STACKED_SYM
      case 547: // STARTS_SYM
      case 548: // START_SYM
      case 549: // STATS_AUTO_RECALC_SYM
      case 550: // STATS_PERSISTENT_SYM
      case 551: // STATS_SAMPLE_PAGES_SYM
      case 552: // STATUS_SYM
      case 555: // STOP_SYM
      case 556: // STORAGE_SYM
      case 559: // STRING_SYM
      case 560: // SUBCLASS_ORIGIN_SYM
      case 561: // SUBDATE_SYM
      case 562: // SUBJECT_SYM
      case 563: // SUBPARTITIONS_SYM
      case 564: // SUBPARTITION_SYM
      case 567: // SUPER_SYM
      case 568: // SUSPEND_SYM
      case 569: // SWAPS_SYM
      case 570: // SWITCHES_SYM
      case 572: // TABLES
      case 573: // VIEWS
      case 574: // TABLESPACE_SYM
      case 577: // TABLE_CHECKSUM_SYM
      case 578: // TABLE_NAME_SYM
      case 579: // TEMPORARY
      case 580: // TEMPTABLE_SYM
      case 582: // TEXT_STRING
      case 583: // TEXT_SYM
      case 584: // THAN_SYM
      case 586: // TIMESTAMP_SYM
      case 587: // TIMESTAMP_ADD
      case 588: // TIMESTAMP_DIFF
      case 589: // TIME_SYM
      case 595: // TRANSACTION_SYM
      case 596: // TRIGGERS_SYM
      case 600: // TRUNCATE_SYM
      case 601: // TYPES_SYM
      case 602: // TYPE_SYM
      case 604: // ULONGLONG_NUM
      case 605: // UNCOMMITTED_SYM
      case 606: // UNDEFINED_SYM
      case 608: // UNDOFILE_SYM
      case 609: // UNDO_BUFFER_SIZE_SYM
      case 611: // UNICODE_SYM
      case 612: // UNINSTALL_SYM
      case 615: // UNKNOWN_SYM
      case 618: // UNTIL_SYM
      case 620: // UPGRADE_SYM
      case 622: // USER
      case 623: // USE_FRM
      case 629: // VALIDATION_SYM
      case 631: // VALUE_SYM
      case 632: // VARBINARY_SYM
      case 634: // VARIABLES
      case 639: // VIEW_SYM
      case 641: // WAIT_SYM
      case 642: // WARNINGS
      case 643: // WEEK_SYM
      case 644: // WEIGHT_STRING_SYM
      case 651: // WITHOUT_SYM
      case 652: // WORK_SYM
      case 653: // WRAPPER_SYM
      case 655: // X509_SYM
      case 656: // XA_SYM
      case 657: // XID_SYM
      case 658: // XML_SYM
      case 661: // YEAR_SYM
      case 667: // PERSIST_SYM
      case 668: // ROLE_SYM
      case 669: // ADMIN_SYM
      case 670: // INVISIBLE_SYM
      case 671: // VISIBLE_SYM
      case 673: // COMPONENT_SYM
      case 682: // SKIP_SYM
      case 683: // LOCKED_SYM
      case 684: // NOWAIT_SYM
      case 686: // PERSIST_ONLY_SYM
      case 687: // HISTOGRAM_SYM
      case 688: // BUCKETS_SYM
      case 689: // OBSOLETE_TOKEN_930
      case 690: // CLONE_SYM
      case 693: // EXCLUDE_SYM
      case 695: // FOLLOWING_SYM
      case 702: // NULLS_SYM
      case 703: // OTHERS_SYM
      case 706: // PRECEDING_SYM
      case 708: // RESPECT_SYM
      case 710: // TIES_SYM
      case 711: // UNBOUNDED_SYM
      case 715: // NESTED_SYM
      case 716: // ORDINALITY_SYM
      case 717: // PATH_SYM
      case 718: // HISTORY_SYM
      case 719: // REUSE_SYM
      case 720: // SRID_SYM
      case 721: // THREAD_PRIORITY_SYM
      case 722: // RESOURCE_SYM
      case 724: // VCPU_SYM
      case 725: // MASTER_PUBLIC_KEY_PATH_SYM
      case 726: // GET_MASTER_PUBLIC_KEY_SYM
      case 727: // RESTART_SYM
      case 728: // DEFINITION_SYM
      case 729: // DESCRIPTION_SYM
      case 730: // ORGANIZATION_SYM
      case 731: // REFERENCE_SYM
      case 732: // ACTIVE_SYM
      case 733: // INACTIVE_SYM
      case 735: // OPTIONAL_SYM
      case 736: // SECONDARY_SYM
      case 737: // SECONDARY_ENGINE_SYM
      case 738: // SECONDARY_LOAD_SYM
      case 739: // SECONDARY_UNLOAD_SYM
      case 740: // RETAIN_SYM
      case 741: // OLD_SYM
      case 742: // ENFORCED_SYM
      case 743: // OJ_SYM
      case 744: // NETWORK_NAMESPACE_SYM
      case 794: // select_alias
      case 864: // opt_constraint_name
      case 1024: // execute_var_ident
      case 1027: // text_literal
      case 1028: // text_string
      case 1078: // opt_index_name_and_type
      case 1083: // key_part
      case 1085: // key_part_with_expression
      case 1086: // opt_ident
      case 1087: // opt_component
      case 1088: // charset_name
      case 1108: // internal_variable_name
      case 1139: // interval
      case 1140: // interval_time_stamp
      case 1143: // opt_table_alias
      case 1163: // opt_ordering_direction
      case 1164: // ordering_direction
      case 1168: // limit_option
      case 1177: // IDENT_sys
      case 1178: // TEXT_STRING_sys
      case 1179: // TEXT_STRING_literal
      case 1180: // TEXT_STRING_filesystem
      case 1181: // TEXT_STRING_password
      case 1182: // TEXT_STRING_hash
      case 1183: // ident
      case 1184: // ident_or_text
      case 1190: // nchar
      case 1191: // varchar
      case 1192: // nvarchar
      case 1193: // int_type
      case 1194: // real_type
      case 1196: // numeric_type
      case 1199: // type_datetime_precision
      case 1201: // field_length
      case 1202: // opt_field_length
      case 1212: // ident_keyword
      case 1214: // ident_keywords_ambiguous_2_labels
      case 1217: // ident_keywords_unambiguous
      case 1218: // lvalue_keyword
      case 1220: // TEXT_STRING_sys_nonewline
      case 1255: // opt_describe_column
      case 1264: // opt_db
      case 1285: // lvalue_ident
      case 1288: // password
      case 1342: // opt_load_data_charset
      case 1349: // opt_xml_rows_identified_by
        value.copy< string > (that.value);
        break;

      case 1340: // load_data_lock
        value.copy< thr_lock_type > (that.value);
        break;

      case 793: // select_item
        value.copy< tuple<Expression, string> > (that.value);
        break;

      case 998: // opt_num_parts
      case 1002: // opt_num_subparts
      case 1271: // ulong_num
      case 1350: // opt_ignore_lines
        value.copy< ulong > (that.value);
        break;

      case 989: // size_number
      case 1272: // real_ulong_num
      case 1273: // ulonglong_num
      case 1274: // real_ulonglong_num
        value.copy< ulonglong > (that.value);
        break;

      case 1008: // part_values_in
      case 1009: // part_value_list
        value.copy< vector< PartValueItemsSPtr > > (that.value);
        break;

      case 812: // opt_udf_expr_list
      case 813: // udf_expr_list
      case 1112: // opt_expr_list
      case 1114: // expr_list
      case 1158: // group_list
      case 1304: // insert_from_constructor
      case 1327: // fields
        value.copy< vector<Expression> > (that.value);
        break;

      case 787: // from_tables
      case 788: // table_reference_list
        value.copy< vector<JoinStructurePointer> > (that.value);
        break;

      case 1162: // order_list
        value.copy< vector<OrderItem> > (that.value);
        break;

      case 1022: // execute_using
      case 1023: // execute_var_list
      case 1082: // key_list
      case 1084: // key_list_with_expression
      case 1151: // opt_derived_column_list
      case 1152: // simple_ident_list
        value.copy< vector<string> > (that.value);
        break;

      case 1119: // when_list
        value.copy< vector<tuple<Expression, Expression>> > (that.value);
        break;

      default:
        break;
    }

    location = that.location;
    return *this;
  }

  Parser::stack_symbol_type&
  Parser::stack_symbol_type::operator= (stack_symbol_type& that)
  {
    state = that.state;
    switch (that.type_get ())
    {
      case 775: // drop_table_stmt
      case 776: // drop_user_stmt
      case 777: // drop_view_stmt
      case 778: // drop_database_stmt
      case 827: // create
      case 871: // create_table_stmt
      case 875: // view_or_trigger_or_sp_or_event
      case 877: // no_definer_tail
      case 946: // view_tail
      case 1328: // use
        value.move< AbstractCommandPointer > (that.value);
        break;

      case 837: // user
      case 839: // create_user
        value.move< AccountSPtr > (that.value);
        break;

      case 1329: // kill
      case 1336: // shutdown_stmt
        value.move< AdminStmtStructurePtr > (that.value);
        break;

      case 1110: // cast_type
        value.move< CastType > (that.value);
        break;

      case 1204: // opt_column_attribute_list
      case 1205: // column_attribute_list
        value.move< ColAttrList > (that.value);
        break;

      case 990: // opt_create_table_options_etc
        value.move< CreateTableOptions > (that.value);
        break;

      case 1320: // delete_stmt
        value.move< DeleteStructurePtr > (that.value);
        break;

      case 796: // expr
      case 797: // bool_pri
      case 798: // predicate
      case 799: // bit_expr
      case 806: // simple_expr
      case 807: // case_expr
      case 808: // function_call_keyword
      case 809: // function_call_nonkeyword
      case 810: // function_call_conflict
      case 811: // function_call_generic
      case 814: // udf_expr
      case 815: // set_function_specification
      case 817: // sum_expr
      case 823: // row_subquery
      case 1029: // param_marker
      case 1057: // variable
      case 1109: // set_expr_or_default
      case 1111: // in_sum_expr
      case 1117: // opt_expr
      case 1118: // opt_else
      case 1145: // opt_where_clause
      case 1146: // opt_where_clause_expr
      case 1147: // opt_having_clause
      case 1170: // table_wild
      case 1172: // grouping_expr
      case 1200: // func_datetime_precision
      case 1210: // now_or_signed_literal
      case 1211: // now
      case 1311: // expr_or_default
        value.move< Expression > (that.value);
        break;

      case 1185: // field_def
        value.move< Field_def_ptr > (that.value);
        break;

      case 868: // field_options
      case 869: // field_opt_list
      case 870: // field_option
        value.move< Field_option > (that.value);
        break;

      case 1343: // opt_field_term
      case 1344: // field_term_list
      case 1345: // field_term
        value.move< Field_separators > (that.value);
        break;

      case 785: // opt_from_clause
      case 786: // from_clause
        value.move< FromPartStructurePointer > (that.value);
        break;

      case 1157: // opt_group_clause
        value.move< GroupbyStructurePointer > (that.value);
        break;

      case 1299: // insert_stmt
        value.move< InsertStructurePtr > (that.value);
        break;

      case 1120: // table_reference
      case 1121: // joined_table
      case 1129: // table_factor
      case 1131: // single_table_parens
      case 1132: // single_table
      case 1133: // joined_table_parens
      case 1134: // derived_table
        value.move< JoinStructurePointer > (that.value);
        break;

      case 1122: // natural_join_type
      case 1123: // inner_join_type
      case 1124: // outer_join_type
        value.move< JoinType > (that.value);
        break;

      case 1165: // opt_limit_clause
      case 1166: // limit_clause
      case 1167: // limit_options
      case 1321: // opt_simple_limit
        value.move< LimitStructurePointer > (that.value);
        break;

      case 1346: // opt_line_term
      case 1347: // line_term_list
      case 1348: // line_term
        value.move< Line_separators > (that.value);
        break;

      case 1030: // signed_literal
      case 1031: // literal
      case 1032: // NUM_literal
        value.move< Literal > (that.value);
        break;

      case 1337: // load_stmt
        value.move< LoadDataStructurePtr > (that.value);
        break;

      case 844: // duplicate
      case 1341: // opt_duplicate
        value.move< On_duplicate > (that.value);
        break;

      case 1171: // order_expr
        value.move< OrderItem > (that.value);
        break;

      case 1160: // opt_order_clause
      case 1161: // order_clause
        value.move< OrderbyStructurePointer > (that.value);
        break;

      case 1188: // type
        value.move< PT_ColumnType_ptr > (that.value);
        break;

      case 1206: // column_attribute
        value.move< PT_column_attr_base_ptr > (that.value);
        break;

      case 1106: // option_value_following_option_type
        value.move< PT_option_value_following_option_type_ptr > (that.value);
        break;

      case 1005: // part_definition
        value.move< PartDef > (that.value);
        break;

      case 1003: // opt_part_defs
      case 1004: // part_def_list
        value.move< PartDefList > (that.value);
        break;

      case 995: // part_type_def
        value.move< PartTypeDef > (that.value);
        break;

      case 1012: // part_value_item
        value.move< PartValueItem > (that.value);
        break;

      case 1007: // part_func_max
      case 1010: // part_value_item_list_paren
      case 1011: // part_value_item_list
        value.move< PartValueItemsSPtr > (that.value);
        break;

      case 1006: // opt_part_values
        value.move< PartValuesSPtr > (that.value);
        break;

      case 991: // opt_create_partitioning_etc
      case 994: // partition_clause
        value.move< PartitionStructureSPtr > (that.value);
        break;

      case 1197: // float_options
      case 1198: // precision
      case 1203: // opt_precision
        value.move< Precision_ptr > (that.value);
        break;

      case 1020: // prepare_src
        value.move< PrepareSrcPtr > (that.value);
        break;

      case 1019: // prepare
      case 1021: // execute
      case 1025: // deallocate
        value.move< PreparedStmtStructurePtr > (that.value);
        break;

      case 1259: // show_engine_param
        value.move< SHOW_CMD > (that.value);
        break;

      case 1169: // insert_ident
      case 1173: // simple_ident
      case 1174: // simple_ident_nospvar
      case 1175: // simple_ident_q
        value.move< SQLIdentPtr > (that.value);
        break;

      case 792: // select_item_list
        value.move< SelectPartStructurePointer > (that.value);
        break;

      case 779: // select_stmt
      case 780: // query_expression
      case 781: // query_expression_body
      case 782: // query_expression_parens
      case 783: // query_primary
      case 784: // query_specification
      case 824: // table_subquery
      case 825: // subquery
      case 947: // view_select
      case 1298: // query_expression_or_parens
      case 1317: // explain_stmt
        value.move< SelectStructurePointer > (that.value);
        break;

      case 822: // union_option
        value.move< SetOperationType > (that.value);
        break;

      case 1101: // option_value
      case 1107: // option_value_no_option_type
        value.move< SetStructurePtr > (that.value);
        break;

      case 1256: // describe_stmt
      case 1257: // show
      case 1258: // show_param
        value.move< ShowStructurePtr > (that.value);
        break;

      case 1267: // opt_show_cmd_type
        value.move< Show_cmd_type > (that.value);
        break;

      case 856: // opt_table_list
      case 857: // table_list
      case 1325: // table_alias_ref_list
        value.move< TABLE_LIST > (that.value);
        break;

      case 859: // table_element
      case 860: // column_def
      case 862: // table_constraint_def
        value.move< TableElementDescriptionPtr > (that.value);
        break;

      case 1358: // start
      case 1362: // begin_stmt
      case 1367: // commit
      case 1368: // rollback
        value.move< TransactionStructurePtr > (that.value);
        break;

      case 1313: // update_stmt
        value.move< UpdateStructurePtr > (that.value);
        break;

      case 1308: // row_value
      case 1309: // opt_values
      case 1310: // values
        value.move< VALUES > (that.value);
        break;

      case 1058: // variable_aux
        value.move< VariableStructurePtr > (that.value);
        break;

      case 1261: // opt_wild_or_where
      case 1262: // opt_wild_or_where_for_show
        value.move< WildOrWhere_ptr > (that.value);
        break;

      case 818: // opt_distinct
      case 845: // opt_if_not_exists
      case 865: // opt_not
      case 872: // if_exists
      case 873: // opt_temporary
      case 996: // opt_linear
      case 1080: // visibility
      case 1265: // opt_full
      case 1266: // opt_extended
      case 1301: // opt_ignore
      case 1339: // opt_local
        value.move< bool > (that.value);
        break;

      case 1338: // data_or_xml
        value.move< enum_filetype > (that.value);
        break;

      case 1102: // option_type
      case 1103: // opt_var_type
      case 1104: // opt_var_ident_type
      case 1105: // opt_set_var_ident_type
        value.move< enum_var_type > (that.value);
        break;

      case 1364: // opt_chain
      case 1365: // opt_release
        value.move< enum_yes_no_unknown > (that.value);
        break;

      case 789: // select_options
      case 790: // select_option_list
      case 791: // select_option
      case 804: // comp_op
      case 826: // query_spec_option
      case 1330: // kill_option
        value.move< int > (that.value);
        break;

      case 1064: // constraint_key_type
        value.move< keytype > (that.value);
        break;

      case 1315: // update_elem
        value.move< pair< BiaodashiPointer, BiaodashiPointer > > (that.value);
        break;

      case 1303: // insert_query_expression
        value.move< pair< EXPR_LIST, SelectStructurePointer > > (that.value);
        break;

      case 1207: // encode_type
        value.move< pair< aries::EncodeType, string > > (that.value);
        break;

      case 861: // opt_references
      case 1060: // references
        value.move< pair< shared_ptr<BasicRel>, vector< string > > > (that.value);
        break;

      case 1312: // opt_insert_update_list
      case 1314: // update_list
        value.move< pair< vector< BiaodashiPointer >, vector< BiaodashiPointer > >  > (that.value);
        break;

      case 838: // user_list
      case 840: // create_user_list
        value.move< shared_ptr< vector< AccountSPtr > > > (that.value);
        break;

      case 1176: // table_ident
      case 1242: // sp_name
      case 1326: // table_ident_opt_wild
        value.move< shared_ptr<BasicRel> > (that.value);
        break;

      case 1098: // option_value_list_continued
      case 1099: // start_option_value_list_following_option_type
      case 1100: // option_value_list
      case 1286: // set
      case 1287: // start_option_value_list
        value.move< shared_ptr<vector<SetStructurePtr>> > (that.value);
        break;

      case 858: // table_element_list
        value.move< shared_ptr<vector<TableElementDescriptionPtr>> > (that.value);
        break;

      case 5: // ACCOUNT_SYM
      case 6: // ACTION
      case 8: // ADDDATE_SYM
      case 9: // AFTER_SYM
      case 10: // AGAINST
      case 11: // AGGREGATE_SYM
      case 12: // ALGORITHM_SYM
      case 15: // ALWAYS_SYM
      case 20: // ANY_SYM
      case 22: // ASC
      case 23: // ASCII_SYM
      case 25: // AT_SYM
      case 26: // AUTOEXTEND_SIZE_SYM
      case 27: // AUTO_INC
      case 28: // AVG_ROW_LENGTH
      case 29: // AVG_SYM
      case 30: // BACKUP_SYM
      case 32: // BEGIN_SYM
      case 36: // BINLOG_SYM
      case 40: // BIT_SYM
      case 43: // BLOCK_SYM
      case 44: // BOOLEAN_SYM
      case 45: // BOOL_SYM
      case 47: // BTREE_SYM
      case 49: // BYTE_SYM
      case 50: // CACHE_SYM
      case 53: // CASCADED
      case 56: // CATALOG_NAME_SYM
      case 57: // CHAIN_SYM
      case 59: // CHANGED
      case 60: // CHANNEL_SYM
      case 61: // CHARSET
      case 63: // CHECKSUM_SYM
      case 65: // CIPHER_SYM
      case 66: // CLASS_ORIGIN_SYM
      case 67: // CLIENT_SYM
      case 68: // CLOSE_SYM
      case 69: // COALESCE
      case 70: // CODE_SYM
      case 72: // COLLATION_SYM
      case 73: // COLUMNS
      case 75: // COLUMN_FORMAT_SYM
      case 76: // COLUMN_NAME_SYM
      case 77: // COMMENT_SYM
      case 78: // COMMITTED_SYM
      case 79: // COMMIT_SYM
      case 80: // COMPACT_SYM
      case 81: // COMPLETION_SYM
      case 82: // COMPRESSED_SYM
      case 83: // COMPRESSION_SYM
      case 84: // ENCRYPTION_SYM
      case 85: // CONCURRENT
      case 88: // CONNECTION_SYM
      case 89: // CONSISTENT_SYM
      case 91: // CONSTRAINT_CATALOG_SYM
      case 92: // CONSTRAINT_NAME_SYM
      case 93: // CONSTRAINT_SCHEMA_SYM
      case 94: // CONTAINS_SYM
      case 95: // CONTEXT_SYM
      case 99: // CPU_SYM
      case 100: // CREATE
      case 104: // CURRENT_SYM
      case 107: // CURSOR_NAME_SYM
      case 111: // DATAFILE_SYM
      case 112: // DATA_SYM
      case 113: // DATETIME_SYM
      case 116: // DATE_SYM
      case 121: // DAY_SYM
      case 122: // DEALLOCATE_SYM
      case 123: // DECIMAL_NUM
      case 128: // DEFAULT_AUTH_SYM
      case 129: // DEFINER_SYM
      case 131: // DELAY_KEY_WRITE_SYM
      case 133: // DESC
      case 137: // DIAGNOSTICS_SYM
      case 138: // BYTEDICT_SYM
      case 139: // SHORTDICT_SYM
      case 140: // INTDICT_SYM
      case 142: // DIRECTORY_SYM
      case 143: // DISABLE_SYM
      case 144: // DISCARD_SYM
      case 145: // DISK_SYM
      case 149: // DO_SYM
      case 152: // DUMPFILE
      case 153: // DUPLICATE_SYM
      case 154: // DYNAMIC_SYM
      case 158: // ENABLE_SYM
      case 161: // END
      case 162: // ENDS_SYM
      case 163: // ENGINES_SYM
      case 164: // ENGINE_SYM
      case 165: // ENUM_SYM
      case 168: // ERROR_SYM
      case 169: // ERRORS
      case 171: // ESCAPE_SYM
      case 172: // EVENTS_SYM
      case 173: // EVENT_SYM
      case 174: // EVERY_SYM
      case 175: // EXCHANGE_SYM
      case 176: // EXECUTE_SYM
      case 179: // EXPANSION_SYM
      case 180: // EXPIRE_SYM
      case 181: // EXPORT_SYM
      case 182: // EXTENDED_SYM
      case 183: // EXTENT_SIZE_SYM
      case 186: // FAST_SYM
      case 187: // FAULTS_SYM
      case 189: // FILE_SYM
      case 190: // FILE_BLOCK_SIZE_SYM
      case 191: // FILTER_SYM
      case 192: // FIRST_SYM
      case 193: // FIXED_SYM
      case 194: // FLOAT_NUM
      case 196: // FLUSH_SYM
      case 197: // FOLLOWS_SYM
      case 201: // FORMAT_SYM
      case 202: // FOUND_SYM
      case 204: // FULL
      case 208: // GENERAL
      case 210: // GROUP_REPLICATION
      case 211: // GEOMETRYCOLLECTION_SYM
      case 212: // GEOMETRY_SYM
      case 213: // GET_FORMAT
      case 215: // GLOBAL_SYM
      case 217: // GRANTS
      case 221: // HANDLER_SYM
      case 222: // HASH_SYM
      case 224: // HELP_SYM
      case 225: // HEX_NUM
      case 227: // HOST_SYM
      case 228: // HOSTS_SYM
      case 232: // HOUR_SYM
      case 233: // IDENT
      case 234: // IDENTIFIED_SYM
      case 238: // IGNORE_SERVER_IDS_SYM
      case 239: // IMPORT
      case 240: // INDEXES
      case 243: // INITIAL_SIZE_SYM
      case 248: // INSERT_METHOD
      case 249: // INSTANCE_SYM
      case 250: // INSTALL_SYM
      case 251: // INTERVAL_SYM
      case 255: // INVOKER_SYM
      case 259: // IO_SYM
      case 260: // IPC_SYM
      case 262: // ISOLATION
      case 263: // ISSUER_SYM
      case 267: // JSON_SYM
      case 269: // KEY_BLOCK_SIZE
      case 272: // LANGUAGE_SYM
      case 273: // LAST_SYM
      case 276: // LEAVES
      case 279: // LESS_SYM
      case 280: // LEVEL_SYM
      case 281: // LEX_HOSTNAME
      case 286: // LINESTRING_SYM
      case 287: // LIST_SYM
      case 289: // LOCAL_SYM
      case 291: // LOCKS_SYM
      case 293: // LOGFILE_SYM
      case 294: // LOGS_SYM
      case 297: // LONG_NUM
      case 302: // MASTER_AUTO_POSITION_SYM
      case 304: // MASTER_CONNECT_RETRY_SYM
      case 305: // MASTER_DELAY_SYM
      case 306: // MASTER_HOST_SYM
      case 307: // MASTER_LOG_FILE_SYM
      case 308: // MASTER_LOG_POS_SYM
      case 309: // MASTER_PASSWORD_SYM
      case 310: // MASTER_PORT_SYM
      case 311: // MASTER_RETRY_COUNT_SYM
      case 312: // MASTER_SERVER_ID_SYM
      case 313: // MASTER_SSL_CAPATH_SYM
      case 314: // MASTER_TLS_VERSION_SYM
      case 315: // MASTER_SSL_CA_SYM
      case 316: // MASTER_SSL_CERT_SYM
      case 317: // MASTER_SSL_CIPHER_SYM
      case 318: // MASTER_SSL_CRL_SYM
      case 319: // MASTER_SSL_CRLPATH_SYM
      case 320: // MASTER_SSL_KEY_SYM
      case 321: // MASTER_SSL_SYM
      case 323: // MASTER_SYM
      case 324: // MASTER_USER_SYM
      case 325: // MASTER_HEARTBEAT_PERIOD_SYM
      case 327: // MAX_CONNECTIONS_PER_HOUR
      case 328: // MAX_QUERIES_PER_HOUR
      case 329: // MAX_ROWS
      case 330: // MAX_SIZE_SYM
      case 332: // MAX_UPDATES_PER_HOUR
      case 333: // MAX_USER_CONNECTIONS_SYM
      case 338: // MEDIUM_SYM
      case 339: // MEMORY_SYM
      case 340: // MERGE_SYM
      case 341: // MESSAGE_TEXT_SYM
      case 342: // MICROSECOND_SYM
      case 343: // MIGRATE_SYM
      case 346: // MINUTE_SYM
      case 347: // MIN_ROWS
      case 349: // MODE_SYM
      case 351: // MODIFY_SYM
      case 353: // MONTH_SYM
      case 354: // MULTILINESTRING_SYM
      case 355: // MULTIPOINT_SYM
      case 356: // MULTIPOLYGON_SYM
      case 357: // MUTEX_SYM
      case 358: // MYSQL_ERRNO_SYM
      case 359: // NAMES_SYM
      case 360: // NAME_SYM
      case 361: // NATIONAL_SYM
      case 364: // NCHAR_SYM
      case 365: // NDBCLUSTER_SYM
      case 368: // NEVER_SYM
      case 369: // NEW_SYM
      case 370: // NEXT_SYM
      case 371: // NODEGROUP_SYM
      case 372: // NONE_SYM
      case 376: // NO_SYM
      case 377: // NO_WAIT_SYM
      case 380: // NUM
      case 381: // NUMBER_SYM
      case 383: // NVARCHAR_SYM
      case 384: // OFFSET_SYM
      case 386: // ONE_SYM
      case 387: // ONLY_SYM
      case 388: // OPEN_SYM
      case 391: // OPTIONS_SYM
      case 401: // OWNER_SYM
      case 402: // PACK_KEYS_SYM
      case 403: // PAGE_SYM
      case 405: // PARSER_SYM
      case 407: // PARTIAL
      case 409: // PARTITIONS_SYM
      case 410: // PARTITIONING_SYM
      case 411: // PASSWORD
      case 412: // PHASE_SYM
      case 413: // PLUGIN_DIR_SYM
      case 414: // PLUGIN_SYM
      case 415: // PLUGINS_SYM
      case 416: // "."
      case 417: // POLYGON_SYM
      case 418: // PORT_SYM
      case 420: // PRECEDES_SYM
      case 422: // PREPARE_SYM
      case 423: // PRESERVE_SYM
      case 424: // PREV_SYM
      case 426: // PRIVILEGES
      case 428: // PROCESS
      case 429: // PROCESSLIST_SYM
      case 430: // PROFILE_SYM
      case 431: // PROFILES_SYM
      case 432: // PROXY_SYM
      case 434: // QUARTER_SYM
      case 435: // QUERY_SYM
      case 436: // QUICK
      case 439: // READ_ONLY_SYM
      case 443: // REBUILD_SYM
      case 444: // RECOVER_SYM
      case 446: // REDO_BUFFER_SIZE_SYM
      case 447: // REDUNDANT_SYM
      case 450: // RELAY
      case 451: // RELAYLOG_SYM
      case 452: // RELAY_LOG_FILE_SYM
      case 453: // RELAY_LOG_POS_SYM
      case 454: // RELAY_THREAD
      case 456: // RELOAD
      case 457: // REMOVE_SYM
      case 459: // REORGANIZE_SYM
      case 460: // REPAIR
      case 461: // REPEATABLE_SYM
      case 464: // REPLICATION
      case 465: // REPLICATE_DO_DB
      case 466: // REPLICATE_IGNORE_DB
      case 467: // REPLICATE_DO_TABLE
      case 468: // REPLICATE_IGNORE_TABLE
      case 469: // REPLICATE_WILD_DO_TABLE
      case 470: // REPLICATE_WILD_IGNORE_TABLE
      case 471: // REPLICATE_REWRITE_DB
      case 473: // RESET_SYM
      case 475: // RESOURCES
      case 476: // RESTORE_SYM
      case 478: // RESUME_SYM
      case 479: // RETURNED_SQLSTATE_SYM
      case 480: // RETURNS_SYM
      case 482: // REVERSE_SYM
      case 485: // ROLLBACK_SYM
      case 486: // ROLLUP_SYM
      case 487: // ROTATE_SYM
      case 488: // ROUTINE_SYM
      case 490: // ROW_FORMAT_SYM
      case 492: // ROW_COUNT_SYM
      case 493: // RTREE_SYM
      case 494: // SAVEPOINT_SYM
      case 495: // SCHEDULE_SYM
      case 496: // SCHEMA_NAME_SYM
      case 499: // SECOND_SYM
      case 500: // SECURITY_SYM
      case 504: // SERIALIZABLE_SYM
      case 505: // SERIAL_SYM
      case 506: // SESSION_SYM
      case 507: // SERVER_SYM
      case 511: // SHARE_SYM
      case 512: // SHARES_SYM
      case 516: // SHUTDOWN
      case 518: // SIGNED_SYM
      case 519: // SIMPLE_SYM
      case 520: // SLAVE
      case 521: // SLOW
      case 523: // SNAPSHOT_SYM
      case 524: // SOCKET_SYM
      case 525: // SONAME_SYM
      case 526: // SOUNDS_SYM
      case 527: // SOURCE_SYM
      case 533: // SQL_AFTER_GTIDS
      case 534: // SQL_AFTER_MTS_GAPS
      case 535: // SQL_BEFORE_GTIDS
      case 537: // SQL_BUFFER_RESULT
      case 540: // SQL_NO_CACHE_SYM
      case 543: // SQL_THREAD
      case 545: // STACKED_SYM
      case 547: // STARTS_SYM
      case 548: // START_SYM
      case 549: // STATS_AUTO_RECALC_SYM
      case 550: // STATS_PERSISTENT_SYM
      case 551: // STATS_SAMPLE_PAGES_SYM
      case 552: // STATUS_SYM
      case 555: // STOP_SYM
      case 556: // STORAGE_SYM
      case 559: // STRING_SYM
      case 560: // SUBCLASS_ORIGIN_SYM
      case 561: // SUBDATE_SYM
      case 562: // SUBJECT_SYM
      case 563: // SUBPARTITIONS_SYM
      case 564: // SUBPARTITION_SYM
      case 567: // SUPER_SYM
      case 568: // SUSPEND_SYM
      case 569: // SWAPS_SYM
      case 570: // SWITCHES_SYM
      case 572: // TABLES
      case 573: // VIEWS
      case 574: // TABLESPACE_SYM
      case 577: // TABLE_CHECKSUM_SYM
      case 578: // TABLE_NAME_SYM
      case 579: // TEMPORARY
      case 580: // TEMPTABLE_SYM
      case 582: // TEXT_STRING
      case 583: // TEXT_SYM
      case 584: // THAN_SYM
      case 586: // TIMESTAMP_SYM
      case 587: // TIMESTAMP_ADD
      case 588: // TIMESTAMP_DIFF
      case 589: // TIME_SYM
      case 595: // TRANSACTION_SYM
      case 596: // TRIGGERS_SYM
      case 600: // TRUNCATE_SYM
      case 601: // TYPES_SYM
      case 602: // TYPE_SYM
      case 604: // ULONGLONG_NUM
      case 605: // UNCOMMITTED_SYM
      case 606: // UNDEFINED_SYM
      case 608: // UNDOFILE_SYM
      case 609: // UNDO_BUFFER_SIZE_SYM
      case 611: // UNICODE_SYM
      case 612: // UNINSTALL_SYM
      case 615: // UNKNOWN_SYM
      case 618: // UNTIL_SYM
      case 620: // UPGRADE_SYM
      case 622: // USER
      case 623: // USE_FRM
      case 629: // VALIDATION_SYM
      case 631: // VALUE_SYM
      case 632: // VARBINARY_SYM
      case 634: // VARIABLES
      case 639: // VIEW_SYM
      case 641: // WAIT_SYM
      case 642: // WARNINGS
      case 643: // WEEK_SYM
      case 644: // WEIGHT_STRING_SYM
      case 651: // WITHOUT_SYM
      case 652: // WORK_SYM
      case 653: // WRAPPER_SYM
      case 655: // X509_SYM
      case 656: // XA_SYM
      case 657: // XID_SYM
      case 658: // XML_SYM
      case 661: // YEAR_SYM
      case 667: // PERSIST_SYM
      case 668: // ROLE_SYM
      case 669: // ADMIN_SYM
      case 670: // INVISIBLE_SYM
      case 671: // VISIBLE_SYM
      case 673: // COMPONENT_SYM
      case 682: // SKIP_SYM
      case 683: // LOCKED_SYM
      case 684: // NOWAIT_SYM
      case 686: // PERSIST_ONLY_SYM
      case 687: // HISTOGRAM_SYM
      case 688: // BUCKETS_SYM
      case 689: // OBSOLETE_TOKEN_930
      case 690: // CLONE_SYM
      case 693: // EXCLUDE_SYM
      case 695: // FOLLOWING_SYM
      case 702: // NULLS_SYM
      case 703: // OTHERS_SYM
      case 706: // PRECEDING_SYM
      case 708: // RESPECT_SYM
      case 710: // TIES_SYM
      case 711: // UNBOUNDED_SYM
      case 715: // NESTED_SYM
      case 716: // ORDINALITY_SYM
      case 717: // PATH_SYM
      case 718: // HISTORY_SYM
      case 719: // REUSE_SYM
      case 720: // SRID_SYM
      case 721: // THREAD_PRIORITY_SYM
      case 722: // RESOURCE_SYM
      case 724: // VCPU_SYM
      case 725: // MASTER_PUBLIC_KEY_PATH_SYM
      case 726: // GET_MASTER_PUBLIC_KEY_SYM
      case 727: // RESTART_SYM
      case 728: // DEFINITION_SYM
      case 729: // DESCRIPTION_SYM
      case 730: // ORGANIZATION_SYM
      case 731: // REFERENCE_SYM
      case 732: // ACTIVE_SYM
      case 733: // INACTIVE_SYM
      case 735: // OPTIONAL_SYM
      case 736: // SECONDARY_SYM
      case 737: // SECONDARY_ENGINE_SYM
      case 738: // SECONDARY_LOAD_SYM
      case 739: // SECONDARY_UNLOAD_SYM
      case 740: // RETAIN_SYM
      case 741: // OLD_SYM
      case 742: // ENFORCED_SYM
      case 743: // OJ_SYM
      case 744: // NETWORK_NAMESPACE_SYM
      case 794: // select_alias
      case 864: // opt_constraint_name
      case 1024: // execute_var_ident
      case 1027: // text_literal
      case 1028: // text_string
      case 1078: // opt_index_name_and_type
      case 1083: // key_part
      case 1085: // key_part_with_expression
      case 1086: // opt_ident
      case 1087: // opt_component
      case 1088: // charset_name
      case 1108: // internal_variable_name
      case 1139: // interval
      case 1140: // interval_time_stamp
      case 1143: // opt_table_alias
      case 1163: // opt_ordering_direction
      case 1164: // ordering_direction
      case 1168: // limit_option
      case 1177: // IDENT_sys
      case 1178: // TEXT_STRING_sys
      case 1179: // TEXT_STRING_literal
      case 1180: // TEXT_STRING_filesystem
      case 1181: // TEXT_STRING_password
      case 1182: // TEXT_STRING_hash
      case 1183: // ident
      case 1184: // ident_or_text
      case 1190: // nchar
      case 1191: // varchar
      case 1192: // nvarchar
      case 1193: // int_type
      case 1194: // real_type
      case 1196: // numeric_type
      case 1199: // type_datetime_precision
      case 1201: // field_length
      case 1202: // opt_field_length
      case 1212: // ident_keyword
      case 1214: // ident_keywords_ambiguous_2_labels
      case 1217: // ident_keywords_unambiguous
      case 1218: // lvalue_keyword
      case 1220: // TEXT_STRING_sys_nonewline
      case 1255: // opt_describe_column
      case 1264: // opt_db
      case 1285: // lvalue_ident
      case 1288: // password
      case 1342: // opt_load_data_charset
      case 1349: // opt_xml_rows_identified_by
        value.move< string > (that.value);
        break;

      case 1340: // load_data_lock
        value.move< thr_lock_type > (that.value);
        break;

      case 793: // select_item
        value.move< tuple<Expression, string> > (that.value);
        break;

      case 998: // opt_num_parts
      case 1002: // opt_num_subparts
      case 1271: // ulong_num
      case 1350: // opt_ignore_lines
        value.move< ulong > (that.value);
        break;

      case 989: // size_number
      case 1272: // real_ulong_num
      case 1273: // ulonglong_num
      case 1274: // real_ulonglong_num
        value.move< ulonglong > (that.value);
        break;

      case 1008: // part_values_in
      case 1009: // part_value_list
        value.move< vector< PartValueItemsSPtr > > (that.value);
        break;

      case 812: // opt_udf_expr_list
      case 813: // udf_expr_list
      case 1112: // opt_expr_list
      case 1114: // expr_list
      case 1158: // group_list
      case 1304: // insert_from_constructor
      case 1327: // fields
        value.move< vector<Expression> > (that.value);
        break;

      case 787: // from_tables
      case 788: // table_reference_list
        value.move< vector<JoinStructurePointer> > (that.value);
        break;

      case 1162: // order_list
        value.move< vector<OrderItem> > (that.value);
        break;

      case 1022: // execute_using
      case 1023: // execute_var_list
      case 1082: // key_list
      case 1084: // key_list_with_expression
      case 1151: // opt_derived_column_list
      case 1152: // simple_ident_list
        value.move< vector<string> > (that.value);
        break;

      case 1119: // when_list
        value.move< vector<tuple<Expression, Expression>> > (that.value);
        break;

      default:
        break;
    }

    location = that.location;
    // that is emptied.
    that.state = empty_state;
    return *this;
  }
#endif

  template <typename Base>
  void
  Parser::yy_destroy_ (const char* yymsg, basic_symbol<Base>& yysym) const
  {
    if (yymsg)
      YY_SYMBOL_PRINT (yymsg, yysym);
  }

#if ARIES_PARSERDEBUG
  template <typename Base>
  void
  Parser::yy_print_ (std::ostream& yyo,
                                     const basic_symbol<Base>& yysym) const
  {
    std::ostream& yyoutput = yyo;
    YYUSE (yyoutput);
    symbol_number_type yytype = yysym.type_get ();
#if defined __GNUC__ && ! defined __clang__ && ! defined __ICC && __GNUC__ * 100 + __GNUC_MINOR__ <= 408
    // Avoid a (spurious) G++ 4.8 warning about "array subscript is
    // below array bounds".
    if (yysym.empty ())
      std::abort ();
#endif
    yyo << (yytype < yyntokens_ ? "token" : "nterm")
        << ' ' << yytname_[yytype] << " ("
        << yysym.location << ": ";
    YYUSE (yytype);
    yyo << ')';
  }
#endif

  void
  Parser::yypush_ (const char* m, YY_MOVE_REF (stack_symbol_type) sym)
  {
    if (m)
      YY_SYMBOL_PRINT (m, sym);
    yystack_.push (YY_MOVE (sym));
  }

  void
  Parser::yypush_ (const char* m, state_type s, YY_MOVE_REF (symbol_type) sym)
  {
#if 201103L <= YY_CPLUSPLUS
    yypush_ (m, stack_symbol_type (s, std::move (sym)));
#else
    stack_symbol_type ss (s, sym);
    yypush_ (m, ss);
#endif
  }

  void
  Parser::yypop_ (int n)
  {
    yystack_.pop (n);
  }

#if ARIES_PARSERDEBUG
  std::ostream&
  Parser::debug_stream () const
  {
    return *yycdebug_;
  }

  void
  Parser::set_debug_stream (std::ostream& o)
  {
    yycdebug_ = &o;
  }


  Parser::debug_level_type
  Parser::debug_level () const
  {
    return yydebug_;
  }

  void
  Parser::set_debug_level (debug_level_type l)
  {
    yydebug_ = l;
  }
#endif // ARIES_PARSERDEBUG

  Parser::state_type
  Parser::yy_lr_goto_state_ (state_type yystate, int yysym)
  {
    int yyr = yypgoto_[yysym - yyntokens_] + yystate;
    if (0 <= yyr && yyr <= yylast_ && yycheck_[yyr] == yystate)
      return yytable_[yyr];
    else
      return yydefgoto_[yysym - yyntokens_];
  }

  bool
  Parser::yy_pact_value_is_default_ (int yyvalue)
  {
    return yyvalue == yypact_ninf_;
  }

  bool
  Parser::yy_table_value_is_error_ (int yyvalue)
  {
    return yyvalue == yytable_ninf_;
  }

  int
  Parser::operator() ()
  {
    return parse ();
  }

  int
  Parser::parse ()
  {
    int yyn;
    /// Length of the RHS of the rule being reduced.
    int yylen = 0;

    // Error handling.
    int yynerrs_ = 0;
    int yyerrstatus_ = 0;

    /// The lookahead symbol.
    symbol_type yyla;

    /// The locations where the error started and ended.
    stack_symbol_type yyerror_range[3];

    /// The return value of parse ().
    int yyresult;

#if YY_EXCEPTIONS
    try
#endif // YY_EXCEPTIONS
      {
    YYCDEBUG << "Starting parse\n";


    // User initialization code.
#line 47 "parser.yy"
{
    // initialize the initial location object
    // lichi: don't track file name to save the memory
    /*@$.begin.filename = @$.end.filename = &driver.streamname;*/
}

#line 7048 "parser.cc"


    /* Initialize the stack.  The initial state will be set in
       yynewstate, since the latter expects the semantical and the
       location values to have been already stored, initialize these
       stacks with a primary value.  */
    yystack_.clear ();
    yypush_ (YY_NULLPTR, 0, YY_MOVE (yyla));

  /*-----------------------------------------------.
  | yynewstate -- push a new symbol on the stack.  |
  `-----------------------------------------------*/
  yynewstate:
    YYCDEBUG << "Entering state " << int (yystack_[0].state) << '\n';

    // Accept?
    if (yystack_[0].state == yyfinal_)
      YYACCEPT;

    goto yybackup;


  /*-----------.
  | yybackup.  |
  `-----------*/
  yybackup:
    // Try to take a decision without lookahead.
    yyn = yypact_[yystack_[0].state];
    if (yy_pact_value_is_default_ (yyn))
      goto yydefault;

    // Read a lookahead token.
    if (yyla.empty ())
      {
        YYCDEBUG << "Reading a token: ";
#if YY_EXCEPTIONS
        try
#endif // YY_EXCEPTIONS
          {
            yyla.type = yytranslate_ (yylex (&yyla.value, &yyla.location));
          }
#if YY_EXCEPTIONS
        catch (const syntax_error& yyexc)
          {
            YYCDEBUG << "Caught exception: " << yyexc.what() << '\n';
            error (yyexc);
            goto yyerrlab1;
          }
#endif // YY_EXCEPTIONS
      }
    YY_SYMBOL_PRINT ("Next token is", yyla);

    /* If the proper action on seeing token YYLA.TYPE is to reduce or
       to detect an error, take that action.  */
    yyn += yyla.type_get ();
    if (yyn < 0 || yylast_ < yyn || yycheck_[yyn] != yyla.type_get ())
      {
        goto yydefault;
      }

    // Reduce or error.
    yyn = yytable_[yyn];
    if (yyn <= 0)
      {
        if (yy_table_value_is_error_ (yyn))
          goto yyerrlab;
        yyn = -yyn;
        goto yyreduce;
      }

    // Count tokens shifted since error; after three, turn off error status.
    if (yyerrstatus_)
      --yyerrstatus_;

    // Shift the lookahead token.
    yypush_ ("Shifting", static_cast<state_type> (yyn), YY_MOVE (yyla));
    goto yynewstate;


  /*-----------------------------------------------------------.
  | yydefault -- do the default action for the current state.  |
  `-----------------------------------------------------------*/
  yydefault:
    yyn = yydefact_[yystack_[0].state];
    if (yyn == 0)
      goto yyerrlab;
    goto yyreduce;


  /*-----------------------------.
  | yyreduce -- do a reduction.  |
  `-----------------------------*/
  yyreduce:
    yylen = yyr2_[yyn];
    {
      stack_symbol_type yylhs;
      yylhs.state = yy_lr_goto_state_ (yystack_[yylen].state, yyr1_[yyn]);
      /* Variants are always initialized to an empty instance of the
         correct type. The default '$$ = $1' action is NOT applied
         when using variants.  */
      switch (yyr1_[yyn])
    {
      case 775: // drop_table_stmt
      case 776: // drop_user_stmt
      case 777: // drop_view_stmt
      case 778: // drop_database_stmt
      case 827: // create
      case 871: // create_table_stmt
      case 875: // view_or_trigger_or_sp_or_event
      case 877: // no_definer_tail
      case 946: // view_tail
      case 1328: // use
        yylhs.value.emplace< AbstractCommandPointer > ();
        break;

      case 837: // user
      case 839: // create_user
        yylhs.value.emplace< AccountSPtr > ();
        break;

      case 1329: // kill
      case 1336: // shutdown_stmt
        yylhs.value.emplace< AdminStmtStructurePtr > ();
        break;

      case 1110: // cast_type
        yylhs.value.emplace< CastType > ();
        break;

      case 1204: // opt_column_attribute_list
      case 1205: // column_attribute_list
        yylhs.value.emplace< ColAttrList > ();
        break;

      case 990: // opt_create_table_options_etc
        yylhs.value.emplace< CreateTableOptions > ();
        break;

      case 1320: // delete_stmt
        yylhs.value.emplace< DeleteStructurePtr > ();
        break;

      case 796: // expr
      case 797: // bool_pri
      case 798: // predicate
      case 799: // bit_expr
      case 806: // simple_expr
      case 807: // case_expr
      case 808: // function_call_keyword
      case 809: // function_call_nonkeyword
      case 810: // function_call_conflict
      case 811: // function_call_generic
      case 814: // udf_expr
      case 815: // set_function_specification
      case 817: // sum_expr
      case 823: // row_subquery
      case 1029: // param_marker
      case 1057: // variable
      case 1109: // set_expr_or_default
      case 1111: // in_sum_expr
      case 1117: // opt_expr
      case 1118: // opt_else
      case 1145: // opt_where_clause
      case 1146: // opt_where_clause_expr
      case 1147: // opt_having_clause
      case 1170: // table_wild
      case 1172: // grouping_expr
      case 1200: // func_datetime_precision
      case 1210: // now_or_signed_literal
      case 1211: // now
      case 1311: // expr_or_default
        yylhs.value.emplace< Expression > ();
        break;

      case 1185: // field_def
        yylhs.value.emplace< Field_def_ptr > ();
        break;

      case 868: // field_options
      case 869: // field_opt_list
      case 870: // field_option
        yylhs.value.emplace< Field_option > ();
        break;

      case 1343: // opt_field_term
      case 1344: // field_term_list
      case 1345: // field_term
        yylhs.value.emplace< Field_separators > ();
        break;

      case 785: // opt_from_clause
      case 786: // from_clause
        yylhs.value.emplace< FromPartStructurePointer > ();
        break;

      case 1157: // opt_group_clause
        yylhs.value.emplace< GroupbyStructurePointer > ();
        break;

      case 1299: // insert_stmt
        yylhs.value.emplace< InsertStructurePtr > ();
        break;

      case 1120: // table_reference
      case 1121: // joined_table
      case 1129: // table_factor
      case 1131: // single_table_parens
      case 1132: // single_table
      case 1133: // joined_table_parens
      case 1134: // derived_table
        yylhs.value.emplace< JoinStructurePointer > ();
        break;

      case 1122: // natural_join_type
      case 1123: // inner_join_type
      case 1124: // outer_join_type
        yylhs.value.emplace< JoinType > ();
        break;

      case 1165: // opt_limit_clause
      case 1166: // limit_clause
      case 1167: // limit_options
      case 1321: // opt_simple_limit
        yylhs.value.emplace< LimitStructurePointer > ();
        break;

      case 1346: // opt_line_term
      case 1347: // line_term_list
      case 1348: // line_term
        yylhs.value.emplace< Line_separators > ();
        break;

      case 1030: // signed_literal
      case 1031: // literal
      case 1032: // NUM_literal
        yylhs.value.emplace< Literal > ();
        break;

      case 1337: // load_stmt
        yylhs.value.emplace< LoadDataStructurePtr > ();
        break;

      case 844: // duplicate
      case 1341: // opt_duplicate
        yylhs.value.emplace< On_duplicate > ();
        break;

      case 1171: // order_expr
        yylhs.value.emplace< OrderItem > ();
        break;

      case 1160: // opt_order_clause
      case 1161: // order_clause
        yylhs.value.emplace< OrderbyStructurePointer > ();
        break;

      case 1188: // type
        yylhs.value.emplace< PT_ColumnType_ptr > ();
        break;

      case 1206: // column_attribute
        yylhs.value.emplace< PT_column_attr_base_ptr > ();
        break;

      case 1106: // option_value_following_option_type
        yylhs.value.emplace< PT_option_value_following_option_type_ptr > ();
        break;

      case 1005: // part_definition
        yylhs.value.emplace< PartDef > ();
        break;

      case 1003: // opt_part_defs
      case 1004: // part_def_list
        yylhs.value.emplace< PartDefList > ();
        break;

      case 995: // part_type_def
        yylhs.value.emplace< PartTypeDef > ();
        break;

      case 1012: // part_value_item
        yylhs.value.emplace< PartValueItem > ();
        break;

      case 1007: // part_func_max
      case 1010: // part_value_item_list_paren
      case 1011: // part_value_item_list
        yylhs.value.emplace< PartValueItemsSPtr > ();
        break;

      case 1006: // opt_part_values
        yylhs.value.emplace< PartValuesSPtr > ();
        break;

      case 991: // opt_create_partitioning_etc
      case 994: // partition_clause
        yylhs.value.emplace< PartitionStructureSPtr > ();
        break;

      case 1197: // float_options
      case 1198: // precision
      case 1203: // opt_precision
        yylhs.value.emplace< Precision_ptr > ();
        break;

      case 1020: // prepare_src
        yylhs.value.emplace< PrepareSrcPtr > ();
        break;

      case 1019: // prepare
      case 1021: // execute
      case 1025: // deallocate
        yylhs.value.emplace< PreparedStmtStructurePtr > ();
        break;

      case 1259: // show_engine_param
        yylhs.value.emplace< SHOW_CMD > ();
        break;

      case 1169: // insert_ident
      case 1173: // simple_ident
      case 1174: // simple_ident_nospvar
      case 1175: // simple_ident_q
        yylhs.value.emplace< SQLIdentPtr > ();
        break;

      case 792: // select_item_list
        yylhs.value.emplace< SelectPartStructurePointer > ();
        break;

      case 779: // select_stmt
      case 780: // query_expression
      case 781: // query_expression_body
      case 782: // query_expression_parens
      case 783: // query_primary
      case 784: // query_specification
      case 824: // table_subquery
      case 825: // subquery
      case 947: // view_select
      case 1298: // query_expression_or_parens
      case 1317: // explain_stmt
        yylhs.value.emplace< SelectStructurePointer > ();
        break;

      case 822: // union_option
        yylhs.value.emplace< SetOperationType > ();
        break;

      case 1101: // option_value
      case 1107: // option_value_no_option_type
        yylhs.value.emplace< SetStructurePtr > ();
        break;

      case 1256: // describe_stmt
      case 1257: // show
      case 1258: // show_param
        yylhs.value.emplace< ShowStructurePtr > ();
        break;

      case 1267: // opt_show_cmd_type
        yylhs.value.emplace< Show_cmd_type > ();
        break;

      case 856: // opt_table_list
      case 857: // table_list
      case 1325: // table_alias_ref_list
        yylhs.value.emplace< TABLE_LIST > ();
        break;

      case 859: // table_element
      case 860: // column_def
      case 862: // table_constraint_def
        yylhs.value.emplace< TableElementDescriptionPtr > ();
        break;

      case 1358: // start
      case 1362: // begin_stmt
      case 1367: // commit
      case 1368: // rollback
        yylhs.value.emplace< TransactionStructurePtr > ();
        break;

      case 1313: // update_stmt
        yylhs.value.emplace< UpdateStructurePtr > ();
        break;

      case 1308: // row_value
      case 1309: // opt_values
      case 1310: // values
        yylhs.value.emplace< VALUES > ();
        break;

      case 1058: // variable_aux
        yylhs.value.emplace< VariableStructurePtr > ();
        break;

      case 1261: // opt_wild_or_where
      case 1262: // opt_wild_or_where_for_show
        yylhs.value.emplace< WildOrWhere_ptr > ();
        break;

      case 818: // opt_distinct
      case 845: // opt_if_not_exists
      case 865: // opt_not
      case 872: // if_exists
      case 873: // opt_temporary
      case 996: // opt_linear
      case 1080: // visibility
      case 1265: // opt_full
      case 1266: // opt_extended
      case 1301: // opt_ignore
      case 1339: // opt_local
        yylhs.value.emplace< bool > ();
        break;

      case 1338: // data_or_xml
        yylhs.value.emplace< enum_filetype > ();
        break;

      case 1102: // option_type
      case 1103: // opt_var_type
      case 1104: // opt_var_ident_type
      case 1105: // opt_set_var_ident_type
        yylhs.value.emplace< enum_var_type > ();
        break;

      case 1364: // opt_chain
      case 1365: // opt_release
        yylhs.value.emplace< enum_yes_no_unknown > ();
        break;

      case 789: // select_options
      case 790: // select_option_list
      case 791: // select_option
      case 804: // comp_op
      case 826: // query_spec_option
      case 1330: // kill_option
        yylhs.value.emplace< int > ();
        break;

      case 1064: // constraint_key_type
        yylhs.value.emplace< keytype > ();
        break;

      case 1315: // update_elem
        yylhs.value.emplace< pair< BiaodashiPointer, BiaodashiPointer > > ();
        break;

      case 1303: // insert_query_expression
        yylhs.value.emplace< pair< EXPR_LIST, SelectStructurePointer > > ();
        break;

      case 1207: // encode_type
        yylhs.value.emplace< pair< aries::EncodeType, string > > ();
        break;

      case 861: // opt_references
      case 1060: // references
        yylhs.value.emplace< pair< shared_ptr<BasicRel>, vector< string > > > ();
        break;

      case 1312: // opt_insert_update_list
      case 1314: // update_list
        yylhs.value.emplace< pair< vector< BiaodashiPointer >, vector< BiaodashiPointer > >  > ();
        break;

      case 838: // user_list
      case 840: // create_user_list
        yylhs.value.emplace< shared_ptr< vector< AccountSPtr > > > ();
        break;

      case 1176: // table_ident
      case 1242: // sp_name
      case 1326: // table_ident_opt_wild
        yylhs.value.emplace< shared_ptr<BasicRel> > ();
        break;

      case 1098: // option_value_list_continued
      case 1099: // start_option_value_list_following_option_type
      case 1100: // option_value_list
      case 1286: // set
      case 1287: // start_option_value_list
        yylhs.value.emplace< shared_ptr<vector<SetStructurePtr>> > ();
        break;

      case 858: // table_element_list
        yylhs.value.emplace< shared_ptr<vector<TableElementDescriptionPtr>> > ();
        break;

      case 5: // ACCOUNT_SYM
      case 6: // ACTION
      case 8: // ADDDATE_SYM
      case 9: // AFTER_SYM
      case 10: // AGAINST
      case 11: // AGGREGATE_SYM
      case 12: // ALGORITHM_SYM
      case 15: // ALWAYS_SYM
      case 20: // ANY_SYM
      case 22: // ASC
      case 23: // ASCII_SYM
      case 25: // AT_SYM
      case 26: // AUTOEXTEND_SIZE_SYM
      case 27: // AUTO_INC
      case 28: // AVG_ROW_LENGTH
      case 29: // AVG_SYM
      case 30: // BACKUP_SYM
      case 32: // BEGIN_SYM
      case 36: // BINLOG_SYM
      case 40: // BIT_SYM
      case 43: // BLOCK_SYM
      case 44: // BOOLEAN_SYM
      case 45: // BOOL_SYM
      case 47: // BTREE_SYM
      case 49: // BYTE_SYM
      case 50: // CACHE_SYM
      case 53: // CASCADED
      case 56: // CATALOG_NAME_SYM
      case 57: // CHAIN_SYM
      case 59: // CHANGED
      case 60: // CHANNEL_SYM
      case 61: // CHARSET
      case 63: // CHECKSUM_SYM
      case 65: // CIPHER_SYM
      case 66: // CLASS_ORIGIN_SYM
      case 67: // CLIENT_SYM
      case 68: // CLOSE_SYM
      case 69: // COALESCE
      case 70: // CODE_SYM
      case 72: // COLLATION_SYM
      case 73: // COLUMNS
      case 75: // COLUMN_FORMAT_SYM
      case 76: // COLUMN_NAME_SYM
      case 77: // COMMENT_SYM
      case 78: // COMMITTED_SYM
      case 79: // COMMIT_SYM
      case 80: // COMPACT_SYM
      case 81: // COMPLETION_SYM
      case 82: // COMPRESSED_SYM
      case 83: // COMPRESSION_SYM
      case 84: // ENCRYPTION_SYM
      case 85: // CONCURRENT
      case 88: // CONNECTION_SYM
      case 89: // CONSISTENT_SYM
      case 91: // CONSTRAINT_CATALOG_SYM
      case 92: // CONSTRAINT_NAME_SYM
      case 93: // CONSTRAINT_SCHEMA_SYM
      case 94: // CONTAINS_SYM
      case 95: // CONTEXT_SYM
      case 99: // CPU_SYM
      case 100: // CREATE
      case 104: // CURRENT_SYM
      case 107: // CURSOR_NAME_SYM
      case 111: // DATAFILE_SYM
      case 112: // DATA_SYM
      case 113: // DATETIME_SYM
      case 116: // DATE_SYM
      case 121: // DAY_SYM
      case 122: // DEALLOCATE_SYM
      case 123: // DECIMAL_NUM
      case 128: // DEFAULT_AUTH_SYM
      case 129: // DEFINER_SYM
      case 131: // DELAY_KEY_WRITE_SYM
      case 133: // DESC
      case 137: // DIAGNOSTICS_SYM
      case 138: // BYTEDICT_SYM
      case 139: // SHORTDICT_SYM
      case 140: // INTDICT_SYM
      case 142: // DIRECTORY_SYM
      case 143: // DISABLE_SYM
      case 144: // DISCARD_SYM
      case 145: // DISK_SYM
      case 149: // DO_SYM
      case 152: // DUMPFILE
      case 153: // DUPLICATE_SYM
      case 154: // DYNAMIC_SYM
      case 158: // ENABLE_SYM
      case 161: // END
      case 162: // ENDS_SYM
      case 163: // ENGINES_SYM
      case 164: // ENGINE_SYM
      case 165: // ENUM_SYM
      case 168: // ERROR_SYM
      case 169: // ERRORS
      case 171: // ESCAPE_SYM
      case 172: // EVENTS_SYM
      case 173: // EVENT_SYM
      case 174: // EVERY_SYM
      case 175: // EXCHANGE_SYM
      case 176: // EXECUTE_SYM
      case 179: // EXPANSION_SYM
      case 180: // EXPIRE_SYM
      case 181: // EXPORT_SYM
      case 182: // EXTENDED_SYM
      case 183: // EXTENT_SIZE_SYM
      case 186: // FAST_SYM
      case 187: // FAULTS_SYM
      case 189: // FILE_SYM
      case 190: // FILE_BLOCK_SIZE_SYM
      case 191: // FILTER_SYM
      case 192: // FIRST_SYM
      case 193: // FIXED_SYM
      case 194: // FLOAT_NUM
      case 196: // FLUSH_SYM
      case 197: // FOLLOWS_SYM
      case 201: // FORMAT_SYM
      case 202: // FOUND_SYM
      case 204: // FULL
      case 208: // GENERAL
      case 210: // GROUP_REPLICATION
      case 211: // GEOMETRYCOLLECTION_SYM
      case 212: // GEOMETRY_SYM
      case 213: // GET_FORMAT
      case 215: // GLOBAL_SYM
      case 217: // GRANTS
      case 221: // HANDLER_SYM
      case 222: // HASH_SYM
      case 224: // HELP_SYM
      case 225: // HEX_NUM
      case 227: // HOST_SYM
      case 228: // HOSTS_SYM
      case 232: // HOUR_SYM
      case 233: // IDENT
      case 234: // IDENTIFIED_SYM
      case 238: // IGNORE_SERVER_IDS_SYM
      case 239: // IMPORT
      case 240: // INDEXES
      case 243: // INITIAL_SIZE_SYM
      case 248: // INSERT_METHOD
      case 249: // INSTANCE_SYM
      case 250: // INSTALL_SYM
      case 251: // INTERVAL_SYM
      case 255: // INVOKER_SYM
      case 259: // IO_SYM
      case 260: // IPC_SYM
      case 262: // ISOLATION
      case 263: // ISSUER_SYM
      case 267: // JSON_SYM
      case 269: // KEY_BLOCK_SIZE
      case 272: // LANGUAGE_SYM
      case 273: // LAST_SYM
      case 276: // LEAVES
      case 279: // LESS_SYM
      case 280: // LEVEL_SYM
      case 281: // LEX_HOSTNAME
      case 286: // LINESTRING_SYM
      case 287: // LIST_SYM
      case 289: // LOCAL_SYM
      case 291: // LOCKS_SYM
      case 293: // LOGFILE_SYM
      case 294: // LOGS_SYM
      case 297: // LONG_NUM
      case 302: // MASTER_AUTO_POSITION_SYM
      case 304: // MASTER_CONNECT_RETRY_SYM
      case 305: // MASTER_DELAY_SYM
      case 306: // MASTER_HOST_SYM
      case 307: // MASTER_LOG_FILE_SYM
      case 308: // MASTER_LOG_POS_SYM
      case 309: // MASTER_PASSWORD_SYM
      case 310: // MASTER_PORT_SYM
      case 311: // MASTER_RETRY_COUNT_SYM
      case 312: // MASTER_SERVER_ID_SYM
      case 313: // MASTER_SSL_CAPATH_SYM
      case 314: // MASTER_TLS_VERSION_SYM
      case 315: // MASTER_SSL_CA_SYM
      case 316: // MASTER_SSL_CERT_SYM
      case 317: // MASTER_SSL_CIPHER_SYM
      case 318: // MASTER_SSL_CRL_SYM
      case 319: // MASTER_SSL_CRLPATH_SYM
      case 320: // MASTER_SSL_KEY_SYM
      case 321: // MASTER_SSL_SYM
      case 323: // MASTER_SYM
      case 324: // MASTER_USER_SYM
      case 325: // MASTER_HEARTBEAT_PERIOD_SYM
      case 327: // MAX_CONNECTIONS_PER_HOUR
      case 328: // MAX_QUERIES_PER_HOUR
      case 329: // MAX_ROWS
      case 330: // MAX_SIZE_SYM
      case 332: // MAX_UPDATES_PER_HOUR
      case 333: // MAX_USER_CONNECTIONS_SYM
      case 338: // MEDIUM_SYM
      case 339: // MEMORY_SYM
      case 340: // MERGE_SYM
      case 341: // MESSAGE_TEXT_SYM
      case 342: // MICROSECOND_SYM
      case 343: // MIGRATE_SYM
      case 346: // MINUTE_SYM
      case 347: // MIN_ROWS
      case 349: // MODE_SYM
      case 351: // MODIFY_SYM
      case 353: // MONTH_SYM
      case 354: // MULTILINESTRING_SYM
      case 355: // MULTIPOINT_SYM
      case 356: // MULTIPOLYGON_SYM
      case 357: // MUTEX_SYM
      case 358: // MYSQL_ERRNO_SYM
      case 359: // NAMES_SYM
      case 360: // NAME_SYM
      case 361: // NATIONAL_SYM
      case 364: // NCHAR_SYM
      case 365: // NDBCLUSTER_SYM
      case 368: // NEVER_SYM
      case 369: // NEW_SYM
      case 370: // NEXT_SYM
      case 371: // NODEGROUP_SYM
      case 372: // NONE_SYM
      case 376: // NO_SYM
      case 377: // NO_WAIT_SYM
      case 380: // NUM
      case 381: // NUMBER_SYM
      case 383: // NVARCHAR_SYM
      case 384: // OFFSET_SYM
      case 386: // ONE_SYM
      case 387: // ONLY_SYM
      case 388: // OPEN_SYM
      case 391: // OPTIONS_SYM
      case 401: // OWNER_SYM
      case 402: // PACK_KEYS_SYM
      case 403: // PAGE_SYM
      case 405: // PARSER_SYM
      case 407: // PARTIAL
      case 409: // PARTITIONS_SYM
      case 410: // PARTITIONING_SYM
      case 411: // PASSWORD
      case 412: // PHASE_SYM
      case 413: // PLUGIN_DIR_SYM
      case 414: // PLUGIN_SYM
      case 415: // PLUGINS_SYM
      case 416: // "."
      case 417: // POLYGON_SYM
      case 418: // PORT_SYM
      case 420: // PRECEDES_SYM
      case 422: // PREPARE_SYM
      case 423: // PRESERVE_SYM
      case 424: // PREV_SYM
      case 426: // PRIVILEGES
      case 428: // PROCESS
      case 429: // PROCESSLIST_SYM
      case 430: // PROFILE_SYM
      case 431: // PROFILES_SYM
      case 432: // PROXY_SYM
      case 434: // QUARTER_SYM
      case 435: // QUERY_SYM
      case 436: // QUICK
      case 439: // READ_ONLY_SYM
      case 443: // REBUILD_SYM
      case 444: // RECOVER_SYM
      case 446: // REDO_BUFFER_SIZE_SYM
      case 447: // REDUNDANT_SYM
      case 450: // RELAY
      case 451: // RELAYLOG_SYM
      case 452: // RELAY_LOG_FILE_SYM
      case 453: // RELAY_LOG_POS_SYM
      case 454: // RELAY_THREAD
      case 456: // RELOAD
      case 457: // REMOVE_SYM
      case 459: // REORGANIZE_SYM
      case 460: // REPAIR
      case 461: // REPEATABLE_SYM
      case 464: // REPLICATION
      case 465: // REPLICATE_DO_DB
      case 466: // REPLICATE_IGNORE_DB
      case 467: // REPLICATE_DO_TABLE
      case 468: // REPLICATE_IGNORE_TABLE
      case 469: // REPLICATE_WILD_DO_TABLE
      case 470: // REPLICATE_WILD_IGNORE_TABLE
      case 471: // REPLICATE_REWRITE_DB
      case 473: // RESET_SYM
      case 475: // RESOURCES
      case 476: // RESTORE_SYM
      case 478: // RESUME_SYM
      case 479: // RETURNED_SQLSTATE_SYM
      case 480: // RETURNS_SYM
      case 482: // REVERSE_SYM
      case 485: // ROLLBACK_SYM
      case 486: // ROLLUP_SYM
      case 487: // ROTATE_SYM
      case 488: // ROUTINE_SYM
      case 490: // ROW_FORMAT_SYM
      case 492: // ROW_COUNT_SYM
      case 493: // RTREE_SYM
      case 494: // SAVEPOINT_SYM
      case 495: // SCHEDULE_SYM
      case 496: // SCHEMA_NAME_SYM
      case 499: // SECOND_SYM
      case 500: // SECURITY_SYM
      case 504: // SERIALIZABLE_SYM
      case 505: // SERIAL_SYM
      case 506: // SESSION_SYM
      case 507: // SERVER_SYM
      case 511: // SHARE_SYM
      case 512: // SHARES_SYM
      case 516: // SHUTDOWN
      case 518: // SIGNED_SYM
      case 519: // SIMPLE_SYM
      case 520: // SLAVE
      case 521: // SLOW
      case 523: // SNAPSHOT_SYM
      case 524: // SOCKET_SYM
      case 525: // SONAME_SYM
      case 526: // SOUNDS_SYM
      case 527: // SOURCE_SYM
      case 533: // SQL_AFTER_GTIDS
      case 534: // SQL_AFTER_MTS_GAPS
      case 535: // SQL_BEFORE_GTIDS
      case 537: // SQL_BUFFER_RESULT
      case 540: // SQL_NO_CACHE_SYM
      case 543: // SQL_THREAD
      case 545: // STACKED_SYM
      case 547: // STARTS_SYM
      case 548: // START_SYM
      case 549: // STATS_AUTO_RECALC_SYM
      case 550: // STATS_PERSISTENT_SYM
      case 551: // STATS_SAMPLE_PAGES_SYM
      case 552: // STATUS_SYM
      case 555: // STOP_SYM
      case 556: // STORAGE_SYM
      case 559: // STRING_SYM
      case 560: // SUBCLASS_ORIGIN_SYM
      case 561: // SUBDATE_SYM
      case 562: // SUBJECT_SYM
      case 563: // SUBPARTITIONS_SYM
      case 564: // SUBPARTITION_SYM
      case 567: // SUPER_SYM
      case 568: // SUSPEND_SYM
      case 569: // SWAPS_SYM
      case 570: // SWITCHES_SYM
      case 572: // TABLES
      case 573: // VIEWS
      case 574: // TABLESPACE_SYM
      case 577: // TABLE_CHECKSUM_SYM
      case 578: // TABLE_NAME_SYM
      case 579: // TEMPORARY
      case 580: // TEMPTABLE_SYM
      case 582: // TEXT_STRING
      case 583: // TEXT_SYM
      case 584: // THAN_SYM
      case 586: // TIMESTAMP_SYM
      case 587: // TIMESTAMP_ADD
      case 588: // TIMESTAMP_DIFF
      case 589: // TIME_SYM
      case 595: // TRANSACTION_SYM
      case 596: // TRIGGERS_SYM
      case 600: // TRUNCATE_SYM
      case 601: // TYPES_SYM
      case 602: // TYPE_SYM
      case 604: // ULONGLONG_NUM
      case 605: // UNCOMMITTED_SYM
      case 606: // UNDEFINED_SYM
      case 608: // UNDOFILE_SYM
      case 609: // UNDO_BUFFER_SIZE_SYM
      case 611: // UNICODE_SYM
      case 612: // UNINSTALL_SYM
      case 615: // UNKNOWN_SYM
      case 618: // UNTIL_SYM
      case 620: // UPGRADE_SYM
      case 622: // USER
      case 623: // USE_FRM
      case 629: // VALIDATION_SYM
      case 631: // VALUE_SYM
      case 632: // VARBINARY_SYM
      case 634: // VARIABLES
      case 639: // VIEW_SYM
      case 641: // WAIT_SYM
      case 642: // WARNINGS
      case 643: // WEEK_SYM
      case 644: // WEIGHT_STRING_SYM
      case 651: // WITHOUT_SYM
      case 652: // WORK_SYM
      case 653: // WRAPPER_SYM
      case 655: // X509_SYM
      case 656: // XA_SYM
      case 657: // XID_SYM
      case 658: // XML_SYM
      case 661: // YEAR_SYM
      case 667: // PERSIST_SYM
      case 668: // ROLE_SYM
      case 669: // ADMIN_SYM
      case 670: // INVISIBLE_SYM
      case 671: // VISIBLE_SYM
      case 673: // COMPONENT_SYM
      case 682: // SKIP_SYM
      case 683: // LOCKED_SYM
      case 684: // NOWAIT_SYM
      case 686: // PERSIST_ONLY_SYM
      case 687: // HISTOGRAM_SYM
      case 688: // BUCKETS_SYM
      case 689: // OBSOLETE_TOKEN_930
      case 690: // CLONE_SYM
      case 693: // EXCLUDE_SYM
      case 695: // FOLLOWING_SYM
      case 702: // NULLS_SYM
      case 703: // OTHERS_SYM
      case 706: // PRECEDING_SYM
      case 708: // RESPECT_SYM
      case 710: // TIES_SYM
      case 711: // UNBOUNDED_SYM
      case 715: // NESTED_SYM
      case 716: // ORDINALITY_SYM
      case 717: // PATH_SYM
      case 718: // HISTORY_SYM
      case 719: // REUSE_SYM
      case 720: // SRID_SYM
      case 721: // THREAD_PRIORITY_SYM
      case 722: // RESOURCE_SYM
      case 724: // VCPU_SYM
      case 725: // MASTER_PUBLIC_KEY_PATH_SYM
      case 726: // GET_MASTER_PUBLIC_KEY_SYM
      case 727: // RESTART_SYM
      case 728: // DEFINITION_SYM
      case 729: // DESCRIPTION_SYM
      case 730: // ORGANIZATION_SYM
      case 731: // REFERENCE_SYM
      case 732: // ACTIVE_SYM
      case 733: // INACTIVE_SYM
      case 735: // OPTIONAL_SYM
      case 736: // SECONDARY_SYM
      case 737: // SECONDARY_ENGINE_SYM
      case 738: // SECONDARY_LOAD_SYM
      case 739: // SECONDARY_UNLOAD_SYM
      case 740: // RETAIN_SYM
      case 741: // OLD_SYM
      case 742: // ENFORCED_SYM
      case 743: // OJ_SYM
      case 744: // NETWORK_NAMESPACE_SYM
      case 794: // select_alias
      case 864: // opt_constraint_name
      case 1024: // execute_var_ident
      case 1027: // text_literal
      case 1028: // text_string
      case 1078: // opt_index_name_and_type
      case 1083: // key_part
      case 1085: // key_part_with_expression
      case 1086: // opt_ident
      case 1087: // opt_component
      case 1088: // charset_name
      case 1108: // internal_variable_name
      case 1139: // interval
      case 1140: // interval_time_stamp
      case 1143: // opt_table_alias
      case 1163: // opt_ordering_direction
      case 1164: // ordering_direction
      case 1168: // limit_option
      case 1177: // IDENT_sys
      case 1178: // TEXT_STRING_sys
      case 1179: // TEXT_STRING_literal
      case 1180: // TEXT_STRING_filesystem
      case 1181: // TEXT_STRING_password
      case 1182: // TEXT_STRING_hash
      case 1183: // ident
      case 1184: // ident_or_text
      case 1190: // nchar
      case 1191: // varchar
      case 1192: // nvarchar
      case 1193: // int_type
      case 1194: // real_type
      case 1196: // numeric_type
      case 1199: // type_datetime_precision
      case 1201: // field_length
      case 1202: // opt_field_length
      case 1212: // ident_keyword
      case 1214: // ident_keywords_ambiguous_2_labels
      case 1217: // ident_keywords_unambiguous
      case 1218: // lvalue_keyword
      case 1220: // TEXT_STRING_sys_nonewline
      case 1255: // opt_describe_column
      case 1264: // opt_db
      case 1285: // lvalue_ident
      case 1288: // password
      case 1342: // opt_load_data_charset
      case 1349: // opt_xml_rows_identified_by
        yylhs.value.emplace< string > ();
        break;

      case 1340: // load_data_lock
        yylhs.value.emplace< thr_lock_type > ();
        break;

      case 793: // select_item
        yylhs.value.emplace< tuple<Expression, string> > ();
        break;

      case 998: // opt_num_parts
      case 1002: // opt_num_subparts
      case 1271: // ulong_num
      case 1350: // opt_ignore_lines
        yylhs.value.emplace< ulong > ();
        break;

      case 989: // size_number
      case 1272: // real_ulong_num
      case 1273: // ulonglong_num
      case 1274: // real_ulonglong_num
        yylhs.value.emplace< ulonglong > ();
        break;

      case 1008: // part_values_in
      case 1009: // part_value_list
        yylhs.value.emplace< vector< PartValueItemsSPtr > > ();
        break;

      case 812: // opt_udf_expr_list
      case 813: // udf_expr_list
      case 1112: // opt_expr_list
      case 1114: // expr_list
      case 1158: // group_list
      case 1304: // insert_from_constructor
      case 1327: // fields
        yylhs.value.emplace< vector<Expression> > ();
        break;

      case 787: // from_tables
      case 788: // table_reference_list
        yylhs.value.emplace< vector<JoinStructurePointer> > ();
        break;

      case 1162: // order_list
        yylhs.value.emplace< vector<OrderItem> > ();
        break;

      case 1022: // execute_using
      case 1023: // execute_var_list
      case 1082: // key_list
      case 1084: // key_list_with_expression
      case 1151: // opt_derived_column_list
      case 1152: // simple_ident_list
        yylhs.value.emplace< vector<string> > ();
        break;

      case 1119: // when_list
        yylhs.value.emplace< vector<tuple<Expression, Expression>> > ();
        break;

      default:
        break;
    }


      // Default location.
      {
        stack_type::slice range (yystack_, yylen);
        YYLLOC_DEFAULT (yylhs.location, range, yylen);
        yyerror_range[1].location = yylhs.location;
      }

      // Perform the reduction.
      YY_REDUCE_PRINT (yyn);
#if YY_EXCEPTIONS
      try
#endif // YY_EXCEPTIONS
        {
          switch (yyn)
            {
  case 8:
#line 1022 "parser.yy"
               {
            auto stmtStr = driver.get_string_at_location(yystack_[0].location);
            yystack_[0].value.as < AbstractCommandPointer > ()->SetCommandString(stmtStr);
            auto statement = std::make_shared<AriesSQLStatement>();
            statement->SetCommand(yystack_[0].value.as < AbstractCommandPointer > ());
            driver.statements.emplace_back(statement);
        }
#line 8111 "parser.cc"
    break;

  case 9:
#line 1029 "parser.yy"
                            {
            auto stmtStr = driver.get_string_at_location(yystack_[0].location);
            yystack_[0].value.as < AbstractCommandPointer > ()->SetCommandString(stmtStr);
            auto statement = std::make_shared<AriesSQLStatement>();
            statement->SetCommand(yystack_[0].value.as < AbstractCommandPointer > ());
            driver.statements.emplace_back(statement);
        }
#line 8123 "parser.cc"
    break;

  case 10:
#line 1036 "parser.yy"
                     {
            auto statement = std::make_shared<AriesSQLStatement>();
            statement->SetPreparedStmtStructurePtr(yystack_[0].value.as < PreparedStmtStructurePtr > ());
            driver.statements.emplace_back(statement);
        }
#line 8133 "parser.cc"
    break;

  case 11:
#line 1041 "parser.yy"
                      {
          auto statement = std::make_shared<AriesSQLStatement>();
          statement->SetDeleteStructure(yystack_[0].value.as < DeleteStructurePtr > ());
          driver.statements.emplace_back(statement);
        }
#line 8143 "parser.cc"
    break;

  case 12:
#line 1046 "parser.yy"
                        {
            auto statement = std::make_shared<AriesSQLStatement>();
            statement->SetShowStructure(yystack_[0].value.as < ShowStructurePtr > ());
            driver.statements.emplace_back(statement);
        }
#line 8153 "parser.cc"
    break;

  case 13:
#line 1051 "parser.yy"
                             {
            auto statement = std::make_shared<AriesSQLStatement>();
            statement->SetCommand(yystack_[0].value.as < AbstractCommandPointer > ());
            driver.statements.emplace_back(statement);
        }
#line 8163 "parser.cc"
    break;

  case 14:
#line 1056 "parser.yy"
                          {
            auto statement = std::make_shared<AriesSQLStatement>();
            statement->SetCommand(yystack_[0].value.as < AbstractCommandPointer > ());
            driver.statements.emplace_back(statement);
        }
#line 8173 "parser.cc"
    break;

  case 15:
#line 1061 "parser.yy"
                         {
            auto statement = std::make_shared<AriesSQLStatement>();
            statement->SetCommand(yystack_[0].value.as < AbstractCommandPointer > ());
            driver.statements.emplace_back(statement);
        }
#line 8183 "parser.cc"
    break;

  case 16:
#line 1066 "parser.yy"
                         {
            auto statement = std::make_shared<AriesSQLStatement>();
            statement->SetCommand(yystack_[0].value.as < AbstractCommandPointer > ());
            driver.statements.emplace_back(statement);
        }
#line 8193 "parser.cc"
    break;

  case 17:
#line 1071 "parser.yy"
                  {
            auto statement = std::make_shared<AriesSQLStatement>();
            statement->SetPreparedStmtStructurePtr(yystack_[0].value.as < PreparedStmtStructurePtr > ());
            driver.statements.emplace_back(statement);
        }
#line 8203 "parser.cc"
    break;

  case 18:
#line 1076 "parser.yy"
                       {
            auto statement = std::make_shared<AriesSQLStatement>();
            statement->SetExplainQuery(yystack_[0].value.as < SelectStructurePointer > ());
            driver.statements.emplace_back(statement);
        }
#line 8213 "parser.cc"
    break;

  case 19:
#line 1081 "parser.yy"
                      {
            auto statement = std::make_shared<AriesSQLStatement>();
            statement->SetInsertStructure(yystack_[0].value.as < InsertStructurePtr > ());
            driver.statements.emplace_back(statement);
        }
#line 8223 "parser.cc"
    break;

  case 20:
#line 1086 "parser.yy"
                    {
            auto statement = std::make_shared<AriesSQLStatement>();
            statement->SetLoadDataStructure(yystack_[0].value.as < LoadDataStructurePtr > ());
            driver.statements.emplace_back(statement);
        }
#line 8233 "parser.cc"
    break;

  case 21:
#line 1091 "parser.yy"
               {
            ThrowFakeImplException( ER_FAKE_IMPL_OK, "lock tables");
        }
#line 8241 "parser.cc"
    break;

  case 22:
#line 1094 "parser.yy"
                 {
            ThrowFakeImplException( ER_FAKE_IMPL_OK, "unlock tables");
        }
#line 8249 "parser.cc"
    break;

  case 23:
#line 1097 "parser.yy"
               {
          auto statement = std::make_shared<AriesSQLStatement>();
          statement->SetAdminStmt(yystack_[0].value.as < AdminStmtStructurePtr > ());
          driver.statements.emplace_back(statement);
        }
#line 8259 "parser.cc"
    break;

  case 24:
#line 1102 "parser.yy"
                  {
            auto statement = std::make_shared<AriesSQLStatement>();
            statement->SetPreparedStmtStructurePtr(yystack_[0].value.as < PreparedStmtStructurePtr > ());
            driver.statements.emplace_back(statement);
        }
#line 8269 "parser.cc"
    break;

  case 25:
#line 1107 "parser.yy"
                       {
          auto statement = std::make_shared<AriesSQLStatement>();
          statement->SetQuery(yystack_[0].value.as < SelectStructurePointer > ());
          driver.statements.emplace_back(statement);
        }
#line 8279 "parser.cc"
    break;

  case 26:
#line 1112 "parser.yy"
               {
            auto statement = std::make_shared<AriesSQLStatement>();
            statement->SetShowStructure(yystack_[0].value.as < ShowStructurePtr > ());
            driver.statements.emplace_back(statement);
        }
#line 8289 "parser.cc"
    break;

  case 27:
#line 1117 "parser.yy"
                        {
          auto statement = std::make_shared<AriesSQLStatement>();
          statement->SetAdminStmt(yystack_[0].value.as < AdminStmtStructurePtr > ());
          driver.statements.emplace_back(statement);
        }
#line 8299 "parser.cc"
    break;

  case 28:
#line 1122 "parser.yy"
              {
            auto statement = std::make_shared<AriesSQLStatement>();
            statement->SetSetStructures(yystack_[0].value.as < shared_ptr<vector<SetStructurePtr>> > ());
            driver.statements.emplace_back(statement);
        }
#line 8309 "parser.cc"
    break;

  case 29:
#line 1127 "parser.yy"
                {
            auto statement = std::make_shared<AriesSQLStatement>();
            statement->SetTxStructure(yystack_[0].value.as < TransactionStructurePtr > ());
            driver.statements.emplace_back(statement);
        }
#line 8319 "parser.cc"
    break;

  case 30:
#line 1132 "parser.yy"
                     {
            auto statement = std::make_shared<AriesSQLStatement>();
            statement->SetTxStructure(yystack_[0].value.as < TransactionStructurePtr > ());
            driver.statements.emplace_back(statement);
        }
#line 8329 "parser.cc"
    break;

  case 31:
#line 1137 "parser.yy"
                 {
            auto statement = std::make_shared<AriesSQLStatement>();
            statement->SetTxStructure(yystack_[0].value.as < TransactionStructurePtr > ());
            driver.statements.emplace_back(statement);
        }
#line 8339 "parser.cc"
    break;

  case 32:
#line 1142 "parser.yy"
                   {
            auto statement = std::make_shared<AriesSQLStatement>();
            statement->SetTxStructure(yystack_[0].value.as < TransactionStructurePtr > ());
            driver.statements.emplace_back(statement);
        }
#line 8349 "parser.cc"
    break;

  case 33:
#line 1147 "parser.yy"
              {
            auto statement = std::make_shared<AriesSQLStatement>();
            statement->SetCommand(yystack_[0].value.as < AbstractCommandPointer > ());
            driver.statements.emplace_back(statement);
        }
#line 8359 "parser.cc"
    break;

  case 34:
#line 1152 "parser.yy"
                      {
            auto statement = std::make_shared<AriesSQLStatement>();
            statement->SetUpdateStructure(yystack_[0].value.as < UpdateStructurePtr > ());
            driver.statements.emplace_back(statement);
        }
#line 8369 "parser.cc"
    break;

  case 39:
#line 1171 "parser.yy"
                      { }
#line 8375 "parser.cc"
    break;

  case 40:
#line 1172 "parser.yy"
                      { ThrowNotSupportedException("RESTRICT"); }
#line 8381 "parser.cc"
    break;

  case 41:
#line 1173 "parser.yy"
                      { ThrowNotSupportedException("CASCADE"); }
#line 8387 "parser.cc"
    break;

  case 42:
#line 1177 "parser.yy"
          {
            // Note: opt_restrict ($6) is ignored!
            yylhs.value.as < AbstractCommandPointer > () = CreateDropTablesStructure(yystack_[4].value.as < bool > (), yystack_[2].value.as < bool > (), yystack_[1].value.as < TABLE_LIST > ());
          }
#line 8396 "parser.cc"
    break;

  case 43:
#line 1185 "parser.yy"
          {
             yylhs.value.as < AbstractCommandPointer > () = CreateAccountMgmtStructure( CommandType::DropUser, yystack_[1].value.as < bool > (), yystack_[0].value.as < shared_ptr< vector< AccountSPtr > > > () );
          }
#line 8404 "parser.cc"
    break;

  case 44:
#line 1191 "parser.yy"
                                                                {
            yylhs.value.as < AbstractCommandPointer > () = CreateDropViewsStructure(yystack_[3].value.as < bool > (), yystack_[1].value.as < bool > (), yystack_[0].value.as < TABLE_LIST > ());
          }
#line 8412 "parser.cc"
    break;

  case 45:
#line 1197 "parser.yy"
          {
            yylhs.value.as < AbstractCommandPointer > () = CreateDropDatabaseStructure(yystack_[1].value.as < bool > (), yystack_[0].value.as < string > ());
          }
#line 8420 "parser.cc"
    break;

  case 46:
#line 1202 "parser.yy"
                         { yylhs.value.as < SelectStructurePointer > () = yystack_[0].value.as < SelectStructurePointer > (); }
#line 8426 "parser.cc"
    break;

  case 47:
#line 1208 "parser.yy"
                         {
          auto select_structure = yystack_[2].value.as < SelectStructurePointer > ();
          select_structure->SetLimitStructure(yystack_[0].value.as < LimitStructurePointer > ());
          if (yystack_[1].value.as < OrderbyStructurePointer > ()) {
            select_structure->SetOrderbyPart(yystack_[1].value.as < OrderbyStructurePointer > ());
          }
          yylhs.value.as < SelectStructurePointer > () = select_structure;
        }
#line 8439 "parser.cc"
    break;

  case 48:
#line 1220 "parser.yy"
                         {
          auto select_structure = yystack_[2].value.as < SelectStructurePointer > ();
          yylhs.value.as < SelectStructurePointer > () = select_structure;
        }
#line 8448 "parser.cc"
    break;

  case 49:
#line 1227 "parser.yy"
                      { yylhs.value.as < SelectStructurePointer > () = yystack_[0].value.as < SelectStructurePointer > (); }
#line 8454 "parser.cc"
    break;

  case 50:
#line 1228 "parser.yy"
                                                                   {
      auto select_structure = std::make_shared<SelectStructure>();
      select_structure->init_set_query(yystack_[1].value.as < SetOperationType > (), yystack_[3].value.as < SelectStructurePointer > (), yystack_[0].value.as < SelectStructurePointer > ());
      yylhs.value.as < SelectStructurePointer > () = select_structure;
    }
#line 8464 "parser.cc"
    break;

  case 51:
#line 1236 "parser.yy"
                                          { yylhs.value.as < SelectStructurePointer > () = yystack_[1].value.as < SelectStructurePointer > (); }
#line 8470 "parser.cc"
    break;

  case 52:
#line 1237 "parser.yy"
                                   { yylhs.value.as < SelectStructurePointer > () = yystack_[1].value.as < SelectStructurePointer > (); }
#line 8476 "parser.cc"
    break;

  case 53:
#line 1241 "parser.yy"
                            { yylhs.value.as < SelectStructurePointer > () = yystack_[0].value.as < SelectStructurePointer > (); }
#line 8482 "parser.cc"
    break;

  case 54:
#line 1252 "parser.yy"
                          {
          auto select_structure = std::make_shared<SelectStructure>();
          auto group_by_expr = yystack_[2].value.as < GroupbyStructurePointer > ();
          if (yystack_[1].value.as < Expression > ()) {
            if (!group_by_expr) {
              group_by_expr = std::make_shared<GroupbyStructure>();
            }
            group_by_expr->SetHavingExpr(yystack_[1].value.as < Expression > ());
          }
          select_structure->init_simple_query(yystack_[5].value.as < SelectPartStructurePointer > (), yystack_[4].value.as < FromPartStructurePointer > (), yystack_[3].value.as < Expression > (), group_by_expr, nullptr);

          if (yystack_[6].value.as < int > () & SelectOption::DISTINCT) {
            select_structure->SetDistinct(true);
          }
          yylhs.value.as < SelectStructurePointer > () = select_structure;
        }
#line 8503 "parser.cc"
    break;

  case 55:
#line 1271 "parser.yy"
                                              { yylhs.value.as < FromPartStructurePointer > () = nullptr; }
#line 8509 "parser.cc"
    break;

  case 56:
#line 1272 "parser.yy"
                    { yylhs.value.as < FromPartStructurePointer > () = yystack_[0].value.as < FromPartStructurePointer > (); }
#line 8515 "parser.cc"
    break;

  case 57:
#line 1276 "parser.yy"
                         {
          if (!yystack_[0].value.as < vector<JoinStructurePointer> > ().empty()) {
            auto from_part = std::make_shared<FromPartStructure>();
            for (const auto& join_part : yystack_[0].value.as < vector<JoinStructurePointer> > ()) {
              from_part->AddFromItem(join_part);
            }
            yylhs.value.as < FromPartStructurePointer > () = from_part;
          } else {
            yylhs.value.as < FromPartStructurePointer > () = nullptr;
          }
        }
#line 8531 "parser.cc"
    break;

  case 58:
#line 1289 "parser.yy"
                 { ThrowNotSupportedException("DUAL");}
#line 8537 "parser.cc"
    break;

  case 59:
#line 1290 "parser.yy"
                             { yylhs.value.as < vector<JoinStructurePointer> > () = yystack_[0].value.as < vector<JoinStructurePointer> > (); }
#line 8543 "parser.cc"
    break;

  case 60:
#line 1294 "parser.yy"
                        {
          std::vector<JoinStructurePointer> list;
          list.emplace_back(yystack_[0].value.as < JoinStructurePointer > ());
          yylhs.value.as < vector<JoinStructurePointer> > () = list;
        }
#line 8553 "parser.cc"
    break;

  case 61:
#line 1299 "parser.yy"
                                                 {
      yystack_[2].value.as < vector<JoinStructurePointer> > ().emplace_back(yystack_[0].value.as < JoinStructurePointer > ());
      yylhs.value.as < vector<JoinStructurePointer> > () = yystack_[2].value.as < vector<JoinStructurePointer> > ();
    }
#line 8562 "parser.cc"
    break;

  case 62:
#line 1306 "parser.yy"
                   { yylhs.value.as < int > () = SelectOption::UNSET; }
#line 8568 "parser.cc"
    break;

  case 63:
#line 1307 "parser.yy"
                            { yylhs.value.as < int > () = yystack_[0].value.as < int > (); }
#line 8574 "parser.cc"
    break;

  case 64:
#line 1311 "parser.yy"
                                         { yylhs.value.as < int > () = yystack_[1].value.as < int > () | yystack_[0].value.as < int > ();}
#line 8580 "parser.cc"
    break;

  case 65:
#line 1312 "parser.yy"
                      { yylhs.value.as < int > () = yystack_[0].value.as < int > (); }
#line 8586 "parser.cc"
    break;

  case 66:
#line 1316 "parser.yy"
                          { yylhs.value.as < int > () = yystack_[0].value.as < int > (); }
#line 8592 "parser.cc"
    break;

  case 67:
#line 1317 "parser.yy"
                         { yylhs.value.as < int > () = SelectOption::SQL_NO_CACHE_SYM; }
#line 8598 "parser.cc"
    break;

  case 68:
#line 1323 "parser.yy"
                    {
          auto the_sps = yystack_[2].value.as < SelectPartStructurePointer > ();
          ADD_SELECT_ITEM(the_sps, (yystack_[0].value.as < tuple<Expression, string> > ()));
          yylhs.value.as < SelectPartStructurePointer > () = yystack_[2].value.as < SelectPartStructurePointer > ();
        }
#line 8608 "parser.cc"
    break;

  case 69:
#line 1328 "parser.yy"
                    {
          auto the_sps = std::make_shared<SelectPartStructure>();
          ADD_SELECT_ITEM(the_sps, (yystack_[0].value.as < tuple<Expression, string> > ()));
          yylhs.value.as < SelectPartStructurePointer > () = the_sps;
        }
#line 8618 "parser.cc"
    break;

  case 70:
#line 1333 "parser.yy"
            {
      auto the_sps = std::make_shared<SelectPartStructure>();
      ADD_SELECT_ITEM(the_sps, std::make_tuple(std::make_shared<CommonBiaodashi>(BiaodashiType::Star, string()), string()));
      yylhs.value.as < SelectPartStructurePointer > () = the_sps;
    }
#line 8628 "parser.cc"
    break;

  case 71:
#line 1341 "parser.yy"
                    { yylhs.value.as < tuple<Expression, string> > () = std::make_tuple(yystack_[0].value.as < Expression > (), string()); }
#line 8634 "parser.cc"
    break;

  case 72:
#line 1342 "parser.yy"
                          {
        SetExprOrigName(yystack_[1].value.as < Expression > (), driver.get_string_at_location(yystack_[1].location), yystack_[0].value.as < string > ());

        yylhs.value.as < tuple<Expression, string> > () = std::make_tuple(yystack_[1].value.as < Expression > (), NormalizeIdent(yystack_[0].value.as < string > ()));
    }
#line 8644 "parser.cc"
    break;

  case 73:
#line 1351 "parser.yy"
                      { yylhs.value.as < string > () = string(); }
#line 8650 "parser.cc"
    break;

  case 74:
#line 1352 "parser.yy"
                       { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 8656 "parser.cc"
    break;

  case 75:
#line 1353 "parser.yy"
                                 { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 8662 "parser.cc"
    break;

  case 76:
#line 1358 "parser.yy"
                    {}
#line 8668 "parser.cc"
    break;

  case 77:
#line 1359 "parser.yy"
                {}
#line 8674 "parser.cc"
    break;

  case 78:
#line 1365 "parser.yy"
                                  {
      yylhs.value.as < Expression > () = CreateLogicExpression(LogicType::OR, yystack_[2].value.as < Expression > (), yystack_[0].value.as < Expression > ());
    }
#line 8682 "parser.cc"
    break;

  case 79:
#line 1369 "parser.yy"
                                    {
      yylhs.value.as < Expression > () = CreateLogicExpression(LogicType::AND, yystack_[2].value.as < Expression > (), yystack_[0].value.as < Expression > ());
    }
#line 8690 "parser.cc"
    break;

  case 80:
#line 1372 "parser.yy"
                                   {
      yylhs.value.as < Expression > () = GenerateNotExpression(yystack_[0].value.as < Expression > ());
    }
#line 8698 "parser.cc"
    break;

  case 81:
#line 1376 "parser.yy"
    {
        ThrowNotSupportedException("IS TRUE");
    }
#line 8706 "parser.cc"
    break;

  case 82:
#line 1380 "parser.yy"
    {
        ThrowNotSupportedException("IS NOT TRUE");
    }
#line 8714 "parser.cc"
    break;

  case 83:
#line 1384 "parser.yy"
    {
        ThrowNotSupportedException("IS FALSE");
    }
#line 8722 "parser.cc"
    break;

  case 84:
#line 1388 "parser.yy"
    {
        ThrowNotSupportedException("IS NOT FALSE");
    }
#line 8730 "parser.cc"
    break;

  case 85:
#line 1392 "parser.yy"
    {
        ThrowNotSupportedException("IS UNKNOWN");
    }
#line 8738 "parser.cc"
    break;

  case 86:
#line 1396 "parser.yy"
    {
        ThrowNotSupportedException("IS NOT UNKNOWN");
    }
#line 8746 "parser.cc"
    break;

  case 87:
#line 1399 "parser.yy"
                 {
      if (yystack_[0].value.as < Expression > () == nullptr)
      {
        ThrowNotSupportedException("expression: " + driver.get_string_at_location(yystack_[0].location));
      }
       yylhs.value.as < Expression > () = yystack_[0].value.as < Expression > (); 
    }
#line 8758 "parser.cc"
    break;

  case 88:
#line 1409 "parser.yy"
                                      {
          auto expression = std::make_shared<CommonBiaodashi>(BiaodashiType::IsNull, 0);

          expression->AddChild(yystack_[2].value.as < Expression > ());

          yylhs.value.as < Expression > () = expression;
        }
#line 8770 "parser.cc"
    break;

  case 89:
#line 1416 "parser.yy"
                                          {

      auto expression = std::make_shared<CommonBiaodashi>(BiaodashiType::IsNotNull, 0);

      expression->AddChild(yystack_[3].value.as < Expression > ());

      yylhs.value.as < Expression > () = expression;
    }
#line 8783 "parser.cc"
    break;

  case 90:
#line 1424 "parser.yy"
                                   {
      yylhs.value.as < Expression > () = CreateComparationExpression(yystack_[2].value.as < Expression > (), yystack_[1].value.as < int > (), yystack_[0].value.as < Expression > ());
    }
#line 8791 "parser.cc"
    break;

  case 91:
#line 1427 "parser.yy"
        { yylhs.value.as < Expression > () = yystack_[3].value.as < Expression > (); }
#line 8797 "parser.cc"
    break;

  case 92:
#line 1428 "parser.yy"
                  {
      yylhs.value.as < Expression > () = yystack_[0].value.as < Expression > ();
    }
#line 8805 "parser.cc"
    break;

  case 93:
#line 1434 "parser.yy"
                                       {
          CheckInExprFirstArg( yystack_[2].value.as < Expression > () );
          auto in_expression = std::make_shared<CommonBiaodashi>(BiaodashiType::Inop, 0);
          in_expression->AddChild(yystack_[2].value.as < Expression > ());

          auto expr = std::make_shared<CommonBiaodashi>(BiaodashiType::Query, yystack_[0].value.as < SelectStructurePointer > ());
          in_expression->AddChild(expr);

          yylhs.value.as < Expression > () = in_expression;
        }
#line 8820 "parser.cc"
    break;

  case 94:
#line 1444 "parser.yy"
                                           {
          CheckInExprFirstArg( yystack_[3].value.as < Expression > () );
          auto notin_expression = std::make_shared<CommonBiaodashi>(BiaodashiType::NotIn, 0);
          notin_expression->AddChild(yystack_[3].value.as < Expression > ());

          auto expr = std::make_shared<CommonBiaodashi>(BiaodashiType::Query, yystack_[0].value.as < SelectStructurePointer > ());
          notin_expression->AddChild(expr);

          yylhs.value.as < Expression > () = notin_expression;
        }
#line 8835 "parser.cc"
    break;

  case 95:
#line 1454 "parser.yy"
                                     {
          CheckInExprFirstArg( yystack_[4].value.as < Expression > () );
          auto in_expression = std::make_shared<CommonBiaodashi>(BiaodashiType::Inop, 0);
          in_expression->AddChild(yystack_[4].value.as < Expression > ());
          in_expression->AddChild(yystack_[1].value.as < Expression > ());
          yylhs.value.as < Expression > () = in_expression;
      }
#line 8847 "parser.cc"
    break;

  case 96:
#line 1461 "parser.yy"
                                             {
          CheckInExprFirstArg( yystack_[4].value.as < Expression > () );
          auto in_expression = std::make_shared<CommonBiaodashi>(BiaodashiType::Inop, 0);
          in_expression->AddChild(yystack_[4].value.as < Expression > ());

          for (auto const& expr : driver.global_expr_list) {
            in_expression->AddChild(expr);
          }
          driver.global_expr_list.clear();

          yylhs.value.as < Expression > () = in_expression;
    }
#line 8864 "parser.cc"
    break;

  case 97:
#line 1473 "parser.yy"
                                         {
          CheckInExprFirstArg( yystack_[5].value.as < Expression > () );
          auto in_expression = std::make_shared<CommonBiaodashi>(BiaodashiType::NotIn, 0);
          in_expression->AddChild(yystack_[5].value.as < Expression > ());
          in_expression->AddChild(yystack_[1].value.as < Expression > ());
          yylhs.value.as < Expression > () = in_expression;
      }
#line 8876 "parser.cc"
    break;

  case 98:
#line 1480 "parser.yy"
                                                 {
          CheckInExprFirstArg( yystack_[5].value.as < Expression > () );
          auto in_expression = std::make_shared<CommonBiaodashi>(BiaodashiType::NotIn, 0);
          in_expression->AddChild(yystack_[5].value.as < Expression > ());

          for (auto const& expr : driver.global_expr_list) {
            in_expression->AddChild(expr);
          }
          driver.global_expr_list.clear();

          yylhs.value.as < Expression > () = in_expression;
    }
#line 8893 "parser.cc"
    break;

  case 99:
#line 1492 "parser.yy"
                                                        {
      yylhs.value.as < Expression > () = CreateBetweenExpr( yystack_[4].value.as < Expression > (), yystack_[2].value.as < Expression > (), yystack_[0].value.as < Expression > () );
    }
#line 8901 "parser.cc"
    break;

  case 100:
#line 1495 "parser.yy"
                                                            {
      auto expression = CreateBetweenExpr( yystack_[5].value.as < Expression > (), yystack_[2].value.as < Expression > (), yystack_[0].value.as < Expression > () );

      yylhs.value.as < Expression > () = GenerateNotExpression(expression);
    }
#line 8911 "parser.cc"
    break;

  case 101:
#line 1500 "parser.yy"
                                          { ThrowNotSupportedException("SOUNDS"); }
#line 8917 "parser.cc"
    break;

  case 102:
#line 1501 "parser.yy"
                                             {
      auto target = yystack_[3].value.as < Expression > ();
      auto object = yystack_[1].value.as < Expression > ();

      BiaodashiPointer expression = std::make_shared<CommonBiaodashi>(BiaodashiType::Likeop, 0);
      expression->AddChild(target);
      expression->AddChild(object);
      yylhs.value.as < Expression > () = expression;
    }
#line 8931 "parser.cc"
    break;

  case 103:
#line 1510 "parser.yy"
                                                 {
      auto target = yystack_[4].value.as < Expression > ();
      auto object = yystack_[1].value.as < Expression > ();

      BiaodashiPointer expression = std::make_shared<CommonBiaodashi>(BiaodashiType::Likeop, 0);
      expression->AddChild(target);
      expression->AddChild(object);
      yylhs.value.as < Expression > () = GenerateNotExpression(expression);
    }
#line 8945 "parser.cc"
    break;

  case 104:
#line 1519 "parser.yy"
                                { ThrowNotSupportedException("REGEXP"); }
#line 8951 "parser.cc"
    break;

  case 105:
#line 1520 "parser.yy"
                                    { ThrowNotSupportedException("NOT REGEXP"); }
#line 8957 "parser.cc"
    break;

  case 106:
#line 1521 "parser.yy"
                 { yylhs.value.as < Expression > () = yystack_[0].value.as < Expression > (); }
#line 8963 "parser.cc"
    break;

  case 107:
#line 1525 "parser.yy"
                                       { ThrowNotSupportedException("operator bitor |"); }
#line 8969 "parser.cc"
    break;

  case 108:
#line 1526 "parser.yy"
                                       { ThrowNotSupportedException("operator bitand &"); }
#line 8975 "parser.cc"
    break;

  case 109:
#line 1527 "parser.yy"
                                                     { ThrowNotSupportedException("operator SHIFT_LEFT"); }
#line 8981 "parser.cc"
    break;

  case 110:
#line 1528 "parser.yy"
                                                       { ThrowNotSupportedException("operator SHIFT_RIGHT"); }
#line 8987 "parser.cc"
    break;

  case 111:
#line 1529 "parser.yy"
                                        { 
      yylhs.value.as < Expression > () = CreateCalcExpression(yystack_[2].value.as < Expression > (), CalcType::ADD, yystack_[0].value.as < Expression > ());
     }
#line 8995 "parser.cc"
    break;

  case 112:
#line 1532 "parser.yy"
                                        {
      yylhs.value.as < Expression > () = CreateCalcExpression(yystack_[2].value.as < Expression > (), CalcType::SUB, yystack_[0].value.as < Expression > ());
    }
#line 9003 "parser.cc"
    break;

  case 113:
#line 1536 "parser.yy"
    {
      auto interval_value = yystack_[1].value.as < Expression > ();
      auto interval_type = yystack_[0].value.as < string > ();

      auto interval_expression = std::make_shared<CommonBiaodashi>(BiaodashiType::IntervalExpression, interval_type);
      interval_expression->AddChild(interval_value);

      std::vector<Expression> args;
      args.emplace_back(yystack_[4].value.as < Expression > ());
      args.emplace_back(interval_expression);
      yylhs.value.as < Expression > () = CreateFunctionExpression("DATE_ADD", args);
    }
#line 9020 "parser.cc"
    break;

  case 114:
#line 1549 "parser.yy"
    {
      auto interval_value = yystack_[1].value.as < Expression > ();
      auto interval_type = yystack_[0].value.as < string > ();

      auto interval_expression = std::make_shared<CommonBiaodashi>(BiaodashiType::IntervalExpression, interval_type);
      interval_expression->AddChild(interval_value);

      std::vector<Expression> args;
      args.emplace_back(yystack_[4].value.as < Expression > ());
      args.emplace_back(interval_expression);
      yylhs.value.as < Expression > () = CreateFunctionExpression("DATE_SUB", args);
    }
#line 9037 "parser.cc"
    break;

  case 115:
#line 1561 "parser.yy"
                                        {
      yylhs.value.as < Expression > () = CreateCalcExpression(yystack_[2].value.as < Expression > (), CalcType::MUL, yystack_[0].value.as < Expression > ());
    }
#line 9045 "parser.cc"
    break;

  case 116:
#line 1564 "parser.yy"
                                        {
      yylhs.value.as < Expression > () = CreateCalcExpression(yystack_[2].value.as < Expression > (), CalcType::DIV, yystack_[0].value.as < Expression > ());
    }
#line 9053 "parser.cc"
    break;

  case 117:
#line 1567 "parser.yy"
                                       {
      yylhs.value.as < Expression > () = CreateCalcExpression(yystack_[2].value.as < Expression > (), CalcType::MOD, yystack_[0].value.as < Expression > ());
    }
#line 9061 "parser.cc"
    break;

  case 118:
#line 1570 "parser.yy"
                                                {
      yylhs.value.as < Expression > () = CreateCalcExpression(yystack_[2].value.as < Expression > (), CalcType::DIV, yystack_[0].value.as < Expression > ());
    }
#line 9069 "parser.cc"
    break;

  case 119:
#line 1573 "parser.yy"
                                                {
      yylhs.value.as < Expression > () = CreateCalcExpression(yystack_[2].value.as < Expression > (), CalcType::MOD, yystack_[0].value.as < Expression > ());
    }
#line 9077 "parser.cc"
    break;

  case 120:
#line 1576 "parser.yy"
                             { ThrowNotSupportedException("operator xor ^"); }
#line 9083 "parser.cc"
    break;

  case 121:
#line 1577 "parser.yy"
                    { yylhs.value.as < Expression > () = yystack_[0].value.as < Expression > (); }
#line 9089 "parser.cc"
    break;

  case 130:
#line 1612 "parser.yy"
           {
          yylhs.value.as < int > () = static_cast<int>(ComparisonType::DengYu);
        }
#line 9097 "parser.cc"
    break;

  case 131:
#line 1615 "parser.yy"
                   {
          ThrowNotSupportedException("<=>");
        }
#line 9105 "parser.cc"
    break;

  case 132:
#line 1618 "parser.yy"
           {
          yylhs.value.as < int > () = static_cast<int>(ComparisonType::DaYuDengYu);
        }
#line 9113 "parser.cc"
    break;

  case 133:
#line 1621 "parser.yy"
               {
          yylhs.value.as < int > () = static_cast<int>(ComparisonType::DaYu);
        }
#line 9121 "parser.cc"
    break;

  case 134:
#line 1624 "parser.yy"
           {
          yylhs.value.as < int > () = static_cast<int>(ComparisonType::XiaoYuDengYu);
        }
#line 9129 "parser.cc"
    break;

  case 135:
#line 1627 "parser.yy"
           {
          yylhs.value.as < int > () = static_cast<int>(ComparisonType::XiaoYu);
        }
#line 9137 "parser.cc"
    break;

  case 136:
#line 1630 "parser.yy"
           {
          yylhs.value.as < int > () = static_cast<int>(ComparisonType::BuDengYu);
        }
#line 9145 "parser.cc"
    break;

  case 137:
#line 1636 "parser.yy"
             { ThrowNotSupportedException("ALL"); }
#line 9151 "parser.cc"
    break;

  case 138:
#line 1637 "parser.yy"
                { ThrowNotSupportedException("ANY"); }
#line 9157 "parser.cc"
    break;

  case 139:
#line 1651 "parser.yy"
                     {
          yylhs.value.as < Expression > () = CreateIdentExpression(yystack_[0].value.as < SQLIdentPtr > ());
        }
#line 9165 "parser.cc"
    break;

  case 140:
#line 1654 "parser.yy"
                              { yylhs.value.as < Expression > () = yystack_[0].value.as < Expression > (); }
#line 9171 "parser.cc"
    break;

  case 141:
#line 1655 "parser.yy"
                                 { yylhs.value.as < Expression > () = yystack_[0].value.as < Expression > (); }
#line 9177 "parser.cc"
    break;

  case 142:
#line 1656 "parser.yy"
                              { yylhs.value.as < Expression > () = yystack_[0].value.as < Expression > (); }
#line 9183 "parser.cc"
    break;

  case 143:
#line 1657 "parser.yy"
                               { yylhs.value.as < Expression > () = yystack_[0].value.as < Expression > (); }
#line 9189 "parser.cc"
    break;

  case 144:
#line 1658 "parser.yy"
                                   { yylhs.value.as < Expression > () = yystack_[0].value.as < Expression > (); }
#line 9195 "parser.cc"
    break;

  case 145:
#line 1659 "parser.yy"
        { yylhs.value.as < Expression > () = yystack_[2].value.as < Expression > (); }
#line 9201 "parser.cc"
    break;

  case 146:
#line 1660 "parser.yy"
                {
        yylhs.value.as < Expression > () = LiteralToExpression( yystack_[0].value.as < Literal > () );
    }
#line 9209 "parser.cc"
    break;

  case 147:
#line 1663 "parser.yy"
        { yylhs.value.as < Expression > () = yystack_[0].value.as < Expression > (); }
#line 9215 "parser.cc"
    break;

  case 148:
#line 1664 "parser.yy"
        { yylhs.value.as < Expression > () = yystack_[0].value.as < Expression > (); }
#line 9221 "parser.cc"
    break;

  case 149:
#line 1665 "parser.yy"
                         { ThrowNotSupportedException("WINDOW FUNCTION"); }
#line 9227 "parser.cc"
    break;

  case 150:
#line 1666 "parser.yy"
                                          { ThrowNotSupportedException("OR_OR"); }
#line 9233 "parser.cc"
    break;

  case 151:
#line 1668 "parser.yy"
                                  {
      yylhs.value.as < Expression > () = yystack_[0].value.as < Expression > ();
    }
#line 9241 "parser.cc"
    break;

  case 152:
#line 1671 "parser.yy"
                                  {
      auto child = (CommonBiaodashi*)(yystack_[0].value.as < Expression > ().get());
      if (child->GetType() == BiaodashiType::Zhengshu) {
          if (child->GetValueType() == BiaodashiValueType::LONG_INT) {
              auto value = boost::get<int64_t>(child->GetContent());
              auto expression = std::make_shared<CommonBiaodashi>(BiaodashiType::Zhengshu, 0 - value);
              expression->SetValueType(child->GetValueType());
              yylhs.value.as < Expression > () = expression;
          } else {
              auto value = boost::get<int>(child->GetContent());
              auto expression = std::make_shared<CommonBiaodashi>(BiaodashiType::Zhengshu, 0 - value);
              expression->SetValueType(child->GetValueType());
              yylhs.value.as < Expression > () = expression;
          }
      } else if (child->GetType() == BiaodashiType::Fudianshu) {
          auto value = boost::get<double>(child->GetContent());
          yylhs.value.as < Expression > () = std::make_shared<CommonBiaodashi>(BiaodashiType::Fudianshu, 0 - value);
      } else if (child->GetType() == BiaodashiType::Decimal) {
          yylhs.value.as < Expression > () = NegateDecimalExpresstion( child->GetContent() );
      } else {
          auto expression = std::make_shared<CommonBiaodashi>(BiaodashiType::Yunsuan, CalcType::SUB);
          expression->AddChild(CreateIntegerExpression("0"));
          expression->AddChild(yystack_[0].value.as < Expression > ());
          yylhs.value.as < Expression > () = expression;
      }
    }
#line 9272 "parser.cc"
    break;

  case 153:
#line 1697 "parser.yy"
                                  { ThrowNotSupportedException("operator ~"); }
#line 9278 "parser.cc"
    break;

  case 154:
#line 1698 "parser.yy"
                                   { ThrowNotSupportedException("NOT2"); }
#line 9284 "parser.cc"
    break;

  case 155:
#line 1700 "parser.yy"
                     { yylhs.value.as < Expression > () = yystack_[0].value.as < Expression > (); }
#line 9290 "parser.cc"
    break;

  case 156:
#line 1701 "parser.yy"
                     { yylhs.value.as < Expression > () = yystack_[1].value.as < Expression > (); }
#line 9296 "parser.cc"
    break;

  case 157:
#line 1702 "parser.yy"
                                   { 
       auto expression = CreateExprListExpression();
       expression->AddChild(yystack_[3].value.as < Expression > ());
       for (auto expr : yystack_[1].value.as < vector<Expression> > () ){
         expression->AddChild(expr);
       }
      yylhs.value.as < Expression > () = expression;  
      }
#line 9309 "parser.cc"
    break;

  case 158:
#line 1710 "parser.yy"
                                           { ThrowNotSupportedException("ROW"); }
#line 9315 "parser.cc"
    break;

  case 159:
#line 1711 "parser.yy"
                              {
          auto query_expression = std::make_shared<CommonBiaodashi>(BiaodashiType::Query, yystack_[0].value.as < SelectStructurePointer > ());
          auto expression = std::make_shared<CommonBiaodashi>(BiaodashiType::Cunzai, 0);
          expression->AddChild(query_expression);
          yylhs.value.as < Expression > () = expression;
    }
#line 9326 "parser.cc"
    break;

  case 160:
#line 1717 "parser.yy"
                                     { ThrowNotSupportedException("MATCH...AGAINST"); }
#line 9332 "parser.cc"
    break;

  case 161:
#line 1718 "parser.yy"
                                         {
      yylhs.value.as < Expression > () = yystack_[0].value.as < Expression > ();
    }
#line 9340 "parser.cc"
    break;

  case 162:
#line 1721 "parser.yy"
                                           {
      yylhs.value.as < Expression > () = CreateCastFunctionExpr( driver, yystack_[3].location, yystack_[3].value.as < Expression > (), yystack_[1].value.as < CastType > () );
    }
#line 9348 "parser.cc"
    break;

  case 163:
#line 1724 "parser.yy"
                                                      {
      std::vector<Expression> args;
      args.emplace_back(yystack_[3].value.as < Expression > ());
      args.emplace_back(yystack_[1].value.as < Expression > ());
      auto expression = CreateFunctionExpression("TRUNCATE", args);
      yylhs.value.as < Expression > () = expression;
    }
#line 9360 "parser.cc"
    break;

  case 164:
#line 1731 "parser.yy"
                  { yylhs.value.as < Expression > () = yystack_[0].value.as < Expression > (); }
#line 9366 "parser.cc"
    break;

  case 165:
#line 1732 "parser.yy"
                                               {
      yylhs.value.as < Expression > () = CreateCastFunctionExpr( driver, yystack_[3].location, yystack_[3].value.as < Expression > (), yystack_[1].value.as < CastType > () );
    }
#line 9374 "parser.cc"
    break;

  case 166:
#line 1735 "parser.yy"
                                         { ThrowNotSupportedException("DEFAULT"); }
#line 9380 "parser.cc"
    break;

  case 167:
#line 1736 "parser.yy"
                                            { ThrowNotSupportedException("VALUES"); }
#line 9386 "parser.cc"
    break;

  case 168:
#line 1737 "parser.yy"
                                                               { ThrowNotSupportedException("INTERVAL"); }
#line 9392 "parser.cc"
    break;

  case 169:
#line 1740 "parser.yy"
                                             {
        yylhs.value.as < Expression > () = CreateCaseWhenExpression(yystack_[3].value.as < Expression > (), yystack_[2].value.as < vector<tuple<Expression, Expression>> > (), yystack_[1].value.as < Expression > ());
    }
#line 9400 "parser.cc"
    break;

  case 170:
#line 1751 "parser.yy"
                                   { ThrowNotSupportedException("CHAR"); }
#line 9406 "parser.cc"
    break;

  case 171:
#line 1752 "parser.yy"
                                   {
        yylhs.value.as < Expression > () = CreateCurrentUserExpression();
    }
#line 9414 "parser.cc"
    break;

  case 172:
#line 1755 "parser.yy"
                               {
        yylhs.value.as < Expression > () = CreateConnectionIdExpression();
    }
#line 9422 "parser.cc"
    break;

  case 173:
#line 1758 "parser.yy"
                              {
      yylhs.value.as < Expression > () = CreateFunctionExpression("DATE", yystack_[1].value.as < Expression > ());
    }
#line 9430 "parser.cc"
    break;

  case 174:
#line 1761 "parser.yy"
                             {
      yylhs.value.as < Expression > () = CreateFunctionExpression("DATE", CreateStringExpression(yystack_[0].value.as < string > ()));
    }
#line 9438 "parser.cc"
    break;

  case 175:
#line 1764 "parser.yy"
                             {
      yylhs.value.as < Expression > () = CreateFunctionExpression("DAY", yystack_[1].value.as < Expression > ());
    }
#line 9446 "parser.cc"
    break;

  case 176:
#line 1767 "parser.yy"
                              { ThrowNotSupportedException("HOUR"); }
#line 9452 "parser.cc"
    break;

  case 177:
#line 1768 "parser.yy"
                                                           { ThrowNotSupportedException("INSERT"); }
#line 9458 "parser.cc"
    break;

  case 178:
#line 1769 "parser.yy"
                                                              { ThrowNotSupportedException("INTERVAL"); }
#line 9464 "parser.cc"
    break;

  case 179:
#line 1770 "parser.yy"
                                                                            { ThrowNotSupportedException("INTERVAL"); }
#line 9470 "parser.cc"
    break;

  case 180:
#line 1771 "parser.yy"
                                   { ThrowNotSupportedException("LEFT"); }
#line 9476 "parser.cc"
    break;

  case 181:
#line 1772 "parser.yy"
                                { ThrowNotSupportedException("MINUTE"); }
#line 9482 "parser.cc"
    break;

  case 182:
#line 1773 "parser.yy"
                                {
      yylhs.value.as < Expression > () = CreateFunctionExpression("MONTH", yystack_[1].value.as < Expression > ());
    }
#line 9490 "parser.cc"
    break;

  case 183:
#line 1776 "parser.yy"
                                    { ThrowNotSupportedException("RIGHT"); }
#line 9496 "parser.cc"
    break;

  case 184:
#line 1777 "parser.yy"
                                { ThrowNotSupportedException("SECOND"); }
#line 9502 "parser.cc"
    break;

  case 185:
#line 1778 "parser.yy"
                              { ThrowNotSupportedException("TIME"); }
#line 9508 "parser.cc"
    break;

  case 186:
#line 1779 "parser.yy"
                                   { ThrowNotSupportedException("TIMESTAMP"); }
#line 9514 "parser.cc"
    break;

  case 187:
#line 1780 "parser.yy"
                                            { ThrowNotSupportedException("TIMESTAMP"); }
#line 9520 "parser.cc"
    break;

  case 188:
#line 1781 "parser.yy"
                          { ThrowNotSupportedException("TRIM"); }
#line 9526 "parser.cc"
    break;

  case 189:
#line 1782 "parser.yy"
                                            { ThrowNotSupportedException("TRIM"); }
#line 9532 "parser.cc"
    break;

  case 190:
#line 1783 "parser.yy"
                                             { ThrowNotSupportedException("TRIM"); }
#line 9538 "parser.cc"
    break;

  case 191:
#line 1784 "parser.yy"
                                         { ThrowNotSupportedException("TRIM"); }
#line 9544 "parser.cc"
    break;

  case 192:
#line 1785 "parser.yy"
                                       { ThrowNotSupportedException("TRIM"); }
#line 9550 "parser.cc"
    break;

  case 193:
#line 1786 "parser.yy"
                                        { ThrowNotSupportedException("TRIM"); }
#line 9556 "parser.cc"
    break;

  case 194:
#line 1787 "parser.yy"
                                    { ThrowNotSupportedException("TRIM"); }
#line 9562 "parser.cc"
    break;

  case 195:
#line 1788 "parser.yy"
                                    { ThrowNotSupportedException("TRIM"); }
#line 9568 "parser.cc"
    break;

  case 196:
#line 1789 "parser.yy"
                     { ThrowNotSupportedException("USER"); }
#line 9574 "parser.cc"
    break;

  case 197:
#line 1790 "parser.yy"
                              { ThrowNotSupportedException("YEAR"); }
#line 9580 "parser.cc"
    break;

  case 198:
#line 1791 "parser.yy"
                                    {
      yylhs.value.as < Expression > () = CreateFunctionExpression("COALESCE", yystack_[1].value.as < vector<Expression> > ());
    }
#line 9588 "parser.cc"
    break;

  case 199:
#line 1794 "parser.yy"
                                       {
      yylhs.value.as < Expression > () = CreateCalcExpression(yystack_[3].value.as < Expression > (), CalcType::MOD, yystack_[1].value.as < Expression > ());
    }
#line 9596 "parser.cc"
    break;

  case 200:
#line 1812 "parser.yy"
                                          {
      std::vector<Expression> args;
      args.emplace_back(yystack_[3].value.as < Expression > ());
      args.emplace_back(yystack_[1].value.as < Expression > ());

      yylhs.value.as < Expression > () = CreateFunctionExpression("DATE_ADD", args);
    }
#line 9608 "parser.cc"
    break;

  case 201:
#line 1819 "parser.yy"
                                                                {
      auto interval_value = yystack_[2].value.as < Expression > ();
      auto interval_type = yystack_[1].value.as < string > ();

      BiaodashiPointer interval_expression = std::make_shared<CommonBiaodashi>(BiaodashiType::IntervalExpression, interval_type);
      interval_expression->AddChild(interval_value);

      std::vector<Expression> args;
      args.emplace_back(yystack_[5].value.as < Expression > ());
      args.emplace_back(interval_expression);

      yylhs.value.as < Expression > () = CreateFunctionExpression("DATE_ADD", args);
    }
#line 9626 "parser.cc"
    break;

  case 202:
#line 1832 "parser.yy"
                                { ThrowNotSupportedException("CURDATE"); }
#line 9632 "parser.cc"
    break;

  case 203:
#line 1833 "parser.yy"
                                        { ThrowNotSupportedException("CURTIME"); }
#line 9638 "parser.cc"
    break;

  case 204:
#line 1834 "parser.yy"
                                                                      {
      auto interval_value = yystack_[2].value.as < Expression > ();
      auto interval_type = yystack_[1].value.as < string > ();

      BiaodashiPointer interval_expression = std::make_shared<CommonBiaodashi>(BiaodashiType::IntervalExpression, interval_type);
      interval_expression->AddChild(interval_value);

      std::vector<Expression> args;
      args.emplace_back(yystack_[5].value.as < Expression > ());
      args.emplace_back(interval_expression);

      yylhs.value.as < Expression > () = CreateFunctionExpression("DATE_ADD", args);
    }
#line 9656 "parser.cc"
    break;

  case 205:
#line 1847 "parser.yy"
                                                                      {
      auto interval_value = yystack_[2].value.as < Expression > ();
      auto interval_type = yystack_[1].value.as < string > ();

      BiaodashiPointer interval_expression = std::make_shared<CommonBiaodashi>(BiaodashiType::IntervalExpression, interval_type);
      interval_expression->AddChild(interval_value);

      std::vector<Expression> args;
      args.emplace_back(yystack_[5].value.as < Expression > ());
      args.emplace_back(interval_expression);

      yylhs.value.as < Expression > () = CreateFunctionExpression("DATE_SUB", args);
    }
#line 9674 "parser.cc"
    break;

  case 206:
#line 1860 "parser.yy"
                                               {
      string function_name = "EXTRACT";
      auto expression = std::make_shared<CommonBiaodashi>(BiaodashiType::Hanshu, function_name);

      auto interval = CreateStringExpression(yystack_[3].value.as < string > ());
      expression->AddChild(interval);
      expression->AddChild(yystack_[1].value.as < Expression > ());
      yylhs.value.as < Expression > () = expression;
    }
#line 9688 "parser.cc"
    break;

  case 207:
#line 1869 "parser.yy"
                                              {
      string function_name = "EXTRACT";
      auto expression = std::make_shared<CommonBiaodashi>(BiaodashiType::Hanshu, function_name);

      auto interval = CreateStringExpression(yystack_[3].value.as < string > ());
      expression->AddChild(interval);
      expression->AddChild(yystack_[1].value.as < Expression > ());
      yylhs.value.as < Expression > () = expression;
    }
#line 9702 "parser.cc"
    break;

  case 208:
#line 1878 "parser.yy"
                                                    { ThrowNotSupportedException("GET_FORMAT"); }
#line 9708 "parser.cc"
    break;

  case 209:
#line 1879 "parser.yy"
        { yylhs.value.as < Expression > () = yystack_[0].value.as < Expression > (); }
#line 9714 "parser.cc"
    break;

  case 210:
#line 1880 "parser.yy"
                                                  { ThrowNotSupportedException("POSITION"); }
#line 9720 "parser.cc"
    break;

  case 211:
#line 1881 "parser.yy"
                                          { ThrowNotSupportedException("SUBDATE"); }
#line 9726 "parser.cc"
    break;

  case 212:
#line 1882 "parser.yy"
                                                                { ThrowNotSupportedException("SUBDATE"); }
#line 9732 "parser.cc"
    break;

  case 213:
#line 1883 "parser.yy"
                                                 {
      string function_name = "SUBSTRING";
      auto expression = std::make_shared<CommonBiaodashi>(BiaodashiType::Hanshu, function_name);

      expression->AddChild(yystack_[5].value.as < Expression > ());
      expression->AddChild(yystack_[3].value.as < Expression > ());
      expression->AddChild(yystack_[1].value.as < Expression > ());

      yylhs.value.as < Expression > () = expression;
    }
#line 9747 "parser.cc"
    break;

  case 214:
#line 1893 "parser.yy"
                                        {
      string function_name = "SUBSTRING";
      auto expression = std::make_shared<CommonBiaodashi>(BiaodashiType::Hanshu, function_name);

      expression->AddChild(yystack_[3].value.as < Expression > ());
      expression->AddChild(yystack_[1].value.as < Expression > ());
      expression->AddChild(CreateIntegerExpression("-1"));

      yylhs.value.as < Expression > () = expression;
    }
#line 9762 "parser.cc"
    break;

  case 215:
#line 1903 "parser.yy"
                                                      {
      string function_name = "SUBSTRING";
      auto expression = std::make_shared<CommonBiaodashi>(BiaodashiType::Hanshu, function_name);

      expression->AddChild(yystack_[5].value.as < Expression > ());
      expression->AddChild(yystack_[3].value.as < Expression > ());
      expression->AddChild(yystack_[1].value.as < Expression > ());

      yylhs.value.as < Expression > () = expression;
    }
#line 9777 "parser.cc"
    break;

  case 216:
#line 1913 "parser.yy"
                                         {
      string function_name = "SUBSTRING";
      auto expression = std::make_shared<CommonBiaodashi>(BiaodashiType::Hanshu, function_name);

      expression->AddChild(yystack_[3].value.as < Expression > ());
      expression->AddChild(yystack_[1].value.as < Expression > ());
      expression->AddChild(CreateIntegerExpression("-1"));

      yylhs.value.as < Expression > () = expression;
    }
#line 9792 "parser.cc"
    break;

  case 217:
#line 1923 "parser.yy"
                                        { ThrowNotSupportedException("SYSDATE"); }
#line 9798 "parser.cc"
    break;

  case 218:
#line 1924 "parser.yy"
                                                                    { ThrowNotSupportedException("TIMESTAMP_ADD"); }
#line 9804 "parser.cc"
    break;

  case 219:
#line 1925 "parser.yy"
                                                                     { ThrowNotSupportedException("TIMESTAMP_DIFF"); }
#line 9810 "parser.cc"
    break;

  case 220:
#line 1926 "parser.yy"
                                     { ThrowNotSupportedException("UTC_DATE"); }
#line 9816 "parser.cc"
    break;

  case 221:
#line 1927 "parser.yy"
                                             { ThrowNotSupportedException("UTC_TIME"); }
#line 9822 "parser.cc"
    break;

  case 222:
#line 1928 "parser.yy"
                                                  { ThrowNotSupportedException("UTC_TIMESTAMP"); }
#line 9828 "parser.cc"
    break;

  case 223:
#line 1929 "parser.yy"
                                    {
        yylhs.value.as < Expression > () = CreateFunctionExpression("DICT_INDEX", yystack_[1].value.as < Expression > ());
    }
#line 9836 "parser.cc"
    break;

  case 224:
#line 1941 "parser.yy"
          {
            yylhs.value.as < Expression > () = CreateCurrentDbExpression();
          }
#line 9844 "parser.cc"
    break;

  case 225:
#line 1945 "parser.yy"
          {
              auto expression = std::make_shared<CommonBiaodashi>(BiaodashiType::IfCondition, 0);

              expression->AddChild(yystack_[5].value.as < Expression > ());
              expression->AddChild(yystack_[3].value.as < Expression > ());
              expression->AddChild(yystack_[1].value.as < Expression > ());

              // expression->SetName();
              yylhs.value.as < Expression > () = expression;
          }
#line 9859 "parser.cc"
    break;

  case 226:
#line 1967 "parser.yy"
                            {
            yylhs.value.as < Expression > () = CreateServerVersionExpression();
        }
#line 9867 "parser.cc"
    break;

  case 227:
#line 1971 "parser.yy"
          {
            yylhs.value.as < Expression > () = CreateFunctionExpression(yystack_[3].value.as < string > (), yystack_[1].value.as < vector<Expression> > ());
          }
#line 9875 "parser.cc"
    break;

  case 228:
#line 1974 "parser.yy"
                                                { ThrowNotSupportedException( yystack_[5].value.as < string > () + "." + yystack_[3].value.as < string > () ); }
#line 9881 "parser.cc"
    break;

  case 229:
#line 1978 "parser.yy"
                        { yylhs.value.as < vector<Expression> > () = std::vector<Expression>(); }
#line 9887 "parser.cc"
    break;

  case 230:
#line 1979 "parser.yy"
                        { yylhs.value.as < vector<Expression> > () = yystack_[0].value.as < vector<Expression> > (); }
#line 9893 "parser.cc"
    break;

  case 231:
#line 1984 "parser.yy"
          {
            std::vector<Expression> list;
            list.emplace_back(yystack_[0].value.as < Expression > ());
            yylhs.value.as < vector<Expression> > () = list;
          }
#line 9903 "parser.cc"
    break;

  case 232:
#line 1990 "parser.yy"
          {
            yystack_[2].value.as < vector<Expression> > ().emplace_back(yystack_[0].value.as < Expression > ());
            yylhs.value.as < vector<Expression> > () = yystack_[2].value.as < vector<Expression> > ();
          }
#line 9912 "parser.cc"
    break;

  case 233:
#line 1998 "parser.yy"
          {
            yylhs.value.as < Expression > ()= yystack_[0].value.as < Expression > ();
          }
#line 9920 "parser.cc"
    break;

  case 234:
#line 2004 "parser.yy"
                   { yylhs.value.as < Expression > () = yystack_[0].value.as < Expression > (); }
#line 9926 "parser.cc"
    break;

  case 235:
#line 2005 "parser.yy"
                             { ThrowNotSupportedException("GROUPING"); }
#line 9932 "parser.cc"
    break;

  case 237:
#line 2012 "parser.yy"
                                                           {
          yylhs.value.as < Expression > () = CreateFunctionExpression("AVG", yystack_[2].value.as < Expression > ());
        }
#line 9940 "parser.cc"
    break;

  case 238:
#line 2016 "parser.yy"
                                                                    {
          yylhs.value.as < Expression > () = CreateDistinctFunctionExpression("AVG", yystack_[2].value.as < Expression > ());
        }
#line 9948 "parser.cc"
    break;

  case 239:
#line 2020 "parser.yy"
                                                             {
          auto arg = std::make_shared<CommonBiaodashi>(BiaodashiType::Star, string());
          yylhs.value.as < Expression > () = CreateFunctionExpression("COUNT", arg);
        }
#line 9957 "parser.cc"
    break;

  case 240:
#line 2025 "parser.yy"
                                                             {
          yylhs.value.as < Expression > () = CreateFunctionExpression("COUNT", yystack_[2].value.as < Expression > ());
        }
#line 9965 "parser.cc"
    break;

  case 241:
#line 2028 "parser.yy"
                                                                    {
          if ( yystack_[2].value.as < vector<Expression> > ().size() > 1 )
          {
            ThrowNotSupportedException( "count distinct with more than 1 param" );
          }
          yylhs.value.as < Expression > () = CreateDistinctFunctionExpression("COUNT", yystack_[2].value.as < vector<Expression> > ());
        }
#line 9977 "parser.cc"
    break;

  case 242:
#line 2040 "parser.yy"
           {
          yylhs.value.as < Expression > () = CreateFunctionExpression("MIN", yystack_[2].value.as < Expression > ());
        }
#line 9985 "parser.cc"
    break;

  case 243:
#line 2043 "parser.yy"
                                                                    {
          yylhs.value.as < Expression > () = CreateDistinctFunctionExpression("MIN", yystack_[2].value.as < Expression > ());
        }
#line 9993 "parser.cc"
    break;

  case 244:
#line 2047 "parser.yy"
                                                           {
          yylhs.value.as < Expression > () = CreateFunctionExpression("MAX", yystack_[2].value.as < Expression > ());
        }
#line 10001 "parser.cc"
    break;

  case 245:
#line 2051 "parser.yy"
                                                                    {
          yylhs.value.as < Expression > () = CreateDistinctFunctionExpression("MAX", yystack_[2].value.as < Expression > ());
        }
#line 10009 "parser.cc"
    break;

  case 246:
#line 2055 "parser.yy"
                                                           {
          yylhs.value.as < Expression > () = CreateFunctionExpression("SUM", yystack_[2].value.as < Expression > ());
        }
#line 10017 "parser.cc"
    break;

  case 247:
#line 2058 "parser.yy"
                                                                    {
          yylhs.value.as < Expression > () = CreateDistinctFunctionExpression("SUM", yystack_[2].value.as < Expression > ());
        }
#line 10025 "parser.cc"
    break;

  case 248:
#line 2064 "parser.yy"
                                            {
            yylhs.value.as < Expression > () = CreateGroupConcatExpression();
        }
#line 10033 "parser.cc"
    break;

  case 249:
#line 2069 "parser.yy"
                      { yylhs.value.as < bool > () = 0; }
#line 10039 "parser.cc"
    break;

  case 250:
#line 2070 "parser.yy"
                      { yylhs.value.as < bool > () = 1; }
#line 10045 "parser.cc"
    break;

  case 252:
#line 2074 "parser.yy"
                                    { ThrowNotSupportedException("SEPARATOR"); }
#line 10051 "parser.cc"
    break;

  case 254:
#line 2078 "parser.yy"
                                   { ThrowNotSupportedException("ORDER BY"); }
#line 10057 "parser.cc"
    break;

  case 255:
#line 2081 "parser.yy"
                                     { }
#line 10063 "parser.cc"
    break;

  case 256:
#line 2082 "parser.yy"
                     { }
#line 10069 "parser.cc"
    break;

  case 257:
#line 2091 "parser.yy"
                      { yylhs.value.as < SetOperationType > () = SetOperationType::UNION; }
#line 10075 "parser.cc"
    break;

  case 258:
#line 2092 "parser.yy"
                   { yylhs.value.as < SetOperationType > () = SetOperationType::UNION; }
#line 10081 "parser.cc"
    break;

  case 259:
#line 2093 "parser.yy"
              { yylhs.value.as < SetOperationType > () = SetOperationType::UNION_ALL; }
#line 10087 "parser.cc"
    break;

  case 260:
#line 2097 "parser.yy"
                   {
            debug_line();
            yylhs.value.as < Expression > () = std::make_shared<CommonBiaodashi>(BiaodashiType::Query, yystack_[0].value.as < SelectStructurePointer > ());
          }
#line 10096 "parser.cc"
    break;

  case 261:
#line 2104 "parser.yy"
                   { yylhs.value.as < SelectStructurePointer > () = yystack_[0].value.as < SelectStructurePointer > (); }
#line 10102 "parser.cc"
    break;

  case 262:
#line 2108 "parser.yy"
                                                         { yylhs.value.as < SelectStructurePointer > () = yystack_[0].value.as < SelectStructurePointer > (); }
#line 10108 "parser.cc"
    break;

  case 263:
#line 2112 "parser.yy"
                        { yylhs.value.as < int > () = SelectOption::STRAIGHT_JOIN; }
#line 10114 "parser.cc"
    break;

  case 264:
#line 2113 "parser.yy"
                        { yylhs.value.as < int > () = SelectOption::HIGH_PRIORITY; }
#line 10120 "parser.cc"
    break;

  case 265:
#line 2114 "parser.yy"
                   { yylhs.value.as < int > () = SelectOption::DISTINCT; }
#line 10126 "parser.cc"
    break;

  case 266:
#line 2115 "parser.yy"
                           { yylhs.value.as < int > () = SelectOption::SQL_SMALL_RESULT; }
#line 10132 "parser.cc"
    break;

  case 267:
#line 2116 "parser.yy"
                         { yylhs.value.as < int > () = SelectOption::SQL_BIG_RESULT; }
#line 10138 "parser.cc"
    break;

  case 268:
#line 2117 "parser.yy"
                             { yylhs.value.as < int > () = SelectOption::SQL_BUFFER_RESULT; }
#line 10144 "parser.cc"
    break;

  case 269:
#line 2118 "parser.yy"
                              { yylhs.value.as < int > () = SelectOption::SQL_CALC_FOUND_ROWS; }
#line 10150 "parser.cc"
    break;

  case 270:
#line 2119 "parser.yy"
              { yylhs.value.as < int > () = SelectOption::ALL; }
#line 10156 "parser.cc"
    break;

  case 271:
#line 2123 "parser.yy"
                                                                              {
            yylhs.value.as < AbstractCommandPointer > () = CreateCreateDbStructure(yystack_[2].value.as < bool > (), yystack_[1].value.as < string > ());
          }
#line 10164 "parser.cc"
    break;

  case 272:
#line 2126 "parser.yy"
                                                  {
            if (yystack_[0].value.as < AbstractCommandPointer > () == nullptr) {
              ThrowNotSupportedException("create view or trigger");
            }
            yylhs.value.as < AbstractCommandPointer > () = yystack_[0].value.as < AbstractCommandPointer > ();
          }
#line 10175 "parser.cc"
    break;

  case 273:
#line 2135 "parser.yy"
            {
              yylhs.value.as < AbstractCommandPointer > () = CreateAccountMgmtStructure( CommandType::CreateUser, yystack_[4].value.as < bool > (), yystack_[3].value.as < shared_ptr< vector< AccountSPtr > > > () );
            }
#line 10183 "parser.cc"
    break;

  case 274:
#line 2140 "parser.yy"
            {
                ThrowNotSupportedException("create logfile group");
            }
#line 10191 "parser.cc"
    break;

  case 275:
#line 2145 "parser.yy"
            {
                ThrowNotSupportedException("create tablespace");
            }
#line 10199 "parser.cc"
    break;

  case 276:
#line 2150 "parser.yy"
            {
                ThrowNotSupportedException("create undo tablespace");
            }
#line 10207 "parser.cc"
    break;

  case 277:
#line 2155 "parser.yy"
            {
                ThrowNotSupportedException("create server");
            }
#line 10215 "parser.cc"
    break;

  case 280:
#line 2205 "parser.yy"
          {
              ThrowNotSupportedException("SSL/TLS option 'subject'");
          }
#line 10223 "parser.cc"
    break;

  case 281:
#line 2209 "parser.yy"
          {
              ThrowNotSupportedException("SSL/TLS option 'issuer'");
          }
#line 10231 "parser.cc"
    break;

  case 282:
#line 2213 "parser.yy"
          {
              ThrowNotSupportedException("SSL/TLS option 'cipher'");
          }
#line 10239 "parser.cc"
    break;

  case 284:
#line 2220 "parser.yy"
          {
          }
#line 10246 "parser.cc"
    break;

  case 285:
#line 2223 "parser.yy"
          {
              ThrowNotSupportedException("SSL/TLS option 'ssl'");
          }
#line 10254 "parser.cc"
    break;

  case 286:
#line 2227 "parser.yy"
          {
              ThrowNotSupportedException("SSL/TLS option 'x509'");
          }
#line 10262 "parser.cc"
    break;

  case 287:
#line 2231 "parser.yy"
          {
          }
#line 10269 "parser.cc"
    break;

  case 288:
#line 2235 "parser.yy"
                      {}
#line 10275 "parser.cc"
    break;

  case 289:
#line 2236 "parser.yy"
                                   { ThrowNotSupportedException("WITH"); }
#line 10281 "parser.cc"
    break;

  case 290:
#line 2240 "parser.yy"
                                             {}
#line 10287 "parser.cc"
    break;

  case 291:
#line 2241 "parser.yy"
                         {}
#line 10293 "parser.cc"
    break;

  case 292:
#line 2246 "parser.yy"
          {
          }
#line 10300 "parser.cc"
    break;

  case 293:
#line 2249 "parser.yy"
          {
          }
#line 10307 "parser.cc"
    break;

  case 294:
#line 2252 "parser.yy"
          {
          }
#line 10314 "parser.cc"
    break;

  case 295:
#line 2255 "parser.yy"
          {
          }
#line 10321 "parser.cc"
    break;

  case 296:
#line 2260 "parser.yy"
                      {}
#line 10327 "parser.cc"
    break;

  case 297:
#line 2261 "parser.yy"
                                                      { ThrowNotSupportedException("account options"); }
#line 10333 "parser.cc"
    break;

  case 300:
#line 2271 "parser.yy"
          {
          }
#line 10340 "parser.cc"
    break;

  case 301:
#line 2274 "parser.yy"
          {
          }
#line 10347 "parser.cc"
    break;

  case 302:
#line 2277 "parser.yy"
          {
          }
#line 10354 "parser.cc"
    break;

  case 303:
#line 2280 "parser.yy"
          {
          }
#line 10361 "parser.cc"
    break;

  case 304:
#line 2283 "parser.yy"
          {
          }
#line 10368 "parser.cc"
    break;

  case 305:
#line 2286 "parser.yy"
          {
          }
#line 10375 "parser.cc"
    break;

  case 306:
#line 2289 "parser.yy"
          {
          }
#line 10382 "parser.cc"
    break;

  case 307:
#line 2292 "parser.yy"
          {
          }
#line 10389 "parser.cc"
    break;

  case 308:
#line 2295 "parser.yy"
          {
          }
#line 10396 "parser.cc"
    break;

  case 309:
#line 2298 "parser.yy"
          {
          }
#line 10403 "parser.cc"
    break;

  case 310:
#line 2301 "parser.yy"
          {
          }
#line 10410 "parser.cc"
    break;

  case 311:
#line 2304 "parser.yy"
          {
          }
#line 10417 "parser.cc"
    break;

  case 312:
#line 2307 "parser.yy"
          {
          }
#line 10424 "parser.cc"
    break;

  case 313:
#line 2312 "parser.yy"
          {
            yylhs.value.as < AccountSPtr > () = std::make_shared< Account >( yystack_[0].value.as < string > (), "", "", "" );
          }
#line 10432 "parser.cc"
    break;

  case 314:
#line 2316 "parser.yy"
          {
            yylhs.value.as < AccountSPtr > () = std::make_shared< Account >( yystack_[2].value.as < string > (), yystack_[0].value.as < string > (), "", "" );
          }
#line 10440 "parser.cc"
    break;

  case 315:
#line 2320 "parser.yy"
          {
            yylhs.value.as < AccountSPtr > () = std::make_shared< Account >();
          }
#line 10448 "parser.cc"
    break;

  case 316:
#line 2327 "parser.yy"
          {
            yylhs.value.as < shared_ptr< vector< AccountSPtr > > > () = std::make_shared< vector< AccountSPtr > >();
            yylhs.value.as < shared_ptr< vector< AccountSPtr > > > ()->emplace_back(yystack_[0].value.as < AccountSPtr > ());
          }
#line 10457 "parser.cc"
    break;

  case 317:
#line 2332 "parser.yy"
          {
            yystack_[2].value.as < shared_ptr< vector< AccountSPtr > > > ()->emplace_back(yystack_[0].value.as < AccountSPtr > ());
            yylhs.value.as < shared_ptr< vector< AccountSPtr > > > () = yystack_[2].value.as < shared_ptr< vector< AccountSPtr > > > ();
          }
#line 10466 "parser.cc"
    break;

  case 318:
#line 2339 "parser.yy"
          {
            yylhs.value.as < AccountSPtr > () = yystack_[3].value.as < AccountSPtr > ();
            yylhs.value.as < AccountSPtr > ()->m_authStr = yystack_[0].value.as < string > ();
          }
#line 10475 "parser.cc"
    break;

  case 319:
#line 2344 "parser.yy"
          {
            yylhs.value.as < AccountSPtr > () = yystack_[3].value.as < AccountSPtr > ();
            yylhs.value.as < AccountSPtr > ()->SetAuthPlugin( yystack_[0].value.as < string > () );
          }
#line 10484 "parser.cc"
    break;

  case 320:
#line 2349 "parser.yy"
          {
            yylhs.value.as < AccountSPtr > () = yystack_[5].value.as < AccountSPtr > ();
            yylhs.value.as < AccountSPtr > ()->SetAuthPlugin( yystack_[2].value.as < string > () );
            yylhs.value.as < AccountSPtr > ()->m_authStr = yystack_[0].value.as < string > ();
            yylhs.value.as < AccountSPtr > ()->m_authStrHashed = true;
          }
#line 10495 "parser.cc"
    break;

  case 321:
#line 2356 "parser.yy"
          {
            yylhs.value.as < AccountSPtr > () = yystack_[5].value.as < AccountSPtr > ();
            yylhs.value.as < AccountSPtr > ()->SetAuthPlugin( yystack_[2].value.as < string > () );
            yylhs.value.as < AccountSPtr > ()->m_authStr = yystack_[0].value.as < string > ();
          }
#line 10505 "parser.cc"
    break;

  case 322:
#line 2362 "parser.yy"
          {
            yylhs.value.as < AccountSPtr > () = yystack_[0].value.as < AccountSPtr > ();
          }
#line 10513 "parser.cc"
    break;

  case 323:
#line 2369 "parser.yy"
          {
            yylhs.value.as < shared_ptr< vector< AccountSPtr > > > () = std::make_shared< vector< AccountSPtr > >();
            yylhs.value.as < shared_ptr< vector< AccountSPtr > > > ()->emplace_back(yystack_[0].value.as < AccountSPtr > ());
          }
#line 10522 "parser.cc"
    break;

  case 324:
#line 2374 "parser.yy"
          {
            yystack_[2].value.as < shared_ptr< vector< AccountSPtr > > > ()->emplace_back(yystack_[0].value.as < AccountSPtr > ());
            yylhs.value.as < shared_ptr< vector< AccountSPtr > > > () = yystack_[2].value.as < shared_ptr< vector< AccountSPtr > > > ();
          }
#line 10531 "parser.cc"
    break;

  case 325:
#line 2380 "parser.yy"
                      {}
#line 10537 "parser.cc"
    break;

  case 326:
#line 2381 "parser.yy"
                                  {}
#line 10543 "parser.cc"
    break;

  case 327:
#line 2385 "parser.yy"
                                 {}
#line 10549 "parser.cc"
    break;

  case 328:
#line 2386 "parser.yy"
                                                         {}
#line 10555 "parser.cc"
    break;

  case 329:
#line 2391 "parser.yy"
          {
          }
#line 10562 "parser.cc"
    break;

  case 330:
#line 2394 "parser.yy"
          {
            //ThrowNotSupportedException("default_charset");
          }
#line 10570 "parser.cc"
    break;

  case 331:
#line 2398 "parser.yy"
          {
            ThrowNotSupportedException("default_encryption");
            // Validate if we have either 'y|Y' or 'n|N'
          }
#line 10579 "parser.cc"
    break;

  case 332:
#line 2405 "parser.yy"
                      { ThrowNotSupportedException("REPLACE"); }
#line 10585 "parser.cc"
    break;

  case 333:
#line 2406 "parser.yy"
                      { ThrowNotSupportedException("IGNORE"); }
#line 10591 "parser.cc"
    break;

  case 334:
#line 2409 "parser.yy"
                        { yylhs.value.as < bool > ()= false; }
#line 10597 "parser.cc"
    break;

  case 335:
#line 2410 "parser.yy"
                        { yylhs.value.as < bool > ()= true; }
#line 10603 "parser.cc"
    break;

  case 336:
#line 2415 "parser.yy"
          {
            
          }
#line 10611 "parser.cc"
    break;

  case 337:
#line 2419 "parser.yy"
          {
          }
#line 10618 "parser.cc"
    break;

  case 340:
#line 2430 "parser.yy"
          {
            //ThrowNotSupportedException("ENGINE");
          }
#line 10626 "parser.cc"
    break;

  case 341:
#line 2434 "parser.yy"
          {
            ThrowNotSupportedException("SECONDARY_ENGINE");
          }
#line 10634 "parser.cc"
    break;

  case 342:
#line 2438 "parser.yy"
          {
            ThrowNotSupportedException("SECONDARY_ENGINE");
          }
#line 10642 "parser.cc"
    break;

  case 343:
#line 2442 "parser.yy"
          {
            ThrowNotSupportedException("MAX_ROWS");
          }
#line 10650 "parser.cc"
    break;

  case 344:
#line 2446 "parser.yy"
          {
            ThrowNotSupportedException("MIN_ROWS");
          }
#line 10658 "parser.cc"
    break;

  case 345:
#line 2450 "parser.yy"
          {
            ThrowNotSupportedException("AVG_ROW_LENGTH");
          }
#line 10666 "parser.cc"
    break;

  case 346:
#line 2454 "parser.yy"
          {
            ThrowNotSupportedException("PASSWORD");
          }
#line 10674 "parser.cc"
    break;

  case 347:
#line 2458 "parser.yy"
          {
          }
#line 10681 "parser.cc"
    break;

  case 348:
#line 2461 "parser.yy"
      {
        ThrowNotSupportedException("COMPRESSION");
      }
#line 10689 "parser.cc"
    break;

  case 349:
#line 2465 "parser.yy"
      {
        ThrowNotSupportedException("ENCRYPTION");
      }
#line 10697 "parser.cc"
    break;

  case 350:
#line 2469 "parser.yy"
          {
            ThrowNotSupportedException("AUTO_INC");
          }
#line 10705 "parser.cc"
    break;

  case 351:
#line 2473 "parser.yy"
          {
            ThrowNotSupportedException("PACK_KEYS");
          }
#line 10713 "parser.cc"
    break;

  case 352:
#line 2477 "parser.yy"
          {
            ThrowNotSupportedException("STATS_AUTO_RECALC");
          }
#line 10721 "parser.cc"
    break;

  case 353:
#line 2481 "parser.yy"
          {
            ThrowNotSupportedException("STATS_PERSISTENT");
          }
#line 10729 "parser.cc"
    break;

  case 354:
#line 2485 "parser.yy"
          {
            /* From user point of view STATS_SAMPLE_PAGES can be specified as
            STATS_SAMPLE_PAGES=N (where 0<N<=65535, it does not make sense to
            scan 0 pages) or STATS_SAMPLE_PAGES=default. Internally we record
            =default as 0. See create_frm() in sql/table.cc, we use only two
            bytes for stats_sample_pages and this is why we do not allow
            larger values. 65535 pages, 16kb each means to sample 1GB, which
            is impractical. If at some point this needs to be extended, then
            we can store the higher bits from stats_sample_pages in .frm too. */
            if (yystack_[0].value.as < ulong > () == 0 || yystack_[0].value.as < ulong > () > 0xffff)
            {
              assert(0);
            }
          }
#line 10748 "parser.cc"
    break;

  case 355:
#line 2500 "parser.yy"
          {
            ThrowNotSupportedException("STATS_SAMPLE_PAGES");
          }
#line 10756 "parser.cc"
    break;

  case 356:
#line 2504 "parser.yy"
          {
            ThrowNotSupportedException("CHECKSUM");
          }
#line 10764 "parser.cc"
    break;

  case 357:
#line 2508 "parser.yy"
          {
            ThrowNotSupportedException("TABLE_CHECKSUM");
          }
#line 10772 "parser.cc"
    break;

  case 358:
#line 2512 "parser.yy"
          {
            ThrowNotSupportedException("DELAY_KEY_WRITE");
          }
#line 10780 "parser.cc"
    break;

  case 359:
#line 2516 "parser.yy"
          {
            ThrowNotSupportedException("ROW_FORMAT");
          }
#line 10788 "parser.cc"
    break;

  case 360:
#line 2520 "parser.yy"
          {
            ThrowNotSupportedException("UNION");
          }
#line 10796 "parser.cc"
    break;

  case 361:
#line 2524 "parser.yy"
          {
            //ThrowNotSupportedException("default_charset");
          }
#line 10804 "parser.cc"
    break;

  case 362:
#line 2528 "parser.yy"
          {
          }
#line 10811 "parser.cc"
    break;

  case 363:
#line 2531 "parser.yy"
          {
            ThrowNotSupportedException("INSERT");
          }
#line 10819 "parser.cc"
    break;

  case 364:
#line 2535 "parser.yy"
          {
            ThrowNotSupportedException("DATA DIRECTORY");
          }
#line 10827 "parser.cc"
    break;

  case 365:
#line 2539 "parser.yy"
          {
            ThrowNotSupportedException("INDEX DIRECTORY");
          }
#line 10835 "parser.cc"
    break;

  case 366:
#line 2543 "parser.yy"
          {
            ThrowNotSupportedException("TABLESPACE");
          }
#line 10843 "parser.cc"
    break;

  case 367:
#line 2547 "parser.yy"
          {
            ThrowNotSupportedException("STORAGE");
          }
#line 10851 "parser.cc"
    break;

  case 368:
#line 2551 "parser.yy"
          {
            ThrowNotSupportedException("STORAGE");
          }
#line 10859 "parser.cc"
    break;

  case 369:
#line 2555 "parser.yy"
          {
            ThrowNotSupportedException("CONNECTION");
          }
#line 10867 "parser.cc"
    break;

  case 370:
#line 2559 "parser.yy"
          {
            ThrowNotSupportedException("KEY_BLOCK_SIZE");
          }
#line 10875 "parser.cc"
    break;

  case 371:
#line 2566 "parser.yy"
          {
            switch(yystack_[0].value.as < ulong > ()) {
            case 0:
                break;
            case 1:
                break;
            default:
                assert(0);
            }
          }
#line 10890 "parser.cc"
    break;

  case 372:
#line 2576 "parser.yy"
                      { ThrowNotSupportedException("DEFAULT"); }
#line 10896 "parser.cc"
    break;

  case 373:
#line 2580 "parser.yy"
          { 
            //ThrowNotSupportedException("default_charset"); 
          }
#line 10904 "parser.cc"
    break;

  case 374:
#line 2586 "parser.yy"
                                                           { }
#line 10910 "parser.cc"
    break;

  case 375:
#line 2590 "parser.yy"
                                                               { ThrowNotSupportedException("default_encryption"); }
#line 10916 "parser.cc"
    break;

  case 376:
#line 2593 "parser.yy"
                         { ThrowNotSupportedException("row types DEFAULT"); }
#line 10922 "parser.cc"
    break;

  case 377:
#line 2594 "parser.yy"
                         { ThrowNotSupportedException("row types FIXED"); }
#line 10928 "parser.cc"
    break;

  case 378:
#line 2595 "parser.yy"
                         { ThrowNotSupportedException("row types DYNAMIC"); }
#line 10934 "parser.cc"
    break;

  case 379:
#line 2596 "parser.yy"
                         { ThrowNotSupportedException("row types COMPRESSED"); }
#line 10940 "parser.cc"
    break;

  case 380:
#line 2597 "parser.yy"
                         { ThrowNotSupportedException("row types REDUNDANT"); }
#line 10946 "parser.cc"
    break;

  case 381:
#line 2598 "parser.yy"
                         { ThrowNotSupportedException("row types CMPACT"); }
#line 10952 "parser.cc"
    break;

  case 382:
#line 2602 "parser.yy"
                         { ThrowNotSupportedException("merge_insert_types NO"); }
#line 10958 "parser.cc"
    break;

  case 383:
#line 2603 "parser.yy"
                         { ThrowNotSupportedException("merge_insert_types FIRST"); }
#line 10964 "parser.cc"
    break;

  case 384:
#line 2604 "parser.yy"
                         { ThrowNotSupportedException("merge_insert_types LAST"); }
#line 10970 "parser.cc"
    break;

  case 385:
#line 2607 "parser.yy"
                     { ThrowNotSupportedException("udf_type STRING"); }
#line 10976 "parser.cc"
    break;

  case 386:
#line 2608 "parser.yy"
                   { ThrowNotSupportedException("udf_type REAL"); }
#line 10982 "parser.cc"
    break;

  case 387:
#line 2609 "parser.yy"
                      { ThrowNotSupportedException("udf_type DECIMAL"); }
#line 10988 "parser.cc"
    break;

  case 388:
#line 2610 "parser.yy"
                  { ThrowNotSupportedException("udf_type INT"); }
#line 10994 "parser.cc"
    break;

  case 389:
#line 2611 "parser.yy"
                      { ThrowNotSupportedException("udf_type INTEGER"); }
#line 11000 "parser.cc"
    break;

  case 390:
#line 2614 "parser.yy"
                       { yylhs.value.as < TABLE_LIST > () = nullptr; }
#line 11006 "parser.cc"
    break;

  case 391:
#line 2615 "parser.yy"
          { yylhs.value.as < TABLE_LIST > () = yystack_[0].value.as < TABLE_LIST > (); }
#line 11012 "parser.cc"
    break;

  case 392:
#line 2619 "parser.yy"
          {
            yylhs.value.as < TABLE_LIST > () = std::make_shared<vector<std::shared_ptr<BasicRel>>>();
            yylhs.value.as < TABLE_LIST > ()->emplace_back(yystack_[0].value.as < shared_ptr<BasicRel> > ());
          }
#line 11021 "parser.cc"
    break;

  case 393:
#line 2624 "parser.yy"
          {
            yystack_[2].value.as < TABLE_LIST > ()->emplace_back(yystack_[0].value.as < shared_ptr<BasicRel> > ());
            yylhs.value.as < TABLE_LIST > () = yystack_[2].value.as < TABLE_LIST > ();
          }
#line 11030 "parser.cc"
    break;

  case 394:
#line 2632 "parser.yy"
          {
            auto table_element_list = std::make_shared<std::vector<TableElementDescriptionPtr>>();
            table_element_list->emplace_back(yystack_[0].value.as < TableElementDescriptionPtr > ());
            yylhs.value.as < shared_ptr<vector<TableElementDescriptionPtr>> > () = table_element_list;
          }
#line 11040 "parser.cc"
    break;

  case 395:
#line 2638 "parser.yy"
          {
            yystack_[2].value.as < shared_ptr<vector<TableElementDescriptionPtr>> > ()->emplace_back(yystack_[0].value.as < TableElementDescriptionPtr > ());
            yylhs.value.as < shared_ptr<vector<TableElementDescriptionPtr>> > () = yystack_[2].value.as < shared_ptr<vector<TableElementDescriptionPtr>> > ();
          }
#line 11049 "parser.cc"
    break;

  case 396:
#line 2645 "parser.yy"
                                { yylhs.value.as < TableElementDescriptionPtr > () = yystack_[0].value.as < TableElementDescriptionPtr > (); }
#line 11055 "parser.cc"
    break;

  case 397:
#line 2646 "parser.yy"
                                { yylhs.value.as < TableElementDescriptionPtr > () = yystack_[0].value.as < TableElementDescriptionPtr > (); }
#line 11061 "parser.cc"
    break;

  case 398:
#line 2651 "parser.yy"
          {
            yylhs.value.as < TableElementDescriptionPtr > () = CreateColumnDef(yystack_[2].value.as < string > (), yystack_[1].value.as < Field_def_ptr > () );
          }
#line 11069 "parser.cc"
    break;

  case 399:
#line 2657 "parser.yy"
                           { }
#line 11075 "parser.cc"
    break;

  case 400:
#line 2659 "parser.yy"
          {
            ThrowNotSupportedException("references");
             /* Currently we ignore FK references here: */
          }
#line 11084 "parser.cc"
    break;

  case 401:
#line 2668 "parser.yy"
          {
            ThrowNotSupportedException("multiple key or index");
            //$$ = std::make_shared<PT_inline_index_definition>(KEYTYPE_MULTIPLE, "");
          }
#line 11093 "parser.cc"
    break;

  case 402:
#line 2674 "parser.yy"
          {
              ThrowNotSupportedException("fulltext key");
          }
#line 11101 "parser.cc"
    break;

  case 403:
#line 2679 "parser.yy"
          {
              ThrowNotSupportedException("spatial key");
          }
#line 11109 "parser.cc"
    break;

  case 404:
#line 2684 "parser.yy"
          {
            /*
              Constraint-implementing indexes are named by the constraint type
              by default.
            */
            yylhs.value.as < TableElementDescriptionPtr > () = std::make_shared< PT_table_key_constraint_def >( yystack_[6].value.as < string > (), yystack_[4].value.as < string > (), yystack_[5].value.as < keytype > (), yystack_[2].value.as < vector<string> > () );
          }
#line 11121 "parser.cc"
    break;

  case 405:
#line 2692 "parser.yy"
          {
              ThrowNotSupportedException("foreign key");
            //$$ = std::make_shared< PT_table_key_constraint_def >( $1, KEYTYPE_FOREIGN, $6, $8.first, $8.second );
          }
#line 11130 "parser.cc"
    break;

  case 406:
#line 2697 "parser.yy"
          {
              ThrowNotSupportedException("check constraint");
          }
#line 11138 "parser.cc"
    break;

  case 407:
#line 2703 "parser.yy"
                                 { ThrowNotSupportedException("check constraint"); }
#line 11144 "parser.cc"
    break;

  case 408:
#line 2707 "parser.yy"
                               { }
#line 11150 "parser.cc"
    break;

  case 409:
#line 2708 "parser.yy"
                               { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 11156 "parser.cc"
    break;

  case 410:
#line 2712 "parser.yy"
                       { yylhs.value.as < bool > ()= false; }
#line 11162 "parser.cc"
    break;

  case 411:
#line 2713 "parser.yy"
                       { yylhs.value.as < bool > ()= true; }
#line 11168 "parser.cc"
    break;

  case 412:
#line 2717 "parser.yy"
                                 { }
#line 11174 "parser.cc"
    break;

  case 413:
#line 2718 "parser.yy"
                                 {  }
#line 11180 "parser.cc"
    break;

  case 414:
#line 2722 "parser.yy"
                                { ThrowNotSupportedException("ENFORCED"); }
#line 11186 "parser.cc"
    break;

  case 415:
#line 2726 "parser.yy"
                      { yylhs.value.as < Field_option > ()= Field_option::NONE; }
#line 11192 "parser.cc"
    break;

  case 416:
#line 2727 "parser.yy"
          { yylhs.value.as < Field_option > () = yystack_[0].value.as < Field_option > (); }
#line 11198 "parser.cc"
    break;

  case 417:
#line 2732 "parser.yy"
          {
            yylhs.value.as < Field_option > ()= static_cast<Field_option>(static_cast<ulong>(yystack_[1].value.as < Field_option > ()) |
                                          static_cast<ulong>(yystack_[0].value.as < Field_option > ()));
          }
#line 11207 "parser.cc"
    break;

  case 418:
#line 2736 "parser.yy"
          { yylhs.value.as < Field_option > () = yystack_[0].value.as < Field_option > (); }
#line 11213 "parser.cc"
    break;

  case 419:
#line 2739 "parser.yy"
                       { yylhs.value.as < Field_option > ()= Field_option::NONE; }
#line 11219 "parser.cc"
    break;

  case 420:
#line 2740 "parser.yy"
                       {
            // $$= Field_option::UNSIGNED;
            ThrowNotSupportedException("unsigned data type");
        }
#line 11228 "parser.cc"
    break;

  case 421:
#line 2744 "parser.yy"
                       {
            // $$= Field_option::ZEROFILL_UNSIGNED;
            ThrowNotSupportedException("unsigned data type");
        }
#line 11237 "parser.cc"
    break;

  case 422:
#line 2753 "parser.yy"
          {
            yylhs.value.as < AbstractCommandPointer > () = CreateCreateTableStructure(yystack_[7].value.as < bool > (), yystack_[5].value.as < bool > (), yystack_[4].value.as < shared_ptr<BasicRel> > (), yystack_[2].value.as < shared_ptr<vector<TableElementDescriptionPtr>> > (), yystack_[0].value.as < CreateTableOptions > ());
          }
#line 11245 "parser.cc"
    break;

  case 423:
#line 2758 "parser.yy"
          {
            // $$ = CreateCreateTableStructure($2, $4, $5, $7);
            ThrowNotSupportedException("create table AS query expression");
          }
#line 11254 "parser.cc"
    break;

  case 424:
#line 2764 "parser.yy"
          {
            ThrowNotSupportedException("create table LIKE table");
          }
#line 11262 "parser.cc"
    break;

  case 425:
#line 2769 "parser.yy"
          {
            ThrowNotSupportedException("create table LIKE table");
          }
#line 11270 "parser.cc"
    break;

  case 426:
#line 2775 "parser.yy"
                      { yylhs.value.as < bool > () = false; }
#line 11276 "parser.cc"
    break;

  case 427:
#line 2776 "parser.yy"
                    { yylhs.value.as < bool > () = true; }
#line 11282 "parser.cc"
    break;

  case 428:
#line 2780 "parser.yy"
                      { yylhs.value.as < bool > ()= false; }
#line 11288 "parser.cc"
    break;

  case 429:
#line 2781 "parser.yy"
                      { yylhs.value.as < bool > ()= true; }
#line 11294 "parser.cc"
    break;

  case 430:
#line 2792 "parser.yy"
          {
          }
#line 11301 "parser.cc"
    break;

  case 431:
#line 2798 "parser.yy"
          {
            yylhs.value.as < AbstractCommandPointer > () = nullptr;
          }
#line 11309 "parser.cc"
    break;

  case 432:
#line 2802 "parser.yy"
          {
            yylhs.value.as < AbstractCommandPointer > () = yystack_[0].value.as < AbstractCommandPointer > ();
          }
#line 11317 "parser.cc"
    break;

  case 433:
#line 2806 "parser.yy"
          {}
#line 11323 "parser.cc"
    break;

  case 439:
#line 2818 "parser.yy"
                    {
            yylhs.value.as < AbstractCommandPointer > () = yystack_[0].value.as < AbstractCommandPointer > ();
          }
#line 11331 "parser.cc"
    break;

  case 440:
#line 2821 "parser.yy"
                       { ThrowNotSupportedException("TRIGGER"); }
#line 11337 "parser.cc"
    break;

  case 441:
#line 2822 "parser.yy"
                  { ThrowNotSupportedException("PROCEDURE"); }
#line 11343 "parser.cc"
    break;

  case 442:
#line 2823 "parser.yy"
                 { ThrowNotSupportedException("FUNCTION"); }
#line 11349 "parser.cc"
    break;

  case 443:
#line 2824 "parser.yy"
                  { ThrowNotSupportedException("FUNCTION"); }
#line 11355 "parser.cc"
    break;

  case 444:
#line 2825 "parser.yy"
                    { ThrowNotSupportedException("EVENT"); }
#line 11361 "parser.cc"
    break;

  case 445:
#line 2830 "parser.yy"
          {
          }
#line 11368 "parser.cc"
    break;

  case 446:
#line 2833 "parser.yy"
          {
          }
#line 11375 "parser.cc"
    break;

  case 447:
#line 2838 "parser.yy"
          {                     /*$1*/
          }
#line 11382 "parser.cc"
    break;

  case 448:
#line 2841 "parser.yy"
          {                     /*$3*/
          }
#line 11389 "parser.cc"
    break;

  case 449:
#line 2845 "parser.yy"
          {                     /*$6*/
          }
#line 11396 "parser.cc"
    break;

  case 450:
#line 2848 "parser.yy"
          {                     /*$8*/
          }
#line 11403 "parser.cc"
    break;

  case 456:
#line 2864 "parser.yy"
          {                             /*$2*/
          }
#line 11410 "parser.cc"
    break;

  case 457:
#line 2867 "parser.yy"
          {                             /*$4*/
          }
#line 11417 "parser.cc"
    break;

  case 458:
#line 2873 "parser.yy"
          {                             /*$9*/
          }
#line 11424 "parser.cc"
    break;

  case 459:
#line 2879 "parser.yy"
          {
          }
#line 11431 "parser.cc"
    break;

  case 460:
#line 2885 "parser.yy"
          {
          }
#line 11438 "parser.cc"
    break;

  case 465:
#line 2901 "parser.yy"
          {                             /*$2*/
          }
#line 11445 "parser.cc"
    break;

  case 466:
#line 2904 "parser.yy"
          {                             /*$4*/
          }
#line 11452 "parser.cc"
    break;

  case 467:
#line 2908 "parser.yy"
          {                             /*$7*/
          }
#line 11459 "parser.cc"
    break;

  case 468:
#line 2914 "parser.yy"
          {                             /*$2*/
          }
#line 11466 "parser.cc"
    break;

  case 469:
#line 2917 "parser.yy"
          {                             /*$4*/
          }
#line 11473 "parser.cc"
    break;

  case 470:
#line 2921 "parser.yy"
          {                             /*$8*/
          }
#line 11480 "parser.cc"
    break;

  case 471:
#line 2927 "parser.yy"
          {
          }
#line 11487 "parser.cc"
    break;

  case 473:
#line 2934 "parser.yy"
          { /* QQ This is just a dummy for grouping declarations and statements
              together. No [[NOT] ATOMIC] yet, and we need to figure out how
              make it coexist with the existing BEGIN COMMIT/ROLLBACK. */
          }
#line 11496 "parser.cc"
    break;

  case 474:
#line 2941 "parser.yy"
          {
          }
#line 11503 "parser.cc"
    break;

  case 475:
#line 2947 "parser.yy"
          {
          }
#line 11510 "parser.cc"
    break;

  case 476:
#line 2950 "parser.yy"
          {
            /* We check for declarations out of (standard) order this way
              because letting the grammar rules reflect it caused tricky
               shift/reduce conflicts with the wrong result. (And we get
               better error handling this way.) */
          }
#line 11521 "parser.cc"
    break;

  case 477:
#line 2959 "parser.yy"
          {

          }
#line 11529 "parser.cc"
    break;

  case 478:
#line 2963 "parser.yy"
          {
          }
#line 11536 "parser.cc"
    break;

  case 479:
#line 2969 "parser.yy"
          {
          }
#line 11543 "parser.cc"
    break;

  case 480:
#line 2972 "parser.yy"
          {
          }
#line 11550 "parser.cc"
    break;

  case 481:
#line 2981 "parser.yy"
          {                     /*$6*/
          }
#line 11557 "parser.cc"
    break;

  case 482:
#line 2984 "parser.yy"
          {
          }
#line 11564 "parser.cc"
    break;

  case 483:
#line 2987 "parser.yy"
          {
          }
#line 11571 "parser.cc"
    break;

  case 484:
#line 2990 "parser.yy"
          {
          }
#line 11578 "parser.cc"
    break;

  case 485:
#line 2996 "parser.yy"
          {             /*$5*/
          }
#line 11585 "parser.cc"
    break;

  case 486:
#line 2999 "parser.yy"
          {             /*$7*/
          }
#line 11592 "parser.cc"
    break;

  case 487:
#line 3004 "parser.yy"
                      {}
#line 11598 "parser.cc"
    break;

  case 489:
#line 3008 "parser.yy"
                           {}
#line 11604 "parser.cc"
    break;

  case 491:
#line 3013 "parser.yy"
                                 { ThrowNotSupportedException("proc statement"); }
#line 11610 "parser.cc"
    break;

  case 492:
#line 3014 "parser.yy"
                              { ThrowNotSupportedException("RETURN"); }
#line 11616 "parser.cc"
    break;

  case 493:
#line 3015 "parser.yy"
                          { ThrowNotSupportedException("IF"); }
#line 11622 "parser.cc"
    break;

  case 494:
#line 3016 "parser.yy"
                                  { ThrowNotSupportedException("CASE"); }
#line 11628 "parser.cc"
    break;

  case 495:
#line 3017 "parser.yy"
                          { ThrowNotSupportedException("block"); }
#line 11634 "parser.cc"
    break;

  case 496:
#line 3018 "parser.yy"
                            { ThrowNotSupportedException("block"); }
#line 11640 "parser.cc"
    break;

  case 497:
#line 3019 "parser.yy"
                            { ThrowNotSupportedException("label"); }
#line 11646 "parser.cc"
    break;

  case 498:
#line 3020 "parser.yy"
                                { ThrowNotSupportedException("statements"); }
#line 11652 "parser.cc"
    break;

  case 499:
#line 3021 "parser.yy"
                            { ThrowNotSupportedException("LEAVE"); }
#line 11658 "parser.cc"
    break;

  case 500:
#line 3022 "parser.yy"
                              { ThrowNotSupportedException("ITERATE"); }
#line 11664 "parser.cc"
    break;

  case 501:
#line 3023 "parser.yy"
                           { ThrowNotSupportedException("OPEN"); }
#line 11670 "parser.cc"
    break;

  case 502:
#line 3024 "parser.yy"
                             { ThrowNotSupportedException("FETCH"); }
#line 11676 "parser.cc"
    break;

  case 503:
#line 3025 "parser.yy"
                            { ThrowNotSupportedException("CLOSE"); }
#line 11682 "parser.cc"
    break;

  case 507:
#line 3036 "parser.yy"
          {
          }
#line 11689 "parser.cc"
    break;

  case 508:
#line 3039 "parser.yy"
          {
          }
#line 11696 "parser.cc"
    break;

  case 509:
#line 3044 "parser.yy"
                        { }
#line 11702 "parser.cc"
    break;

  case 510:
#line 3045 "parser.yy"
                        { }
#line 11708 "parser.cc"
    break;

  case 511:
#line 3048 "parser.yy"
          { /* Unlabeled blocks get a secret label. */
          }
#line 11715 "parser.cc"
    break;

  case 512:
#line 3051 "parser.yy"
          {
          }
#line 11722 "parser.cc"
    break;

  case 513:
#line 3056 "parser.yy"
          {
          }
#line 11729 "parser.cc"
    break;

  case 514:
#line 3059 "parser.yy"
          {
          }
#line 11736 "parser.cc"
    break;

  case 515:
#line 3065 "parser.yy"
          {
          }
#line 11743 "parser.cc"
    break;

  case 516:
#line 3068 "parser.yy"
          {                             /*$2*/
          }
#line 11750 "parser.cc"
    break;

  case 517:
#line 3071 "parser.yy"
          {                             /*$4*/
          }
#line 11757 "parser.cc"
    break;

  case 518:
#line 3077 "parser.yy"
          {                             /*$14*/
          }
#line 11764 "parser.cc"
    break;

  case 519:
#line 3082 "parser.yy"
          {                             /*$4*/
          }
#line 11771 "parser.cc"
    break;

  case 520:
#line 3085 "parser.yy"
          {                             /*$6*/
          }
#line 11778 "parser.cc"
    break;

  case 522:
#line 3093 "parser.yy"
            { }
#line 11784 "parser.cc"
    break;

  case 523:
#line 3095 "parser.yy"
            { }
#line 11790 "parser.cc"
    break;

  case 524:
#line 3100 "parser.yy"
            { }
#line 11796 "parser.cc"
    break;

  case 525:
#line 3102 "parser.yy"
            { }
#line 11802 "parser.cc"
    break;

  case 526:
#line 3104 "parser.yy"
            { }
#line 11808 "parser.cc"
    break;

  case 527:
#line 3108 "parser.yy"
          { }
#line 11814 "parser.cc"
    break;

  case 528:
#line 3110 "parser.yy"
          {
          }
#line 11821 "parser.cc"
    break;

  case 529:
#line 3115 "parser.yy"
          {
          }
#line 11828 "parser.cc"
    break;

  case 530:
#line 3118 "parser.yy"
          {
          }
#line 11835 "parser.cc"
    break;

  case 531:
#line 3124 "parser.yy"
          {
          }
#line 11842 "parser.cc"
    break;

  case 532:
#line 3127 "parser.yy"
          {             /*$4*/
          }
#line 11849 "parser.cc"
    break;

  case 533:
#line 3132 "parser.yy"
          { /* Unlabeled controls get a secret label. */
          }
#line 11856 "parser.cc"
    break;

  case 534:
#line 3135 "parser.yy"
          {
          }
#line 11863 "parser.cc"
    break;

  case 535:
#line 3141 "parser.yy"
          {
          }
#line 11870 "parser.cc"
    break;

  case 536:
#line 3147 "parser.yy"
          {
          }
#line 11877 "parser.cc"
    break;

  case 537:
#line 3153 "parser.yy"
          {
          }
#line 11884 "parser.cc"
    break;

  case 538:
#line 3159 "parser.yy"
          {
          }
#line 11891 "parser.cc"
    break;

  case 539:
#line 3162 "parser.yy"
          {
          }
#line 11898 "parser.cc"
    break;

  case 540:
#line 3168 "parser.yy"
          {
          }
#line 11905 "parser.cc"
    break;

  case 543:
#line 3185 "parser.yy"
          {
          }
#line 11912 "parser.cc"
    break;

  case 544:
#line 3191 "parser.yy"
          {
            ThrowNotSupportedException("DEFINER");
          }
#line 11920 "parser.cc"
    break;

  case 545:
#line 3204 "parser.yy"
          {}
#line 11926 "parser.cc"
    break;

  case 546:
#line 3206 "parser.yy"
          {}
#line 11932 "parser.cc"
    break;

  case 547:
#line 3208 "parser.yy"
          {}
#line 11938 "parser.cc"
    break;

  case 548:
#line 3213 "parser.yy"
          { ThrowNotSupportedException("OR REPLACE"); }
#line 11944 "parser.cc"
    break;

  case 549:
#line 3218 "parser.yy"
          { ThrowNotSupportedException("ALGORITHM"); }
#line 11950 "parser.cc"
    break;

  case 550:
#line 3220 "parser.yy"
          { ThrowNotSupportedException("ALGORITHM"); }
#line 11956 "parser.cc"
    break;

  case 551:
#line 3222 "parser.yy"
          { ThrowNotSupportedException("ALGORITHM"); }
#line 11962 "parser.cc"
    break;

  case 552:
#line 3227 "parser.yy"
          { }
#line 11968 "parser.cc"
    break;

  case 553:
#line 3229 "parser.yy"
          { ThrowNotSupportedException("SECURITY"); }
#line 11974 "parser.cc"
    break;

  case 554:
#line 3231 "parser.yy"
          { ThrowNotSupportedException("SECURITY"); }
#line 11980 "parser.cc"
    break;

  case 555:
#line 3237 "parser.yy"
          {
            std::shared_ptr<std::vector<TableElementDescriptionPtr>> columns = nullptr;
            for (const auto& column_name : yystack_[2].value.as < vector<string> > ()) {
              if (!columns) {
                columns = std::make_shared<std::vector<TableElementDescriptionPtr>>();
              }

              auto desc = std::make_shared<ColumnDescription>();
              desc->column_name = NormalizeIdent(column_name);
              columns->emplace_back(desc);
            }
            yylhs.value.as < AbstractCommandPointer > () = CreateCreateViewStructure( yystack_[3].value.as < shared_ptr<BasicRel> > (), columns, yystack_[0].value.as < SelectStructurePointer > () );
          }
#line 11998 "parser.cc"
    break;

  case 556:
#line 3254 "parser.yy"
          {
            yylhs.value.as < SelectStructurePointer > () = yystack_[1].value.as < SelectStructurePointer > ();
          }
#line 12006 "parser.cc"
    break;

  case 557:
#line 3260 "parser.yy"
                                          { }
#line 12012 "parser.cc"
    break;

  case 558:
#line 3261 "parser.yy"
                                          { ThrowNotSupportedException("WITH"); }
#line 12018 "parser.cc"
    break;

  case 559:
#line 3262 "parser.yy"
                                          { ThrowNotSupportedException("WITH"); }
#line 12024 "parser.cc"
    break;

  case 560:
#line 3263 "parser.yy"
                                          { ThrowNotSupportedException("WITH"); }
#line 12030 "parser.cc"
    break;

  case 561:
#line 3274 "parser.yy"
            { }
#line 12036 "parser.cc"
    break;

  case 562:
#line 3276 "parser.yy"
            { }
#line 12042 "parser.cc"
    break;

  case 563:
#line 3281 "parser.yy"
            {
            }
#line 12049 "parser.cc"
    break;

  case 564:
#line 3285 "parser.yy"
            {
            }
#line 12056 "parser.cc"
    break;

  case 565:
#line 3300 "parser.yy"
          {                 /* $11 */
          }
#line 12063 "parser.cc"
    break;

  case 566:
#line 3303 "parser.yy"
          { /* $13 */
          }
#line 12070 "parser.cc"
    break;

  case 567:
#line 3316 "parser.yy"
          {
          }
#line 12077 "parser.cc"
    break;

  case 568:
#line 3320 "parser.yy"
          {
          }
#line 12084 "parser.cc"
    break;

  case 569:
#line 3328 "parser.yy"
          { /* $4 */
          }
#line 12091 "parser.cc"
    break;

  case 570:
#line 3332 "parser.yy"
          { /* $7 */
          }
#line 12098 "parser.cc"
    break;

  case 571:
#line 3337 "parser.yy"
          { /* $11 */
          }
#line 12105 "parser.cc"
    break;

  case 572:
#line 3340 "parser.yy"
          { /* $13 */
          }
#line 12112 "parser.cc"
    break;

  case 573:
#line 3343 "parser.yy"
          {
          }
#line 12119 "parser.cc"
    break;

  case 574:
#line 3350 "parser.yy"
          {                     /*$3*/
          }
#line 12126 "parser.cc"
    break;

  case 575:
#line 3353 "parser.yy"
          {                     /*$5*/
          }
#line 12133 "parser.cc"
    break;

  case 576:
#line 3357 "parser.yy"
          {                     /*$8*/
          }
#line 12140 "parser.cc"
    break;

  case 577:
#line 3360 "parser.yy"
          {                     /*$10*/
          }
#line 12147 "parser.cc"
    break;

  case 578:
#line 3363 "parser.yy"
          {                     /*$12*/
          }
#line 12154 "parser.cc"
    break;

  case 579:
#line 3379 "parser.yy"
                { }
#line 12160 "parser.cc"
    break;

  case 580:
#line 3381 "parser.yy"
      {
      }
#line 12167 "parser.cc"
    break;

  case 581:
#line 3385 "parser.yy"
                      { }
#line 12173 "parser.cc"
    break;

  case 583:
#line 3391 "parser.yy"
          {
          }
#line 12180 "parser.cc"
    break;

  case 584:
#line 3394 "parser.yy"
          {
          }
#line 12187 "parser.cc"
    break;

  case 586:
#line 3402 "parser.yy"
                      { }
#line 12193 "parser.cc"
    break;

  case 587:
#line 3404 "parser.yy"
          {
          }
#line 12200 "parser.cc"
    break;

  case 588:
#line 3409 "parser.yy"
                      { }
#line 12206 "parser.cc"
    break;

  case 590:
#line 3415 "parser.yy"
          {
          }
#line 12213 "parser.cc"
    break;

  case 591:
#line 3418 "parser.yy"
          {
          }
#line 12220 "parser.cc"
    break;

  case 602:
#line 3436 "parser.yy"
                                       { }
#line 12226 "parser.cc"
    break;

  case 603:
#line 3440 "parser.yy"
                      { }
#line 12232 "parser.cc"
    break;

  case 605:
#line 3446 "parser.yy"
          {
          }
#line 12239 "parser.cc"
    break;

  case 606:
#line 3449 "parser.yy"
          {
          }
#line 12246 "parser.cc"
    break;

  case 614:
#line 3463 "parser.yy"
                                       { }
#line 12252 "parser.cc"
    break;

  case 615:
#line 3467 "parser.yy"
          {
          }
#line 12259 "parser.cc"
    break;

  case 616:
#line 3473 "parser.yy"
          {
          }
#line 12266 "parser.cc"
    break;

  case 617:
#line 3479 "parser.yy"
          {
          }
#line 12273 "parser.cc"
    break;

  case 618:
#line 3485 "parser.yy"
          {
          }
#line 12280 "parser.cc"
    break;

  case 619:
#line 3491 "parser.yy"
          {
          }
#line 12287 "parser.cc"
    break;

  case 620:
#line 3497 "parser.yy"
          {
          }
#line 12294 "parser.cc"
    break;

  case 621:
#line 3503 "parser.yy"
          {
          }
#line 12301 "parser.cc"
    break;

  case 622:
#line 3509 "parser.yy"
          {
          }
#line 12308 "parser.cc"
    break;

  case 623:
#line 3515 "parser.yy"
          {
          }
#line 12315 "parser.cc"
    break;

  case 624:
#line 3521 "parser.yy"
          {
          }
#line 12322 "parser.cc"
    break;

  case 625:
#line 3527 "parser.yy"
          {
          }
#line 12329 "parser.cc"
    break;

  case 626:
#line 3530 "parser.yy"
          {
          }
#line 12336 "parser.cc"
    break;

  case 627:
#line 3536 "parser.yy"
          {
          }
#line 12343 "parser.cc"
    break;

  case 628:
#line 3541 "parser.yy"
                             { }
#line 12349 "parser.cc"
    break;

  case 629:
#line 3543 "parser.yy"
          {
          }
#line 12356 "parser.cc"
    break;

  case 630:
#line 3576 "parser.yy"
          {
              yylhs.value.as < CreateTableOptions > () = CreateTableOptions();
              yylhs.value.as < CreateTableOptions > ().m_partitionStructure = yystack_[0].value.as < PartitionStructureSPtr > ();
          }
#line 12365 "parser.cc"
    break;

  case 631:
#line 3581 "parser.yy"
        {
            yylhs.value.as < CreateTableOptions > () = CreateTableOptions();
            yylhs.value.as < CreateTableOptions > ().m_partitionStructure = yystack_[0].value.as < PartitionStructureSPtr > ();
        }
#line 12374 "parser.cc"
    break;

  case 632:
#line 3589 "parser.yy"
          {
              yylhs.value.as < PartitionStructureSPtr > () = yystack_[1].value.as < PartitionStructureSPtr > ();
          }
#line 12382 "parser.cc"
    break;

  case 634:
#line 3597 "parser.yy"
          {
          }
#line 12389 "parser.cc"
    break;

  case 635:
#line 3601 "parser.yy"
          {
            ThrowNotSupportedException("duplicate");
          }
#line 12397 "parser.cc"
    break;

  case 636:
#line 3605 "parser.yy"
          {
            ThrowNotSupportedException("create table AS query expression");
          }
#line 12405 "parser.cc"
    break;

  case 637:
#line 3611 "parser.yy"
                                        { }
#line 12411 "parser.cc"
    break;

  case 639:
#line 3628 "parser.yy"
          {
              yylhs.value.as < PartitionStructureSPtr > () = std::make_shared< PartitionStructure >();
              yylhs.value.as < PartitionStructureSPtr > ()->m_liner = yystack_[3].value.as < PartTypeDef > ().m_liner;
              yylhs.value.as < PartitionStructureSPtr > ()->m_partMethod = yystack_[3].value.as < PartTypeDef > ().m_method;
              yylhs.value.as < PartitionStructureSPtr > ()->m_partitionExprs = yystack_[3].value.as < PartTypeDef > ().m_partitionExprs;
              yylhs.value.as < PartitionStructureSPtr > ()->m_partitionExprStr = yystack_[3].value.as < PartTypeDef > ().m_exprStr;

              yylhs.value.as < PartitionStructureSPtr > ()->m_partitionCount = yystack_[2].value.as < ulong > ();
              yylhs.value.as < PartitionStructureSPtr > ()->m_partitionDefList = yystack_[0].value.as < PartDefList > ();
          }
#line 12426 "parser.cc"
    break;

  case 640:
#line 3642 "parser.yy"
          {
              ThrowNotSupportedException( "partition method KEY" );
          }
#line 12434 "parser.cc"
    break;

  case 641:
#line 3646 "parser.yy"
          {
              yylhs.value.as < PartTypeDef > () = PartTypeDef();
              yylhs.value.as < PartTypeDef > ().m_liner = yystack_[4].value.as < bool > ();
              yylhs.value.as < PartTypeDef > ().m_method = "HASH";
              yylhs.value.as < PartTypeDef > ().m_partitionExprs.emplace_back( yystack_[1].value.as < Expression > () );
              yylhs.value.as < PartTypeDef > ().m_exprStr = driver.get_string_at_location( yystack_[1].location );
          }
#line 12446 "parser.cc"
    break;

  case 642:
#line 3654 "parser.yy"
          {
              yylhs.value.as < PartTypeDef > () = PartTypeDef();
              yylhs.value.as < PartTypeDef > ().m_liner = false;
              yylhs.value.as < PartTypeDef > ().m_method = "RANGE";
              yylhs.value.as < PartTypeDef > ().m_partitionExprs.emplace_back( yystack_[1].value.as < Expression > () );
              yylhs.value.as < PartTypeDef > ().m_exprStr = driver.get_string_at_location( yystack_[1].location );
          }
#line 12458 "parser.cc"
    break;

  case 643:
#line 3662 "parser.yy"
          {
              ThrowNotSupportedException( "partition method 'RANGE COLUMNS'" );
          }
#line 12466 "parser.cc"
    break;

  case 644:
#line 3666 "parser.yy"
          {
              yylhs.value.as < PartTypeDef > () = PartTypeDef();
              yylhs.value.as < PartTypeDef > ().m_liner = false;
              yylhs.value.as < PartTypeDef > ().m_method = "LIST";
              yylhs.value.as < PartTypeDef > ().m_partitionExprs.emplace_back( yystack_[1].value.as < Expression > () );
              yylhs.value.as < PartTypeDef > ().m_exprStr = driver.get_string_at_location( yystack_[1].location );
          }
#line 12478 "parser.cc"
    break;

  case 645:
#line 3674 "parser.yy"
          {
              ThrowNotSupportedException( "partition method 'LIST COLUMNS'" );
          }
#line 12486 "parser.cc"
    break;

  case 646:
#line 3680 "parser.yy"
                      { yylhs.value.as < bool > ()= false; }
#line 12492 "parser.cc"
    break;

  case 647:
#line 3681 "parser.yy"
                      { yylhs.value.as < bool > ()= true; }
#line 12498 "parser.cc"
    break;

  case 648:
#line 3686 "parser.yy"
          { }
#line 12504 "parser.cc"
    break;

  case 649:
#line 3688 "parser.yy"
          {
          }
#line 12511 "parser.cc"
    break;

  case 650:
#line 3694 "parser.yy"
          { yylhs.value.as < ulong > ()= 1; }
#line 12517 "parser.cc"
    break;

  case 651:
#line 3696 "parser.yy"
          {
            yylhs.value.as < ulong > ()= yystack_[0].value.as < ulonglong > ();
          }
#line 12525 "parser.cc"
    break;

  case 652:
#line 3702 "parser.yy"
                      { }
#line 12531 "parser.cc"
    break;

  case 653:
#line 3705 "parser.yy"
          {
          }
#line 12538 "parser.cc"
    break;

  case 654:
#line 3709 "parser.yy"
          {
          }
#line 12545 "parser.cc"
    break;

  case 655:
#line 3715 "parser.yy"
                      { }
#line 12551 "parser.cc"
    break;

  case 657:
#line 3722 "parser.yy"
          {
          }
#line 12558 "parser.cc"
    break;

  case 658:
#line 3725 "parser.yy"
          {
          }
#line 12565 "parser.cc"
    break;

  case 659:
#line 3731 "parser.yy"
          { yylhs.value.as < ulong > ()= 1; }
#line 12571 "parser.cc"
    break;

  case 660:
#line 3733 "parser.yy"
          {
            if (yystack_[0].value.as < ulonglong > () == 0)
            {
              my_error(ER_NO_PARTS_ERROR, MYF(0), "subpartitions");
              assert(0);
            }
            yylhs.value.as < ulong > ()= yystack_[0].value.as < ulonglong > ();
          }
#line 12584 "parser.cc"
    break;

  case 661:
#line 3744 "parser.yy"
                                { yylhs.value.as < PartDefList > () = nullptr; }
#line 12590 "parser.cc"
    break;

  case 662:
#line 3745 "parser.yy"
                                { yylhs.value.as < PartDefList > () = yystack_[1].value.as < PartDefList > (); }
#line 12596 "parser.cc"
    break;

  case 663:
#line 3750 "parser.yy"
          {
              yylhs.value.as < PartDefList > () = std::make_shared< vector< PartDef > >();
              yylhs.value.as < PartDefList > ()->emplace_back( yystack_[0].value.as < PartDef > () );
          }
#line 12605 "parser.cc"
    break;

  case 664:
#line 3755 "parser.yy"
          {
              yylhs.value.as < PartDefList > () = yystack_[2].value.as < PartDefList > ();
              yylhs.value.as < PartDefList > ()->emplace_back( yystack_[0].value.as < PartDef > () );
          }
#line 12614 "parser.cc"
    break;

  case 665:
#line 3763 "parser.yy"
          {
              yylhs.value.as < PartDef > () = PartDef();
              yylhs.value.as < PartDef > ().m_partitionName = yystack_[3].value.as < string > ();
              yylhs.value.as < PartDef > ().m_partValues = yystack_[2].value.as < PartValuesSPtr > ();
          }
#line 12624 "parser.cc"
    break;

  case 666:
#line 3772 "parser.yy"
          {
              yylhs.value.as < PartValuesSPtr > () = nullptr;
          }
#line 12632 "parser.cc"
    break;

  case 667:
#line 3776 "parser.yy"
          {
              yylhs.value.as < PartValuesSPtr > () = std::make_shared< PartValues >();
              yylhs.value.as < PartValuesSPtr > ()->m_isRange = true;
              yylhs.value.as < PartValuesSPtr > ()->m_valueItemsList.emplace_back( yystack_[0].value.as < PartValueItemsSPtr > () );
          }
#line 12642 "parser.cc"
    break;

  case 668:
#line 3782 "parser.yy"
          {
              yylhs.value.as < PartValuesSPtr > () = std::make_shared< PartValues >();
              yylhs.value.as < PartValuesSPtr > ()->m_isRange = false;
              yylhs.value.as < PartValuesSPtr > ()->m_valueItemsList = yystack_[0].value.as < vector< PartValueItemsSPtr > > ();
          }
#line 12652 "parser.cc"
    break;

  case 669:
#line 3791 "parser.yy"
          {
              yylhs.value.as < PartValueItemsSPtr > () = std::make_shared< PartValueItems >();
              yylhs.value.as < PartValueItemsSPtr > ()->m_isMaxValue = true;
          }
#line 12661 "parser.cc"
    break;

  case 670:
#line 3795 "parser.yy"
                                     { yylhs.value.as < PartValueItemsSPtr > () = yystack_[0].value.as < PartValueItemsSPtr > (); }
#line 12667 "parser.cc"
    break;

  case 671:
#line 3800 "parser.yy"
          {
              yylhs.value.as < vector< PartValueItemsSPtr > > () = vector< PartValueItemsSPtr >();
              yylhs.value.as < vector< PartValueItemsSPtr > > ().emplace_back( yystack_[0].value.as < PartValueItemsSPtr > () );
          }
#line 12676 "parser.cc"
    break;

  case 672:
#line 3805 "parser.yy"
          {
              yylhs.value.as < vector< PartValueItemsSPtr > > () = yystack_[1].value.as < vector< PartValueItemsSPtr > > ();
          }
#line 12684 "parser.cc"
    break;

  case 673:
#line 3812 "parser.yy"
          {
            yylhs.value.as < vector< PartValueItemsSPtr > > () = vector< PartValueItemsSPtr >();
            yylhs.value.as < vector< PartValueItemsSPtr > > ().emplace_back( yystack_[0].value.as < PartValueItemsSPtr > () );
          }
#line 12693 "parser.cc"
    break;

  case 674:
#line 3817 "parser.yy"
          {
              yylhs.value.as < vector< PartValueItemsSPtr > > () = yystack_[2].value.as < vector< PartValueItemsSPtr > > ();
              yylhs.value.as < vector< PartValueItemsSPtr > > ().emplace_back( yystack_[0].value.as < PartValueItemsSPtr > () );
          }
#line 12702 "parser.cc"
    break;

  case 675:
#line 3825 "parser.yy"
          {
              yylhs.value.as < PartValueItemsSPtr > () = yystack_[1].value.as < PartValueItemsSPtr > ();
          }
#line 12710 "parser.cc"
    break;

  case 676:
#line 3832 "parser.yy"
          {
              yylhs.value.as < PartValueItemsSPtr > () = std::make_shared< PartValueItems >();
              yylhs.value.as < PartValueItemsSPtr > ()->m_valueItems.emplace_back( yystack_[0].value.as < PartValueItem > () );
          }
#line 12719 "parser.cc"
    break;

  case 677:
#line 3837 "parser.yy"
          {
              yylhs.value.as < PartValueItemsSPtr > () = yystack_[2].value.as < PartValueItemsSPtr > ();
              yylhs.value.as < PartValueItemsSPtr > ()->m_valueItems.emplace_back( yystack_[0].value.as < PartValueItem > () );
          }
#line 12728 "parser.cc"
    break;

  case 678:
#line 3845 "parser.yy"
          {
              yylhs.value.as < PartValueItem > ().m_isMaxValue = true;
          }
#line 12736 "parser.cc"
    break;

  case 679:
#line 3849 "parser.yy"
          {
             yylhs.value.as < PartValueItem > ().m_expr = yystack_[0].value.as < Expression > ();
          }
#line 12744 "parser.cc"
    break;

  case 680:
#line 3855 "parser.yy"
                                { }
#line 12750 "parser.cc"
    break;

  case 681:
#line 3857 "parser.yy"
        {
            ThrowNotSupportedException("sub partition");
        }
#line 12758 "parser.cc"
    break;

  case 682:
#line 3864 "parser.yy"
          {
          }
#line 12765 "parser.cc"
    break;

  case 683:
#line 3867 "parser.yy"
          {
          }
#line 12772 "parser.cc"
    break;

  case 684:
#line 3873 "parser.yy"
          {
          }
#line 12779 "parser.cc"
    break;

  case 685:
#line 3878 "parser.yy"
                     { }
#line 12785 "parser.cc"
    break;

  case 687:
#line 3884 "parser.yy"
          {
          }
#line 12792 "parser.cc"
    break;

  case 688:
#line 3887 "parser.yy"
          {
          }
#line 12799 "parser.cc"
    break;

  case 689:
#line 3893 "parser.yy"
          { }
#line 12805 "parser.cc"
    break;

  case 690:
#line 3895 "parser.yy"
          { }
#line 12811 "parser.cc"
    break;

  case 691:
#line 3897 "parser.yy"
          { }
#line 12817 "parser.cc"
    break;

  case 692:
#line 3899 "parser.yy"
          { }
#line 12823 "parser.cc"
    break;

  case 693:
#line 3901 "parser.yy"
          { }
#line 12829 "parser.cc"
    break;

  case 694:
#line 3903 "parser.yy"
          { }
#line 12835 "parser.cc"
    break;

  case 695:
#line 3905 "parser.yy"
          { }
#line 12841 "parser.cc"
    break;

  case 696:
#line 3907 "parser.yy"
          { }
#line 12847 "parser.cc"
    break;

  case 697:
#line 3916 "parser.yy"
          {
            /*
              We don't know know at this time whether there's a password
              in prepare_src, so we err on the side of caution.  Setting
              the flag will force a rewrite which will obscure all of
              prepare_src in the "Query" log line.  We'll see the actual
              query (with just the passwords obscured, if any) immediately
              afterwards in the "Prepare" log lines anyway, and then again
              in the "Execute" log line if and when prepare_src is executed.
            */
            // lex->contains_plaintext_password= true;
            yylhs.value.as < PreparedStmtStructurePtr > () = CreatePrepareStmt(yystack_[2].value.as < string > (), yystack_[0].value.as < PrepareSrcPtr > ());
          }
#line 12865 "parser.cc"
    break;

  case 698:
#line 3933 "parser.yy"
          {
            yylhs.value.as < PrepareSrcPtr > () = CreatePrepareSrc(false, yystack_[0].value.as < string > ());
          }
#line 12873 "parser.cc"
    break;

  case 699:
#line 3937 "parser.yy"
          {
            yylhs.value.as < PrepareSrcPtr > () = CreatePrepareSrc(true, yystack_[0].value.as < string > ());
          }
#line 12881 "parser.cc"
    break;

  case 700:
#line 3943 "parser.yy"
                                          {
            yylhs.value.as < PreparedStmtStructurePtr > () = CreateExecuteStmt(yystack_[1].value.as < string > (), yystack_[0].value.as < vector<string> > ());
          }
#line 12889 "parser.cc"
    break;

  case 701:
#line 3949 "parser.yy"
                        { }
#line 12895 "parser.cc"
    break;

  case 702:
#line 3950 "parser.yy"
                                 {
            yylhs.value.as < vector<string> > () = yystack_[0].value.as < vector<string> > ();
        }
#line 12903 "parser.cc"
    break;

  case 703:
#line 3956 "parser.yy"
                          {
            yylhs.value.as < vector<string> > ().emplace_back(aries_utils::strip_quotes(yystack_[0].value.as < string > ()));
        }
#line 12911 "parser.cc"
    break;

  case 704:
#line 3959 "parser.yy"
                                                  {
            yystack_[2].value.as < vector<string> > ().emplace_back(aries_utils::strip_quotes(yystack_[0].value.as < string > ()));
            yylhs.value.as < vector<string> > ().assign(yystack_[2].value.as < vector<string> > ().cbegin(), yystack_[2].value.as < vector<string> > ().cend());
        }
#line 12920 "parser.cc"
    break;

  case 705:
#line 3967 "parser.yy"
          {
            yylhs.value.as < string > () = aries_utils::strip_quotes(yystack_[0].value.as < string > ());
          }
#line 12928 "parser.cc"
    break;

  case 706:
#line 3974 "parser.yy"
          {
            yylhs.value.as < PreparedStmtStructurePtr > () = CreateDeallocateStmt(yystack_[0].value.as < string > ());
          }
#line 12936 "parser.cc"
    break;

  case 709:
#line 3988 "parser.yy"
        { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 12942 "parser.cc"
    break;

  case 712:
#line 3991 "parser.yy"
        { yylhs.value.as < string > () = yystack_[1].value.as < string > (); }
#line 12948 "parser.cc"
    break;

  case 713:
#line 3995 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 12954 "parser.cc"
    break;

  case 714:
#line 4008 "parser.yy"
                     {
            yylhs.value.as < Expression > () = CreatePreparedStmtParamExpression();
        }
#line 12962 "parser.cc"
    break;

  case 715:
#line 4014 "parser.yy"
          { yylhs.value.as < Literal > () = yystack_[0].value.as < Literal > (); }
#line 12968 "parser.cc"
    break;

  case 716:
#line 4015 "parser.yy"
                          {
            yylhs.value.as < Literal > () = yystack_[0].value.as < Literal > ();
        }
#line 12976 "parser.cc"
    break;

  case 717:
#line 4019 "parser.yy"
          {
            yystack_[0].value.as < Literal > ().str = "-" + yystack_[0].value.as < Literal > ().str;
            yylhs.value.as < Literal > () = yystack_[0].value.as < Literal > ();
          }
#line 12985 "parser.cc"
    break;

  case 718:
#line 4025 "parser.yy"
                     {
          yylhs.value.as < Literal > () = Literal{LiteralType::STRING, yystack_[0].value.as < string > ()}; 
        }
#line 12993 "parser.cc"
    break;

  case 719:
#line 4028 "parser.yy"
                    {yylhs.value.as < Literal > () = yystack_[0].value.as < Literal > (); }
#line 12999 "parser.cc"
    break;

  case 720:
#line 4029 "parser.yy"
                         { ThrowNotSupportedException("literal value format"); }
#line 13005 "parser.cc"
    break;

  case 721:
#line 4030 "parser.yy"
                 {
          yylhs.value.as < Literal > () = Literal{LiteralType::NULL_LITERAL, "NULL"}; 
        }
#line 13013 "parser.cc"
    break;

  case 722:
#line 4033 "parser.yy"
                  {
          yylhs.value.as < Literal > () = Literal{LiteralType::BOOL_FALSE, "FALSE"}; 
        }
#line 13021 "parser.cc"
    break;

  case 723:
#line 4036 "parser.yy"
                 {
          yylhs.value.as < Literal > () = Literal{LiteralType::BOOL_TRUE, "TRUE"}; 
        }
#line 13029 "parser.cc"
    break;

  case 724:
#line 4039 "parser.yy"
                { yylhs.value.as < Literal > () = Literal{LiteralType::LONG_INT, yystack_[0].value.as < string > ()}; }
#line 13035 "parser.cc"
    break;

  case 725:
#line 4040 "parser.yy"
                { ThrowNotSupportedException("BIN_NUM"); }
#line 13041 "parser.cc"
    break;

  case 726:
#line 4041 "parser.yy"
                                   { ThrowNotSupportedException("HEX_NUM"); }
#line 13047 "parser.cc"
    break;

  case 727:
#line 4042 "parser.yy"
                                   { ThrowNotSupportedException("BIN_NUM"); }
#line 13053 "parser.cc"
    break;

  case 728:
#line 4046 "parser.yy"
            {
          yylhs.value.as < Literal > () = Literal{LiteralType::INT, yystack_[0].value.as < string > ()}; 
        }
#line 13061 "parser.cc"
    break;

  case 729:
#line 4049 "parser.yy"
                  {
          yylhs.value.as < Literal > () = Literal{LiteralType::LONG_INT, yystack_[0].value.as < string > ()};
        }
#line 13069 "parser.cc"
    break;

  case 730:
#line 4052 "parser.yy"
                      {
          yylhs.value.as < Literal > () = Literal{LiteralType::ULONGLONG_INT, yystack_[0].value.as < string > ()};
        }
#line 13077 "parser.cc"
    break;

  case 731:
#line 4055 "parser.yy"
                    {
          yylhs.value.as < Literal > () = Literal{LiteralType::DECIMAL, yystack_[0].value.as < string > ()}; 
        }
#line 13085 "parser.cc"
    break;

  case 732:
#line 4058 "parser.yy"
                  {
          yylhs.value.as < Literal > () = Literal{LiteralType::DECIMAL, yystack_[0].value.as < string > ()}; 
        }
#line 13093 "parser.cc"
    break;

  case 733:
#line 4061 "parser.yy"
                 {
          ThrowNotSupportedException( "scientific notation" );
        }
#line 13101 "parser.cc"
    break;

  case 761:
#line 4135 "parser.yy"
                                       { ThrowNotSupportedException( "OVER" ); }
#line 13107 "parser.cc"
    break;

  case 800:
#line 4259 "parser.yy"
                         {
          auto variableStructurePtr = yystack_[0].value.as < VariableStructurePtr > ();
          yylhs.value.as < Expression > () = CreateExpressionFromVariable(variableStructurePtr);
        }
#line 13116 "parser.cc"
    break;

  case 801:
#line 4266 "parser.yy"
                                     { ThrowNotSupportedException("user defined variable"); }
#line 13122 "parser.cc"
    break;

  case 802:
#line 4267 "parser.yy"
                        {
            auto variableStructurePtr = CreateUserVariableStructure(yystack_[0].value.as < string > ());
            yylhs.value.as < VariableStructurePtr > () = variableStructurePtr;
        }
#line 13131 "parser.cc"
    break;

  case 803:
#line 4271 "parser.yy"
                                                             {
            auto variableStructurePtr = CreateSysVariableStructure(yystack_[2].value.as < enum_var_type > (), yystack_[1].value.as < string > ());
            yylhs.value.as < VariableStructurePtr > () = variableStructurePtr;
        }
#line 13140 "parser.cc"
    break;

  case 804:
#line 4279 "parser.yy"
          {
          }
#line 13147 "parser.cc"
    break;

  case 805:
#line 4282 "parser.yy"
          {
          }
#line 13154 "parser.cc"
    break;

  case 806:
#line 4292 "parser.yy"
          {
            yylhs.value.as < pair< shared_ptr<BasicRel>, vector< string > > > ().first = yystack_[5].value.as < shared_ptr<BasicRel> > ();
            yylhs.value.as < pair< shared_ptr<BasicRel>, vector< string > > > ().second.assign( yystack_[3].value.as < vector<string> > ().cbegin(), yystack_[3].value.as < vector<string> > ().cend() );
          }
#line 13163 "parser.cc"
    break;

  case 807:
#line 4315 "parser.yy"
                           {  }
#line 13169 "parser.cc"
    break;

  case 808:
#line 4316 "parser.yy"
                           { }
#line 13175 "parser.cc"
    break;

  case 809:
#line 4317 "parser.yy"
                           { }
#line 13181 "parser.cc"
    break;

  case 810:
#line 4318 "parser.yy"
                           { }
#line 13187 "parser.cc"
    break;

  case 811:
#line 4323 "parser.yy"
          {
          }
#line 13194 "parser.cc"
    break;

  case 812:
#line 4326 "parser.yy"
          {
          }
#line 13201 "parser.cc"
    break;

  case 813:
#line 4329 "parser.yy"
          {
          }
#line 13208 "parser.cc"
    break;

  case 814:
#line 4333 "parser.yy"
          {
          }
#line 13215 "parser.cc"
    break;

  case 815:
#line 4337 "parser.yy"
          {
          }
#line 13222 "parser.cc"
    break;

  case 816:
#line 4342 "parser.yy"
                        {  }
#line 13228 "parser.cc"
    break;

  case 817:
#line 4343 "parser.yy"
                        { }
#line 13234 "parser.cc"
    break;

  case 818:
#line 4344 "parser.yy"
                        { }
#line 13240 "parser.cc"
    break;

  case 819:
#line 4345 "parser.yy"
                        { }
#line 13246 "parser.cc"
    break;

  case 820:
#line 4346 "parser.yy"
                          { }
#line 13252 "parser.cc"
    break;

  case 821:
#line 4349 "parser.yy"
                              { yylhs.value.as < keytype > ()= KEYTYPE_PRIMARY; }
#line 13258 "parser.cc"
    break;

  case 822:
#line 4351 "parser.yy"
          {
              yylhs.value.as < keytype > ()= KEYTYPE_UNIQUE;
          }
#line 13266 "parser.cc"
    break;

  case 823:
#line 4355 "parser.yy"
                  {}
#line 13272 "parser.cc"
    break;

  case 824:
#line 4356 "parser.yy"
                    { ThrowNotSupportedException( "INDEX" ); }
#line 13278 "parser.cc"
    break;

  case 825:
#line 4360 "parser.yy"
                      {}
#line 13284 "parser.cc"
    break;

  case 827:
#line 4365 "parser.yy"
               {}
#line 13290 "parser.cc"
    break;

  case 828:
#line 4366 "parser.yy"
                    { ThrowNotSupportedException( "INDEX" ); }
#line 13296 "parser.cc"
    break;

  case 829:
#line 4367 "parser.yy"
                  { ThrowNotSupportedException( "INDEXES" ); }
#line 13302 "parser.cc"
    break;

  case 830:
#line 4371 "parser.yy"
                       { }
#line 13308 "parser.cc"
    break;

  case 832:
#line 4377 "parser.yy"
          {
          }
#line 13315 "parser.cc"
    break;

  case 833:
#line 4380 "parser.yy"
          {
          }
#line 13322 "parser.cc"
    break;

  case 835:
#line 4387 "parser.yy"
          {
          }
#line 13329 "parser.cc"
    break;

  case 836:
#line 4392 "parser.yy"
                       { }
#line 13335 "parser.cc"
    break;

  case 838:
#line 4398 "parser.yy"
          {
          }
#line 13342 "parser.cc"
    break;

  case 839:
#line 4401 "parser.yy"
          {
          }
#line 13349 "parser.cc"
    break;

  case 841:
#line 4410 "parser.yy"
                       { }
#line 13355 "parser.cc"
    break;

  case 843:
#line 4416 "parser.yy"
          {
          }
#line 13362 "parser.cc"
    break;

  case 844:
#line 4419 "parser.yy"
          {
          }
#line 13369 "parser.cc"
    break;

  case 845:
#line 4424 "parser.yy"
                              { ThrowNotSupportedException( "index options" ); }
#line 13375 "parser.cc"
    break;

  case 846:
#line 4425 "parser.yy"
                            { ThrowNotSupportedException( "index type" ); }
#line 13381 "parser.cc"
    break;

  case 847:
#line 4430 "parser.yy"
                                             { }
#line 13387 "parser.cc"
    break;

  case 848:
#line 4432 "parser.yy"
          {
          }
#line 13394 "parser.cc"
    break;

  case 849:
#line 4435 "parser.yy"
          {
          }
#line 13401 "parser.cc"
    break;

  case 850:
#line 4457 "parser.yy"
                                     { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 13407 "parser.cc"
    break;

  case 851:
#line 4458 "parser.yy"
                                     { yylhs.value.as < string > () = yystack_[2].value.as < string > (); }
#line 13413 "parser.cc"
    break;

  case 852:
#line 4463 "parser.yy"
                              { }
#line 13419 "parser.cc"
    break;

  case 853:
#line 4464 "parser.yy"
                              { }
#line 13425 "parser.cc"
    break;

  case 854:
#line 4468 "parser.yy"
                      { yylhs.value.as < bool > ()= true; }
#line 13431 "parser.cc"
    break;

  case 855:
#line 4469 "parser.yy"
                        { yylhs.value.as < bool > ()= false; }
#line 13437 "parser.cc"
    break;

  case 856:
#line 4473 "parser.yy"
                    {  }
#line 13443 "parser.cc"
    break;

  case 857:
#line 4474 "parser.yy"
                    {  }
#line 13449 "parser.cc"
    break;

  case 858:
#line 4475 "parser.yy"
                    { }
#line 13455 "parser.cc"
    break;

  case 859:
#line 4480 "parser.yy"
          {
            yystack_[2].value.as < vector<string> > ().emplace_back( yystack_[0].value.as < string > () );
            yylhs.value.as < vector<string> > () = yystack_[2].value.as < vector<string> > ();
          }
#line 13464 "parser.cc"
    break;

  case 860:
#line 4485 "parser.yy"
          {
             yylhs.value.as < vector<string> > ().emplace_back( yystack_[0].value.as < string > () );
          }
#line 13472 "parser.cc"
    break;

  case 861:
#line 4492 "parser.yy"
          {
            yylhs.value.as < string > () = aries_utils::convert_to_lower( aries_utils::strip_quotes( yystack_[1].value.as < string > () ) );
          }
#line 13480 "parser.cc"
    break;

  case 862:
#line 4496 "parser.yy"
          {
            yylhs.value.as < string > () = aries_utils::convert_to_lower( aries_utils::strip_quotes( yystack_[4].value.as < string > () ) );
          }
#line 13488 "parser.cc"
    break;

  case 863:
#line 4503 "parser.yy"
          {
            yystack_[2].value.as < vector<string> > ().emplace_back( yystack_[0].value.as < string > () );
            yylhs.value.as < vector<string> > () = yystack_[2].value.as < vector<string> > ();
          }
#line 13497 "parser.cc"
    break;

  case 864:
#line 4508 "parser.yy"
          {
            yylhs.value.as < vector<string> > ().emplace_back( yystack_[0].value.as < string > () );
            // The order is ignored.
          }
#line 13506 "parser.cc"
    break;

  case 865:
#line 4515 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 13512 "parser.cc"
    break;

  case 866:
#line 4517 "parser.yy"
          {
            ThrowNotSupportedException( "only support key with column" );
          }
#line 13520 "parser.cc"
    break;

  case 867:
#line 4522 "parser.yy"
                      { yylhs.value.as < string > ()= ""; }
#line 13526 "parser.cc"
    break;

  case 868:
#line 4523 "parser.yy"
                { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 13532 "parser.cc"
    break;

  case 869:
#line 4526 "parser.yy"
                         { yylhs.value.as < string > ()= ""; }
#line 13538 "parser.cc"
    break;

  case 870:
#line 4527 "parser.yy"
                         { yylhs.value.as < string > ()= yystack_[0].value.as < string > (); }
#line 13544 "parser.cc"
    break;

  case 871:
#line 4532 "parser.yy"
          {
            yylhs.value.as < string > () = yystack_[0].value.as < string > ();
          }
#line 13552 "parser.cc"
    break;

  case 872:
#line 4535 "parser.yy"
                     { yylhs.value.as < string > () = "binary"; }
#line 13558 "parser.cc"
    break;

  case 873:
#line 4540 "parser.yy"
          {
          }
#line 13565 "parser.cc"
    break;

  case 874:
#line 4542 "parser.yy"
                     { }
#line 13571 "parser.cc"
    break;

  case 875:
#line 4546 "parser.yy"
                                  { }
#line 13577 "parser.cc"
    break;

  case 876:
#line 4547 "parser.yy"
                         { }
#line 13583 "parser.cc"
    break;

  case 877:
#line 4552 "parser.yy"
          {
          }
#line 13590 "parser.cc"
    break;

  case 878:
#line 4557 "parser.yy"
                                     { }
#line 13596 "parser.cc"
    break;

  case 879:
#line 4558 "parser.yy"
                                     { }
#line 13602 "parser.cc"
    break;

  case 880:
#line 4562 "parser.yy"
                           { }
#line 13608 "parser.cc"
    break;

  case 881:
#line 4563 "parser.yy"
                               { }
#line 13614 "parser.cc"
    break;

  case 882:
#line 4564 "parser.yy"
                               { }
#line 13620 "parser.cc"
    break;

  case 883:
#line 4568 "parser.yy"
          {
          }
#line 13627 "parser.cc"
    break;

  case 884:
#line 4571 "parser.yy"
          {
          }
#line 13634 "parser.cc"
    break;

  case 885:
#line 4574 "parser.yy"
          {
          }
#line 13641 "parser.cc"
    break;

  case 886:
#line 4579 "parser.yy"
          {
          }
#line 13648 "parser.cc"
    break;

  case 887:
#line 4582 "parser.yy"
          {
          }
#line 13655 "parser.cc"
    break;

  case 888:
#line 4585 "parser.yy"
          {
          }
#line 13662 "parser.cc"
    break;

  case 889:
#line 4588 "parser.yy"
          {
          }
#line 13669 "parser.cc"
    break;

  case 890:
#line 4591 "parser.yy"
          {
          }
#line 13676 "parser.cc"
    break;

  case 891:
#line 4594 "parser.yy"
          {
          }
#line 13683 "parser.cc"
    break;

  case 892:
#line 4597 "parser.yy"
          {
          }
#line 13690 "parser.cc"
    break;

  case 893:
#line 4602 "parser.yy"
                      { }
#line 13696 "parser.cc"
    break;

  case 894:
#line 4603 "parser.yy"
                      { }
#line 13702 "parser.cc"
    break;

  case 895:
#line 4606 "parser.yy"
                      {}
#line 13708 "parser.cc"
    break;

  case 896:
#line 4607 "parser.yy"
                      {}
#line 13714 "parser.cc"
    break;

  case 897:
#line 4612 "parser.yy"
                                { yylhs.value.as < shared_ptr<vector<SetStructurePtr>> > ()= NULL; }
#line 13720 "parser.cc"
    break;

  case 898:
#line 4613 "parser.yy"
                                { yylhs.value.as < shared_ptr<vector<SetStructurePtr>> > ()= yystack_[0].value.as < shared_ptr<vector<SetStructurePtr>> > (); }
#line 13726 "parser.cc"
    break;

  case 899:
#line 4619 "parser.yy"
          {
            auto tmpSetStructurePtr = CreateSetSysVarStructure(OPT_SESSION, yystack_[1].value.as < PT_option_value_following_option_type_ptr > ());
            yylhs.value.as < shared_ptr<vector<SetStructurePtr>> > () = AppendOptionSetStructures(tmpSetStructurePtr, yystack_[0].value.as < shared_ptr<vector<SetStructurePtr>> > ());
          }
#line 13735 "parser.cc"
    break;

  case 900:
#line 4624 "parser.yy"
          {
            auto setStructures = std::make_shared<std::vector<SetStructurePtr>>();
            auto setStructurePtr = std::make_shared<SetStructure>();
            setStructurePtr->m_setCmd = SET_CMD::SET_TX;
            setStructures->emplace_back(setStructurePtr);
            yylhs.value.as < shared_ptr<vector<SetStructurePtr>> > () = setStructures;
          }
#line 13747 "parser.cc"
    break;

  case 901:
#line 4636 "parser.yy"
          {
            auto setStructures = std::make_shared<std::vector<SetStructurePtr>>();
            setStructures->emplace_back(yystack_[0].value.as < SetStructurePtr > ());
            yylhs.value.as < shared_ptr<vector<SetStructurePtr>> > () = setStructures;
          }
#line 13757 "parser.cc"
    break;

  case 902:
#line 4642 "parser.yy"
          {
            yystack_[2].value.as < shared_ptr<vector<SetStructurePtr>> > ()->emplace_back(yystack_[0].value.as < SetStructurePtr > ());
            yylhs.value.as < shared_ptr<vector<SetStructurePtr>> > () = yystack_[2].value.as < shared_ptr<vector<SetStructurePtr>> > ();
          }
#line 13766 "parser.cc"
    break;

  case 903:
#line 4650 "parser.yy"
          {
            yylhs.value.as < SetStructurePtr > () = CreateSetSysVarStructure(yystack_[1].value.as < enum_var_type > (), yystack_[0].value.as < PT_option_value_following_option_type_ptr > ());
          }
#line 13774 "parser.cc"
    break;

  case 904:
#line 4653 "parser.yy"
                                      { yylhs.value.as < SetStructurePtr > ()= yystack_[0].value.as < SetStructurePtr > (); }
#line 13780 "parser.cc"
    break;

  case 905:
#line 4657 "parser.yy"
                      { yylhs.value.as < enum_var_type > ()=OPT_GLOBAL; }
#line 13786 "parser.cc"
    break;

  case 906:
#line 4660 "parser.yy"
                      { yylhs.value.as < enum_var_type > ()=OPT_SESSION; }
#line 13792 "parser.cc"
    break;

  case 907:
#line 4661 "parser.yy"
                      { yylhs.value.as < enum_var_type > ()=OPT_SESSION; }
#line 13798 "parser.cc"
    break;

  case 908:
#line 4664 "parser.yy"
                      { yylhs.value.as < enum_var_type > ()=OPT_SESSION; }
#line 13804 "parser.cc"
    break;

  case 909:
#line 4665 "parser.yy"
                      { yylhs.value.as < enum_var_type > ()=OPT_GLOBAL; }
#line 13810 "parser.cc"
    break;

  case 910:
#line 4666 "parser.yy"
                      { yylhs.value.as < enum_var_type > ()=OPT_SESSION; }
#line 13816 "parser.cc"
    break;

  case 911:
#line 4667 "parser.yy"
                      { yylhs.value.as < enum_var_type > ()=OPT_SESSION; }
#line 13822 "parser.cc"
    break;

  case 912:
#line 4671 "parser.yy"
                          { yylhs.value.as < enum_var_type > ()=OPT_DEFAULT; }
#line 13828 "parser.cc"
    break;

  case 913:
#line 4672 "parser.yy"
                          { yylhs.value.as < enum_var_type > ()=OPT_GLOBAL; }
#line 13834 "parser.cc"
    break;

  case 914:
#line 4673 "parser.yy"
                          { yylhs.value.as < enum_var_type > ()=OPT_SESSION; }
#line 13840 "parser.cc"
    break;

  case 915:
#line 4674 "parser.yy"
                          { yylhs.value.as < enum_var_type > ()=OPT_SESSION; }
#line 13846 "parser.cc"
    break;

  case 916:
#line 4678 "parser.yy"
                          { yylhs.value.as < enum_var_type > ()=OPT_DEFAULT; }
#line 13852 "parser.cc"
    break;

  case 917:
#line 4681 "parser.yy"
                          { yylhs.value.as < enum_var_type > ()=OPT_GLOBAL; }
#line 13858 "parser.cc"
    break;

  case 918:
#line 4682 "parser.yy"
                          { yylhs.value.as < enum_var_type > ()=OPT_SESSION; }
#line 13864 "parser.cc"
    break;

  case 919:
#line 4683 "parser.yy"
                          { yylhs.value.as < enum_var_type > ()=OPT_SESSION; }
#line 13870 "parser.cc"
    break;

  case 920:
#line 4689 "parser.yy"
          {
            auto optionValuePtr = std::make_shared<PT_option_value_following_option_type>();
            optionValuePtr->varName = aries_utils::strip_quotes(yystack_[2].value.as < string > ());
            optionValuePtr->expression = yystack_[0].value.as < Expression > ();
            yylhs.value.as < PT_option_value_following_option_type_ptr > () = optionValuePtr;
          }
#line 13881 "parser.cc"
    break;

  case 921:
#line 4702 "parser.yy"
          {
            yylhs.value.as < SetStructurePtr > () = CreateSetSysVarStructure(false, yystack_[2].value.as < string > (), aries_utils::strip_quotes(yystack_[2].value.as < string > ()), yystack_[0].value.as < Expression > ());
          }
#line 13889 "parser.cc"
    break;

  case 922:
#line 4706 "parser.yy"
          {
            yylhs.value.as < SetStructurePtr > () = CreateSetUserVarStructure(yystack_[2].value.as < string > (), yystack_[0].value.as < Expression > ());
          }
#line 13897 "parser.cc"
    break;

  case 923:
#line 4711 "parser.yy"
          {
            yylhs.value.as < SetStructurePtr > () = CreateSetSysVarStructure(yystack_[3].value.as < enum_var_type > (), yystack_[2].value.as < string > (), aries_utils::strip_quotes(yystack_[2].value.as < string > ()), yystack_[0].value.as < Expression > ());
          }
#line 13905 "parser.cc"
    break;

  case 924:
#line 4715 "parser.yy"
          {
            auto setStructurePtr = std::make_shared<SetStructure>();
            setStructurePtr->m_setCmd = SET_CMD::SET_CHAR_SET;
            yylhs.value.as < SetStructurePtr > () = setStructurePtr;
          }
#line 13915 "parser.cc"
    break;

  case 925:
#line 4721 "parser.yy"
          {
            /*
              Bad syntax, always fails with an error
            */
            ThrowNotSupportedException("set names");
          }
#line 13926 "parser.cc"
    break;

  case 926:
#line 4728 "parser.yy"
          {
            auto setStructurePtr = std::make_shared<SetStructure>();
            setStructurePtr->m_setCmd = SET_CMD::SET_NAMES;
            yylhs.value.as < SetStructurePtr > () = setStructurePtr;
          }
#line 13936 "parser.cc"
    break;

  case 927:
#line 4734 "parser.yy"
          {
            auto setStructurePtr = std::make_shared<SetStructure>();
            setStructurePtr->m_setCmd = SET_CMD::SET_NAMES;
            yylhs.value.as < SetStructurePtr > () = setStructurePtr;
          }
#line 13946 "parser.cc"
    break;

  case 928:
#line 4742 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 13952 "parser.cc"
    break;

  case 929:
#line 4756 "parser.yy"
          { yylhs.value.as < Expression > () = yystack_[0].value.as < Expression > (); }
#line 13958 "parser.cc"
    break;

  case 930:
#line 4757 "parser.yy"
                      { yylhs.value.as < Expression > ()= nullptr; }
#line 13964 "parser.cc"
    break;

  case 931:
#line 4759 "parser.yy"
          {
            yylhs.value.as < Expression > ()= CreateStringExpression( "on" );
          }
#line 13972 "parser.cc"
    break;

  case 932:
#line 4763 "parser.yy"
          {
            yylhs.value.as < Expression > ()= CreateStringExpression( "all" );
          }
#line 13980 "parser.cc"
    break;

  case 933:
#line 4767 "parser.yy"
          {
            yylhs.value.as < Expression > ()= CreateStringExpression( "binary" );
          }
#line 13988 "parser.cc"
    break;

  case 934:
#line 4771 "parser.yy"
          {
            yylhs.value.as < Expression > ()= CreateStringExpression( "row" );
          }
#line 13996 "parser.cc"
    break;

  case 935:
#line 4775 "parser.yy"
          {
            yylhs.value.as < Expression > ()= CreateStringExpression( "system" );
          }
#line 14004 "parser.cc"
    break;

  case 936:
#line 4781 "parser.yy"
                                      { ThrowNotSupportedException("cast as binary"); }
#line 14010 "parser.cc"
    break;

  case 937:
#line 4782 "parser.yy"
                                    {
          yylhs.value.as < CastType > ().value_type = BiaodashiValueType::TEXT;
          yylhs.value.as < CastType > ().length = yystack_[0].value.as < string > ();
        }
#line 14019 "parser.cc"
    break;

  case 938:
#line 4786 "parser.yy"
                                 { ThrowNotSupportedException("cast as nchar"); }
#line 14025 "parser.cc"
    break;

  case 939:
#line 4787 "parser.yy"
                     {
          yylhs.value.as < CastType > ().value_type = BiaodashiValueType::INT;
        }
#line 14033 "parser.cc"
    break;

  case 940:
#line 4790 "parser.yy"
                             {
          yylhs.value.as < CastType > ().value_type = BiaodashiValueType::INT;
        }
#line 14041 "parser.cc"
    break;

  case 941:
#line 4793 "parser.yy"
                  {
          yylhs.value.as < CastType > ().value_type = BiaodashiValueType::INT;
        }
#line 14049 "parser.cc"
    break;

  case 942:
#line 4796 "parser.yy"
                     {
          yylhs.value.as < CastType > ().value_type = BiaodashiValueType::LONG_INT;
        }
#line 14057 "parser.cc"
    break;

  case 943:
#line 4799 "parser.yy"
                       { ThrowNotSupportedException("cast as unsigned"); }
#line 14063 "parser.cc"
    break;

  case 944:
#line 4800 "parser.yy"
                               { ThrowNotSupportedException("cast as unsigned int"); }
#line 14069 "parser.cc"
    break;

  case 945:
#line 4801 "parser.yy"
                   {
          yylhs.value.as < CastType > ().value_type = BiaodashiValueType::DATE;
        }
#line 14077 "parser.cc"
    break;

  case 946:
#line 4804 "parser.yy"
                                           {
          yylhs.value.as < CastType > ().value_type = BiaodashiValueType::TIME;
        }
#line 14085 "parser.cc"
    break;

  case 947:
#line 4807 "parser.yy"
                                               {
          yylhs.value.as < CastType > ().value_type = BiaodashiValueType::DATE_TIME;
        }
#line 14093 "parser.cc"
    break;

  case 948:
#line 4810 "parser.yy"
                                    { 
          yylhs.value.as < CastType > ().value_type = BiaodashiValueType::DECIMAL;
          yylhs.value.as < CastType > ().length = yystack_[0].value.as < Precision_ptr > ()->first;
          yylhs.value.as < CastType > ().associated_length = yystack_[0].value.as < Precision_ptr > ()->second;

        }
#line 14104 "parser.cc"
    break;

  case 949:
#line 4825 "parser.yy"
                   { ThrowNotSupportedException("cast as json"); }
#line 14110 "parser.cc"
    break;

  case 950:
#line 4829 "parser.yy"
                       { yylhs.value.as < Expression > () = yystack_[0].value.as < Expression > (); }
#line 14116 "parser.cc"
    break;

  case 951:
#line 4833 "parser.yy"
                      { yylhs.value.as < vector<Expression> > () = std::vector<Expression>(); }
#line 14122 "parser.cc"
    break;

  case 952:
#line 4834 "parser.yy"
                    { yylhs.value.as < vector<Expression> > () = yystack_[0].value.as < vector<Expression> > (); }
#line 14128 "parser.cc"
    break;

  case 953:
#line 4839 "parser.yy"
               {
            driver.global_expr_list.emplace_back(yystack_[0].value.as < Expression > ());

          }
#line 14137 "parser.cc"
    break;

  case 954:
#line 4844 "parser.yy"
          {
            driver.global_expr_list.emplace_back(yystack_[0].value.as < Expression > ());
          }
#line 14145 "parser.cc"
    break;

  case 955:
#line 4850 "parser.yy"
               {
            yylhs.value.as < vector<Expression> > () = std::vector<Expression>();
            yylhs.value.as < vector<Expression> > ().emplace_back(yystack_[0].value.as < Expression > ());
          }
#line 14154 "parser.cc"
    break;

  case 956:
#line 4855 "parser.yy"
          {
            yylhs.value.as < vector<Expression> > () = yystack_[2].value.as < vector<Expression> > ();
            yylhs.value.as < vector<Expression> > ().emplace_back(yystack_[0].value.as < Expression > ());
          }
#line 14163 "parser.cc"
    break;

  case 961:
#line 4873 "parser.yy"
                      { yylhs.value.as < Expression > () = nullptr; }
#line 14169 "parser.cc"
    break;

  case 962:
#line 4874 "parser.yy"
          { yylhs.value.as < Expression > () = yystack_[0].value.as < Expression > (); }
#line 14175 "parser.cc"
    break;

  case 963:
#line 4878 "parser.yy"
                      { yylhs.value.as < Expression > () = nullptr; }
#line 14181 "parser.cc"
    break;

  case 964:
#line 4879 "parser.yy"
                    { yylhs.value.as < Expression > () = yystack_[0].value.as < Expression > (); }
#line 14187 "parser.cc"
    break;

  case 965:
#line 4883 "parser.yy"
                                      {
            auto tuple_value = std::make_tuple(yystack_[2].value.as < Expression > (), yystack_[0].value.as < Expression > ());
            std::vector<std::tuple<Expression, Expression>> list;
            list.emplace_back(tuple_value);
            yylhs.value.as < vector<tuple<Expression, Expression>> > () = list;
          }
#line 14198 "parser.cc"
    break;

  case 966:
#line 4889 "parser.yy"
                                                {
          auto tuple_value = std::make_tuple(yystack_[2].value.as < Expression > (), yystack_[0].value.as < Expression > ());
          yystack_[4].value.as < vector<tuple<Expression, Expression>> > ().emplace_back(tuple_value);
          yylhs.value.as < vector<tuple<Expression, Expression>> > () = yystack_[4].value.as < vector<tuple<Expression, Expression>> > ();
        }
#line 14208 "parser.cc"
    break;

  case 967:
#line 4897 "parser.yy"
                        { yylhs.value.as < JoinStructurePointer > () = yystack_[0].value.as < JoinStructurePointer > (); }
#line 14214 "parser.cc"
    break;

  case 968:
#line 4898 "parser.yy"
                        { yylhs.value.as < JoinStructurePointer > () = yystack_[0].value.as < JoinStructurePointer > (); }
#line 14220 "parser.cc"
    break;

  case 969:
#line 4980 "parser.yy"
                                                                      {
            auto join_structure = yystack_[4].value.as < JoinStructurePointer > ();

            auto right = yystack_[2].value.as < JoinStructurePointer > ();
            join_structure->AddJoinRel(yystack_[3].value.as < JoinType > (), right, yystack_[0].value.as < Expression > ());

            // for (int i=0; i < right->GetJoinCount(); i++) {
            //   auto rel = right->GetJoinRel(i);
            //   auto type = right->GetJoinType(i);
            //   auto expr = right->GetJoinExpr(i);

            //   join_structure->AddJoinRel(type, rel, expr);
            // }

            yylhs.value.as < JoinStructurePointer > () = join_structure;
          }
#line 14241 "parser.cc"
    break;

  case 970:
#line 4999 "parser.yy"
          {
            ThrowNotSupportedException("USING");
          }
#line 14249 "parser.cc"
    break;

  case 971:
#line 5003 "parser.yy"
                                                                      {
            auto join_structure = yystack_[4].value.as < JoinStructurePointer > ();

            auto right = yystack_[2].value.as < JoinStructurePointer > ();
            join_structure->AddJoinRel(yystack_[3].value.as < JoinType > (), right, yystack_[0].value.as < Expression > ());

            // for (int i=0; i < right->GetJoinCount(); i++) {
            //   auto rel = right->GetJoinRel(i);
            //   auto type = right->GetJoinType(i);
            //   auto expr = right->GetJoinExpr(i);

            //   join_structure->AddJoinRel(type, rel, expr);
            // }

            yylhs.value.as < JoinStructurePointer > () = join_structure;
          }
#line 14270 "parser.cc"
    break;

  case 972:
#line 5021 "parser.yy"
          {
            ThrowNotSupportedException("USING");
          }
#line 14278 "parser.cc"
    break;

  case 973:
#line 5027 "parser.yy"
          {
            auto join_structure = yystack_[2].value.as < JoinStructurePointer > ();
            auto right = yystack_[0].value.as < JoinStructurePointer > ();
            join_structure->AddJoinRel( yystack_[1].value.as < JoinType > (), right, CreateBoolExpression( true ) );
            yylhs.value.as < JoinStructurePointer > () = join_structure;
          }
#line 14289 "parser.cc"
    break;

  case 974:
#line 5034 "parser.yy"
          {
            ThrowNotSupportedException("conditionless join");
          }
#line 14297 "parser.cc"
    break;

  case 975:
#line 5040 "parser.yy"
                                       { yylhs.value.as < JoinType > () = JoinType::InnerJoin; }
#line 14303 "parser.cc"
    break;

  case 976:
#line 5041 "parser.yy"
                                             { yylhs.value.as < JoinType > () = JoinType::RightJoin; }
#line 14309 "parser.cc"
    break;

  case 977:
#line 5042 "parser.yy"
                                            { yylhs.value.as < JoinType > () = JoinType::LeftJoin; }
#line 14315 "parser.cc"
    break;

  case 978:
#line 5046 "parser.yy"
                   { yylhs.value.as < JoinType > () = JoinType::InnerJoin; }
#line 14321 "parser.cc"
    break;

  case 979:
#line 5047 "parser.yy"
                              { yylhs.value.as < JoinType > () = JoinType::InnerJoin; }
#line 14327 "parser.cc"
    break;

  case 980:
#line 5048 "parser.yy"
                          { yylhs.value.as < JoinType > () = JoinType::InnerJoin; }
#line 14333 "parser.cc"
    break;

  case 981:
#line 5049 "parser.yy"
                         { yylhs.value.as < JoinType > () = JoinType::InnerJoin; }
#line 14339 "parser.cc"
    break;

  case 982:
#line 5054 "parser.yy"
                                { yylhs.value.as < JoinType > () = JoinType::FullJoin;  debug_line();  }
#line 14345 "parser.cc"
    break;

  case 983:
#line 5055 "parser.yy"
                                   { yylhs.value.as < JoinType > () = JoinType::LeftJoin;  debug_line(); }
#line 14351 "parser.cc"
    break;

  case 984:
#line 5056 "parser.yy"
                                     { yylhs.value.as < JoinType > () = JoinType::RightJoin;  debug_line();  }
#line 14357 "parser.cc"
    break;

  case 990:
#line 5076 "parser.yy"
        {
          ThrowNotSupportedException( "table partition" );
        }
#line 14365 "parser.cc"
    break;

  case 992:
#line 5108 "parser.yy"
                       { yylhs.value.as < JoinStructurePointer > () = yystack_[0].value.as < JoinStructurePointer > (); }
#line 14371 "parser.cc"
    break;

  case 993:
#line 5109 "parser.yy"
                              { yylhs.value.as < JoinStructurePointer > () = yystack_[0].value.as < JoinStructurePointer > (); }
#line 14377 "parser.cc"
    break;

  case 994:
#line 5110 "parser.yy"
                        { yylhs.value.as < JoinStructurePointer > () = yystack_[0].value.as < JoinStructurePointer > (); }
#line 14383 "parser.cc"
    break;

  case 995:
#line 5111 "parser.yy"
                              { yylhs.value.as < JoinStructurePointer > () = yystack_[0].value.as < JoinStructurePointer > (); }
#line 14389 "parser.cc"
    break;

  case 996:
#line 5113 "parser.yy"
                                      { ThrowNotSupportedException( "table list in parens" ); }
#line 14395 "parser.cc"
    break;

  case 998:
#line 5120 "parser.yy"
          {
          }
#line 14402 "parser.cc"
    break;

  case 999:
#line 5125 "parser.yy"
                                       { yylhs.value.as < JoinStructurePointer > () = yystack_[1].value.as < JoinStructurePointer > (); }
#line 14408 "parser.cc"
    break;

  case 1000:
#line 5126 "parser.yy"
                                 { yylhs.value.as < JoinStructurePointer > () = yystack_[1].value.as < JoinStructurePointer > (); }
#line 14414 "parser.cc"
    break;

  case 1001:
#line 5130 "parser.yy"
                                                                           {
            auto join_structure = std::make_shared<JoinStructure>();
            if (!yystack_[1].value.as < string > ().empty()) {
              yystack_[3].value.as < shared_ptr<BasicRel> > ()->ResetAlias(yystack_[1].value.as < string > ());
            }
            join_structure->SetLeadingRel(yystack_[3].value.as < shared_ptr<BasicRel> > ());
            yylhs.value.as < JoinStructurePointer > () = join_structure;
          }
#line 14427 "parser.cc"
    break;

  case 1002:
#line 5142 "parser.yy"
                                      { yylhs.value.as < JoinStructurePointer > () = yystack_[1].value.as < JoinStructurePointer > (); }
#line 14433 "parser.cc"
    break;

  case 1003:
#line 5143 "parser.yy"
                               { yylhs.value.as < JoinStructurePointer > () = yystack_[1].value.as < JoinStructurePointer > (); }
#line 14439 "parser.cc"
    break;

  case 1004:
#line 5148 "parser.yy"
          {
            std::vector< ColumnDescriptionPointer > columns;
            for ( const auto& column_name : yystack_[0].value.as < vector<string> > () ) {
              auto desc = std::make_shared< ColumnDescription >();
              desc->column_name = NormalizeIdent( column_name );
              columns.emplace_back( desc );
            }
            yylhs.value.as < JoinStructurePointer > () = CreateDerivedTableJoinStructure( yystack_[2].value.as < SelectStructurePointer > (), yystack_[1].value.as < string > (), columns );
          }
#line 14453 "parser.cc"
    break;

  case 1005:
#line 5158 "parser.yy"
          {
            ThrowNotSupportedException("Lateral Derived Tables");
          }
#line 14461 "parser.cc"
    break;

  case 1011:
#line 5182 "parser.yy"
                                 { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 14467 "parser.cc"
    break;

  case 1012:
#line 5183 "parser.yy"
                      { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 14473 "parser.cc"
    break;

  case 1013:
#line 5184 "parser.yy"
                       { ThrowNotSupportedException( "DAY_HOUR" ); }
#line 14479 "parser.cc"
    break;

  case 1014:
#line 5185 "parser.yy"
                              { ThrowNotSupportedException( "DAY_MICROSECOND" ); }
#line 14485 "parser.cc"
    break;

  case 1015:
#line 5186 "parser.yy"
                         { ThrowNotSupportedException( "DAY_MINUTE" ); }
#line 14491 "parser.cc"
    break;

  case 1016:
#line 5187 "parser.yy"
                         { ThrowNotSupportedException( "DAY_SECOND" ); }
#line 14497 "parser.cc"
    break;

  case 1017:
#line 5188 "parser.yy"
                               { ThrowNotSupportedException( "HOUR_MICROSECOND" ); }
#line 14503 "parser.cc"
    break;

  case 1018:
#line 5189 "parser.yy"
                          { ThrowNotSupportedException( "HOUR_MINUTE" ); }
#line 14509 "parser.cc"
    break;

  case 1019:
#line 5190 "parser.yy"
                          { ThrowNotSupportedException( "HOUR_SECOND" ); }
#line 14515 "parser.cc"
    break;

  case 1020:
#line 5191 "parser.yy"
                                 { ThrowNotSupportedException( "MINUTE_MICROSECOND" ); }
#line 14521 "parser.cc"
    break;

  case 1021:
#line 5192 "parser.yy"
                            { ThrowNotSupportedException( "MINUTE_SECOND" ); }
#line 14527 "parser.cc"
    break;

  case 1022:
#line 5193 "parser.yy"
                                 { ThrowNotSupportedException( "SECOND_MICROSECOND" ); }
#line 14533 "parser.cc"
    break;

  case 1023:
#line 5194 "parser.yy"
                         { ThrowNotSupportedException( "YEAR_MONTH" ); }
#line 14539 "parser.cc"
    break;

  case 1024:
#line 5198 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 14545 "parser.cc"
    break;

  case 1025:
#line 5199 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 14551 "parser.cc"
    break;

  case 1026:
#line 5200 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 14557 "parser.cc"
    break;

  case 1027:
#line 5201 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 14563 "parser.cc"
    break;

  case 1028:
#line 5202 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 14569 "parser.cc"
    break;

  case 1029:
#line 5203 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 14575 "parser.cc"
    break;

  case 1030:
#line 5204 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 14581 "parser.cc"
    break;

  case 1031:
#line 5205 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 14587 "parser.cc"
    break;

  case 1032:
#line 5206 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 14593 "parser.cc"
    break;

  case 1039:
#line 5222 "parser.yy"
                       { yylhs.value.as < string > () = string(); }
#line 14599 "parser.cc"
    break;

  case 1040:
#line 5223 "parser.yy"
                       { yylhs.value.as < string > () = yystack_[0].value.as < string > (); debug_line(); }
#line 14605 "parser.cc"
    break;

  case 1043:
#line 5232 "parser.yy"
                              { yylhs.value.as < Expression > () = yystack_[0].value.as < Expression > (); }
#line 14611 "parser.cc"
    break;

  case 1044:
#line 5235 "parser.yy"
                                    { yylhs.value.as < Expression > () = nullptr; }
#line 14617 "parser.cc"
    break;

  case 1045:
#line 5236 "parser.yy"
                     { yylhs.value.as < Expression > () = yystack_[0].value.as < Expression > (); }
#line 14623 "parser.cc"
    break;

  case 1046:
#line 5241 "parser.yy"
                      { yylhs.value.as < Expression > () = nullptr; }
#line 14629 "parser.cc"
    break;

  case 1047:
#line 5242 "parser.yy"
                      {
          yylhs.value.as < Expression > () = yystack_[0].value.as < Expression > ();
        }
#line 14637 "parser.cc"
    break;

  case 1048:
#line 5249 "parser.yy"
                         { ThrowNotSupportedException( "WITH" ); }
#line 14643 "parser.cc"
    break;

  case 1049:
#line 5251 "parser.yy"
                                       { ThrowNotSupportedException( "WITH" ); }
#line 14649 "parser.cc"
    break;

  case 1053:
#line 5265 "parser.yy"
                      {
            yylhs.value.as < vector<string> > () = std::vector<string>();
          }
#line 14657 "parser.cc"
    break;

  case 1054:
#line 5269 "parser.yy"
        {
          yylhs.value.as < vector<string> > () = yystack_[1].value.as < vector<string> > ();
        }
#line 14665 "parser.cc"
    break;

  case 1055:
#line 5276 "parser.yy"
                {
            yylhs.value.as < vector<string> > () = std::vector<string>();
            yylhs.value.as < vector<string> > ().emplace_back(aries_parser::NormalizeIdent(yystack_[0].value.as < string > ()));
          }
#line 14674 "parser.cc"
    break;

  case 1056:
#line 5281 "parser.yy"
        {
          yylhs.value.as < vector<string> > () = yystack_[2].value.as < vector<string> > ();
          yylhs.value.as < vector<string> > ().emplace_back(aries_parser::NormalizeIdent(yystack_[0].value.as < string > ()));
        }
#line 14683 "parser.cc"
    break;

  case 1058:
#line 5291 "parser.yy"
          { 
            ThrowNotSupportedException( "WINDOW" ); 
          }
#line 14691 "parser.cc"
    break;

  case 1062:
#line 5306 "parser.yy"
                                 { ThrowNotSupportedException( "ESCAPE" ); }
#line 14697 "parser.cc"
    break;

  case 1064:
#line 5315 "parser.yy"
                       { }
#line 14703 "parser.cc"
    break;

  case 1065:
#line 5316 "parser.yy"
                                           {
          auto groupby_structure_pointer = std::make_shared<GroupbyStructure>();
          groupby_structure_pointer->SetGroupbyExprs(yystack_[1].value.as < vector<Expression> > ());
          yylhs.value.as < GroupbyStructurePointer > () = groupby_structure_pointer;
          debug_line();
        }
#line 14714 "parser.cc"
    break;

  case 1066:
#line 5326 "parser.yy"
                                       {
            yystack_[2].value.as < vector<Expression> > ().emplace_back(yystack_[0].value.as < Expression > ());
            yylhs.value.as < vector<Expression> > () = yystack_[2].value.as < vector<Expression> > ();
          }
#line 14723 "parser.cc"
    break;

  case 1067:
#line 5330 "parser.yy"
                        {
          std::vector<Expression> group_by_items;
          group_by_items.emplace_back(yystack_[0].value.as < Expression > ());
          yylhs.value.as < vector<Expression> > () = group_by_items;
        }
#line 14733 "parser.cc"
    break;

  case 1069:
#line 5340 "parser.yy"
                          { ThrowNotSupportedException( "WITH_ROLLUP" ); }
#line 14739 "parser.cc"
    break;

  case 1070:
#line 5359 "parser.yy"
                       { yylhs.value.as < OrderbyStructurePointer > () = nullptr; }
#line 14745 "parser.cc"
    break;

  case 1071:
#line 5360 "parser.yy"
                       { yylhs.value.as < OrderbyStructurePointer > () = yystack_[0].value.as < OrderbyStructurePointer > (); }
#line 14751 "parser.cc"
    break;

  case 1072:
#line 5364 "parser.yy"
                                  {
            auto order_by_expression = std::make_shared<OrderbyStructure>();
            for (const auto& item : yystack_[0].value.as < vector<OrderItem> > ()) {
              order_by_expression->AddOrderbyItem(item.order_expr, item.direction);
            }
            yylhs.value.as < OrderbyStructurePointer > () = order_by_expression;
          }
#line 14763 "parser.cc"
    break;

  case 1073:
#line 5375 "parser.yy"
                                    {
            yystack_[2].value.as < vector<OrderItem> > ().emplace_back(yystack_[0].value.as < OrderItem > ());
            yylhs.value.as < vector<OrderItem> > () = yystack_[2].value.as < vector<OrderItem> > ();
          }
#line 14772 "parser.cc"
    break;

  case 1074:
#line 5379 "parser.yy"
                     {
          std::vector<OrderItem> list;
          list.emplace_back(yystack_[0].value.as < OrderItem > ());
          yylhs.value.as < vector<OrderItem> > () = list;
        }
#line 14782 "parser.cc"
    break;

  case 1075:
#line 5387 "parser.yy"
                       { yylhs.value.as < string > () = "ASC"; }
#line 14788 "parser.cc"
    break;

  case 1076:
#line 5388 "parser.yy"
                             { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 14794 "parser.cc"
    break;

  case 1077:
#line 5392 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 14800 "parser.cc"
    break;

  case 1078:
#line 5393 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 14806 "parser.cc"
    break;

  case 1079:
#line 5397 "parser.yy"
                      { yylhs.value.as < LimitStructurePointer > () = nullptr; }
#line 14812 "parser.cc"
    break;

  case 1080:
#line 5398 "parser.yy"
                       { yylhs.value.as < LimitStructurePointer > () = yystack_[0].value.as < LimitStructurePointer > (); }
#line 14818 "parser.cc"
    break;

  case 1081:
#line 5402 "parser.yy"
                              { yylhs.value.as < LimitStructurePointer > () = yystack_[0].value.as < LimitStructurePointer > (); }
#line 14824 "parser.cc"
    break;

  case 1082:
#line 5407 "parser.yy"
                       {
            int64_t offset = 0;
            int64_t size = std::stoll(yystack_[0].value.as < string > ());
            yylhs.value.as < LimitStructurePointer > () = std::make_shared<LimitStructure>(offset, size);
          }
#line 14834 "parser.cc"
    break;

  case 1083:
#line 5412 "parser.yy"
                                        {
            int64_t offset = std::stoll(yystack_[2].value.as < string > ());
            int64_t size = std::stoll(yystack_[0].value.as < string > ());
            yylhs.value.as < LimitStructurePointer > () = std::make_shared<LimitStructure>(offset, size);
          }
#line 14844 "parser.cc"
    break;

  case 1084:
#line 5417 "parser.yy"
                                               {
            int64_t offset = std::stoll(yystack_[2].value.as < string > ());
            int64_t size = std::stoll(yystack_[0].value.as < string > ());
            yylhs.value.as < LimitStructurePointer > () = std::make_shared<LimitStructure>(offset, size);
          }
#line 14854 "parser.cc"
    break;

  case 1085:
#line 5425 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 14860 "parser.cc"
    break;

  case 1087:
#line 5429 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 14866 "parser.cc"
    break;

  case 1088:
#line 5431 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 14872 "parser.cc"
    break;

  case 1089:
#line 5433 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 14878 "parser.cc"
    break;

  case 1090:
#line 5443 "parser.yy"
          { yylhs.value.as < SQLIdentPtr > () = yystack_[0].value.as < SQLIdentPtr > (); }
#line 14884 "parser.cc"
    break;

  case 1092:
#line 5447 "parser.yy"
                        {
            yylhs.value.as < Expression > () = std::make_shared<CommonBiaodashi>(BiaodashiType::Star, aries_utils::to_lower(yystack_[2].value.as < string > ()));
          }
#line 14892 "parser.cc"
    break;

  case 1093:
#line 5451 "parser.yy"
                                  { ThrowNotSupportedException( yystack_[4].value.as < string > () + "." + yystack_[2].value.as < string > () + ".*" ); }
#line 14898 "parser.cc"
    break;

  case 1094:
#line 5456 "parser.yy"
                                      {
            OrderItem order_item;
            order_item.order_expr = yystack_[1].value.as < Expression > ();
            order_item.direction = (yystack_[0].value.as < string > () == "desc") ? OrderbyDirection::DESC : OrderbyDirection::ASC;
            yylhs.value.as < OrderItem > () = order_item;
          }
#line 14909 "parser.cc"
    break;

  case 1095:
#line 5466 "parser.yy"
               { yylhs.value.as < Expression > () = yystack_[0].value.as < Expression > (); }
#line 14915 "parser.cc"
    break;

  case 1096:
#line 5476 "parser.yy"
                { yylhs.value.as < SQLIdentPtr > () = std::make_shared<SQLIdent>("", "", aries_utils::strip_quotes(yystack_[0].value.as < string > ())); }
#line 14921 "parser.cc"
    break;

  case 1097:
#line 5478 "parser.yy"
          { yylhs.value.as < SQLIdentPtr > () = yystack_[0].value.as < SQLIdentPtr > (); }
#line 14927 "parser.cc"
    break;

  case 1098:
#line 5482 "parser.yy"
              {
            yylhs.value.as < SQLIdentPtr > () = std::make_shared<SQLIdent>("",
                                            "",
                                            aries_utils::strip_quotes(yystack_[0].value.as < string > ()));
        }
#line 14937 "parser.cc"
    break;

  case 1099:
#line 5487 "parser.yy"
          { yylhs.value.as < SQLIdentPtr > () = yystack_[0].value.as < SQLIdentPtr > (); }
#line 14943 "parser.cc"
    break;

  case 1100:
#line 5491 "parser.yy"
                          {
            yylhs.value.as < SQLIdentPtr > () = std::make_shared<SQLIdent>("",
                                            aries_utils::strip_quotes(yystack_[2].value.as < string > ()),
                                            aries_utils::strip_quotes(yystack_[0].value.as < string > ()));
          }
#line 14953 "parser.cc"
    break;

  case 1101:
#line 5497 "parser.yy"
                                    {
          yylhs.value.as < SQLIdentPtr > () = std::make_shared<SQLIdent>(aries_utils::strip_quotes(yystack_[4].value.as < string > ()),
                                          aries_utils::strip_quotes(yystack_[2].value.as < string > ()),
                                          aries_utils::strip_quotes(yystack_[0].value.as < string > ()));
        }
#line 14963 "parser.cc"
    break;

  case 1102:
#line 5505 "parser.yy"
                {
            yylhs.value.as < shared_ptr<BasicRel> > () = CreateTableIdent(false, "", yystack_[0].value.as < string > (), nullptr, nullptr);
          }
#line 14971 "parser.cc"
    break;

  case 1103:
#line 5508 "parser.yy"
                          {
            yylhs.value.as < shared_ptr<BasicRel> > () = CreateTableIdent(false, yystack_[2].value.as < string > (), yystack_[0].value.as < string > (), nullptr, nullptr);
          }
#line 14979 "parser.cc"
    break;

  case 1104:
#line 5514 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 14985 "parser.cc"
    break;

  case 1105:
#line 5518 "parser.yy"
                      { yylhs.value.as < string > ()= yystack_[0].value.as < string > (); }
#line 14991 "parser.cc"
    break;

  case 1106:
#line 5522 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 14997 "parser.cc"
    break;

  case 1107:
#line 5527 "parser.yy"
          {
          /*
            THD *thd= YYTHD;

            if (thd->charset_is_character_set_filesystem)
              $$= $1;
            else
            {
              if (thd->convert_string(&$$,
                                      thd->variables.character_set_filesystem,
                                      $1.str, $1.length, thd->charset()))
                MYSQL_YYABORT;
            }
            */
            yylhs.value.as < string > () = yystack_[0].value.as < string > ();
          }
#line 15018 "parser.cc"
    break;

  case 1108:
#line 5546 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 15024 "parser.cc"
    break;

  case 1109:
#line 5550 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 15030 "parser.cc"
    break;

  case 1110:
#line 5554 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 15036 "parser.cc"
    break;

  case 1111:
#line 5555 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 15042 "parser.cc"
    break;

  case 1112:
#line 5559 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 15048 "parser.cc"
    break;

  case 1113:
#line 5560 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 15054 "parser.cc"
    break;

  case 1114:
#line 5561 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 15060 "parser.cc"
    break;

  case 1115:
#line 5566 "parser.yy"
          {
            yylhs.value.as < Field_def_ptr > () = CreateFieldDef(yystack_[1].value.as < PT_ColumnType_ptr > (), yystack_[0].value.as < ColAttrList > ());
          }
#line 15068 "parser.cc"
    break;

  case 1116:
#line 5572 "parser.yy"
          {
            yylhs.value.as < Field_def_ptr > () = CreateFieldDef(yystack_[8].value.as < PT_ColumnType_ptr > (), yystack_[0].value.as < ColAttrList > ());
          }
#line 15076 "parser.cc"
    break;

  case 1118:
#line 5579 "parser.yy"
                               { ThrowNotSupportedException( "GENERATED ALWAYS" ); }
#line 15082 "parser.cc"
    break;

  case 1119:
#line 5583 "parser.yy"
                      { }
#line 15088 "parser.cc"
    break;

  case 1120:
#line 5584 "parser.yy"
                      { ThrowNotSupportedException( "VIRTUAL" ); }
#line 15094 "parser.cc"
    break;

  case 1121:
#line 5585 "parser.yy"
                      { ThrowNotSupportedException( "STORED" ); }
#line 15100 "parser.cc"
    break;

  case 1122:
#line 5589 "parser.yy"
          {
            yylhs.value.as < PT_ColumnType_ptr > () = CreateColumnType(yystack_[2].value.as < string > (), yystack_[1].value.as < string > (), yystack_[0].value.as < Field_option > ());
          }
#line 15108 "parser.cc"
    break;

  case 1123:
#line 5593 "parser.yy"
          {
            yylhs.value.as < PT_ColumnType_ptr > () = CreateColumnType(yystack_[2].value.as < string > (), *(yystack_[1].value.as < Precision_ptr > ()), yystack_[0].value.as < Field_option > ());
          }
#line 15116 "parser.cc"
    break;

  case 1124:
#line 5597 "parser.yy"
          {
            yylhs.value.as < PT_ColumnType_ptr > () = CreateColumnType(yystack_[2].value.as < string > (), *(yystack_[1].value.as < Precision_ptr > ()), yystack_[0].value.as < Field_option > ());
          }
#line 15124 "parser.cc"
    break;

  case 1125:
#line 5601 "parser.yy"
          {
            ThrowNotSupportedException("datatype BIT");
          }
#line 15132 "parser.cc"
    break;

  case 1126:
#line 5605 "parser.yy"
          {
            ThrowNotSupportedException("datatype BIT");
          }
#line 15140 "parser.cc"
    break;

  case 1127:
#line 5609 "parser.yy"
          {
            yylhs.value.as < PT_ColumnType_ptr > () = CreateColumnType("bool");
          }
#line 15148 "parser.cc"
    break;

  case 1128:
#line 5613 "parser.yy"
          {
            yylhs.value.as < PT_ColumnType_ptr > () = CreateColumnType("bool");
          }
#line 15156 "parser.cc"
    break;

  case 1129:
#line 5617 "parser.yy"
          {
            yylhs.value.as < PT_ColumnType_ptr > () = CreateColumnType("char", yystack_[1].value.as < string > ());
          }
#line 15164 "parser.cc"
    break;

  case 1130:
#line 5621 "parser.yy"
          {
            yylhs.value.as < PT_ColumnType_ptr > () = CreateColumnType("char");
          }
#line 15172 "parser.cc"
    break;

  case 1131:
#line 5625 "parser.yy"
          {
            ThrowNotSupportedException("datatype NCHAR");
          }
#line 15180 "parser.cc"
    break;

  case 1132:
#line 5629 "parser.yy"
          {
            ThrowNotSupportedException("datatype NCHAR");
          }
#line 15188 "parser.cc"
    break;

  case 1133:
#line 5633 "parser.yy"
          {
             yylhs.value.as < PT_ColumnType_ptr > () = CreateColumnType("binary", yystack_[0].value.as < string > ());
          }
#line 15196 "parser.cc"
    break;

  case 1134:
#line 5637 "parser.yy"
          {
            ThrowNotSupportedException("datatype BINARY");
          }
#line 15204 "parser.cc"
    break;

  case 1135:
#line 5641 "parser.yy"
          {
            yylhs.value.as < PT_ColumnType_ptr > () = CreateColumnType(yystack_[2].value.as < string > (), yystack_[1].value.as < string > ());
          }
#line 15212 "parser.cc"
    break;

  case 1136:
#line 5645 "parser.yy"
          {
            ThrowNotSupportedException("datatype NVARCHAR");
          }
#line 15220 "parser.cc"
    break;

  case 1137:
#line 5649 "parser.yy"
          {
            yylhs.value.as < PT_ColumnType_ptr > () = CreateColumnType("varbinary", yystack_[0].value.as < string > ());
          }
#line 15228 "parser.cc"
    break;

  case 1138:
#line 5653 "parser.yy"
          {
            yylhs.value.as < PT_ColumnType_ptr > () = CreateColumnType("year", yystack_[1].value.as < string > (), yystack_[0].value.as < Field_option > ());
          }
#line 15236 "parser.cc"
    break;

  case 1139:
#line 5657 "parser.yy"
          {
            yylhs.value.as < PT_ColumnType_ptr > () = CreateColumnType("date");
          }
#line 15244 "parser.cc"
    break;

  case 1140:
#line 5661 "parser.yy"
          {
            yylhs.value.as < PT_ColumnType_ptr > () = CreateColumnType("time", yystack_[0].value.as < string > ());
          }
#line 15252 "parser.cc"
    break;

  case 1141:
#line 5665 "parser.yy"
          {
            yylhs.value.as < PT_ColumnType_ptr > () = CreateColumnType("timestamp", yystack_[0].value.as < string > ());
          }
#line 15260 "parser.cc"
    break;

  case 1142:
#line 5669 "parser.yy"
          {
            yylhs.value.as < PT_ColumnType_ptr > () = CreateColumnType("datetime", yystack_[0].value.as < string > ());
          }
#line 15268 "parser.cc"
    break;

  case 1143:
#line 5673 "parser.yy"
          {
            ThrowNotSupportedException("datatype TINYBLOB");
          }
#line 15276 "parser.cc"
    break;

  case 1144:
#line 5677 "parser.yy"
          {
            ThrowNotSupportedException("datatype BLOB");
          }
#line 15284 "parser.cc"
    break;

  case 1145:
#line 5680 "parser.yy"
                       { }
#line 15290 "parser.cc"
    break;

  case 1146:
#line 5682 "parser.yy"
          {
            ThrowNotSupportedException("datatype MEDIUMBLOB");
          }
#line 15298 "parser.cc"
    break;

  case 1147:
#line 5686 "parser.yy"
          {
            ThrowNotSupportedException("datatype LONGBLOB");
          }
#line 15306 "parser.cc"
    break;

  case 1148:
#line 5690 "parser.yy"
          {
            ThrowNotSupportedException("datatype LONG VARBINARY");
          }
#line 15314 "parser.cc"
    break;

  case 1149:
#line 5694 "parser.yy"
          {
            ThrowNotSupportedException("datatype LONG VARCHAR");
          }
#line 15322 "parser.cc"
    break;

  case 1150:
#line 5698 "parser.yy"
          {
            // $$ = CreateColumnType("text", "256");
            yylhs.value.as < PT_ColumnType_ptr > () = CreateColumnType("text", "128");
          }
#line 15331 "parser.cc"
    break;

  case 1151:
#line 5703 "parser.yy"
          {
            auto fieldLen = yystack_[1].value.as < string > ();
            if ( fieldLen.empty() )
            {
              // fieldLen = "65535";
              fieldLen = "256";
            }
            yylhs.value.as < PT_ColumnType_ptr > () = CreateColumnType("text", fieldLen);
          }
#line 15345 "parser.cc"
    break;

  case 1152:
#line 5713 "parser.yy"
          {
            // fieldLen = "16777215";
            auto fieldLen = "1024";
            yylhs.value.as < PT_ColumnType_ptr > () = CreateColumnType("text", fieldLen);
          }
#line 15355 "parser.cc"
    break;

  case 1153:
#line 5719 "parser.yy"
          {
            // fieldLen = "4294967295";
            auto fieldLen = "1024";
            yylhs.value.as < PT_ColumnType_ptr > () = CreateColumnType("text", fieldLen);
          }
#line 15365 "parser.cc"
    break;

  case 1154:
#line 5725 "parser.yy"
          {
            ThrowNotSupportedException("datatype ENUM");
          }
#line 15373 "parser.cc"
    break;

  case 1155:
#line 5729 "parser.yy"
          {
            ThrowNotSupportedException("datatype SET");
          }
#line 15381 "parser.cc"
    break;

  case 1156:
#line 5733 "parser.yy"
          {
            ThrowNotSupportedException("datatype LONGBLOB");
          }
#line 15389 "parser.cc"
    break;

  case 1157:
#line 5737 "parser.yy"
          {
            ThrowNotSupportedException("datatype SERIAL");
          }
#line 15397 "parser.cc"
    break;

  case 1158:
#line 5741 "parser.yy"
          {
            ThrowNotSupportedException("datatype JSON");
          }
#line 15405 "parser.cc"
    break;

  case 1159:
#line 5748 "parser.yy"
          { ThrowNotSupportedException("geometry");}
#line 15411 "parser.cc"
    break;

  case 1160:
#line 5750 "parser.yy"
          { ThrowNotSupportedException("geometrycollection");}
#line 15417 "parser.cc"
    break;

  case 1161:
#line 5752 "parser.yy"
          { ThrowNotSupportedException("point");}
#line 15423 "parser.cc"
    break;

  case 1162:
#line 5754 "parser.yy"
          { ThrowNotSupportedException("multipoint");}
#line 15429 "parser.cc"
    break;

  case 1163:
#line 5756 "parser.yy"
          { ThrowNotSupportedException("linestring");}
#line 15435 "parser.cc"
    break;

  case 1164:
#line 5758 "parser.yy"
          { ThrowNotSupportedException("multilinestring");}
#line 15441 "parser.cc"
    break;

  case 1165:
#line 5760 "parser.yy"
          { ThrowNotSupportedException("polygon");}
#line 15447 "parser.cc"
    break;

  case 1166:
#line 5762 "parser.yy"
          { ThrowNotSupportedException("multipolygon");}
#line 15453 "parser.cc"
    break;

  case 1167:
#line 5766 "parser.yy"
               {
        ThrowNotSupportedException("nchar");
     }
#line 15461 "parser.cc"
    break;

  case 1168:
#line 5769 "parser.yy"
                            {
        ThrowNotSupportedException("national char");
    }
#line 15469 "parser.cc"
    break;

  case 1169:
#line 5774 "parser.yy"
                           { yylhs.value.as < string > () = "varchar"; }
#line 15475 "parser.cc"
    break;

  case 1170:
#line 5775 "parser.yy"
                      { yylhs.value.as < string > () = "varchar"; }
#line 15481 "parser.cc"
    break;

  case 1171:
#line 5778 "parser.yy"
                                   {ThrowNotSupportedException("nvarchar");}
#line 15487 "parser.cc"
    break;

  case 1172:
#line 5779 "parser.yy"
                       {ThrowNotSupportedException("nvarchar");}
#line 15493 "parser.cc"
    break;

  case 1173:
#line 5780 "parser.yy"
                                {ThrowNotSupportedException("nvarchar");}
#line 15499 "parser.cc"
    break;

  case 1174:
#line 5781 "parser.yy"
                                        {ThrowNotSupportedException("nvarchar");}
#line 15505 "parser.cc"
    break;

  case 1175:
#line 5782 "parser.yy"
                            {ThrowNotSupportedException("nvarchar");}
#line 15511 "parser.cc"
    break;

  case 1176:
#line 5786 "parser.yy"
                        { yylhs.value.as < string > () = "int"; }
#line 15517 "parser.cc"
    break;

  case 1177:
#line 5787 "parser.yy"
                        { yylhs.value.as < string > () = "int"; }
#line 15523 "parser.cc"
    break;

  case 1178:
#line 5788 "parser.yy"
                        { yylhs.value.as < string > () = "tinyint"; }
#line 15529 "parser.cc"
    break;

  case 1179:
#line 5789 "parser.yy"
                        { yylhs.value.as < string > () = "smallint"; }
#line 15535 "parser.cc"
    break;

  case 1180:
#line 5790 "parser.yy"
                        { yylhs.value.as < string > () = "mediumint"; }
#line 15541 "parser.cc"
    break;

  case 1181:
#line 5791 "parser.yy"
                        { yylhs.value.as < string > () = "bigint"; }
#line 15547 "parser.cc"
    break;

  case 1182:
#line 5796 "parser.yy"
          {
            yylhs.value.as < string > () = "real";
          }
#line 15555 "parser.cc"
    break;

  case 1183:
#line 5800 "parser.yy"
          { yylhs.value.as < string > () = "double"; }
#line 15561 "parser.cc"
    break;

  case 1186:
#line 5808 "parser.yy"
                      { yylhs.value.as < string > () = "float"; }
#line 15567 "parser.cc"
    break;

  case 1187:
#line 5809 "parser.yy"
                      { yylhs.value.as < string > () = "decimal"; }
#line 15573 "parser.cc"
    break;

  case 1188:
#line 5810 "parser.yy"
                      { yylhs.value.as < string > () = "numeric"; }
#line 15579 "parser.cc"
    break;

  case 1189:
#line 5811 "parser.yy"
                      { yylhs.value.as < string > () = "fixed"; }
#line 15585 "parser.cc"
    break;

  case 1190:
#line 5815 "parser.yy"
                    {
            yylhs.value.as < Precision_ptr > () = std::make_shared< pair< string, string > >("", "");
        }
#line 15593 "parser.cc"
    break;

  case 1191:
#line 5818 "parser.yy"
                   {
            yylhs.value.as < Precision_ptr > () = std::make_shared< pair< string, string > >(yystack_[0].value.as < string > (), "");
    }
#line 15601 "parser.cc"
    break;

  case 1192:
#line 5821 "parser.yy"
      { yylhs.value.as < Precision_ptr > () = yystack_[0].value.as < Precision_ptr > (); }
#line 15607 "parser.cc"
    break;

  case 1193:
#line 5825 "parser.yy"
                            {
            yylhs.value.as < Precision_ptr > () = std::make_shared< pair< string, string > >(yystack_[3].value.as < string > (), yystack_[1].value.as < string > ());
        }
#line 15615 "parser.cc"
    break;

  case 1194:
#line 5831 "parser.yy"
                    { yylhs.value.as < string > () = ""; }
#line 15621 "parser.cc"
    break;

  case 1195:
#line 5832 "parser.yy"
                  { yylhs.value.as < string > () = yystack_[1].value.as < string > (); }
#line 15627 "parser.cc"
    break;

  case 1196:
#line 5836 "parser.yy"
                    { yylhs.value.as < Expression > () = nullptr; }
#line 15633 "parser.cc"
    break;

  case 1197:
#line 5837 "parser.yy"
               { yylhs.value.as < Expression > () = nullptr; }
#line 15639 "parser.cc"
    break;

  case 1198:
#line 5838 "parser.yy"
                   { yylhs.value.as < Expression > () = CreateIntegerExpression(yystack_[1].value.as < string > ()); }
#line 15645 "parser.cc"
    break;

  case 1199:
#line 5844 "parser.yy"
                            { yylhs.value.as < string > () = yystack_[1].value.as < string > (); }
#line 15651 "parser.cc"
    break;

  case 1200:
#line 5845 "parser.yy"
                                { yylhs.value.as < string > () = yystack_[1].value.as < string > (); }
#line 15657 "parser.cc"
    break;

  case 1201:
#line 5846 "parser.yy"
                              { yylhs.value.as < string > () = yystack_[1].value.as < string > (); }
#line 15663 "parser.cc"
    break;

  case 1202:
#line 5847 "parser.yy"
                      { yylhs.value.as < string > () = yystack_[1].value.as < string > (); }
#line 15669 "parser.cc"
    break;

  case 1203:
#line 5850 "parser.yy"
                      { yylhs.value.as < string > () = ""; }
#line 15675 "parser.cc"
    break;

  case 1204:
#line 5851 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 15681 "parser.cc"
    break;

  case 1205:
#line 5855 "parser.yy"
          {
            yylhs.value.as < Precision_ptr > () = std::make_shared< pair< string, string > >("", "");
          }
#line 15689 "parser.cc"
    break;

  case 1206:
#line 5858 "parser.yy"
          { yylhs.value.as < Precision_ptr > () = yystack_[0].value.as < Precision_ptr > (); }
#line 15695 "parser.cc"
    break;

  case 1207:
#line 5861 "parser.yy"
                      { yylhs.value.as < ColAttrList > () = nullptr; }
#line 15701 "parser.cc"
    break;

  case 1208:
#line 5862 "parser.yy"
          { yylhs.value.as < ColAttrList > () = yystack_[0].value.as < ColAttrList > (); }
#line 15707 "parser.cc"
    break;

  case 1209:
#line 5867 "parser.yy"
          {
            yylhs.value.as < ColAttrList > () = yystack_[1].value.as < ColAttrList > ();
            if (yystack_[0].value.as < PT_column_attr_base_ptr > () == nullptr) assert(0); // OOM
            /*
            if ($2->has_constraint_enforcement()) {
              // $2 is `[NOT] ENFORCED`
              if ($1->back()->set_constraint_enforcement(
                      $2->is_constraint_enforced())) {
                // $1 is not `CHECK(...)`
                YYTHD->syntax_error_at(@2);
                MYSQL_YYABORT;
              }
            } else {
            */
              yylhs.value.as < ColAttrList > ()->emplace_back(yystack_[0].value.as < PT_column_attr_base_ptr > ());
            // }
          }
#line 15729 "parser.cc"
    break;

  case 1210:
#line 5885 "parser.yy"
          {
            if (yystack_[0].value.as < PT_column_attr_base_ptr > () == nullptr)
                assert(0); // OOM
            // if ($1->has_constraint_enforcement()) {
            //   // [NOT] ENFORCED doesn't follow the CHECK clause
            //   YYTHD->syntax_error_at(@1);
            //   assert(0);
            // }
            auto colAttrList = std::make_shared<std::vector<PT_column_attr_base_ptr>>();
            colAttrList->emplace_back(yystack_[0].value.as < PT_column_attr_base_ptr > ());
            yylhs.value.as < ColAttrList > () = colAttrList;
          }
#line 15746 "parser.cc"
    break;

  case 1211:
#line 5901 "parser.yy"
          {
            yylhs.value.as < PT_column_attr_base_ptr > () = std::make_shared<PT_null_column_attr>();
          }
#line 15754 "parser.cc"
    break;

  case 1212:
#line 5905 "parser.yy"
          {
            yylhs.value.as < PT_column_attr_base_ptr > () = std::make_shared<PT_not_null_column_attr>();
          }
#line 15762 "parser.cc"
    break;

  case 1213:
#line 5909 "parser.yy"
          {
            ThrowNotSupportedException("SECONDARY");
            //$$ = std::make_shared<PT_secondary_column_attr >();
          }
#line 15771 "parser.cc"
    break;

  case 1214:
#line 5914 "parser.yy"
          {
            yylhs.value.as < PT_column_attr_base_ptr > () = CreateDefaultValueAttr( yystack_[0].value.as < Expression > () );
          }
#line 15779 "parser.cc"
    break;

  case 1215:
#line 5918 "parser.yy"
          {
            ThrowNotSupportedException("expression as default value");
          }
#line 15787 "parser.cc"
    break;

  case 1216:
#line 5922 "parser.yy"
          {
            ThrowNotSupportedException("ON UPDATE");
            //$$ = std::make_shared<PT_on_update_column_attr >();
          }
#line 15796 "parser.cc"
    break;

  case 1217:
#line 5927 "parser.yy"
          {
            ThrowNotSupportedException("AUTO_INC");
            //$$ = std::make_shared<PT_auto_increment_column_attr >();
          }
#line 15805 "parser.cc"
    break;

  case 1218:
#line 5932 "parser.yy"
          {
            ThrowNotSupportedException("SERIAL");
            //$$ = std::make_shared<PT_serial_default_value_column_attr >();
          }
#line 15814 "parser.cc"
    break;

  case 1219:
#line 5937 "parser.yy"
          {
            yylhs.value.as < PT_column_attr_base_ptr > () = std::make_shared<PT_primary_key_column_attr >();;
          }
#line 15822 "parser.cc"
    break;

  case 1220:
#line 5941 "parser.yy"
          {
            yylhs.value.as < PT_column_attr_base_ptr > () = std::make_shared<PT_unique_key_column_attr >();
          }
#line 15830 "parser.cc"
    break;

  case 1221:
#line 5945 "parser.yy"
          {
            yylhs.value.as < PT_column_attr_base_ptr > () = std::make_shared<PT_unique_key_column_attr >();
          }
#line 15838 "parser.cc"
    break;

  case 1222:
#line 5949 "parser.yy"
          {
            yylhs.value.as < PT_column_attr_base_ptr > () = std::make_shared<PT_comment_column_attr >(yystack_[0].value.as < string > ());
          }
#line 15846 "parser.cc"
    break;

  case 1223:
#line 5953 "parser.yy"
          {
            yylhs.value.as < PT_column_attr_base_ptr > () = std::make_shared<PT_collate_column_attr >();
          }
#line 15854 "parser.cc"
    break;

  case 1224:
#line 5957 "parser.yy"
          {
            ThrowNotSupportedException("COLUMN_FORMAT");
            //$$ = std::make_shared<PT_column_format_column_attr >();
          }
#line 15863 "parser.cc"
    break;

  case 1225:
#line 5962 "parser.yy"
          {
            ThrowNotSupportedException("STORAGE");
            //$$ = std::make_shared<PT_storage_media_column_attr >();
          }
#line 15872 "parser.cc"
    break;

  case 1226:
#line 5967 "parser.yy"
          {
            ThrowNotSupportedException("SRID");
            //$$ = std::make_shared<PT_srid_column_attr>();
          }
#line 15881 "parser.cc"
    break;

  case 1227:
#line 5973 "parser.yy"
          {
            //$$ = std::make_shared<PT_check_constraint_column_attr>();
          }
#line 15889 "parser.cc"
    break;

  case 1228:
#line 5986 "parser.yy"
          {
            //$$ = std::make_shared<PT_constraint_enforcement_attr>();
          }
#line 15897 "parser.cc"
    break;

  case 1229:
#line 5990 "parser.yy"
          {
            yylhs.value.as < PT_column_attr_base_ptr > () = std::make_shared<PT_encode_type_column_attr>( yystack_[2].value.as < pair< aries::EncodeType, string > > ().first, yystack_[2].value.as < pair< aries::EncodeType, string > > ().second, yystack_[0].value.as < string > () );
          }
#line 15905 "parser.cc"
    break;

  case 1230:
#line 5997 "parser.yy"
        { 
          yylhs.value.as < pair< aries::EncodeType, string > > ().first = aries::EncodeType::DICT; 
          yylhs.value.as < pair< aries::EncodeType, string > > ().second = "tinyint";
        }
#line 15914 "parser.cc"
    break;

  case 1231:
#line 6002 "parser.yy"
        {
          yylhs.value.as < pair< aries::EncodeType, string > > ().first = aries::EncodeType::DICT;
          yylhs.value.as < pair< aries::EncodeType, string > > ().second = "smallint";
        }
#line 15923 "parser.cc"
    break;

  case 1232:
#line 6007 "parser.yy"
        {
          yylhs.value.as < pair< aries::EncodeType, string > > ().first = aries::EncodeType::DICT;
          yylhs.value.as < pair< aries::EncodeType, string > > ().second = "int";
        }
#line 15932 "parser.cc"
    break;

  case 1233:
#line 6014 "parser.yy"
                      { }
#line 15938 "parser.cc"
    break;

  case 1234:
#line 6015 "parser.yy"
                      { }
#line 15944 "parser.cc"
    break;

  case 1235:
#line 6016 "parser.yy"
                      { }
#line 15950 "parser.cc"
    break;

  case 1236:
#line 6020 "parser.yy"
                      { }
#line 15956 "parser.cc"
    break;

  case 1237:
#line 6021 "parser.yy"
                      { }
#line 15962 "parser.cc"
    break;

  case 1238:
#line 6022 "parser.yy"
                      { }
#line 15968 "parser.cc"
    break;

  case 1239:
#line 6025 "parser.yy"
          { yylhs.value.as < Expression > () = yystack_[0].value.as < Expression > (); }
#line 15974 "parser.cc"
    break;

  case 1240:
#line 6026 "parser.yy"
                         {
            yylhs.value.as < Expression > () = LiteralToExpression( yystack_[0].value.as < Literal > () );
        }
#line 15982 "parser.cc"
    break;

  case 1241:
#line 6031 "parser.yy"
                                        {
          yylhs.value.as < Expression > () = CreateFunctionExpression("NOW", yystack_[0].value.as < Expression > ());
        }
#line 15990 "parser.cc"
    break;

  case 1242:
#line 6052 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 15996 "parser.cc"
    break;

  case 1244:
#line 6054 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 16002 "parser.cc"
    break;

  case 1250:
#line 6072 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 16008 "parser.cc"
    break;

  case 1251:
#line 6073 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 16014 "parser.cc"
    break;

  case 1252:
#line 6074 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 16020 "parser.cc"
    break;

  case 1253:
#line 6075 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 16026 "parser.cc"
    break;

  case 1254:
#line 6076 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 16032 "parser.cc"
    break;

  case 1255:
#line 6077 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 16038 "parser.cc"
    break;

  case 1256:
#line 6078 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 16044 "parser.cc"
    break;

  case 1257:
#line 6079 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 16050 "parser.cc"
    break;

  case 1258:
#line 6080 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 16056 "parser.cc"
    break;

  case 1259:
#line 6081 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 16062 "parser.cc"
    break;

  case 1260:
#line 6082 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 16068 "parser.cc"
    break;

  case 1261:
#line 6083 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 16074 "parser.cc"
    break;

  case 1262:
#line 6084 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 16080 "parser.cc"
    break;

  case 1263:
#line 6085 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 16086 "parser.cc"
    break;

  case 1264:
#line 6086 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 16092 "parser.cc"
    break;

  case 1265:
#line 6087 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 16098 "parser.cc"
    break;

  case 1266:
#line 6088 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 16104 "parser.cc"
    break;

  case 1267:
#line 6089 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 16110 "parser.cc"
    break;

  case 1268:
#line 6090 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 16116 "parser.cc"
    break;

  case 1269:
#line 6091 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 16122 "parser.cc"
    break;

  case 1270:
#line 6092 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 16128 "parser.cc"
    break;

  case 1271:
#line 6093 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 16134 "parser.cc"
    break;

  case 1272:
#line 6094 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 16140 "parser.cc"
    break;

  case 1273:
#line 6095 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 16146 "parser.cc"
    break;

  case 1274:
#line 6096 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 16152 "parser.cc"
    break;

  case 1275:
#line 6097 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 16158 "parser.cc"
    break;

  case 1276:
#line 6098 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 16164 "parser.cc"
    break;

  case 1277:
#line 6099 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 16170 "parser.cc"
    break;

  case 1278:
#line 6100 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 16176 "parser.cc"
    break;

  case 1279:
#line 6101 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 16182 "parser.cc"
    break;

  case 1280:
#line 6102 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 16188 "parser.cc"
    break;

  case 1281:
#line 6103 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 16194 "parser.cc"
    break;

  case 1282:
#line 6104 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 16200 "parser.cc"
    break;

  case 1283:
#line 6105 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 16206 "parser.cc"
    break;

  case 1284:
#line 6106 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 16212 "parser.cc"
    break;

  case 1297:
#line 6146 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 16218 "parser.cc"
    break;

  case 1298:
#line 6147 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 16224 "parser.cc"
    break;

  case 1299:
#line 6148 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 16230 "parser.cc"
    break;

  case 1300:
#line 6149 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 16236 "parser.cc"
    break;

  case 1301:
#line 6150 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 16242 "parser.cc"
    break;

  case 1302:
#line 6151 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 16248 "parser.cc"
    break;

  case 1303:
#line 6152 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 16254 "parser.cc"
    break;

  case 1304:
#line 6153 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 16260 "parser.cc"
    break;

  case 1305:
#line 6154 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 16266 "parser.cc"
    break;

  case 1306:
#line 6155 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 16272 "parser.cc"
    break;

  case 1307:
#line 6156 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 16278 "parser.cc"
    break;

  case 1308:
#line 6157 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 16284 "parser.cc"
    break;

  case 1309:
#line 6158 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 16290 "parser.cc"
    break;

  case 1310:
#line 6159 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 16296 "parser.cc"
    break;

  case 1311:
#line 6160 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 16302 "parser.cc"
    break;

  case 1312:
#line 6161 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 16308 "parser.cc"
    break;

  case 1313:
#line 6162 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 16314 "parser.cc"
    break;

  case 1314:
#line 6163 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 16320 "parser.cc"
    break;

  case 1315:
#line 6164 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 16326 "parser.cc"
    break;

  case 1316:
#line 6165 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 16332 "parser.cc"
    break;

  case 1317:
#line 6166 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 16338 "parser.cc"
    break;

  case 1318:
#line 6167 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 16344 "parser.cc"
    break;

  case 1319:
#line 6168 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 16350 "parser.cc"
    break;

  case 1320:
#line 6169 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 16356 "parser.cc"
    break;

  case 1321:
#line 6170 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 16362 "parser.cc"
    break;

  case 1322:
#line 6171 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 16368 "parser.cc"
    break;

  case 1323:
#line 6172 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 16374 "parser.cc"
    break;

  case 1324:
#line 6173 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 16380 "parser.cc"
    break;

  case 1325:
#line 6174 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 16386 "parser.cc"
    break;

  case 1326:
#line 6175 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 16392 "parser.cc"
    break;

  case 1327:
#line 6176 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 16398 "parser.cc"
    break;

  case 1328:
#line 6177 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 16404 "parser.cc"
    break;

  case 1329:
#line 6178 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 16410 "parser.cc"
    break;

  case 1330:
#line 6179 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 16416 "parser.cc"
    break;

  case 1331:
#line 6180 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 16422 "parser.cc"
    break;

  case 1332:
#line 6181 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 16428 "parser.cc"
    break;

  case 1333:
#line 6182 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 16434 "parser.cc"
    break;

  case 1334:
#line 6183 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 16440 "parser.cc"
    break;

  case 1335:
#line 6184 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 16446 "parser.cc"
    break;

  case 1336:
#line 6185 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 16452 "parser.cc"
    break;

  case 1337:
#line 6186 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 16458 "parser.cc"
    break;

  case 1338:
#line 6187 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 16464 "parser.cc"
    break;

  case 1339:
#line 6188 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 16470 "parser.cc"
    break;

  case 1340:
#line 6189 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 16476 "parser.cc"
    break;

  case 1341:
#line 6190 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 16482 "parser.cc"
    break;

  case 1342:
#line 6191 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 16488 "parser.cc"
    break;

  case 1343:
#line 6192 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 16494 "parser.cc"
    break;

  case 1344:
#line 6193 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 16500 "parser.cc"
    break;

  case 1345:
#line 6194 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 16506 "parser.cc"
    break;

  case 1346:
#line 6195 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 16512 "parser.cc"
    break;

  case 1347:
#line 6196 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 16518 "parser.cc"
    break;

  case 1348:
#line 6197 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 16524 "parser.cc"
    break;

  case 1349:
#line 6198 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 16530 "parser.cc"
    break;

  case 1350:
#line 6199 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 16536 "parser.cc"
    break;

  case 1351:
#line 6200 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 16542 "parser.cc"
    break;

  case 1352:
#line 6201 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 16548 "parser.cc"
    break;

  case 1353:
#line 6202 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 16554 "parser.cc"
    break;

  case 1354:
#line 6203 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 16560 "parser.cc"
    break;

  case 1355:
#line 6204 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 16566 "parser.cc"
    break;

  case 1356:
#line 6205 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 16572 "parser.cc"
    break;

  case 1357:
#line 6206 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 16578 "parser.cc"
    break;

  case 1358:
#line 6207 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 16584 "parser.cc"
    break;

  case 1359:
#line 6208 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 16590 "parser.cc"
    break;

  case 1360:
#line 6209 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 16596 "parser.cc"
    break;

  case 1361:
#line 6210 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 16602 "parser.cc"
    break;

  case 1362:
#line 6211 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 16608 "parser.cc"
    break;

  case 1363:
#line 6212 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 16614 "parser.cc"
    break;

  case 1364:
#line 6213 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 16620 "parser.cc"
    break;

  case 1365:
#line 6214 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 16626 "parser.cc"
    break;

  case 1366:
#line 6215 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 16632 "parser.cc"
    break;

  case 1367:
#line 6216 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 16638 "parser.cc"
    break;

  case 1368:
#line 6217 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 16644 "parser.cc"
    break;

  case 1369:
#line 6218 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 16650 "parser.cc"
    break;

  case 1370:
#line 6219 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 16656 "parser.cc"
    break;

  case 1371:
#line 6220 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 16662 "parser.cc"
    break;

  case 1372:
#line 6221 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 16668 "parser.cc"
    break;

  case 1373:
#line 6222 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 16674 "parser.cc"
    break;

  case 1374:
#line 6223 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 16680 "parser.cc"
    break;

  case 1375:
#line 6224 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 16686 "parser.cc"
    break;

  case 1376:
#line 6225 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 16692 "parser.cc"
    break;

  case 1377:
#line 6226 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 16698 "parser.cc"
    break;

  case 1378:
#line 6227 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 16704 "parser.cc"
    break;

  case 1379:
#line 6228 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 16710 "parser.cc"
    break;

  case 1380:
#line 6229 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 16716 "parser.cc"
    break;

  case 1381:
#line 6230 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 16722 "parser.cc"
    break;

  case 1382:
#line 6231 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 16728 "parser.cc"
    break;

  case 1383:
#line 6232 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 16734 "parser.cc"
    break;

  case 1384:
#line 6233 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 16740 "parser.cc"
    break;

  case 1385:
#line 6234 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 16746 "parser.cc"
    break;

  case 1386:
#line 6235 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 16752 "parser.cc"
    break;

  case 1387:
#line 6236 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 16758 "parser.cc"
    break;

  case 1388:
#line 6237 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 16764 "parser.cc"
    break;

  case 1389:
#line 6238 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 16770 "parser.cc"
    break;

  case 1390:
#line 6239 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 16776 "parser.cc"
    break;

  case 1391:
#line 6240 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 16782 "parser.cc"
    break;

  case 1392:
#line 6241 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 16788 "parser.cc"
    break;

  case 1393:
#line 6242 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 16794 "parser.cc"
    break;

  case 1394:
#line 6243 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 16800 "parser.cc"
    break;

  case 1395:
#line 6244 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 16806 "parser.cc"
    break;

  case 1396:
#line 6245 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 16812 "parser.cc"
    break;

  case 1397:
#line 6246 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 16818 "parser.cc"
    break;

  case 1398:
#line 6248 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 16824 "parser.cc"
    break;

  case 1399:
#line 6249 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 16830 "parser.cc"
    break;

  case 1400:
#line 6250 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 16836 "parser.cc"
    break;

  case 1401:
#line 6251 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 16842 "parser.cc"
    break;

  case 1402:
#line 6252 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 16848 "parser.cc"
    break;

  case 1403:
#line 6253 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 16854 "parser.cc"
    break;

  case 1404:
#line 6254 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 16860 "parser.cc"
    break;

  case 1405:
#line 6255 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 16866 "parser.cc"
    break;

  case 1406:
#line 6256 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 16872 "parser.cc"
    break;

  case 1407:
#line 6257 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 16878 "parser.cc"
    break;

  case 1408:
#line 6258 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 16884 "parser.cc"
    break;

  case 1409:
#line 6259 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 16890 "parser.cc"
    break;

  case 1410:
#line 6260 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 16896 "parser.cc"
    break;

  case 1411:
#line 6261 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 16902 "parser.cc"
    break;

  case 1412:
#line 6262 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 16908 "parser.cc"
    break;

  case 1413:
#line 6263 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 16914 "parser.cc"
    break;

  case 1414:
#line 6264 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 16920 "parser.cc"
    break;

  case 1415:
#line 6265 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 16926 "parser.cc"
    break;

  case 1416:
#line 6266 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 16932 "parser.cc"
    break;

  case 1417:
#line 6267 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 16938 "parser.cc"
    break;

  case 1418:
#line 6268 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 16944 "parser.cc"
    break;

  case 1419:
#line 6269 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 16950 "parser.cc"
    break;

  case 1420:
#line 6270 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 16956 "parser.cc"
    break;

  case 1421:
#line 6271 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 16962 "parser.cc"
    break;

  case 1422:
#line 6272 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 16968 "parser.cc"
    break;

  case 1423:
#line 6273 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 16974 "parser.cc"
    break;

  case 1424:
#line 6274 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 16980 "parser.cc"
    break;

  case 1425:
#line 6275 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 16986 "parser.cc"
    break;

  case 1426:
#line 6276 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 16992 "parser.cc"
    break;

  case 1427:
#line 6277 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 16998 "parser.cc"
    break;

  case 1428:
#line 6278 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 17004 "parser.cc"
    break;

  case 1429:
#line 6279 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 17010 "parser.cc"
    break;

  case 1430:
#line 6280 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 17016 "parser.cc"
    break;

  case 1431:
#line 6281 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 17022 "parser.cc"
    break;

  case 1432:
#line 6282 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 17028 "parser.cc"
    break;

  case 1433:
#line 6283 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 17034 "parser.cc"
    break;

  case 1434:
#line 6284 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 17040 "parser.cc"
    break;

  case 1435:
#line 6285 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 17046 "parser.cc"
    break;

  case 1436:
#line 6286 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 17052 "parser.cc"
    break;

  case 1437:
#line 6287 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 17058 "parser.cc"
    break;

  case 1438:
#line 6288 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 17064 "parser.cc"
    break;

  case 1439:
#line 6289 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 17070 "parser.cc"
    break;

  case 1440:
#line 6290 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 17076 "parser.cc"
    break;

  case 1441:
#line 6291 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 17082 "parser.cc"
    break;

  case 1442:
#line 6292 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 17088 "parser.cc"
    break;

  case 1443:
#line 6293 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 17094 "parser.cc"
    break;

  case 1444:
#line 6294 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 17100 "parser.cc"
    break;

  case 1445:
#line 6295 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 17106 "parser.cc"
    break;

  case 1446:
#line 6296 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 17112 "parser.cc"
    break;

  case 1447:
#line 6297 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 17118 "parser.cc"
    break;

  case 1448:
#line 6298 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 17124 "parser.cc"
    break;

  case 1449:
#line 6299 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 17130 "parser.cc"
    break;

  case 1450:
#line 6300 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 17136 "parser.cc"
    break;

  case 1451:
#line 6301 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 17142 "parser.cc"
    break;

  case 1452:
#line 6302 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 17148 "parser.cc"
    break;

  case 1453:
#line 6303 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 17154 "parser.cc"
    break;

  case 1454:
#line 6304 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 17160 "parser.cc"
    break;

  case 1455:
#line 6305 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 17166 "parser.cc"
    break;

  case 1456:
#line 6306 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 17172 "parser.cc"
    break;

  case 1457:
#line 6307 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 17178 "parser.cc"
    break;

  case 1458:
#line 6308 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 17184 "parser.cc"
    break;

  case 1459:
#line 6309 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 17190 "parser.cc"
    break;

  case 1460:
#line 6310 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 17196 "parser.cc"
    break;

  case 1461:
#line 6311 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 17202 "parser.cc"
    break;

  case 1462:
#line 6312 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 17208 "parser.cc"
    break;

  case 1463:
#line 6313 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 17214 "parser.cc"
    break;

  case 1464:
#line 6314 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 17220 "parser.cc"
    break;

  case 1465:
#line 6315 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 17226 "parser.cc"
    break;

  case 1466:
#line 6316 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 17232 "parser.cc"
    break;

  case 1467:
#line 6317 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 17238 "parser.cc"
    break;

  case 1468:
#line 6318 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 17244 "parser.cc"
    break;

  case 1469:
#line 6319 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 17250 "parser.cc"
    break;

  case 1470:
#line 6320 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 17256 "parser.cc"
    break;

  case 1471:
#line 6321 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 17262 "parser.cc"
    break;

  case 1472:
#line 6322 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 17268 "parser.cc"
    break;

  case 1473:
#line 6323 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 17274 "parser.cc"
    break;

  case 1474:
#line 6324 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 17280 "parser.cc"
    break;

  case 1475:
#line 6325 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 17286 "parser.cc"
    break;

  case 1476:
#line 6326 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 17292 "parser.cc"
    break;

  case 1477:
#line 6327 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 17298 "parser.cc"
    break;

  case 1478:
#line 6328 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 17304 "parser.cc"
    break;

  case 1479:
#line 6329 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 17310 "parser.cc"
    break;

  case 1480:
#line 6330 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 17316 "parser.cc"
    break;

  case 1481:
#line 6331 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 17322 "parser.cc"
    break;

  case 1482:
#line 6332 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 17328 "parser.cc"
    break;

  case 1483:
#line 6333 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 17334 "parser.cc"
    break;

  case 1484:
#line 6334 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 17340 "parser.cc"
    break;

  case 1485:
#line 6335 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 17346 "parser.cc"
    break;

  case 1486:
#line 6336 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 17352 "parser.cc"
    break;

  case 1487:
#line 6337 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 17358 "parser.cc"
    break;

  case 1488:
#line 6338 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 17364 "parser.cc"
    break;

  case 1489:
#line 6339 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 17370 "parser.cc"
    break;

  case 1490:
#line 6340 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 17376 "parser.cc"
    break;

  case 1491:
#line 6341 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 17382 "parser.cc"
    break;

  case 1492:
#line 6342 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 17388 "parser.cc"
    break;

  case 1493:
#line 6343 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 17394 "parser.cc"
    break;

  case 1494:
#line 6344 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 17400 "parser.cc"
    break;

  case 1495:
#line 6345 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 17406 "parser.cc"
    break;

  case 1496:
#line 6346 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 17412 "parser.cc"
    break;

  case 1497:
#line 6347 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 17418 "parser.cc"
    break;

  case 1498:
#line 6348 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 17424 "parser.cc"
    break;

  case 1499:
#line 6349 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 17430 "parser.cc"
    break;

  case 1500:
#line 6350 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 17436 "parser.cc"
    break;

  case 1501:
#line 6351 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 17442 "parser.cc"
    break;

  case 1502:
#line 6352 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 17448 "parser.cc"
    break;

  case 1503:
#line 6353 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 17454 "parser.cc"
    break;

  case 1504:
#line 6354 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 17460 "parser.cc"
    break;

  case 1505:
#line 6355 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 17466 "parser.cc"
    break;

  case 1506:
#line 6356 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 17472 "parser.cc"
    break;

  case 1507:
#line 6357 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 17478 "parser.cc"
    break;

  case 1508:
#line 6358 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 17484 "parser.cc"
    break;

  case 1509:
#line 6359 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 17490 "parser.cc"
    break;

  case 1510:
#line 6360 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 17496 "parser.cc"
    break;

  case 1511:
#line 6361 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 17502 "parser.cc"
    break;

  case 1512:
#line 6362 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 17508 "parser.cc"
    break;

  case 1513:
#line 6363 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 17514 "parser.cc"
    break;

  case 1514:
#line 6364 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 17520 "parser.cc"
    break;

  case 1515:
#line 6365 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 17526 "parser.cc"
    break;

  case 1516:
#line 6366 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 17532 "parser.cc"
    break;

  case 1517:
#line 6367 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 17538 "parser.cc"
    break;

  case 1518:
#line 6368 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 17544 "parser.cc"
    break;

  case 1519:
#line 6369 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 17550 "parser.cc"
    break;

  case 1520:
#line 6370 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 17556 "parser.cc"
    break;

  case 1521:
#line 6371 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 17562 "parser.cc"
    break;

  case 1522:
#line 6372 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 17568 "parser.cc"
    break;

  case 1523:
#line 6373 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 17574 "parser.cc"
    break;

  case 1524:
#line 6374 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 17580 "parser.cc"
    break;

  case 1525:
#line 6375 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 17586 "parser.cc"
    break;

  case 1526:
#line 6376 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 17592 "parser.cc"
    break;

  case 1527:
#line 6377 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 17598 "parser.cc"
    break;

  case 1528:
#line 6378 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 17604 "parser.cc"
    break;

  case 1529:
#line 6379 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 17610 "parser.cc"
    break;

  case 1530:
#line 6380 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 17616 "parser.cc"
    break;

  case 1531:
#line 6381 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 17622 "parser.cc"
    break;

  case 1532:
#line 6382 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 17628 "parser.cc"
    break;

  case 1533:
#line 6383 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 17634 "parser.cc"
    break;

  case 1534:
#line 6384 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 17640 "parser.cc"
    break;

  case 1535:
#line 6385 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 17646 "parser.cc"
    break;

  case 1536:
#line 6386 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 17652 "parser.cc"
    break;

  case 1537:
#line 6387 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 17658 "parser.cc"
    break;

  case 1538:
#line 6388 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 17664 "parser.cc"
    break;

  case 1539:
#line 6389 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 17670 "parser.cc"
    break;

  case 1540:
#line 6390 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 17676 "parser.cc"
    break;

  case 1541:
#line 6391 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 17682 "parser.cc"
    break;

  case 1542:
#line 6392 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 17688 "parser.cc"
    break;

  case 1543:
#line 6393 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 17694 "parser.cc"
    break;

  case 1544:
#line 6394 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 17700 "parser.cc"
    break;

  case 1545:
#line 6395 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 17706 "parser.cc"
    break;

  case 1546:
#line 6396 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 17712 "parser.cc"
    break;

  case 1547:
#line 6397 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 17718 "parser.cc"
    break;

  case 1548:
#line 6398 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 17724 "parser.cc"
    break;

  case 1549:
#line 6399 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 17730 "parser.cc"
    break;

  case 1550:
#line 6400 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 17736 "parser.cc"
    break;

  case 1551:
#line 6401 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 17742 "parser.cc"
    break;

  case 1552:
#line 6402 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 17748 "parser.cc"
    break;

  case 1553:
#line 6403 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 17754 "parser.cc"
    break;

  case 1554:
#line 6404 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 17760 "parser.cc"
    break;

  case 1555:
#line 6405 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 17766 "parser.cc"
    break;

  case 1556:
#line 6406 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 17772 "parser.cc"
    break;

  case 1557:
#line 6407 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 17778 "parser.cc"
    break;

  case 1558:
#line 6408 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 17784 "parser.cc"
    break;

  case 1559:
#line 6409 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 17790 "parser.cc"
    break;

  case 1560:
#line 6410 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 17796 "parser.cc"
    break;

  case 1561:
#line 6411 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 17802 "parser.cc"
    break;

  case 1562:
#line 6412 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 17808 "parser.cc"
    break;

  case 1563:
#line 6413 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 17814 "parser.cc"
    break;

  case 1564:
#line 6414 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 17820 "parser.cc"
    break;

  case 1565:
#line 6415 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 17826 "parser.cc"
    break;

  case 1566:
#line 6416 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 17832 "parser.cc"
    break;

  case 1567:
#line 6417 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 17838 "parser.cc"
    break;

  case 1568:
#line 6418 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 17844 "parser.cc"
    break;

  case 1569:
#line 6419 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 17850 "parser.cc"
    break;

  case 1570:
#line 6420 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 17856 "parser.cc"
    break;

  case 1571:
#line 6421 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 17862 "parser.cc"
    break;

  case 1572:
#line 6422 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 17868 "parser.cc"
    break;

  case 1573:
#line 6423 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 17874 "parser.cc"
    break;

  case 1574:
#line 6424 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 17880 "parser.cc"
    break;

  case 1575:
#line 6425 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 17886 "parser.cc"
    break;

  case 1576:
#line 6426 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 17892 "parser.cc"
    break;

  case 1577:
#line 6427 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 17898 "parser.cc"
    break;

  case 1578:
#line 6428 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 17904 "parser.cc"
    break;

  case 1579:
#line 6429 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 17910 "parser.cc"
    break;

  case 1580:
#line 6430 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 17916 "parser.cc"
    break;

  case 1581:
#line 6431 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 17922 "parser.cc"
    break;

  case 1582:
#line 6432 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 17928 "parser.cc"
    break;

  case 1583:
#line 6433 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 17934 "parser.cc"
    break;

  case 1584:
#line 6434 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 17940 "parser.cc"
    break;

  case 1585:
#line 6435 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 17946 "parser.cc"
    break;

  case 1586:
#line 6436 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 17952 "parser.cc"
    break;

  case 1587:
#line 6437 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 17958 "parser.cc"
    break;

  case 1588:
#line 6438 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 17964 "parser.cc"
    break;

  case 1589:
#line 6439 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 17970 "parser.cc"
    break;

  case 1590:
#line 6440 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 17976 "parser.cc"
    break;

  case 1591:
#line 6441 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 17982 "parser.cc"
    break;

  case 1592:
#line 6442 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 17988 "parser.cc"
    break;

  case 1593:
#line 6443 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 17994 "parser.cc"
    break;

  case 1594:
#line 6444 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 18000 "parser.cc"
    break;

  case 1595:
#line 6445 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 18006 "parser.cc"
    break;

  case 1596:
#line 6446 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 18012 "parser.cc"
    break;

  case 1597:
#line 6447 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 18018 "parser.cc"
    break;

  case 1598:
#line 6448 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 18024 "parser.cc"
    break;

  case 1599:
#line 6449 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 18030 "parser.cc"
    break;

  case 1600:
#line 6450 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 18036 "parser.cc"
    break;

  case 1601:
#line 6451 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 18042 "parser.cc"
    break;

  case 1602:
#line 6452 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 18048 "parser.cc"
    break;

  case 1603:
#line 6453 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 18054 "parser.cc"
    break;

  case 1604:
#line 6454 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 18060 "parser.cc"
    break;

  case 1605:
#line 6455 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 18066 "parser.cc"
    break;

  case 1606:
#line 6456 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 18072 "parser.cc"
    break;

  case 1607:
#line 6457 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 18078 "parser.cc"
    break;

  case 1608:
#line 6458 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 18084 "parser.cc"
    break;

  case 1609:
#line 6459 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 18090 "parser.cc"
    break;

  case 1610:
#line 6460 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 18096 "parser.cc"
    break;

  case 1611:
#line 6461 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 18102 "parser.cc"
    break;

  case 1612:
#line 6462 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 18108 "parser.cc"
    break;

  case 1613:
#line 6463 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 18114 "parser.cc"
    break;

  case 1614:
#line 6464 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 18120 "parser.cc"
    break;

  case 1615:
#line 6465 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 18126 "parser.cc"
    break;

  case 1616:
#line 6466 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 18132 "parser.cc"
    break;

  case 1617:
#line 6467 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 18138 "parser.cc"
    break;

  case 1618:
#line 6468 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 18144 "parser.cc"
    break;

  case 1619:
#line 6469 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 18150 "parser.cc"
    break;

  case 1620:
#line 6470 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 18156 "parser.cc"
    break;

  case 1621:
#line 6471 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 18162 "parser.cc"
    break;

  case 1622:
#line 6472 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 18168 "parser.cc"
    break;

  case 1623:
#line 6473 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 18174 "parser.cc"
    break;

  case 1624:
#line 6474 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 18180 "parser.cc"
    break;

  case 1625:
#line 6475 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 18186 "parser.cc"
    break;

  case 1626:
#line 6476 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 18192 "parser.cc"
    break;

  case 1627:
#line 6477 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 18198 "parser.cc"
    break;

  case 1628:
#line 6478 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 18204 "parser.cc"
    break;

  case 1629:
#line 6479 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 18210 "parser.cc"
    break;

  case 1630:
#line 6480 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 18216 "parser.cc"
    break;

  case 1631:
#line 6481 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 18222 "parser.cc"
    break;

  case 1632:
#line 6482 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 18228 "parser.cc"
    break;

  case 1633:
#line 6483 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 18234 "parser.cc"
    break;

  case 1634:
#line 6484 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 18240 "parser.cc"
    break;

  case 1635:
#line 6485 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 18246 "parser.cc"
    break;

  case 1636:
#line 6486 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 18252 "parser.cc"
    break;

  case 1637:
#line 6487 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 18258 "parser.cc"
    break;

  case 1638:
#line 6488 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 18264 "parser.cc"
    break;

  case 1639:
#line 6489 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 18270 "parser.cc"
    break;

  case 1640:
#line 6490 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 18276 "parser.cc"
    break;

  case 1641:
#line 6491 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 18282 "parser.cc"
    break;

  case 1642:
#line 6492 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 18288 "parser.cc"
    break;

  case 1643:
#line 6493 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 18294 "parser.cc"
    break;

  case 1644:
#line 6494 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 18300 "parser.cc"
    break;

  case 1645:
#line 6495 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 18306 "parser.cc"
    break;

  case 1646:
#line 6496 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 18312 "parser.cc"
    break;

  case 1647:
#line 6497 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 18318 "parser.cc"
    break;

  case 1648:
#line 6498 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 18324 "parser.cc"
    break;

  case 1649:
#line 6499 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 18330 "parser.cc"
    break;

  case 1650:
#line 6500 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 18336 "parser.cc"
    break;

  case 1651:
#line 6501 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 18342 "parser.cc"
    break;

  case 1652:
#line 6502 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 18348 "parser.cc"
    break;

  case 1653:
#line 6503 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 18354 "parser.cc"
    break;

  case 1654:
#line 6504 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 18360 "parser.cc"
    break;

  case 1655:
#line 6505 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 18366 "parser.cc"
    break;

  case 1656:
#line 6506 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 18372 "parser.cc"
    break;

  case 1657:
#line 6507 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 18378 "parser.cc"
    break;

  case 1658:
#line 6508 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 18384 "parser.cc"
    break;

  case 1659:
#line 6509 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 18390 "parser.cc"
    break;

  case 1662:
#line 6537 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 18396 "parser.cc"
    break;

  case 1664:
#line 6539 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 18402 "parser.cc"
    break;

  case 1671:
#line 6558 "parser.yy"
          {
          }
#line 18409 "parser.cc"
    break;

  case 1672:
#line 6564 "parser.yy"
       {
       }
#line 18416 "parser.cc"
    break;

  case 1673:
#line 6567 "parser.yy"
       {
         /*
           channel names are case insensitive. This means, even the results
           displayed to the user are converted to lower cases.
           system_charset_info is utf8_general_ci as required by channel name
           restrictions
         */
       }
#line 18429 "parser.cc"
    break;

  case 1678:
#line 6587 "parser.yy"
    {
    }
#line 18436 "parser.cc"
    break;

  case 1679:
#line 6590 "parser.yy"
    {
    }
#line 18443 "parser.cc"
    break;

  case 1680:
#line 6593 "parser.yy"
    {
    }
#line 18450 "parser.cc"
    break;

  case 1681:
#line 6596 "parser.yy"
    {
    }
#line 18457 "parser.cc"
    break;

  case 1682:
#line 6599 "parser.yy"
    {
    }
#line 18464 "parser.cc"
    break;

  case 1683:
#line 6602 "parser.yy"
    {
    }
#line 18471 "parser.cc"
    break;

  case 1684:
#line 6605 "parser.yy"
    {
    }
#line 18478 "parser.cc"
    break;

  case 1685:
#line 6608 "parser.yy"
    {
    }
#line 18485 "parser.cc"
    break;

  case 1686:
#line 6611 "parser.yy"
    {
    }
#line 18492 "parser.cc"
    break;

  case 1687:
#line 6617 "parser.yy"
    {
    }
#line 18499 "parser.cc"
    break;

  case 1688:
#line 6620 "parser.yy"
    {
    }
#line 18506 "parser.cc"
    break;

  case 1693:
#line 6636 "parser.yy"
          {
          }
#line 18513 "parser.cc"
    break;

  case 1694:
#line 6639 "parser.yy"
          {
          }
#line 18520 "parser.cc"
    break;

  case 1695:
#line 6642 "parser.yy"
          {
          }
#line 18527 "parser.cc"
    break;

  case 1696:
#line 6645 "parser.yy"
          {
          }
#line 18534 "parser.cc"
    break;

  case 1697:
#line 6648 "parser.yy"
          {
          }
#line 18541 "parser.cc"
    break;

  case 1698:
#line 6651 "parser.yy"
          {
          }
#line 18548 "parser.cc"
    break;

  case 1699:
#line 6654 "parser.yy"
          {
          }
#line 18555 "parser.cc"
    break;

  case 1700:
#line 6660 "parser.yy"
          {
          }
#line 18562 "parser.cc"
    break;

  case 1701:
#line 6667 "parser.yy"
          {
          }
#line 18569 "parser.cc"
    break;

  case 1702:
#line 6673 "parser.yy"
          {
          }
#line 18576 "parser.cc"
    break;

  case 1704:
#line 6678 "parser.yy"
          {
          }
#line 18583 "parser.cc"
    break;

  case 1705:
#line 6683 "parser.yy"
                      { }
#line 18589 "parser.cc"
    break;

  case 1706:
#line 6685 "parser.yy"
          {
          }
#line 18596 "parser.cc"
    break;

  case 1707:
#line 6688 "parser.yy"
          {
          }
#line 18603 "parser.cc"
    break;

  case 1708:
#line 6691 "parser.yy"
          {
          }
#line 18610 "parser.cc"
    break;

  case 1709:
#line 6697 "parser.yy"
          {
          }
#line 18617 "parser.cc"
    break;

  case 1710:
#line 6700 "parser.yy"
          {
          }
#line 18624 "parser.cc"
    break;

  case 1712:
#line 6707 "parser.yy"
          {
          }
#line 18631 "parser.cc"
    break;

  case 1713:
#line 6712 "parser.yy"
                      { }
#line 18637 "parser.cc"
    break;

  case 1715:
#line 6718 "parser.yy"
          {
          }
#line 18644 "parser.cc"
    break;

  case 1716:
#line 6721 "parser.yy"
          {
          }
#line 18651 "parser.cc"
    break;

  case 1717:
#line 6726 "parser.yy"
                      { }
#line 18657 "parser.cc"
    break;

  case 1718:
#line 6728 "parser.yy"
          {
          }
#line 18664 "parser.cc"
    break;

  case 1719:
#line 6733 "parser.yy"
          {
          }
#line 18671 "parser.cc"
    break;

  case 1720:
#line 6736 "parser.yy"
          {
          }
#line 18678 "parser.cc"
    break;

  case 1721:
#line 6741 "parser.yy"
                                { ThrowNotSupportedException("proc statement"); }
#line 18684 "parser.cc"
    break;

  case 1722:
#line 6742 "parser.yy"
                              { ThrowNotSupportedException("RETURN"); }
#line 18690 "parser.cc"
    break;

  case 1723:
#line 6743 "parser.yy"
                          { ThrowNotSupportedException("IF"); }
#line 18696 "parser.cc"
    break;

  case 1724:
#line 6744 "parser.yy"
                                  { ThrowNotSupportedException("CASE"); }
#line 18702 "parser.cc"
    break;

  case 1725:
#line 6745 "parser.yy"
                          { ThrowNotSupportedException("labeled block"); }
#line 18708 "parser.cc"
    break;

  case 1726:
#line 6746 "parser.yy"
                            { ThrowNotSupportedException("unlabeled block"); }
#line 18714 "parser.cc"
    break;

  case 1727:
#line 6747 "parser.yy"
                            { ThrowNotSupportedException("label"); }
#line 18720 "parser.cc"
    break;

  case 1728:
#line 6748 "parser.yy"
                                { ThrowNotSupportedException("unlabeled statements"); }
#line 18726 "parser.cc"
    break;

  case 1729:
#line 6749 "parser.yy"
                            { ThrowNotSupportedException("LEAVE"); }
#line 18732 "parser.cc"
    break;

  case 1730:
#line 6750 "parser.yy"
                              { ThrowNotSupportedException("ITERATE"); }
#line 18738 "parser.cc"
    break;

  case 1731:
#line 6751 "parser.yy"
                           { ThrowNotSupportedException("OPEN"); }
#line 18744 "parser.cc"
    break;

  case 1732:
#line 6752 "parser.yy"
                             { ThrowNotSupportedException("FETCH"); }
#line 18750 "parser.cc"
    break;

  case 1733:
#line 6753 "parser.yy"
                            { ThrowNotSupportedException("CLOSE"); }
#line 18756 "parser.cc"
    break;

  case 1734:
#line 6758 "parser.yy"
          {
            yylhs.value.as < shared_ptr<BasicRel> > () = CreateTableIdent(false, yystack_[2].value.as < string > (), yystack_[0].value.as < string > (), nullptr, nullptr);
          }
#line 18764 "parser.cc"
    break;

  case 1735:
#line 6762 "parser.yy"
          {
            yylhs.value.as < shared_ptr<BasicRel> > () = CreateTableIdent(false, "", yystack_[0].value.as < string > (), nullptr, nullptr);
          }
#line 18772 "parser.cc"
    break;

  case 1736:
#line 6768 "parser.yy"
                      {}
#line 18778 "parser.cc"
    break;

  case 1737:
#line 6769 "parser.yy"
                                     {}
#line 18784 "parser.cc"
    break;

  case 1738:
#line 6775 "parser.yy"
          { }
#line 18790 "parser.cc"
    break;

  case 1739:
#line 6777 "parser.yy"
          { /* Just parse it, we only have one language for now. */ }
#line 18796 "parser.cc"
    break;

  case 1740:
#line 6779 "parser.yy"
          { }
#line 18802 "parser.cc"
    break;

  case 1741:
#line 6781 "parser.yy"
          { }
#line 18808 "parser.cc"
    break;

  case 1742:
#line 6783 "parser.yy"
          { }
#line 18814 "parser.cc"
    break;

  case 1743:
#line 6785 "parser.yy"
          { }
#line 18820 "parser.cc"
    break;

  case 1744:
#line 6787 "parser.yy"
          {}
#line 18826 "parser.cc"
    break;

  case 1745:
#line 6792 "parser.yy"
                                { }
#line 18832 "parser.cc"
    break;

  case 1746:
#line 6793 "parser.yy"
                                { }
#line 18838 "parser.cc"
    break;

  case 1747:
#line 6794 "parser.yy"
                                { }
#line 18844 "parser.cc"
    break;

  case 1748:
#line 6799 "parser.yy"
          {
          }
#line 18851 "parser.cc"
    break;

  case 1749:
#line 6802 "parser.yy"
          {
          }
#line 18858 "parser.cc"
    break;

  case 1754:
#line 6819 "parser.yy"
          {
          }
#line 18865 "parser.cc"
    break;

  case 1759:
#line 6836 "parser.yy"
          {
          }
#line 18872 "parser.cc"
    break;

  case 1760:
#line 6841 "parser.yy"
                      { }
#line 18878 "parser.cc"
    break;

  case 1761:
#line 6842 "parser.yy"
                      { }
#line 18884 "parser.cc"
    break;

  case 1762:
#line 6843 "parser.yy"
                      { }
#line 18890 "parser.cc"
    break;

  case 1763:
#line 6844 "parser.yy"
                      { }
#line 18896 "parser.cc"
    break;

  case 1766:
#line 6851 "parser.yy"
                      { yylhs.value.as < string > ()= ""; }
#line 18902 "parser.cc"
    break;

  case 1767:
#line 6852 "parser.yy"
                      { ThrowNotSupportedException( "desc column" ); }
#line 18908 "parser.cc"
    break;

  case 1768:
#line 6853 "parser.yy"
                { ThrowNotSupportedException( "desc column" ); }
#line 18914 "parser.cc"
    break;

  case 1769:
#line 6861 "parser.yy"
          {
            yylhs.value.as < ShowStructurePtr > () = CreateShowColumnsStructure(Show_cmd_type::STANDARD, yystack_[1].value.as < shared_ptr<BasicRel> > (), "", yystack_[0].value.as < string > (), nullptr);
          }
#line 18922 "parser.cc"
    break;

  case 1770:
#line 6867 "parser.yy"
                    { yylhs.value.as < ShowStructurePtr > () = yystack_[0].value.as < ShowStructurePtr > (); }
#line 18928 "parser.cc"
    break;

  case 1771:
#line 6871 "parser.yy"
                                         {
        yylhs.value.as < ShowStructurePtr > () = CreateShowDatabasesStructure(yystack_[0].value.as < WildOrWhere_ptr > ()->wild, yystack_[0].value.as < WildOrWhere_ptr > ()->where);
    }
#line 18936 "parser.cc"
    break;

  case 1772:
#line 6874 "parser.yy"
                                                                 {
        yylhs.value.as < ShowStructurePtr > () = CreateShowTablesStructure(yystack_[3].value.as < Show_cmd_type > (), yystack_[1].value.as < string > (), yystack_[0].value.as < WildOrWhere_ptr > ()->wild, yystack_[0].value.as < WildOrWhere_ptr > ()->where);
    }
#line 18944 "parser.cc"
    break;

  case 1773:
#line 6877 "parser.yy"
                                                              {
        yylhs.value.as < ShowStructurePtr > () = CreateShowTriggersStructure(yystack_[3].value.as < bool > (), yystack_[1].value.as < string > (), yystack_[0].value.as < WildOrWhere_ptr > ()->wild, yystack_[0].value.as < WildOrWhere_ptr > ()->where, yystack_[0].value.as < WildOrWhere_ptr > ()->str);
    }
#line 18952 "parser.cc"
    break;

  case 1774:
#line 6880 "parser.yy"
                                                   {
        yylhs.value.as < ShowStructurePtr > () = CreateShowEventsStructure(yystack_[1].value.as < string > (), yystack_[0].value.as < WildOrWhere_ptr > ()->wild, yystack_[0].value.as < WildOrWhere_ptr > ()->where);
    }
#line 18960 "parser.cc"
    break;

  case 1775:
#line 6883 "parser.yy"
                                                             {
        yylhs.value.as < ShowStructurePtr > () = CreateShowTableStatusStructure(yystack_[1].value.as < string > (), yystack_[0].value.as < WildOrWhere_ptr > ()->wild, yystack_[0].value.as < WildOrWhere_ptr > ()->where);
    }
#line 18968 "parser.cc"
    break;

  case 1776:
#line 6886 "parser.yy"
                                               {
        yylhs.value.as < ShowStructurePtr > () = CreateShowOpenTablesStructure(yystack_[1].value.as < string > (), yystack_[0].value.as < WildOrWhere_ptr > ()->wild, yystack_[0].value.as < WildOrWhere_ptr > ()->where);
    }
#line 18976 "parser.cc"
    break;

  case 1777:
#line 6889 "parser.yy"
                  {
        auto showGlobalInfoStructurePointer = std::make_shared<ShowGlobalInfoStructure>();
        showGlobalInfoStructurePointer->showCmd = SHOW_CMD::SHOW_PLUGINS;
        yylhs.value.as < ShowStructurePtr > () = showGlobalInfoStructurePointer;
    }
#line 18986 "parser.cc"
    break;

  case 1778:
#line 6894 "parser.yy"
                                                 {
        yylhs.value.as < ShowStructurePtr > () = CreateShowEngineStructure(yystack_[1].value.as < string > (), yystack_[0].value.as < SHOW_CMD > ());
    }
#line 18994 "parser.cc"
    break;

  case 1779:
#line 6897 "parser.yy"
                                       {
        ThrowNotSupportedException("show engine all");
    }
#line 19002 "parser.cc"
    break;

  case 1780:
#line 6905 "parser.yy"
                                 {
        yylhs.value.as < ShowStructurePtr > () = CreateShowColumnsStructure(yystack_[5].value.as < Show_cmd_type > (), yystack_[2].value.as < shared_ptr<BasicRel> > (), yystack_[1].value.as < string > (), yystack_[0].value.as < WildOrWhere_ptr > ()->wild, yystack_[0].value.as < WildOrWhere_ptr > ()->where);
    }
#line 19010 "parser.cc"
    break;

  case 1781:
#line 6908 "parser.yy"
                                {
        ThrowNotSupportedException("show binary logs");
    }
#line 19018 "parser.cc"
    break;

  case 1782:
#line 6911 "parser.yy"
                      {
        auto showStructurePointer = std::make_shared<ShowStructure>();
        showStructurePointer->showCmd = SHOW_CMD::SHOW_SLAVE_HOSTS;
        yylhs.value.as < ShowStructurePtr > () = showStructurePointer;
    }
#line 19028 "parser.cc"
    break;

  case 1783:
#line 6916 "parser.yy"
                                                                   {
        ThrowNotSupportedException("show binlog events");
    }
#line 19036 "parser.cc"
    break;

  case 1784:
#line 6919 "parser.yy"
                                                                                 {
        ThrowNotSupportedException("show relaylog events");
    }
#line 19044 "parser.cc"
    break;

  case 1785:
#line 6927 "parser.yy"
                                     {
        yylhs.value.as < ShowStructurePtr > () = CreateShowIndexStructure(yystack_[5].value.as < bool > (), yystack_[1].value.as < string > (), yystack_[2].value.as < shared_ptr<BasicRel> > (), yystack_[0].value.as < Expression > ());
    }
#line 19052 "parser.cc"
    break;

  case 1786:
#line 6930 "parser.yy"
                              {
        auto showGlobalInfoStructurePointer = std::make_shared<ShowGlobalInfoStructure>();
        showGlobalInfoStructurePointer->showCmd = SHOW_CMD::SHOW_ENGINES;
        yylhs.value.as < ShowStructurePtr > () = showGlobalInfoStructurePointer;
    }
#line 19062 "parser.cc"
    break;

  case 1787:
#line 6952 "parser.yy"
                                     {
      ThrowNotSupportedException("show count(*) warnings");
        // TODO
        // create_select_for_variable(&pc, "warning_count")
    }
#line 19072 "parser.cc"
    break;

  case 1788:
#line 6957 "parser.yy"
                                   {
      ThrowNotSupportedException("show count(*) errors");
        // TODO
        // create_select_for_variable(&pc, "error_count")
    }
#line 19082 "parser.cc"
    break;

  case 1789:
#line 6962 "parser.yy"
                                {
        yylhs.value.as < ShowStructurePtr > () = CreateShowWarningsStructure(yystack_[0].value.as < LimitStructurePointer > ());
    }
#line 19090 "parser.cc"
    break;

  case 1790:
#line 6965 "parser.yy"
                              {
        yylhs.value.as < ShowStructurePtr > () = CreateShowErrorsStructure(yystack_[0].value.as < LimitStructurePointer > ());
    }
#line 19098 "parser.cc"
    break;

  case 1791:
#line 6968 "parser.yy"
                   {
        ThrowNotSupportedException("show profiles");
    }
#line 19106 "parser.cc"
    break;

  case 1792:
#line 6971 "parser.yy"
                                                                     {
        ThrowNotSupportedException("show profile");
    }
#line 19114 "parser.cc"
    break;

  case 1793:
#line 6974 "parser.yy"
                                                         {
        auto statusVariableStructure = std::make_shared<ShowStatusVariableStructure>();
        statusVariableStructure->showCmd = SHOW_CMD::SHOW_STATUS;
        if (OPT_GLOBAL == yystack_[2].value.as < enum_var_type > ()) {
            statusVariableStructure->global = true;
        } else {
            statusVariableStructure->global = false;
        }
        statusVariableStructure->wild = yystack_[0].value.as < WildOrWhere_ptr > ()->wild;
        statusVariableStructure->where = yystack_[0].value.as < WildOrWhere_ptr > ()->where;
        yylhs.value.as < ShowStructurePtr > () = statusVariableStructure;
    }
#line 19131 "parser.cc"
    break;

  case 1794:
#line 6986 "parser.yy"
                               {
        yylhs.value.as < ShowStructurePtr > () = CreateShowProcessListStructure(yystack_[1].value.as < bool > ());
    }
#line 19139 "parser.cc"
    break;

  case 1795:
#line 6989 "parser.yy"
                                                        {
        yylhs.value.as < ShowStructurePtr > () = CreateShowVariableStructure(yystack_[2].value.as < enum_var_type > (), yystack_[0].value.as < WildOrWhere_ptr > ()->wild, yystack_[0].value.as < WildOrWhere_ptr > ()->where, yystack_[0].value.as < WildOrWhere_ptr > ()->str);
    }
#line 19147 "parser.cc"
    break;

  case 1796:
#line 6992 "parser.yy"
                                               {
        yylhs.value.as < ShowStructurePtr > () = CreateShowCharsetStructure(yystack_[0].value.as < WildOrWhere_ptr > ()->wild, yystack_[0].value.as < WildOrWhere_ptr > ()->where, yystack_[0].value.as < WildOrWhere_ptr > ()->str);
    }
#line 19155 "parser.cc"
    break;

  case 1797:
#line 6995 "parser.yy"
                                               {
        yylhs.value.as < ShowStructurePtr > () = CreateShowCollationStructure(yystack_[0].value.as < WildOrWhere_ptr > ()->wild, yystack_[0].value.as < WildOrWhere_ptr > ()->where, yystack_[0].value.as < WildOrWhere_ptr > ()->str);
    }
#line 19163 "parser.cc"
    break;

  case 1798:
#line 6998 "parser.yy"
                 {
        auto showStructurePointer = std::make_shared<ShowStructure>();
        showStructurePointer->showCmd = SHOW_CMD::SHOW_PRIVILEGES;
        yylhs.value.as < ShowStructurePtr > () = showStructurePointer;
    }
#line 19173 "parser.cc"
    break;

  case 1799:
#line 7003 "parser.yy"
             {
        ThrowNotSupportedException("show grants");
    }
#line 19181 "parser.cc"
    break;

  case 1800:
#line 7006 "parser.yy"
                          {
        ThrowNotSupportedException("show grants for user");
    }
#line 19189 "parser.cc"
    break;

  case 1801:
#line 7009 "parser.yy"
                                          {
        ThrowNotSupportedException("show grants for user");
    }
#line 19197 "parser.cc"
    break;

  case 1802:
#line 7012 "parser.yy"
                                              {
        yylhs.value.as < ShowStructurePtr > () = CreateShowCreateDbStructure(yystack_[0].value.as < string > ());
    }
#line 19205 "parser.cc"
    break;

  case 1803:
#line 7015 "parser.yy"
                                            {
        yylhs.value.as < ShowStructurePtr > () = CreateShowCreateDbStructure(yystack_[0].value.as < string > ());
    }
#line 19213 "parser.cc"
    break;

  case 1804:
#line 7018 "parser.yy"
                                   {
        yylhs.value.as < ShowStructurePtr > () = CreateShowCreateTableStructure(yystack_[0].value.as < shared_ptr<BasicRel> > ()->GetDb(), yystack_[0].value.as < shared_ptr<BasicRel> > ()->GetID());
    }
#line 19221 "parser.cc"
    break;

  case 1805:
#line 7021 "parser.yy"
                                  {
        ThrowNotSupportedException("show create view");
    }
#line 19229 "parser.cc"
    break;

  case 1806:
#line 7024 "parser.yy"
                            {
        auto showStructurePointer = std::make_shared<ShowStructure>();
        showStructurePointer->showCmd = SHOW_CMD::SHOW_MASTER_STATUS;
        yylhs.value.as < ShowStructurePtr > () = showStructurePointer;
    }
#line 19239 "parser.cc"
    break;

  case 1807:
#line 7029 "parser.yy"
                                   {
        ThrowNotSupportedException("show slave status");
    }
#line 19247 "parser.cc"
    break;

  case 1808:
#line 7032 "parser.yy"
                                   {
        ThrowNotSupportedException("show create procedure");
    }
#line 19255 "parser.cc"
    break;

  case 1809:
#line 7035 "parser.yy"
                                  {
        ThrowNotSupportedException("show create function");
    }
#line 19263 "parser.cc"
    break;

  case 1810:
#line 7038 "parser.yy"
                                 {
        ThrowNotSupportedException("show create trigger");
    }
#line 19271 "parser.cc"
    break;

  case 1811:
#line 7041 "parser.yy"
                                                          {
        yylhs.value.as < ShowStructurePtr > () = CreateShowProcedureStatusStructure(yystack_[0].value.as < WildOrWhere_ptr > ()->wild, yystack_[0].value.as < WildOrWhere_ptr > ()->where);
        // ThrowNotSupportedException("show procedure status");
    }
#line 19280 "parser.cc"
    break;

  case 1812:
#line 7045 "parser.yy"
                                                         {
        yylhs.value.as < ShowStructurePtr > () = CreateShowFunctionStatusStructure(yystack_[0].value.as < WildOrWhere_ptr > ()->wild, yystack_[0].value.as < WildOrWhere_ptr > ()->where);
        // ThrowNotSupportedException("show function status");
    }
#line 19289 "parser.cc"
    break;

  case 1813:
#line 7049 "parser.yy"
                                     {
        // $$ = CreateShowProcedureCodeStructure($3);
        ThrowNotSupportedException("show procedure code");
    }
#line 19298 "parser.cc"
    break;

  case 1814:
#line 7053 "parser.yy"
                                    {
        // $$ = CreateShowFunctionCodeStructure($3);
        ThrowNotSupportedException("show function code");
    }
#line 19307 "parser.cc"
    break;

  case 1815:
#line 7057 "parser.yy"
                               {
        ThrowNotSupportedException("show create event");
    }
#line 19315 "parser.cc"
    break;

  case 1816:
#line 7060 "parser.yy"
                       {
        ThrowNotSupportedException("show create user");
    }
#line 19323 "parser.cc"
    break;

  case 1817:
#line 7067 "parser.yy"
          { yylhs.value.as < SHOW_CMD > () = SHOW_CMD::SHOW_ENGINE_STATUS; }
#line 19329 "parser.cc"
    break;

  case 1818:
#line 7069 "parser.yy"
          { yylhs.value.as < SHOW_CMD > () = SHOW_CMD::SHOW_ENGINE_MUTEX; }
#line 19335 "parser.cc"
    break;

  case 1819:
#line 7071 "parser.yy"
          { yylhs.value.as < SHOW_CMD > () = SHOW_CMD::SHOW_ENGINE_LOGS; }
#line 19341 "parser.cc"
    break;

  case 1822:
#line 7080 "parser.yy"
                                { yylhs.value.as < WildOrWhere_ptr > ()= std::make_shared<WildOrWhere>( "", nullptr, ""); }
#line 19347 "parser.cc"
    break;

  case 1823:
#line 7082 "parser.yy"
          {
            yylhs.value.as < WildOrWhere_ptr > ()= std::make_shared<WildOrWhere>( yystack_[0].value.as < string > (), nullptr, driver.get_string_at_location(yystack_[0].location));
          }
#line 19355 "parser.cc"
    break;

  case 1824:
#line 7085 "parser.yy"
                                { yylhs.value.as < WildOrWhere_ptr > ()= std::make_shared<WildOrWhere>( "", yystack_[0].value.as < Expression > (), driver.get_string_at_location(yystack_[0].location)); }
#line 19361 "parser.cc"
    break;

  case 1825:
#line 7089 "parser.yy"
                                        { yylhs.value.as < WildOrWhere_ptr > ()= std::make_shared<WildOrWhere>( "", nullptr, "" ); }
#line 19367 "parser.cc"
    break;

  case 1826:
#line 7090 "parser.yy"
                                        { yylhs.value.as < WildOrWhere_ptr > ()= std::make_shared<WildOrWhere>( yystack_[0].value.as < string > (), nullptr, driver.get_string_at_location(yystack_[0].location)); }
#line 19373 "parser.cc"
    break;

  case 1827:
#line 7091 "parser.yy"
                                        { yylhs.value.as < WildOrWhere_ptr > ()= std::make_shared<WildOrWhere>( "", yystack_[0].value.as < Expression > (), driver.get_string_at_location(yystack_[0].location)); }
#line 19379 "parser.cc"
    break;

  case 1830:
#line 7100 "parser.yy"
                       { yylhs.value.as < string > ()= ""; }
#line 19385 "parser.cc"
    break;

  case 1831:
#line 7101 "parser.yy"
                           { yylhs.value.as < string > ()= yystack_[0].value.as < string > (); }
#line 19391 "parser.cc"
    break;

  case 1832:
#line 7105 "parser.yy"
                      { yylhs.value.as < bool > ()= 0; }
#line 19397 "parser.cc"
    break;

  case 1833:
#line 7106 "parser.yy"
                      { yylhs.value.as < bool > ()= 1; }
#line 19403 "parser.cc"
    break;

  case 1834:
#line 7110 "parser.yy"
                        { yylhs.value.as < bool > ()= 0; }
#line 19409 "parser.cc"
    break;

  case 1835:
#line 7111 "parser.yy"
                        { yylhs.value.as < bool > ()= 1; }
#line 19415 "parser.cc"
    break;

  case 1836:
#line 7115 "parser.yy"
                               { yylhs.value.as < Show_cmd_type > ()= Show_cmd_type::STANDARD; }
#line 19421 "parser.cc"
    break;

  case 1837:
#line 7116 "parser.yy"
                               { yylhs.value.as < Show_cmd_type > ()= Show_cmd_type::FULL_SHOW; }
#line 19427 "parser.cc"
    break;

  case 1838:
#line 7117 "parser.yy"
                               { yylhs.value.as < Show_cmd_type > ()= Show_cmd_type::EXTENDED_SHOW; }
#line 19433 "parser.cc"
    break;

  case 1839:
#line 7118 "parser.yy"
                               { yylhs.value.as < Show_cmd_type > ()= Show_cmd_type::EXTENDED_FULL_SHOW; }
#line 19439 "parser.cc"
    break;

  case 1842:
#line 7127 "parser.yy"
                                 { }
#line 19445 "parser.cc"
    break;

  case 1843:
#line 7128 "parser.yy"
                                 { }
#line 19451 "parser.cc"
    break;

  case 1844:
#line 7132 "parser.yy"
                             { }
#line 19457 "parser.cc"
    break;

  case 1845:
#line 7133 "parser.yy"
                             { }
#line 19463 "parser.cc"
    break;

  case 1846:
#line 7137 "parser.yy"
                        { int error; yylhs.value.as < ulong > ()= (ulong) my_strtoll10(yystack_[0].value.as < string > ().data(), nullptr, &error); }
#line 19469 "parser.cc"
    break;

  case 1847:
#line 7139 "parser.yy"
                        { int error; yylhs.value.as < ulong > ()= (ulong) my_strtoll10(yystack_[0].value.as < string > ().data(), nullptr, &error); }
#line 19475 "parser.cc"
    break;

  case 1848:
#line 7140 "parser.yy"
                        { int error; yylhs.value.as < ulong > ()= (ulong) my_strtoll10(yystack_[0].value.as < string > ().data(), nullptr, &error); }
#line 19481 "parser.cc"
    break;

  case 1849:
#line 7141 "parser.yy"
                        { int error; yylhs.value.as < ulong > ()= (ulong) my_strtoll10(yystack_[0].value.as < string > ().data(), nullptr, &error); }
#line 19487 "parser.cc"
    break;

  case 1850:
#line 7142 "parser.yy"
                        { int error; yylhs.value.as < ulong > ()= (ulong) my_strtoll10(yystack_[0].value.as < string > ().data(), nullptr, &error); }
#line 19493 "parser.cc"
    break;

  case 1851:
#line 7146 "parser.yy"
                        { int error; yylhs.value.as < ulonglong > ()= (ulong) my_strtoll10(yystack_[0].value.as < string > ().data(), nullptr, &error); }
#line 19499 "parser.cc"
    break;

  case 1852:
#line 7148 "parser.yy"
                        { int error; yylhs.value.as < ulonglong > ()= (ulong) my_strtoll10(yystack_[0].value.as < string > ().data(), nullptr, &error); }
#line 19505 "parser.cc"
    break;

  case 1853:
#line 7149 "parser.yy"
                        { int error; yylhs.value.as < ulonglong > ()= (ulong) my_strtoll10(yystack_[0].value.as < string > ().data(), nullptr, &error); }
#line 19511 "parser.cc"
    break;

  case 1854:
#line 7150 "parser.yy"
                        { ThrowNotSupportedException("decimal number"); }
#line 19517 "parser.cc"
    break;

  case 1855:
#line 7154 "parser.yy"
                        { int error; yylhs.value.as < ulonglong > ()= (ulonglong) my_strtoll10(yystack_[0].value.as < string > ().data(), nullptr, &error); }
#line 19523 "parser.cc"
    break;

  case 1856:
#line 7155 "parser.yy"
                        { int error; yylhs.value.as < ulonglong > ()= (ulonglong) my_strtoll10(yystack_[0].value.as < string > ().data(), nullptr, &error); }
#line 19529 "parser.cc"
    break;

  case 1857:
#line 7156 "parser.yy"
                        { int error; yylhs.value.as < ulonglong > ()= (ulonglong) my_strtoll10(yystack_[0].value.as < string > ().data(), nullptr, &error); }
#line 19535 "parser.cc"
    break;

  case 1858:
#line 7157 "parser.yy"
                        { int error; yylhs.value.as < ulonglong > ()= (ulonglong) my_strtoll10(yystack_[0].value.as < string > ().data(), nullptr, &error); }
#line 19541 "parser.cc"
    break;

  case 1859:
#line 7158 "parser.yy"
                        { int error; yylhs.value.as < ulonglong > ()= (ulonglong) my_strtoll10(yystack_[0].value.as < string > ().data(), nullptr, &error); }
#line 19547 "parser.cc"
    break;

  case 1860:
#line 7162 "parser.yy"
                        { int error; yylhs.value.as < ulonglong > ()= (ulonglong) my_strtoll10(yystack_[0].value.as < string > ().data(), nullptr, &error); }
#line 19553 "parser.cc"
    break;

  case 1861:
#line 7164 "parser.yy"
                        { int error; yylhs.value.as < ulonglong > ()= (ulonglong) my_strtoll10(yystack_[0].value.as < string > ().data(), nullptr, &error); }
#line 19559 "parser.cc"
    break;

  case 1862:
#line 7165 "parser.yy"
                        { int error; yylhs.value.as < ulonglong > ()= (ulonglong) my_strtoll10(yystack_[0].value.as < string > ().data(), nullptr, &error); }
#line 19565 "parser.cc"
    break;

  case 1863:
#line 7166 "parser.yy"
                        { ThrowNotSupportedException("decimal number"); }
#line 19571 "parser.cc"
    break;

  case 1864:
#line 7170 "parser.yy"
          { }
#line 19577 "parser.cc"
    break;

  case 1867:
#line 7178 "parser.yy"
                        { }
#line 19583 "parser.cc"
    break;

  case 1868:
#line 7179 "parser.yy"
                        { }
#line 19589 "parser.cc"
    break;

  case 1869:
#line 7185 "parser.yy"
          { }
#line 19595 "parser.cc"
    break;

  case 1870:
#line 7187 "parser.yy"
          { }
#line 19601 "parser.cc"
    break;

  case 1871:
#line 7192 "parser.yy"
          {
          }
#line 19608 "parser.cc"
    break;

  case 1872:
#line 7197 "parser.yy"
          { /* mysql errno */
          }
#line 19615 "parser.cc"
    break;

  case 1874:
#line 7204 "parser.yy"
          { /* SQLSTATE */

            /*
              An error is triggered:
                - if the specified string is not a valid SQLSTATE,
                - or if it represents the completion condition -- it is not
                  allowed to SIGNAL, or declare a handler for the completion
                  condition.
            */
          }
#line 19630 "parser.cc"
    break;

  case 1875:
#line 7217 "parser.yy"
          {
          }
#line 19637 "parser.cc"
    break;

  case 1876:
#line 7220 "parser.yy"
          {
          }
#line 19644 "parser.cc"
    break;

  case 1877:
#line 7223 "parser.yy"
          {
          }
#line 19651 "parser.cc"
    break;

  case 1878:
#line 7226 "parser.yy"
          {
          }
#line 19658 "parser.cc"
    break;

  case 1879:
#line 7229 "parser.yy"
          {
          }
#line 19665 "parser.cc"
    break;

  case 1880:
#line 7234 "parser.yy"
                       {}
#line 19671 "parser.cc"
    break;

  case 1881:
#line 7235 "parser.yy"
                       {}
#line 19677 "parser.cc"
    break;

  case 1882:
#line 7239 "parser.yy"
                       { }
#line 19683 "parser.cc"
    break;

  case 1883:
#line 7241 "parser.yy"
          {
          }
#line 19690 "parser.cc"
    break;

  case 1884:
#line 7245 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 19696 "parser.cc"
    break;

  case 1885:
#line 7246 "parser.yy"
          { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 19702 "parser.cc"
    break;

  case 1886:
#line 7258 "parser.yy"
          {
            yylhs.value.as < shared_ptr<vector<SetStructurePtr>> > () = yystack_[0].value.as < shared_ptr<vector<SetStructurePtr>> > ();
          }
#line 19710 "parser.cc"
    break;

  case 1887:
#line 7266 "parser.yy"
          {
            yylhs.value.as < shared_ptr<vector<SetStructurePtr>> > () = AppendOptionSetStructures(yystack_[1].value.as < SetStructurePtr > (), yystack_[0].value.as < shared_ptr<vector<SetStructurePtr>> > ());
          }
#line 19718 "parser.cc"
    break;

  case 1888:
#line 7269 "parser.yy"
                                                      {
            auto setStructures = std::make_shared<std::vector<SetStructurePtr>>();
            auto setStructurePtr = std::make_shared<SetStructure>();
            setStructurePtr->m_setCmd = SET_CMD::SET_TX;
            setStructures->emplace_back(setStructurePtr);
            yylhs.value.as < shared_ptr<vector<SetStructurePtr>> > () = setStructures;
        }
#line 19730 "parser.cc"
    break;

  case 1889:
#line 7277 "parser.yy"
          {
            ReviseSetStructuresHead(yystack_[1].value.as < enum_var_type > (), yystack_[0].value.as < shared_ptr<vector<SetStructurePtr>> > ());
            yylhs.value.as < shared_ptr<vector<SetStructurePtr>> > () = yystack_[0].value.as < shared_ptr<vector<SetStructurePtr>> > ();
          }
#line 19739 "parser.cc"
    break;

  case 1890:
#line 7282 "parser.yy"
          {
            auto setStructures = std::make_shared<std::vector<SetStructurePtr>>();
            std::string user( "" );
            auto setStructurePtr = CreateSetPasswordStructure( user, yystack_[0].value.as < string > () );
            setStructures->emplace_back(setStructurePtr);
            yylhs.value.as < shared_ptr<vector<SetStructurePtr>> > () = setStructures;
          }
#line 19751 "parser.cc"
    break;

  case 1891:
#line 7290 "parser.yy"
          {
            ThrowNotSupportedException( "SET PASSWORD = PASSWORD('<plaintext_password>'" );
          }
#line 19759 "parser.cc"
    break;

  case 1892:
#line 7294 "parser.yy"
          {
            auto setStructures = std::make_shared<std::vector<SetStructurePtr>>();
            auto setStructurePtr = CreateSetPasswordStructure( yystack_[2].value.as < AccountSPtr > ()->m_user, yystack_[0].value.as < string > () );
            setStructures->emplace_back(setStructurePtr);
            yylhs.value.as < shared_ptr<vector<SetStructurePtr>> > () = setStructures;
          }
#line 19770 "parser.cc"
    break;

  case 1893:
#line 7301 "parser.yy"
          {
            ThrowNotSupportedException( "SET PASSWORD FOR <user> = "
                                        "PASSWORD('<plaintext_password>'" );
          }
#line 19779 "parser.cc"
    break;

  case 1894:
#line 7309 "parser.yy"
  {
    yylhs.value.as < string > ()=yystack_[0].value.as < string > ();
  }
#line 19787 "parser.cc"
    break;

  case 1895:
#line 7315 "parser.yy"
          {
          }
#line 19794 "parser.cc"
    break;

  case 1896:
#line 7318 "parser.yy"
          {
          }
#line 19801 "parser.cc"
    break;

  case 1897:
#line 7324 "parser.yy"
          {
            ThrowNotSupportedException("transaction_access_mode");
          }
#line 19809 "parser.cc"
    break;

  case 1898:
#line 7330 "parser.yy"
                                      {  }
#line 19815 "parser.cc"
    break;

  case 1899:
#line 7331 "parser.yy"
                                      { }
#line 19821 "parser.cc"
    break;

  case 1900:
#line 7336 "parser.yy"
          {
          }
#line 19828 "parser.cc"
    break;

  case 1901:
#line 7341 "parser.yy"
                              { }
#line 19834 "parser.cc"
    break;

  case 1902:
#line 7342 "parser.yy"
                              { }
#line 19840 "parser.cc"
    break;

  case 1903:
#line 7346 "parser.yy"
                            { }
#line 19846 "parser.cc"
    break;

  case 1904:
#line 7347 "parser.yy"
                             { }
#line 19852 "parser.cc"
    break;

  case 1905:
#line 7351 "parser.yy"
                                   { ThrowNotSupportedException("READ UNCOMMITTED"); }
#line 19858 "parser.cc"
    break;

  case 1906:
#line 7352 "parser.yy"
                                   { ThrowNotSupportedException("READ COMMITTED"); }
#line 19864 "parser.cc"
    break;

  case 1907:
#line 7353 "parser.yy"
                                   { }
#line 19870 "parser.cc"
    break;

  case 1908:
#line 7354 "parser.yy"
                                   { ThrowNotSupportedException("SERIALIZABLE"); }
#line 19876 "parser.cc"
    break;

  case 1913:
#line 7366 "parser.yy"
                           {
            yylhs.value.as < SelectStructurePointer > () = yystack_[0].value.as < SelectStructurePointer > ();
          }
#line 19884 "parser.cc"
    break;

  case 1914:
#line 7369 "parser.yy"
                                  {
          yylhs.value.as < SelectStructurePointer > () = yystack_[0].value.as < SelectStructurePointer > ();
        }
#line 19892 "parser.cc"
    break;

  case 1915:
#line 7387 "parser.yy"
          {
            yylhs.value.as < InsertStructurePtr > () = CreateInsertStructure( yystack_[3].value.as < shared_ptr<BasicRel> > (),
                                        yystack_[1].value.as < vector<Expression> > (),
                                        std::move( driver.global_insert_values_list ),
                                        yystack_[0].value.as < pair< vector< BiaodashiPointer >, vector< BiaodashiPointer > >  > ().first,
                                        yystack_[0].value.as < pair< vector< BiaodashiPointer >, vector< BiaodashiPointer > >  > ().second );
            driver.global_insert_values_list.clear();
          }
#line 19905 "parser.cc"
    break;

  case 1916:
#line 7404 "parser.yy"
          {
            yylhs.value.as < InsertStructurePtr > () = CreateInsertStructure( yystack_[4].value.as < shared_ptr<BasicRel> > (),
                                        yystack_[1].value.as < pair< vector< BiaodashiPointer >, vector< BiaodashiPointer > >  > ().first,
                                        yystack_[1].value.as < pair< vector< BiaodashiPointer >, vector< BiaodashiPointer > >  > ().second,
                                        yystack_[0].value.as < pair< vector< BiaodashiPointer >, vector< BiaodashiPointer > >  > ().first,
                                        yystack_[0].value.as < pair< vector< BiaodashiPointer >, vector< BiaodashiPointer > >  > ().second );
          }
#line 19917 "parser.cc"
    break;

  case 1917:
#line 7419 "parser.yy"
          {
            yylhs.value.as < InsertStructurePtr > () = CreateInsertStructure( yystack_[3].value.as < shared_ptr<BasicRel> > (),
                                        yystack_[1].value.as < pair< EXPR_LIST, SelectStructurePointer > > ().first,
                                        yystack_[1].value.as < pair< EXPR_LIST, SelectStructurePointer > > ().second,
                                        yystack_[0].value.as < pair< vector< BiaodashiPointer >, vector< BiaodashiPointer > >  > ().first,
                                        yystack_[0].value.as < pair< vector< BiaodashiPointer >, vector< BiaodashiPointer > >  > ().second );
          }
#line 19929 "parser.cc"
    break;

  case 1918:
#line 7428 "parser.yy"
                        { }
#line 19935 "parser.cc"
    break;

  case 1919:
#line 7429 "parser.yy"
                        { ThrowNotSupportedException("LOW_PRIORITY"); }
#line 19941 "parser.cc"
    break;

  case 1920:
#line 7430 "parser.yy"
                        { ThrowNotSupportedException("DELAYED"); }
#line 19947 "parser.cc"
    break;

  case 1921:
#line 7431 "parser.yy"
                        { ThrowNotSupportedException("HIGH_PRIORITY"); }
#line 19953 "parser.cc"
    break;

  case 1922:
#line 7434 "parser.yy"
                      { yylhs.value.as < bool > ()= false; }
#line 19959 "parser.cc"
    break;

  case 1923:
#line 7435 "parser.yy"
                      { yylhs.value.as < bool > ()= true; }
#line 19965 "parser.cc"
    break;

  case 1926:
#line 7443 "parser.yy"
          {
            yylhs.value.as < pair< EXPR_LIST, SelectStructurePointer > > ().second = yystack_[0].value.as < SelectStructurePointer > ();
          }
#line 19973 "parser.cc"
    break;

  case 1927:
#line 7447 "parser.yy"
          {
            yylhs.value.as < pair< EXPR_LIST, SelectStructurePointer > > ().second = yystack_[0].value.as < SelectStructurePointer > ();
          }
#line 19981 "parser.cc"
    break;

  case 1928:
#line 7451 "parser.yy"
          {
            yylhs.value.as < pair< EXPR_LIST, SelectStructurePointer > > ().first = yystack_[2].value.as < vector<Expression> > ();
            yylhs.value.as < pair< EXPR_LIST, SelectStructurePointer > > ().second = yystack_[0].value.as < SelectStructurePointer > ();
          }
#line 19990 "parser.cc"
    break;

  case 1929:
#line 7458 "parser.yy"
          {
            //$$ = std::vector< Expression >();
          }
#line 19998 "parser.cc"
    break;

  case 1930:
#line 7462 "parser.yy"
          {
            //$$ = std::vector< Expression >();
          }
#line 20006 "parser.cc"
    break;

  case 1931:
#line 7466 "parser.yy"
          {
            yylhs.value.as < vector<Expression> > () = yystack_[2].value.as < vector<Expression> > ();
          }
#line 20014 "parser.cc"
    break;

  case 1932:
#line 7472 "parser.yy"
          {
          }
#line 20021 "parser.cc"
    break;

  case 1935:
#line 7482 "parser.yy"
          {

          }
#line 20029 "parser.cc"
    break;

  case 1936:
#line 7486 "parser.yy"
          {

          }
#line 20037 "parser.cc"
    break;

  case 1937:
#line 7492 "parser.yy"
          {
              driver.global_insert_values_list.emplace_back( std::move( yystack_[1].value.as < VALUES > () ) );
          }
#line 20045 "parser.cc"
    break;

  case 1938:
#line 7499 "parser.yy"
          {
            yylhs.value.as < VALUES > () = make_shared< vector< BiaodashiPointer > >( );
          }
#line 20053 "parser.cc"
    break;

  case 1939:
#line 7502 "parser.yy"
          { yylhs.value.as < VALUES > () = yystack_[0].value.as < VALUES > (); }
#line 20059 "parser.cc"
    break;

  case 1940:
#line 7507 "parser.yy"
          {
            yylhs.value.as < VALUES > () = std::move( yystack_[2].value.as < VALUES > () );
            yylhs.value.as < VALUES > ()->emplace_back( std::move( yystack_[0].value.as < Expression > () ) );
          }
#line 20068 "parser.cc"
    break;

  case 1941:
#line 7512 "parser.yy"
          {
            yylhs.value.as < VALUES > () = make_shared< vector< BiaodashiPointer > >( );
            yylhs.value.as < VALUES > ()->emplace_back( std::move( yystack_[0].value.as < Expression > () ) );
          }
#line 20077 "parser.cc"
    break;

  case 1942:
#line 7519 "parser.yy"
         { yylhs.value.as < Expression > () = yystack_[0].value.as < Expression > (); }
#line 20083 "parser.cc"
    break;

  case 1943:
#line 7521 "parser.yy"
          {
            yylhs.value.as < Expression > () = make_shared<CommonBiaodashi>( BiaodashiType::Default, 0 );
          }
#line 20091 "parser.cc"
    break;

  case 1944:
#line 7527 "parser.yy"
          {
          }
#line 20098 "parser.cc"
    break;

  case 1945:
#line 7530 "parser.yy"
          {
            yylhs.value.as < pair< vector< BiaodashiPointer >, vector< BiaodashiPointer > >  > () = yystack_[0].value.as < pair< vector< BiaodashiPointer >, vector< BiaodashiPointer > >  > ();
          }
#line 20106 "parser.cc"
    break;

  case 1946:
#line 7547 "parser.yy"
          {
            yylhs.value.as < UpdateStructurePtr > () = CreateUpdateStructure( yystack_[5].value.as < vector<JoinStructurePointer> > (), yystack_[3].value.as < pair< vector< BiaodashiPointer >, vector< BiaodashiPointer > >  > ().first, yystack_[3].value.as < pair< vector< BiaodashiPointer >, vector< BiaodashiPointer > >  > ().second, yystack_[2].value.as < Expression > (), yystack_[1].value.as < OrderbyStructurePointer > (), yystack_[0].value.as < LimitStructurePointer > () );
          }
#line 20114 "parser.cc"
    break;

  case 1947:
#line 7559 "parser.yy"
          {
            yylhs.value.as < pair< vector< BiaodashiPointer >, vector< BiaodashiPointer > >  > ()= yystack_[2].value.as < pair< vector< BiaodashiPointer >, vector< BiaodashiPointer > >  > ();
            yylhs.value.as < pair< vector< BiaodashiPointer >, vector< BiaodashiPointer > >  > ().first.push_back( yystack_[0].value.as < pair< BiaodashiPointer, BiaodashiPointer > > ().first );
            yylhs.value.as < pair< vector< BiaodashiPointer >, vector< BiaodashiPointer > >  > ().second.push_back( yystack_[0].value.as < pair< BiaodashiPointer, BiaodashiPointer > > ().second );
          }
#line 20124 "parser.cc"
    break;

  case 1948:
#line 7565 "parser.yy"
          {
            yylhs.value.as < pair< vector< BiaodashiPointer >, vector< BiaodashiPointer > >  > ().first.push_back( yystack_[0].value.as < pair< BiaodashiPointer, BiaodashiPointer > > ().first );
            yylhs.value.as < pair< vector< BiaodashiPointer >, vector< BiaodashiPointer > >  > ().second.push_back( yystack_[0].value.as < pair< BiaodashiPointer, BiaodashiPointer > > ().second );
          }
#line 20133 "parser.cc"
    break;

  case 1949:
#line 7573 "parser.yy"
          {
            yylhs.value.as < pair< BiaodashiPointer, BiaodashiPointer > > ().first = CreateIdentExpression( yystack_[2].value.as < SQLIdentPtr > () );
            yylhs.value.as < pair< BiaodashiPointer, BiaodashiPointer > > ().second = yystack_[0].value.as < Expression > ();
          }
#line 20142 "parser.cc"
    break;

  case 1950:
#line 7580 "parser.yy"
                      { }
#line 20148 "parser.cc"
    break;

  case 1951:
#line 7581 "parser.yy"
                       { ThrowNotSupportedException("LOW_PRIORITY"); }
#line 20154 "parser.cc"
    break;

  case 1952:
#line 7585 "parser.yy"
                                               {
          yylhs.value.as < SelectStructurePointer > () = yystack_[0].value.as < SelectStructurePointer > ();
        }
#line 20162 "parser.cc"
    break;

  case 1956:
#line 7595 "parser.yy"
                    { }
#line 20168 "parser.cc"
    break;

  case 1957:
#line 7596 "parser.yy"
                                      {
          if (yystack_[0].value.as < string > () != "tree") {
            ThrowNotSupportedException("only support FORMAT=TREE");
          }
        }
#line 20178 "parser.cc"
    break;

  case 1958:
#line 7615 "parser.yy"
          {
            yylhs.value.as < DeleteStructurePtr > () = CreateDeleteStructure( yystack_[5].value.as < shared_ptr<BasicRel> > (), yystack_[4].value.as < string > (), yystack_[2].value.as < Expression > (), yystack_[1].value.as < OrderbyStructurePointer > (), yystack_[0].value.as < LimitStructurePointer > () );
          }
#line 20186 "parser.cc"
    break;

  case 1959:
#line 7625 "parser.yy"
          {
            yylhs.value.as < DeleteStructurePtr > () = CreateDeleteStructure( *yystack_[3].value.as < TABLE_LIST > (), yystack_[1].value.as < vector<JoinStructurePointer> > (), yystack_[0].value.as < Expression > () );
          }
#line 20194 "parser.cc"
    break;

  case 1960:
#line 7636 "parser.yy"
          {
            yylhs.value.as < DeleteStructurePtr > () = CreateDeleteStructure( *yystack_[3].value.as < TABLE_LIST > (), yystack_[1].value.as < vector<JoinStructurePointer> > (), yystack_[0].value.as < Expression > () );
          }
#line 20202 "parser.cc"
    break;

  case 1961:
#line 7642 "parser.yy"
                             { yylhs.value.as < LimitStructurePointer > ()= NULL; }
#line 20208 "parser.cc"
    break;

  case 1962:
#line 7644 "parser.yy"
        {
            int64_t offset = 0;
            int64_t size = std::stoll(yystack_[0].value.as < string > ());
            yylhs.value.as < LimitStructurePointer > () = std::make_shared<LimitStructure>(offset, size);
        }
#line 20218 "parser.cc"
    break;

  case 1965:
#line 7656 "parser.yy"
                                               { }
#line 20224 "parser.cc"
    break;

  case 1966:
#line 7657 "parser.yy"
                                               { }
#line 20230 "parser.cc"
    break;

  case 1967:
#line 7661 "parser.yy"
                       { ThrowNotSupportedException("QUICK"); }
#line 20236 "parser.cc"
    break;

  case 1968:
#line 7662 "parser.yy"
                       { ThrowNotSupportedException("LOW_PRIORITY"); }
#line 20242 "parser.cc"
    break;

  case 1969:
#line 7663 "parser.yy"
                       { ThrowNotSupportedException("IGNORE"); }
#line 20248 "parser.cc"
    break;

  case 1970:
#line 7667 "parser.yy"
          {
            yylhs.value.as < TABLE_LIST > () = std::make_shared<vector<std::shared_ptr<BasicRel>>>();
            yylhs.value.as < TABLE_LIST > ()->emplace_back( yystack_[0].value.as < shared_ptr<BasicRel> > () );
          }
#line 20257 "parser.cc"
    break;

  case 1971:
#line 7672 "parser.yy"
          {
            yylhs.value.as < TABLE_LIST > () = yystack_[2].value.as < TABLE_LIST > ();
            yylhs.value.as < TABLE_LIST > ()->emplace_back( yystack_[0].value.as < shared_ptr<BasicRel> > () );
          }
#line 20266 "parser.cc"
    break;

  case 1972:
#line 7679 "parser.yy"
          {
            yylhs.value.as < shared_ptr<BasicRel> > () = CreateTableIdent( false, "", yystack_[1].value.as < string > (), nullptr, nullptr );
          }
#line 20274 "parser.cc"
    break;

  case 1973:
#line 7683 "parser.yy"
          {
            yylhs.value.as < shared_ptr<BasicRel> > () = CreateTableIdent( false, yystack_[3].value.as < string > (), yystack_[1].value.as < string > (), nullptr, nullptr );
          }
#line 20282 "parser.cc"
    break;

  case 1974:
#line 7690 "parser.yy"
          {
            yylhs.value.as < vector<Expression> > () = yystack_[2].value.as < vector<Expression> > ();
            yylhs.value.as < vector<Expression> > ().push_back( CreateIdentExpression( yystack_[0].value.as < SQLIdentPtr > () ) );
          }
#line 20291 "parser.cc"
    break;

  case 1975:
#line 7695 "parser.yy"
          {
            yylhs.value.as < vector<Expression> > ().push_back( CreateIdentExpression( yystack_[0].value.as < SQLIdentPtr > () ) );
          }
#line 20299 "parser.cc"
    break;

  case 1976:
#line 7704 "parser.yy"
          {
            yylhs.value.as < AbstractCommandPointer > () = CreateChangeDbStructure(yystack_[0].value.as < string > ());
          }
#line 20307 "parser.cc"
    break;

  case 1977:
#line 7712 "parser.yy"
          {
            yylhs.value.as < AdminStmtStructurePtr > () = CreateKillStructure(yystack_[1].value.as < int > (), yystack_[0].value.as < Expression > ());
          }
#line 20315 "parser.cc"
    break;

  case 1978:
#line 7718 "parser.yy"
                      { yylhs.value.as < int > () = 0; }
#line 20321 "parser.cc"
    break;

  case 1979:
#line 7719 "parser.yy"
                         { yylhs.value.as < int > () = 0; }
#line 20327 "parser.cc"
    break;

  case 1980:
#line 7720 "parser.yy"
                         { yylhs.value.as < int > () = 1; }
#line 20333 "parser.cc"
    break;

  case 1987:
#line 7745 "parser.yy"
                                 { }
#line 20339 "parser.cc"
    break;

  case 1988:
#line 7746 "parser.yy"
                                 { }
#line 20345 "parser.cc"
    break;

  case 1989:
#line 7748 "parser.yy"
          {
          }
#line 20352 "parser.cc"
    break;

  case 1990:
#line 7750 "parser.yy"
                                 { }
#line 20358 "parser.cc"
    break;

  case 1991:
#line 7755 "parser.yy"
          {}
#line 20364 "parser.cc"
    break;

  case 1992:
#line 7759 "parser.yy"
          {
            yylhs.value.as < AdminStmtStructurePtr > () = CreateShutdownStructure();
          }
#line 20372 "parser.cc"
    break;

  case 1993:
#line 7785 "parser.yy"
          {
          /*
            $$= NEW_PTN PT_load_table($2,  // data_or_xml
                                      $3,  // load_data_lock
                                      $4,  // opt_local
                                      $6,  // TEXT_STRING_filesystem
                                      $7,  // opt_duplicate
                                      $10, // table_ident
                                      $11, // opt_use_partition
                                      $12, // opt_load_data_charset
                                      $13, // opt_xml_rows_identified_by
                                      $14, // opt_field_term
                                      $15, // opt_line_term
                                      $16, // opt_ignore_lines
                                      $17, // opt_field_or_var_spec
                                      $18.set_var_list,// opt_load_data_set_spec
                                      $18.set_expr_list,
                                      $18.set_expr_str_list);
                                      */
            yylhs.value.as < LoadDataStructurePtr > () = CreateLoadDataStructure( yystack_[16].value.as < enum_filetype > (),
                                          yystack_[15].value.as < thr_lock_type > (),
                                          yystack_[14].value.as < bool > (),
                                          yystack_[12].value.as < string > (),
                                          yystack_[11].value.as < On_duplicate > (),
                                          yystack_[8].value.as < shared_ptr<BasicRel> > (),
                                          yystack_[6].value.as < string > (),
                                          yystack_[4].value.as < Field_separators > (),
                                          yystack_[3].value.as < Line_separators > (),
                                          yystack_[2].value.as < ulong > ());
          }
#line 20407 "parser.cc"
    break;

  case 1994:
#line 7818 "parser.yy"
                  { yylhs.value.as < enum_filetype > ()= FILETYPE_CSV; }
#line 20413 "parser.cc"
    break;

  case 1995:
#line 7819 "parser.yy"
                  { yylhs.value.as < enum_filetype > ()= FILETYPE_XML; }
#line 20419 "parser.cc"
    break;

  case 1996:
#line 7823 "parser.yy"
                      { yylhs.value.as < bool > ()= false; }
#line 20425 "parser.cc"
    break;

  case 1997:
#line 7824 "parser.yy"
                      { yylhs.value.as < bool > ()= true; }
#line 20431 "parser.cc"
    break;

  case 1998:
#line 7828 "parser.yy"
                      { yylhs.value.as < thr_lock_type > ()= TL_WRITE_DEFAULT; }
#line 20437 "parser.cc"
    break;

  case 1999:
#line 7829 "parser.yy"
                      { yylhs.value.as < thr_lock_type > ()= TL_WRITE_CONCURRENT_INSERT; }
#line 20443 "parser.cc"
    break;

  case 2000:
#line 7830 "parser.yy"
                       { yylhs.value.as < thr_lock_type > ()= TL_WRITE_LOW_PRIORITY; }
#line 20449 "parser.cc"
    break;

  case 2001:
#line 7834 "parser.yy"
                      { yylhs.value.as < On_duplicate > ()= On_duplicate::ERROR; }
#line 20455 "parser.cc"
    break;

  case 2002:
#line 7835 "parser.yy"
          { yylhs.value.as < On_duplicate > () = yystack_[0].value.as < On_duplicate > (); }
#line 20461 "parser.cc"
    break;

  case 2003:
#line 7839 "parser.yy"
                      { yylhs.value.as < On_duplicate > ()= On_duplicate::REPLACE_DUP; }
#line 20467 "parser.cc"
    break;

  case 2004:
#line 7840 "parser.yy"
                      { yylhs.value.as < On_duplicate > ()= On_duplicate::IGNORE_DUP; }
#line 20473 "parser.cc"
    break;

  case 2005:
#line 7844 "parser.yy"
                      { yylhs.value.as < string > ()= ""; }
#line 20479 "parser.cc"
    break;

  case 2006:
#line 7845 "parser.yy"
                                     { yylhs.value.as < string > () = yystack_[0].value.as < string > (); }
#line 20485 "parser.cc"
    break;

  case 2007:
#line 7848 "parser.yy"
                                  { yylhs.value.as < Field_separators > ().cleanup(); }
#line 20491 "parser.cc"
    break;

  case 2008:
#line 7849 "parser.yy"
                                  { yylhs.value.as < Field_separators > ()= yystack_[0].value.as < Field_separators > (); }
#line 20497 "parser.cc"
    break;

  case 2009:
#line 7854 "parser.yy"
          {
            yylhs.value.as < Field_separators > ()= yystack_[1].value.as < Field_separators > ();
            yylhs.value.as < Field_separators > ().merge_field_separators(yystack_[0].value.as < Field_separators > ());
          }
#line 20506 "parser.cc"
    break;

  case 2010:
#line 7858 "parser.yy"
          { yylhs.value.as < Field_separators > () = yystack_[0].value.as < Field_separators > (); }
#line 20512 "parser.cc"
    break;

  case 2011:
#line 7863 "parser.yy"
          {
            yylhs.value.as < Field_separators > ().cleanup();
            yylhs.value.as < Field_separators > ().field_term= std::make_shared<string>(yystack_[0].value.as < string > ());
          }
#line 20521 "parser.cc"
    break;

  case 2012:
#line 7868 "parser.yy"
          {
            yylhs.value.as < Field_separators > ().cleanup();
            yylhs.value.as < Field_separators > ().enclosed= std::make_shared<string>(yystack_[0].value.as < string > ());
            yylhs.value.as < Field_separators > ().opt_enclosed= 1;
          }
#line 20531 "parser.cc"
    break;

  case 2013:
#line 7874 "parser.yy"
          {
            yylhs.value.as < Field_separators > ().cleanup();
            yylhs.value.as < Field_separators > ().enclosed= std::make_shared<string>(yystack_[0].value.as < string > ());
          }
#line 20540 "parser.cc"
    break;

  case 2014:
#line 7879 "parser.yy"
          {
            yylhs.value.as < Field_separators > ().cleanup();
            yylhs.value.as < Field_separators > ().escaped= std::make_shared<string>(yystack_[0].value.as < string > ());
          }
#line 20549 "parser.cc"
    break;

  case 2015:
#line 7886 "parser.yy"
                               { yylhs.value.as < Line_separators > ().cleanup(); }
#line 20555 "parser.cc"
    break;

  case 2016:
#line 7887 "parser.yy"
                               { yylhs.value.as < Line_separators > ()= yystack_[0].value.as < Line_separators > (); }
#line 20561 "parser.cc"
    break;

  case 2017:
#line 7892 "parser.yy"
          {
            yylhs.value.as < Line_separators > ()= yystack_[1].value.as < Line_separators > ();
            yylhs.value.as < Line_separators > ().merge_line_separators(yystack_[0].value.as < Line_separators > ());
          }
#line 20570 "parser.cc"
    break;

  case 2018:
#line 7896 "parser.yy"
          { yylhs.value.as < Line_separators > () = yystack_[0].value.as < Line_separators > (); }
#line 20576 "parser.cc"
    break;

  case 2019:
#line 7901 "parser.yy"
          {
            yylhs.value.as < Line_separators > ().cleanup();
            yylhs.value.as < Line_separators > ().line_term= std::make_shared<string>(yystack_[0].value.as < string > ());
          }
#line 20585 "parser.cc"
    break;

  case 2020:
#line 7906 "parser.yy"
          {
            yylhs.value.as < Line_separators > ().cleanup();
            yylhs.value.as < Line_separators > ().line_start= std::make_shared<string>(yystack_[0].value.as < string > ());
          }
#line 20594 "parser.cc"
    break;

  case 2021:
#line 7913 "parser.yy"
                                                 { yylhs.value.as < string > ()= ""; }
#line 20600 "parser.cc"
    break;

  case 2022:
#line 7914 "parser.yy"
                                                 { yylhs.value.as < string > ()= yystack_[0].value.as < string > (); }
#line 20606 "parser.cc"
    break;

  case 2023:
#line 7917 "parser.yy"
                                        { yylhs.value.as < ulong > ()= 0; }
#line 20612 "parser.cc"
    break;

  case 2024:
#line 7918 "parser.yy"
                                        { yylhs.value.as < ulong > ()= std::atol(yystack_[1].value.as < string > ().data()); }
#line 20618 "parser.cc"
    break;

  case 2027:
#line 7926 "parser.yy"
                                 { }
#line 20624 "parser.cc"
    break;

  case 2028:
#line 7927 "parser.yy"
                                 { ThrowNotSupportedException("fields_or_vars"); }
#line 20630 "parser.cc"
    break;

  case 2029:
#line 7928 "parser.yy"
                                 { }
#line 20636 "parser.cc"
    break;

  case 2030:
#line 7933 "parser.yy"
          {
          }
#line 20643 "parser.cc"
    break;

  case 2031:
#line 7936 "parser.yy"
          {
          }
#line 20650 "parser.cc"
    break;

  case 2033:
#line 7943 "parser.yy"
          {
          }
#line 20657 "parser.cc"
    break;

  case 2034:
#line 7948 "parser.yy"
                                     { }
#line 20663 "parser.cc"
    break;

  case 2035:
#line 7949 "parser.yy"
                                 { ThrowNotSupportedException("SET"); }
#line 20669 "parser.cc"
    break;

  case 2036:
#line 7954 "parser.yy"
          {
          }
#line 20676 "parser.cc"
    break;

  case 2037:
#line 7957 "parser.yy"
          {
          }
#line 20683 "parser.cc"
    break;

  case 2038:
#line 7963 "parser.yy"
          {
          }
#line 20690 "parser.cc"
    break;

  case 2039:
#line 7968 "parser.yy"
          {
            // lex->sql_command= SQLCOM_BEGIN;
            yylhs.value.as < TransactionStructurePtr > () = make_shared< TransactionStructure >();
            yylhs.value.as < TransactionStructurePtr > ()->txCmd = TX_CMD::TX_START;
          }
#line 20700 "parser.cc"
    break;

  case 2040:
#line 7977 "parser.yy"
          {
            // $$= 0;
          }
#line 20708 "parser.cc"
    break;

  case 2041:
#line 7981 "parser.yy"
          {
            // $$= $1;
          }
#line 20716 "parser.cc"
    break;

  case 2042:
#line 7988 "parser.yy"
          {
            ThrowNotSupportedException( "start transaction with characteristics" );
          }
#line 20724 "parser.cc"
    break;

  case 2043:
#line 7992 "parser.yy"
          {
          }
#line 20731 "parser.cc"
    break;

  case 2044:
#line 7998 "parser.yy"
          {
            // $$= MYSQL_START_TRANS_OPT_WITH_CONS_SNAPSHOT;
          }
#line 20739 "parser.cc"
    break;

  case 2045:
#line 8002 "parser.yy"
          {
            // $$= MYSQL_START_TRANS_OPT_READ_ONLY;
          }
#line 20747 "parser.cc"
    break;

  case 2046:
#line 8006 "parser.yy"
          {
            // $$= MYSQL_START_TRANS_OPT_READ_WRITE;
          }
#line 20755 "parser.cc"
    break;

  case 2047:
#line 8012 "parser.yy"
          {
            yylhs.value.as < TransactionStructurePtr > () = make_shared< TransactionStructure >();
            yylhs.value.as < TransactionStructurePtr > ()->txCmd = TX_CMD::TX_START;
          }
#line 20764 "parser.cc"
    break;

  case 2048:
#line 8019 "parser.yy"
                      {}
#line 20770 "parser.cc"
    break;

  case 2049:
#line 8020 "parser.yy"
                    { ThrowNotSupportedException( "WORK" ); }
#line 20776 "parser.cc"
    break;

  case 2050:
#line 8024 "parser.yy"
          { yylhs.value.as < enum_yes_no_unknown > () = TVL_UNKNOWN; }
#line 20782 "parser.cc"
    break;

  case 2051:
#line 8025 "parser.yy"
                                   { yylhs.value.as < enum_yes_no_unknown > () = TVL_NO; }
#line 20788 "parser.cc"
    break;

  case 2052:
#line 8026 "parser.yy"
                                   { yylhs.value.as < enum_yes_no_unknown > () = TVL_YES;}
#line 20794 "parser.cc"
    break;

  case 2053:
#line 8030 "parser.yy"
          { yylhs.value.as < enum_yes_no_unknown > () = TVL_UNKNOWN; }
#line 20800 "parser.cc"
    break;

  case 2054:
#line 8031 "parser.yy"
                             { yylhs.value.as < enum_yes_no_unknown > () = TVL_YES; }
#line 20806 "parser.cc"
    break;

  case 2055:
#line 8032 "parser.yy"
                             { yylhs.value.as < enum_yes_no_unknown > () = TVL_NO; }
#line 20812 "parser.cc"
    break;

  case 2056:
#line 8036 "parser.yy"
                      {}
#line 20818 "parser.cc"
    break;

  case 2057:
#line 8037 "parser.yy"
                        {}
#line 20824 "parser.cc"
    break;

  case 2058:
#line 8041 "parser.yy"
          {
            yylhs.value.as < TransactionStructurePtr > () = CreateEndTxStructure( TX_CMD::TX_COMMIT, yystack_[1].value.as < enum_yes_no_unknown > (), yystack_[0].value.as < enum_yes_no_unknown > () );
          }
#line 20832 "parser.cc"
    break;

  case 2059:
#line 8048 "parser.yy"
          {
            yylhs.value.as < TransactionStructurePtr > () = CreateEndTxStructure( TX_CMD::TX_ROLLBACK, yystack_[1].value.as < enum_yes_no_unknown > (), yystack_[0].value.as < enum_yes_no_unknown > () );
          }
#line 20840 "parser.cc"
    break;

  case 2060:
#line 8053 "parser.yy"
          {
            // LEX *lex=Lex;
            // lex->sql_command= SQLCOM_ROLLBACK_TO_SAVEPOINT;
            // lex->ident= $5;
            ThrowNotSupportedException("rollback to savepoint");
          }
#line 20851 "parser.cc"
    break;


#line 20855 "parser.cc"

            default:
              break;
            }
        }
#if YY_EXCEPTIONS
      catch (const syntax_error& yyexc)
        {
          YYCDEBUG << "Caught exception: " << yyexc.what() << '\n';
          error (yyexc);
          YYERROR;
        }
#endif // YY_EXCEPTIONS
      YY_SYMBOL_PRINT ("-> $$ =", yylhs);
      yypop_ (yylen);
      yylen = 0;
      YY_STACK_PRINT ();

      // Shift the result of the reduction.
      yypush_ (YY_NULLPTR, YY_MOVE (yylhs));
    }
    goto yynewstate;


  /*--------------------------------------.
  | yyerrlab -- here on detecting error.  |
  `--------------------------------------*/
  yyerrlab:
    // If not already recovering from an error, report this error.
    if (!yyerrstatus_)
      {
        ++yynerrs_;
        error (yyla.location, yysyntax_error_ (yystack_[0].state, yyla));
      }


    yyerror_range[1].location = yyla.location;
    if (yyerrstatus_ == 3)
      {
        /* If just tried and failed to reuse lookahead token after an
           error, discard it.  */

        // Return failure if at end of input.
        if (yyla.type_get () == yyeof_)
          YYABORT;
        else if (!yyla.empty ())
          {
            yy_destroy_ ("Error: discarding", yyla);
            yyla.clear ();
          }
      }

    // Else will try to reuse lookahead token after shifting the error token.
    goto yyerrlab1;


  /*---------------------------------------------------.
  | yyerrorlab -- error raised explicitly by YYERROR.  |
  `---------------------------------------------------*/
  yyerrorlab:
    /* Pacify compilers when the user code never invokes YYERROR and
       the label yyerrorlab therefore never appears in user code.  */
    if (false)
      YYERROR;

    /* Do not reclaim the symbols of the rule whose action triggered
       this YYERROR.  */
    yypop_ (yylen);
    yylen = 0;
    goto yyerrlab1;


  /*-------------------------------------------------------------.
  | yyerrlab1 -- common code for both syntax error and YYERROR.  |
  `-------------------------------------------------------------*/
  yyerrlab1:
    yyerrstatus_ = 3;   // Each real token shifted decrements this.
    {
      stack_symbol_type error_token;
      for (;;)
        {
          yyn = yypact_[yystack_[0].state];
          if (!yy_pact_value_is_default_ (yyn))
            {
              yyn += yy_error_token_;
              if (0 <= yyn && yyn <= yylast_ && yycheck_[yyn] == yy_error_token_)
                {
                  yyn = yytable_[yyn];
                  if (0 < yyn)
                    break;
                }
            }

          // Pop the current state because it cannot handle the error token.
          if (yystack_.size () == 1)
            YYABORT;

          yyerror_range[1].location = yystack_[0].location;
          yy_destroy_ ("Error: popping", yystack_[0]);
          yypop_ ();
          YY_STACK_PRINT ();
        }

      yyerror_range[2].location = yyla.location;
      YYLLOC_DEFAULT (error_token.location, yyerror_range, 2);

      // Shift the error token.
      error_token.state = static_cast<state_type> (yyn);
      yypush_ ("Shifting", YY_MOVE (error_token));
    }
    goto yynewstate;


  /*-------------------------------------.
  | yyacceptlab -- YYACCEPT comes here.  |
  `-------------------------------------*/
  yyacceptlab:
    yyresult = 0;
    goto yyreturn;


  /*-----------------------------------.
  | yyabortlab -- YYABORT comes here.  |
  `-----------------------------------*/
  yyabortlab:
    yyresult = 1;
    goto yyreturn;


  /*-----------------------------------------------------.
  | yyreturn -- parsing is finished, return the result.  |
  `-----------------------------------------------------*/
  yyreturn:
    if (!yyla.empty ())
      yy_destroy_ ("Cleanup: discarding lookahead", yyla);

    /* Do not reclaim the symbols of the rule whose action triggered
       this YYABORT or YYACCEPT.  */
    yypop_ (yylen);
    while (1 < yystack_.size ())
      {
        yy_destroy_ ("Cleanup: popping", yystack_[0]);
        yypop_ ();
      }

    return yyresult;
  }
#if YY_EXCEPTIONS
    catch (...)
      {
        YYCDEBUG << "Exception caught: cleaning lookahead and stack\n";
        // Do not try to display the values of the reclaimed symbols,
        // as their printers might throw an exception.
        if (!yyla.empty ())
          yy_destroy_ (YY_NULLPTR, yyla);

        while (1 < yystack_.size ())
          {
            yy_destroy_ (YY_NULLPTR, yystack_[0]);
            yypop_ ();
          }
        throw;
      }
#endif // YY_EXCEPTIONS
  }

  void
  Parser::error (const syntax_error& yyexc)
  {
    error (yyexc.location, yyexc.what ());
  }

  // Generate an error message.
  std::string
  Parser::yysyntax_error_ (state_type, const symbol_type&) const
  {
    return YY_("syntax error");
  }


  const short Parser::yypact_ninf_ = -2463;

  const short Parser::yytable_ninf_ = -1964;

  const int
  Parser::yypact_[] =
  {
    1391, -2463,  -238,  -238,  1072, -2463,  1188,   434,   495,   612,
   46064,  1280,   173,    94,  -187, 46064,  -238,  1668, 24587,  4870,
   -2463,  -169,  -187,   188, 46064, 43104, -2463, -2463,   553, -2463,
    1391,    62, -2463, -2463, -2463, -2463, -2463, -2463,   -69, -2463,
   -2463, -2463, -2463, -2463, -2463, -2463,   516,   505, 46064, -2463,
   -2463, -2463, -2463, -2463, -2463,   845, -2463, -2463, -2463, -2463,
   -2463, -2463, -2463, -2463, -2463, -2463, -2463, -2463, -2463,   453,
     848,   816,  1020,   942,   862, 41624, 46064, -2463,   803,   816,
     825, -2463, -2463, -2463,  1257,  1406, -2463, -2463, -2463, -2463,
   43844,  1188,  1190,  1190,  1164, -2463, -2463, -2463, -2463, -2463,
   -2463, -2463, -2463, -2463, -2463, -2463, -2463, -2463, -2463, -2463,
   -2463, -2463, -2463, -2463, -2463, -2463, -2463, -2463, -2463, -2463,
   -2463, -2463, -2463, -2463, -2463, -2463, -2463, -2463, -2463, -2463,
   -2463, -2463, -2463, -2463, -2463, -2463, -2463, -2463, -2463, -2463,
   -2463, -2463, -2463, -2463, -2463, -2463, -2463, -2463, -2463, -2463,
   -2463, -2463, -2463, -2463, -2463, -2463, -2463, -2463, -2463, -2463,
   -2463, -2463, -2463, -2463, -2463, -2463, -2463, -2463, -2463, -2463,
   -2463, -2463, -2463, -2463, -2463, -2463, -2463, -2463, -2463, -2463,
   -2463, -2463, -2463, -2463, -2463, -2463, -2463, -2463, -2463, -2463,
   -2463, -2463, -2463, -2463, -2463, -2463, -2463, -2463, -2463, -2463,
   -2463, -2463, -2463, -2463, -2463, -2463, -2463, -2463, -2463, -2463,
   -2463, -2463, -2463, -2463, -2463, -2463, -2463, -2463, -2463, -2463,
   -2463, -2463, -2463, -2463, -2463, -2463, -2463, -2463, -2463, -2463,
   -2463, -2463, -2463, -2463, -2463, -2463, -2463, -2463, -2463, -2463,
   -2463, -2463, -2463, -2463, -2463, -2463, -2463, -2463, -2463, -2463,
   -2463, -2463, -2463, -2463, -2463, -2463, -2463, -2463, -2463, -2463,
   -2463, -2463, -2463, -2463, -2463, -2463, -2463, -2463, -2463, -2463,
   -2463, -2463, -2463, -2463, -2463, -2463, -2463, -2463, -2463, -2463,
   -2463, -2463, -2463, -2463, -2463, -2463, -2463, -2463, -2463, -2463,
   -2463, -2463, -2463, -2463, -2463, -2463, -2463, -2463, -2463, -2463,
   -2463, -2463, -2463, -2463, -2463, -2463, -2463, -2463, -2463, -2463,
   -2463, -2463, -2463, -2463, -2463, -2463, -2463, -2463, -2463, -2463,
   -2463, -2463, -2463, -2463, -2463, -2463, -2463, -2463, -2463, -2463,
   -2463, -2463, -2463, -2463, -2463, -2463, -2463, -2463, -2463, -2463,
   -2463, -2463, -2463, -2463, -2463, -2463, -2463, -2463, -2463, -2463,
   -2463, -2463, -2463, -2463, -2463, -2463, -2463, -2463, -2463, -2463,
   -2463, -2463, -2463, -2463, -2463, -2463, -2463, -2463, -2463, -2463,
   -2463, -2463, -2463, -2463, -2463, -2463, -2463, -2463, -2463, -2463,
   -2463, -2463, -2463, -2463, -2463, -2463, -2463, -2463, -2463, -2463,
   -2463, -2463, -2463, -2463, -2463, -2463, -2463, -2463, -2463, -2463,
   -2463, -2463, -2463, -2463, -2463, -2463, -2463, -2463, -2463, -2463,
   -2463, -2463, -2463, -2463, -2463, -2463, -2463, -2463, -2463, -2463,
   -2463, -2463, -2463, -2463, -2463, -2463, -2463, -2463, -2463, -2463,
   -2463, -2463, -2463, -2463, -2463, -2463, -2463, -2463, -2463, -2463,
   -2463, -2463, -2463, -2463, -2463, -2463, -2463, -2463, -2463, -2463,
   -2463, -2463, -2463, -2463, -2463, -2463, -2463, -2463, -2463, -2463,
   -2463, -2463, -2463, -2463, -2463, -2463, -2463, -2463, -2463, -2463,
   -2463, -2463, -2463, -2463, -2463, -2463, -2463, -2463, -2463, -2463,
   -2463, -2463, -2463, -2463, -2463, -2463, -2463, -2463, -2463, -2463,
   -2463, -2463, -2463, -2463, -2463, -2463, -2463, -2463, -2463, -2463,
   -2463, -2463, -2463, -2463, -2463, -2463, -2463, -2463, -2463, -2463,
   -2463, -2463, -2463, -2463,   806, -2463, -2463, -2463, -2463, -2463,
   -2463, -2463, -2463, -2463,  1219, -2463, -2463, 13252, -2463, -2463,
     254, -2463, -2463, 46064,  1240,    55, -2463, -2463, -2463, -2463,
   -2463, -2463, -2463, -2463, -2463,  9447,  1668, -2463, -2463,   351,
     962, -2463, -2463, 35704,    65, -2463,   884, 21623, 46804,   713,
     402, -2463, -2463, -2463, -2463, -2463, -2463, 37184, -2463, -2463,
   -2463,  1330, -2463,   -62,   753,  1541,   -62, 38664,  1233,   168,
     155,    59,   152, -2463,  1331, -2463,   991,   977, -2463, -2463,
     182,  1571, -2463,  1385, -2463,    86, -2463,  1018,  1233,  -183,
     -62, -2463,  1270,  1413,   -68,  1461,   202,  -128, -2463, -2463,
    1219, -2463, 46064,   831, -2463,   894, -2463, -2463, -2463, -2463,
    1632,   329,  1233, -2463, 46064,   -69, 44584,   858,  1518,   594,
     247,     8,   652,  1437, 46064, 39404, 46064, -2463, -2463, -2463,
   -2463, -2463,  1494,  1699, 46064, 39404,   816,   697,   832, -2463,
   -2463, -2463, -2463, 46064,   970,   -24, -2463, -2463,  1564, 46064,
   39404, -2463, -2463,  1190,  1190,  1022, -2463, -2463,  1509,  1038,
    1042, 19340, -2463, 13252,  1057,  1064,  1069,  1071,  1095,  1108,
    1120,  1120,  1132,  1137,  1139,  1151,  -253,  1158, -2463, -2463,
    1167,  1177,  1179,  1183, -2463, -2463,  1185,  1187, -2463,  1191,
    1193,  1197, 14013,  1238, -2463, 30509,  1248,  1278,  1283,  1298,
    1300, -2463, -2463, 13252,  1132, -2463, -2463, -2463,  1302,  1304,
    1306,  1315,  1320,  1321,  1325,  1132, -2463,  -242,  1326,  1328,
     514,  1337, -2463,  1341, -2463,   163,  1342,  1120,  1132,  1132,
    1365,  1377,  1383,  1398,  1404,  1421,  1462,  1466,  1469,  1486,
    1489,  1490,  1492,  1496,  1500, 19340, 19340, 19340,  8686, -2463,
   22364, -2463,  1206,  2323, -2463,  1631, 19340,   197, -2463, -2463,
   -2463, -2463, -2463, -2463, -2463, -2463, -2463, -2463,  1279, -2463,
   -2463, -2463, -2463, -2463, -2463, -2463, -2463,  1506,  1200, -2463,
   -2463, -2463,  1642,    63,  1236, -2463,  -258,  1530,     8, -2463,
     -11, -2463,   218, -2463,  1308, -2463, -2463, -2463, -2463, -2463,
   -2463, 13252,  1941, -2463, 39404,   -56,  1825,   668, -2463,  1371,
    1387, -2463,   768,   402,   884, -2463,   713,   402, 25328, -2463,
    6403, -2463, -2463, -2463, -2463, -2463,  1883,  1279, 13252, -2463,
    1402,   816, 46064, 46064, 46064,   816, 46064, 46064, 39404, 46064,
   -2463,   735,   735, 37924, -2463, -2463, -2463, -2463,   -62, 46064,
   -2463, 46064,   -62, 39404, -2463,   168, 46064,   -62, -2463,  1884,
    1616, -2463, -2463, -2463,  2024, -2463, -2463,  2030,  1504, -2463,
    1883, -2463,  2036,   168, -2463,   -62,   -62, -2463, -2463, -2463,
   -2463,   168, -2463, -2463, -2463,   168,   168,   168,   696,  2179,
   -2463,  1507, -2463, 29769,   831, 46064, 46064,  2231, 13252, -2463,
   -2463,   505, -2463, -2463,  1233, -2463, -2463, -2463, -2463, -2463,
   46064, 41624, -2463, -2463,  2214,  1817, -2463, -2463, -2463, -2463,
   -2463, -2463, -2463,  2096,    64,  1120, -2463,  1511,  2270,  2166,
    2168,  1656,  2278,  2055, -2463,  -201, 46064,  2088,   816, 46064,
   46064,  1795, 46064, -2463,  1658, -2463, -2463, -2463, -2463, -2463,
   -2463, 46064, -2463, -2463, -2463, -2463, -2463, -2463,  1754,   196,
     797,   500, 32729, -2463, 29769, 46064, -2463, -2463, -2463,  1543,
   46064, 46064, 41624,  1545, -2463, -2463, 46064, 13252,   341,  2237,
    1206,  1669, 13252, 13252, 13252,  1552, 13252,   996,  1554, -2463,
   -2463,  -154, -2463,  1556, 13252, 13252, -2463, 13252, 13252, 46064,
   13252,  -229, -2463, -2463,  3402,   931,  2171, 13252, 13252, 13252,
    8686,  3348, 13252, 46064,  2311,  1569, -2463,  1568,  1149, 13252,
    1244, 13252, 13252, -2463, -2463, 19340, 13252, 13252, 13252, 13252,
   13252,  1318, -2463, -2463, 13252,  1131,  1131, -2463, 13252,  7164,
   19340, -2463, -2463, -2463,  1577, -2463, -2463, -2463, 46064,  1578,
   13252, 13252,  1579,  1580, 13252, 13252, 13252, 13252, 13252, 19340,
    1582,  1583,  1584,  2237,  2237,  2237,  1585,  1586,   103,   813,
   -2463,  1836, -2463, -2463, -2463, -2463, 13252, 13252, -2463, -2463,
   -2463, -2463,  1753, -2463, -2463, -2463, 14774, 19340, 19340,  1590,
   19340, 19340, 19340, 19340, 19340,  2075, 20101, 20862, 19340, 19340,
   19340, 19340, 19340, 19340,   217,  2237, 41624, 19340, -2463, 13252,
   46064, -2463,  2117, -2463, 46064,   788, 46064, 41624, -2463, -2463,
   -2463, 46064, -2463, 29029, 13252,  1714, -2463, -2463, 45324, 33474,
    1206, 41624, -2463,   402,  1605, -2463, -2463,   963, -2463, -2463,
    2103, -2463,  1929, -2463,  1609,  1610,  1611, 47544, 13252, -2463,
   -2463,  6403,  1625, -2463, 47544, -2463, -2463, 19340,  1167, -2463,
    1306, -2463,  1206, -2463,  1796,  2186, -2463,  1206,  1634, 46064,
    1636, -2463, -2463, -2463, 46064, -2463, -2463, -2463, -2463, -2463,
   -2463, -2463, -2463, -2463, -2463, -2463, -2463, -2463, -2463,  -251,
   -2463, -2463, -2463, -2463, -2463,  1770,   -49, -2463, -2463, -2463,
   -2463, -2463,  1963,  1233,  1571,  2186,  2347, -2463,   -62, -2463,
   -2463,   -62, 46064, 46064,   -62, -2463, -2463,  1886,  -128,  1179,
   28289,  -200,  1409,  2009, -2463, -2463, -2463, -2463, -2463, -2463,
   -2463,  2002, -2463,   875, -2463,  1179,  1536,  1649, -2463, -2463,
   -2463, -2463, -2463, -2463, -2463, -2463, -2463, -2463,    89, -2463,
   -2463, -2463, -2463,  2006, -2463, 41624,  1804,  1765,  1796, -2463,
    2120,  1428,  2168,    70,   501, 39404,  1773,  2235, 46064, 46064,
     480,  1667, -2463,   264,   447, 46064, -2463,  2002, 32729, 29769,
   -2463,  1660,  -270, -2463, 39404,     9, -2463,  1664, -2463,  1022,
    2002,   138, -2463,  2415,  1670, 13252, 13252,    91,  1175,  1206,
     885,   916, -2463,   223, 13252,  1672, 10208, -2463,  1673, -2463,
   -2463,   235,   239,   158,   185,  1674,   189,  1586, -2463, -2463,
   -2463, -2463, -2463, -2463, -2463, -2463, -2463, -2463, -2463, -2463,
   -2463, -2463, -2463, -2463, -2463, -2463, -2463, -2463, -2463,    45,
   -2463, -2463, -2463, -2463, -2463,  1676, -2463, 13252,   195,   248,
     265,   112,  1693,   271,   994, -2463, 46064, 46064,  2415,  1681,
     273,  2415,  1683,   275,   332,  1709,   277,   281,   334,   288,
     116,  2415,  1685,   118,  1684,  1686,   338, 10969, 11730, 12491,
      53,  1225, -2463,  1691, -2463,  1568, -2463,   349,  1112,  1737,
    1737,   359,   292,   363,   292,   304,    34,  1737,  1737,  1737,
   -2463, -2463, -2463, 13252,  1688,  1689,  1690, 41624, 13252,  1679,
   -2463, -2463, -2463, -2463, -2463,  1058, -2463,  1700, -2463,  1179,
    1094,  1710,  8686, -2463,   303,  1710,  2085,   707,   707, 19340,
   14013,   555, 14013,   555,  2163,   965,  1710,  1710,  1710, -2463,
   19340,  1711, 19340, 19340, -2463,  2237,  1206,  1715,  1708, -2463,
     655,  1863, -2463,  1819,  2188, -2463, -2463, -2463, -2463, -2463,
   -2463, -2463,  1716, -2463, 13252,  2261, -2463, -2463, -2463, -2463,
     745, -2463, -2463,   -41,  1900,    50,  2046, -2463, -2463, -2463,
   -2463, -2463, -2463, -2463,   402,  1206, -2463, 25328, -2463, -2463,
    1455,  1233,   -31, -2463, 46064, -2463, 37924, 37924, 39404,  1796,
   13252, -2463,  2107, -2463, -2463,  1233,  1796, -2463, -2463,   168,
     168, -2463, -2463, -2463,  1409,  1726,  1736,  1740,  1741,  1742,
    1747, 46064, 29769,   894,  2242,  2098,  2245, -2463,  2098,   943,
    2098, -2463, 29769, 29769, 29769,  1756,  1472, -2463, -2463, 46064,
   -2463, -2463, -2463, -2463, -2463, 13252, -2463,   402,   402,   402,
   -2463,  1796,  1189, 41624, -2463,  2298,   402,   402,   402,   402,
     402,   402,   402,   402, -2463, -2463, -2463,    67, -2463, -2463,
   -2463, -2463, -2463, -2463, -2463, -2463, -2463, -2463, -2463,  2355,
      14,  1938, 41624,  1939,  1942, -2463, -2463,  1943, -2463, -2463,
     268, -2463,  1474,   135,  -229,   402,   402,   402,   402,   402,
     402,   402,  2381,   402,   402, -2463,  2384,   402,   402, 46064,
     402,   402,   402,  2480,   402, -2463,   402,   402,   402,   402,
     917,   402,   402,   402,   402, 27549, -2463, -2463,   211,   143,
   -2463, -2463, -2463, -2463, -2463, -2463, -2463,   535,  1661, -2463,
    2051, -2463,   969, -2463,  1776, -2463, -2463, -2463, -2463,    39,
     894,  1714,   927,  -270,  1784, -2463, -2463, -2463, -2463, -2463,
   46064, -2463, -2463,  1499, 15535,  1779,  1737,  1206,   519, 13252,
   13252,  2378,  2432, -2463, 13252, -2463,  2432,  1126,  1737,  1785,
   -2463,  2296,  2303, -2463, -2463, -2463, -2463, 13252, 13252, 13252,
    -155, -2463, 13252, 13252, 13252, 13252, 13252, -2463, -2463,  1797,
    1800,  1737, -2463,  1801,  1737, 13252, -2463, 13252, 13252, 13252,
   -2463, 16296, 13252, 13252,  1803,  1737, -2463, 13252, 13252, 13252,
   -2463, 13252,  1218, 13252,  1767, 13252,  1970, 13252, -2463, 19340,
   -2463, -2463, -2463, 31249, -2463, -2463,  -110,  1147,  1806,  -110,
    1807, 19340,  1737, -2463, -2463, -2463,  1152, -2463, -2463, -2463,
    1799,  1206, -2463, -2463, -2463, -2463, -2463, 19340,   368,  1170,
   19340, -2463,  2085,  3348,  3348,  1129,  8686, -2463,   303,  2085,
   -2463, 13252, 13252, 46064, -2463,    79, -2463, -2463,  1206,  2521,
    2348, 34219,  1814, -2463,  1815, -2463, -2463, -2463,  6403, -2463,
   -2463, -2463, -2463, -2463, -2463, -2463, -2463, -2463, -2463, -2463,
   -2463, -2463,  1543, -2463,  1206, -2463,  2036, -2463, -2463,  1714,
     -62,   894, 29769, -2463, -2463, -2463, -2463, -2463,   402,   473,
   -2463,  2009, -2463, -2463, -2463,  2308, -2463,  2312, -2463,  2098,
    2098,  2315,  2318, -2463,  1624,  1798, 46064, -2463, -2463, -2463,
   -2463, 41624,  1796, 40144, -2463,   402,   402, -2463,    83, -2463,
   -2463, -2463, -2463, -2463, -2463, -2463, -2463,  2185, 46064,  1103,
    1796,  1796,  1103,  1103,  1103,  1103,  1589, -2463,  1214,   402,
   -2463,   106, -2463, -2463, -2463, -2463,   392, -2463, -2463, -2463,
   -2463,   346,  1702,  1702,  1702,  1702,  1474, -2463,   126,   471,
   -2463,   135, -2463, -2463,  1455,  1702,  1702,  1796,  1796,  1796,
    1796,   402,  1702, 41624,   402,   149,  1702, -2463,  1455,  1455,
    1222,   998,  1796,  1576,  1222,  1222,  1639, -2463, -2463, 46064,
    1702,  1827, 40884, 46064,  1101, -2463, -2463, 46064,  1101,  1198,
   -2463, -2463, -2463,   174, 46064,  4219, -2463,  2551, -2463, -2463,
     969,  2201, -2463, -2463, -2463, -2463, -2463,  2062, 46064, -2463,
   -2463, -2463, -2463,  2203,  2568,  2196, -2463, -2463, 46064, -2463,
   -2463, 26809, -2463,  2207,  2207, -2463,  1837, 14013,   373,  1737,
   -2463, -2463, 13252,  1206,  1055, -2463, -2463,  1842,  1842,  1843,
   -2463,  1846, -2463, -2463,  2546, -2463,  2356,  1843,  2358,  1853,
    1842,  1206,  1854,  1737, -2463,  1737, 13252, 13252,   381,   385,
     390,  2567,  2118,   309,   313,   191, -2463,   398,  1737, -2463,
    1737, -2463,   409,   420,   458,  1223, 14013,   521,    60,   225,
    1737, -2463,   540,   317,   319,   621, 13252,   628, 13252,   675,
   13252,   706,    49, 46064, -2463, -2463, -2463, -2463,  1920,  1923,
    1737,  1864,  1864,  -110,  1737,  -110,   122, -2463, -2463, 46064,
   -2463, -2463, -2463, -2463, 13252,   197, -2463, -2463, 19340,   736,
    1231, -2463, -2463,  1868,  1869, -2463, -2463,  2380, 13252, 13252,
    1918, -2463,  1900, -2463, -2463, -2463, -2463, -2463, -2463,  1114,
   17057, 46064,  2196, -2463, -2463,  2368,  2371, -2463, -2463, 13252,
    1880, 13252,  1882,  1889,  1879, -2463, -2463, -2463, -2463, -2463,
   -2463,  1103,  1103,  1386,  1887, -2463, -2463, -2463, -2463, -2463,
   -2463, -2463, -2463, -2463, -2463, -2463, -2463, -2463, -2463, -2463,
   -2463, -2463, -2463, -2463, -2463, -2463, -2463, -2463, 41624,  2086,
    1796,  1938, -2463, -2463, -2463, -2463, -2463, -2463, -2463, -2463,
   -2463, -2463, -2463, -2463, -2463,   958,  2548,  1657,  2399, -2463,
   -2463, -2463, -2463, -2463, -2463, -2463, -2463,  1796, -2463, -2463,
    1796, -2463, -2463, -2463, -2463, -2463, -2463, -2463, -2463, -2463,
   -2463, -2463,    25,    28,  2250,   172, -2463, -2463, -2463, -2463,
   -2463, -2463, -2463, -2463, -2463, -2463, -2463, -2463, -2463, -2463,
   46064, -2463, -2463, -2463, -2463, -2463, 46064,  1902, 46064,  3237,
   36444,  1906,  2395,  2400,  1101,  -147, 46064,  1911,  2047, -2463,
    1842,  1842,  1842, -2463, -2463,  1143,  1843, -2463, -2463,  2258,
    1913, -2463, -2463, -2463, -2463, -2463, -2463, -2463, -2463, -2463,
     162,  1184, -2463, -2463,   162, -2463, -2463, -2463,    40,  1314,
   -2463, -2463, -2463, -2463, -2463, -2463,  1925, -2463,  1842,  1843,
    1843, -2463, -2463,   162,  1842, -2463,  1842,  2233,  1976, -2463,
      41,  1842,  1842,  1842,  1926,  1846, -2463,  2165,  2193,  1796,
    4219,  1933,  1931, -2463,   755, 46064,  -229,  2412,  -240,   810,
   -2463, -2463, -2463,  1936,  1232,  2544, -2463, -2463, 17057,  1940,
   -2463,  3348, -2463, -2463,  1206, 13252,   283, -2463, -2463, -2463,
    2321, -2463,   870, -2463, -2463, -2463, -2463, -2463, -2463, -2463,
   -2463, -2463, -2463, -2463, -2463,  3348,  3348, -2463, -2463, -2463,
   13252,  1279,  1944, 13252, 13252, -2463, 13252, -2463, -2463, -2463,
   -2463, -2463, -2463, -2463,  3348, -2463, 13252, -2463, -2463, 13252,
   -2463, -2463, 13252, 13252, -2463,   779, -2463,   783, -2463,   791,
   -2463, -2463, -2463,  1946,  2300, -2463, -2463, -2463, 13252, -2463,
   -2463,  1737, -2463,  1737,  2503, -2463,  1206, -2463, -2463, -2463,
   -2463,  2134,  1206,   627, -2463,  1206, 46064, -2463,  1952, -2463,
    1167,  1206, -2463, -2463,  2412, -2463, -2463,  1206, 46064,  1206,
   46064, -2463, 46064, -2463, -2463, -2463,  1497, -2463, -2463, -2463,
   -2463, -2463, -2463,  1589, -2463,   -58, -2463, -2463,  1666, -2463,
   -2463,  1955, 19340,  1956, 19340,  1589,  2152,  1959,  2707,  1961,
    1664,  1964, -2463,  1965, -2463, -2463, 13252, 46064, -2463, -2463,
   -2463,  1979, -2463, -2463,  1966, 31989,   396, -2463, -2463, -2463,
    2691,   236, -2463,  2692, -2463, -2463, -2463, -2463,   162, 40144,
   -2463, -2463, -2463,  1279, -2463,  -151, -2463, -2463,   162, -2463,
    2093, -2463, -2463, -2463,  1279,   162, -2463, -2463, -2463, -2463,
     731, 46064, -2463, -2463, -2463, 41624,  1381,  1796,  2105,  2102,
    1988, -2463,  2112, -2463,  2607,  1025,  2465,  1768,  -115,  2675,
   -2463,  2531, -2463,  2124, -2463,  2471, -2463, -2463,  2708,   162,
    2708,   731,  2362, -2463,   731,   731,  1796,   321, -2463,  1941,
   -2463, 46064, -2463, -2463, -2463,  1985,  1984, -2463, 46064,  2555,
   -2463,  2108, 37924, -2463, -2463, -2463, -2463, 33474,   810, 46064,
    2490,  2003,  2001, -2463,  1837,   542,  1206,  2007,  2008,  2010,
    2011,  2012,  1252,  2013,  2014,  2015, -2463, -2463,  1737,   857,
     325,  1254,   629,   906,   908,   940,   949, -2463, -2463, -2463,
   -2463,  2720,  2385,  1206, -2463, -2463,   209,  -110, 46064, -2463,
   13252, -2463,  2755,  2019, -2463, -2463, -2463,  2023,  2035, -2463,
    1796,  1796,  1796,  1796,  1702,  1796,  1796,  1266, -2463,  2668,
   -2463, -2463, -2463,  2674, 46064,  1574, 46064,  1903, -2463,  2749,
    2042, 19340,  2635,  2044, -2463, 31989, 31989,   972,  2045, -2463,
   31989, 13252, -2463,  1267, -2463,   144, -2463, -2463, -2463, -2463,
   -2463, -2463, -2463, 40144, -2463, -2463,  2708, -2463,  1286, -2463,
   -2463,  1312, -2463, -2463, -2463, -2463, -2463,   731, -2463,  2052,
    1009, -2463, -2463, -2463, -2463, -2463,  2222,  2223,  2229,  1362,
    1362, 13252, -2463, -2463, -2463, -2463, -2463, -2463, -2463,  2792,
    2439,  2184, -2463, -2463, -2463, -2463, -2463, -2463, -2463, -2463,
   -2463,  2802,  2797, 41624, -2463, -2463, -2463, -2463, -2463, -2463,
    2059, -2463, -2463, -2463, 13252, 13252,  2438, -2463,  2344, -2463,
   -2463,   864,  4219,  2671,  1062, -2463, -2463,  2063, -2463, -2463,
   -2463,  2209, -2463, 17057, -2463, -2463, -2463, -2463, -2463, -2463,
   -2463,  2449, -2463, -2463, 13252, -2463, -2463, 13252, -2463, -2463,
   -2463, -2463, -2463, -2463, 13252,  2782,    -8, -2463, -2463,  1737,
    2002, -2463,  2074, 46064, -2463, -2463, -2463, -2463, -2463, -2463,
   -2463, -2463, -2463, -2463,  1497, -2463, -2463,  1332, -2463, -2463,
    1334, -2463,  2550,  2433, -2463,  1999,  1589, 46064,  1347,  1352,
   -2463, 46064,  1353,   976,   780, 31989,  2462, -2463, -2463, -2463,
     162,  1279,   162, -2463, 46064, -2463, -2463, -2463,   984, 46064,
   -2463, -2463, -2463,  2087, -2463,  1206,  3348,  2762,  1201, -2463,
    4219, -2463, -2463,  1941,  2359,  2783,  2454,  2785, 46064, -2463,
    2097, -2463,  1005,  2095, 13252, -2463, -2463, -2463, -2463,  1035,
   -2463,  1687, -2463, -2463, -2463, -2463, 46064, -2463,   190, 46064,
    1354, -2463, -2463, -2463,  2099,  2100,   110,   318,  1363, -2463,
     780,  1173,  1796,   402,   396,   396, -2463, -2463, -2463,   780,
   -2463, -2463, -2463, -2463, -2463,  2101, -2463, -2463, -2463,  1375,
   -2463, -2463, 13252, -2463,    36,  2470, -2463,  2784,  1941,  2414,
   -2463,   807,  2467, -2463,  2472,  2106, -2463, -2463,  1649,  1324,
    2379, 13252,  2169,  2173,  2175,  2176, -2463, -2463, 40144,  2382,
   -2463,  2114,  2707,  2244, -2463,  2433, -2463,  2477, -2463,   110,
   -2463, -2463, -2463,   318, -2463, -2463,  2233, 46064, -2463, -2463,
   -2463,  1702, -2463, -2463, -2463,  1173,  2558,  1023,  2338,  2464,
   -2463,  2369,  1796,  2739, -2463,  1796,  2349, -2463,  2350,  2351,
    2352,  2353,  2390,  2760, 54204, -2463, -2463, -2463, -2463, -2463,
   41624, -2463, -2463, -2463, 13252,   904,   922,   925, -2463,  2881,
   -2463,  3348, -2463, -2463, -2463,    56, -2463, -2463,  2676,  2829,
   19340,  2155,   214,  1760, -2463,  2686, -2463, -2463, -2463, -2463,
   -2463, -2463,   804,  2535,  -174, 13252,  2759, -2463, -2463, -2463,
   -2463, -2463, -2463, -2463, -2463,  2810, -2463,  2811,  1012, -2463,
    2280, 46064,   775, -2463, 55684, 55684, 46064, -2463, -2463, -2463,
   -2463, -2463, -2463, -2463,  2894, -2463, -2463, -2463,  2159, -2463,
   -2463,   -87, -2463, -2463, -2463, -2463, -2463, -2463, -2463, -2463,
   -2463, -2463,  2161, -2463, 54204,  3348, -2463, -2463, -2463,  1324,
    2225,  2437, -2463,  2226, -2463,  2884,    76,  2648,  2153, 46064,
    2177,  2354,   402,  2794,  2795,   402,   402,   402,   402,  2181,
    1760, -2463,  2770, -2463, -2463, -2463, -2463,   -29, -2463, -2463,
   -2463,  2124,  1206, 13252, -2463, -2463, 54204,  2414, -2463, -2463,
   -2463, -2463, 13252,  2295, -2463, -2463,  2738, 46064, -2463, -2463,
   -2463, -2463, 13252, -2463, -2463, -2463, 54204, 54204, -2463, -2463,
    2910, -2463,   982, -2463, -2463, -2463, -2463,  1279,  2895,  2896,
    2786,  2899,    76, -2463,  -156,  2711,  2386,  1396, 17818, -2463,
   -2463,  -104,  1796,   402,   402,  1768,  1768,  1589, 46064,  2387,
   -2463, -2463,   402,   472,   472, -2463,  1206, -2463, -2463, -2463,
   -2463, -2463, -2463, -2463, -2463, -2463, -2463, -2463, -2463, -2463,
   -2463, 54204,  1206, -2463,    95, -2463, -2463,  2700,  2793, 13252,
    1206, -2463, 50504,  2197, 54944, 13252,   -87,  2894, -2463, -2463,
    1279,  1279,  2909,  1279, -2463,  2911,  2912,  -156, -2463,  2581,
    2205,  1589, -2463,  2386, -2463,  7925,  2085,  1410, -2463,  1419,
   -2463, -2463, 18579, -2463, -2463, -2463,  1796,  1796, -2463, -2463,
   -2463, -2463, 41624,  1435, -2463, 41624, -2463,  2959, -2463,   782,
    2582,  2583, -2463,  2324, 13252, 54204, -2463,  2805, -2463,  2734,
    1206,  2847,  2677,  2213, -2463,  2211,  1206, 55684, 55684, -2463,
   -2463,  1279, -2463,  1279,  1279, -2463,    32, 23105,  2466, -2463,
   -2463,  1631, -2463,  2220, -2463, 18579, -2463, -2463,  1760, -2463,
    2387, -2463, -2463, -2463, -2463,  2360,  2848, -2463,   145, -2463,
    1206, 51244,  2928, 46064, -2463,  2398, 42364,  2227, 51984, -2463,
   -2463, 13252,  2838, -2463, -2463, -2463, -2463, -2463, -2463, -2463,
   -2463, -2463, -2463, 41624, -2463,  1453, -2463, 46064, -2463, -2463,
   -2463, -2463, -2463,   472,   472, 13252, -2463,  2828,  2405, -2463,
    2230, -2463, 54204, -2463, -2463,  4062,   954,  2773, -2463, -2463,
    2234,  1206, 54204, -2463, -2463, 23846,   402,  2236, -2463, -2463,
   -2463,  1206,  2937, 54204, 46064, 48284, 46064,  1941,  2799,  2800,
    2801, -2463,  2836, 52724, -2463, 17057, 46064,  2417, -2463, 49024,
   -2463,  1682, -2463,  2876,  1573, -2463, -2463,  2542,  2361, -2463,
   -2463, 54204, 54204, -2463, -2463, 13252, -2463,  2374, -2463, -2463,
   -2463,   594, 34964, -2463, -2463, 49764, 53464, -2463,  1206, -2463,
    1279, -2463, -2463, -2463,  2804, -2463, 26069, -2463, -2463, -2463,
   -2463, -2463, 34964, -2463, -2463
  };

  const short
  Parser::yydefact_[] =
  {
       0,     3,  2048,  2048,   543,   707,  1965,  1764,  1765,   428,
       0,  1918,  1978,     0,     0,     0,  2048,    62,     0,  1834,
    1992,     0,     0,  1950,     0,     0,  1954,     5,     0,     2,
       0,     0,    14,    15,    16,    13,    25,    46,  1070,    49,
      53,     8,     9,    24,    17,    10,     0,     0,     0,    12,
      26,    28,    19,    34,    18,  1956,    11,    33,    23,    21,
      22,    27,    20,    29,    30,    31,    32,  2049,  2047,  2050,
       0,   334,     0,     0,     0,     0,     0,   429,     0,   334,
       0,   272,   430,   430,   543,   545,   547,  1969,  1968,  1967,
       0,  1965,   426,   426,     0,  1298,  1297,  1300,  1302,  1303,
    1304,  1305,  1306,  1307,  1250,  1308,  1309,  1310,  1311,  1312,
    1313,  1251,  1314,  1315,  1316,  1317,  1318,  1319,  1252,  1253,
    1321,  1322,  1323,  1324,  1325,  1254,  1255,  1326,  1327,  1328,
    1329,  1330,  1331,  1332,  1333,  1334,  1335,  1257,  1336,  1258,
    1337,  1338,  1340,  1341,  1371,  1342,  1343,  1344,  1345,  1346,
    1347,  1259,  1348,  1349,  1350,  1351,  1352,  1353,  1354,  1355,
    1356,  1260,  1357,  1358,  1360,  1362,  1363,  1364,  1365,  1366,
    1261,  1367,  1368,  1369,  1370,  1262,  1372,  1374,  1375,  1376,
    1378,  1377,  1379,  1380,  1288,  1381,  1382,  1247,  1384,  1385,
    1386,  1387,  1388,  1389,  1390,  1289,  1391,  1392,  1393,  1394,
    1263,  1264,  1396,  1397,  1398,  1404,  1399,  1400,  1401,  1666,
    1403,  1265,  1405,  1266,  1409,  1408,  1410,  1104,  1411,  1412,
    1267,  1414,  1415,  1416,  1417,  1268,  1419,  1420,  1421,  1422,
    1423,  1424,  1425,  1269,  1426,  1427,  1428,  1429,  1430,  1431,
    1667,  1433,  1434,  1435,  1436,  1437,  1438,  1440,  1442,  1443,
    1444,  1445,  1447,  1448,  1449,  1458,  1450,  1451,  1452,  1454,
    1453,  1455,  1456,  1457,  1459,  1439,  1460,  1461,  1462,  1463,
    1464,  1465,  1466,  1467,  1468,  1469,  1470,  1471,  1472,  1473,
    1474,  1475,  1476,  1477,  1478,  1479,  1480,  1481,  1482,  1483,
    1484,  1485,  1486,  1488,  1489,  1490,  1491,  1290,  1270,  1493,
    1495,  1496,  1497,  1500,  1501,  1502,  1504,  1508,  1509,  1510,
    1511,  1512,  1514,  1513,  1515,  1517,  1519,  1520,  1518,  1521,
    1522,  1523,  1271,  1272,  1525,  1526,  1527,  1291,  1528,  1530,
    1529,  1292,  1531,  1532,  1533,  1534,  1535,  1536,  1537,  1538,
    1540,  1541,  1542,  1543,  1544,  1293,  1545,  1546,  1273,  1547,
    1294,  1548,  1550,  1549,  1551,  1553,  1554,  1552,  1274,  1555,
    1557,  1558,  1560,  1561,  1563,  1275,  1565,  1566,  1567,  1569,
    1568,  1570,  1276,  1571,  1572,  1577,  1578,  1579,  1580,  1670,
    1581,  1582,  1249,  1277,  1583,  1278,  1585,  1586,  1587,  1588,
    1589,  1590,  1591,  1592,  1593,  1594,  1595,  1596,  1598,  1599,
    1279,  1600,  1601,  1602,  1603,  1280,  1604,  1605,  1606,  1607,
    1608,  1609,  1610,  1296,  1611,  1612,  1613,  1614,  1647,  1615,
    1616,  1617,  1618,  1619,  1620,  1621,  1626,  1624,  1625,  1627,
    1628,  1629,  1281,  1630,  1631,  1633,  1634,  1635,  1636,  1282,
    1283,  1637,  1638,  1639,  1640,  1641,  1642,  1643,  1644,  1646,
    1649,  1650,  1651,  1652,  1653,  1654,  1655,  1656,  1284,  1657,
    1658,  1659,  1660,  1661,  1668,  1564,  1301,  1418,  1648,  1339,
    1584,  1432,  1492,  1669,  1406,  1320,  1256,  1383,  1395,  1494,
    1507,  1524,  1556,  1623,  1632,  1487,  1505,  1516,  1407,  1562,
    1597,  1622,  1295,  1645,  1446,  1402,  1248,  1359,  1361,  1506,
    1539,  1299,  1413,  1503,  1575,  1573,  1574,  1576,  1559,  1499,
    1373,  1498,  1441,  1110,   701,  1111,  1243,  1244,  1245,  1242,
    1246,  1920,  1921,  1919,  1922,  1979,  1980,     0,  1994,  1995,
    1998,    36,    35,     0,     0,  2050,   270,   265,   264,   267,
     268,   269,    67,   266,   263,     0,    63,    65,    66,  1690,
       0,   905,   906,     0,     0,   907,  1628,     0,     0,   897,
       0,  1884,  1663,  1664,  1665,  1662,  1885,     0,   928,  1886,
    1821,     0,  1690,  1825,     0,     0,  1825,     0,  1079,  1830,
    1835,  1833,     0,   909,  1799,   910,  1820,     0,  1777,  1798,
       0,  1674,  1791,     0,   911,     0,  1829,     0,  1079,     0,
    1825,  1770,     0,     0,     0,     0,     0,  2040,  1991,  1951,
    1922,  1976,     0,  1048,  1051,  1053,     1,     4,     6,     7,
       0,   257,  1079,  1071,     0,  1070,  1766,  1102,     0,     0,
       0,  2053,     0,     0,     0,     0,     0,   548,  1114,  1105,
    1113,  1112,     0,   579,     0,     0,   334,   552,   552,   430,
     541,   542,   546,     0,  1963,     0,  1970,  1966,     0,     0,
       0,    36,    37,   426,   426,     0,   700,  1923,  1924,  1300,
    1312,     0,   725,   961,     0,     0,  1330,     0,     0,     0,
      76,    76,  1196,     0,     0,     0,  1355,  1356,   731,   733,
       0,     0,     0,     0,   722,   732,  1401,     0,   724,  1410,
       0,     0,     0,     0,   729,     0,     0,  1472,     0,     0,
    1476,   710,   129,     0,  1196,   721,   728,   714,     0,     0,
       0,  1577,  1607,     0,     0,  1196,   709,  1626,  1624,  1625,
    1627,     0,   723,  1281,   730,     0,  1640,    76,  1196,  1196,
       0,     0,  1659,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   128,
       0,   262,  1977,    87,    92,   106,     0,   121,   164,   140,
     141,   143,   142,   144,   235,   234,   155,   260,   718,   147,
     146,   719,   720,   149,   148,   139,  1097,  1110,  1096,   209,
    1999,  2000,  1996,  1037,  1981,  1984,     0,  2056,  2053,    70,
      55,    69,  1037,    71,  1096,    64,  1689,   872,   927,   796,
     797,     0,   878,   871,     0,     0,     0,     0,  1888,  1901,
    1898,  1897,   916,     0,  1628,  1889,   897,     0,     0,  1887,
       0,   874,   876,   875,   924,   873,  1842,     0,     0,  1797,
       0,   334,     0,     0,     0,   334,     0,     0,     0,     0,
    1771,     0,     0,     0,  1790,  1080,  1840,  1841,  1825,     0,
    1839,     0,  1825,     0,  1806,  1830,     0,  1825,  1686,     0,
       0,  1678,  1683,  1679,     0,  1685,  1684,  1687,  1675,  1676,
    1842,  1782,  1672,  1830,  1789,  1825,  1825,  1796,  1781,  1786,
    1794,  1830,   829,   828,   827,     0,     0,  1830,     0,     0,
    2039,  2041,  2042,     0,  1049,     0,     0,     0,     0,   259,
     258,     0,    47,   706,  1079,  1106,  1767,   713,  1768,  1769,
       0,     0,  1952,  2052,     0,     0,  2054,  2058,   550,   551,
     549,   127,   126,     0,   895,    76,   544,   313,     0,     0,
       0,   586,     0,   322,   323,   283,     0,     0,   334,     0,
       0,     0,     0,   432,     0,   439,   440,   443,   442,   441,
     444,     0,   431,   434,   435,   437,   436,   438,   552,  1037,
    1102,     0,     0,  1972,     0,     0,   427,    45,   316,    43,
       0,     0,     0,   702,   703,  1925,     0,     0,  1041,   161,
     962,     0,     0,     0,     0,     0,     0,  1041,     0,   202,
     171,     0,   203,     0,     0,     0,   174,     0,     0,     0,
       0,     0,   159,   261,     0,     0,   249,     0,     0,     0,
       0,     0,     0,     0,     0,   957,   959,  1096,  1041,     0,
    1041,     0,     0,    80,  1241,     0,     0,     0,     0,     0,
       0,  1041,   217,   736,     0,     0,     0,   735,     0,     0,
       0,   727,   726,   711,     0,   220,   222,   221,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   151,   152,   153,     0,   262,     0,   912,
     800,   802,   125,   124,   123,   122,     0,     0,   130,   131,
     132,   133,     0,   134,   135,   136,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   154,     0,     0,   712,   229,
       0,  1997,     0,  1038,     0,     0,     0,     0,   697,   698,
    2057,     0,  2059,     0,     0,  1044,    56,    72,     0,     0,
     925,     0,   926,     0,     0,  1894,  1890,     0,  1903,  1904,
       0,  1895,     0,  1896,     0,     0,     0,     0,     0,   900,
     899,     0,   898,   901,     0,   904,   932,   933,   930,   931,
     934,   935,   929,   921,     0,  1844,  1826,  1827,     0,     0,
    1735,  1815,  1809,  1808,     0,  1804,  1810,  1816,  1805,  1819,
    1818,  1817,  1779,  1778,  1088,  1089,  1087,  1086,  1081,  1082,
    1085,  1774,  1831,  1814,  1812,  1800,  1822,  1813,  1811,  1680,
    1681,  1682,     0,  1079,     0,  1844,     0,  1807,  1825,  1793,
    1795,  1825,     0,     0,  1825,  2045,  2046,     0,     0,     0,
       0,     0,  1037,    60,   968,   967,   996,   993,   992,   995,
     994,   989,  1050,     0,  1055,     0,  1075,  1072,  1074,    50,
      48,  1103,  1957,  2051,  2055,   335,   896,   271,   895,   327,
     330,   329,   331,     0,   315,     0,     0,     0,     0,   580,
       0,   588,     0,     0,     0,     0,   288,   895,     0,     0,
    1735,     0,   574,     0,     0,     0,   433,   989,     0,     0,
    1964,  1963,  1044,  1971,     0,    39,   392,    44,   705,     0,
     989,     0,  1042,  1041,     0,     0,     0,   963,     0,   955,
       0,     0,   172,     0,     0,     0,     0,    77,     0,  1197,
     224,     0,     0,     0,     0,     0,     0,     0,  1013,  1014,
    1015,  1016,  1024,  1017,  1018,  1019,  1026,  1031,  1020,  1021,
    1027,  1028,  1029,  1022,  1030,  1012,  1025,  1023,  1032,     0,
    1011,  1036,  1033,  1035,  1034,     0,   250,     0,     0,     0,
       0,     0,     0,     0,     0,   160,     0,     0,  1041,     0,
       0,  1041,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1041,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   196,     0,  1099,  1098,   226,     0,     0,     0,
       0,     0,   748,     0,   748,     0,     0,     0,     0,     0,
      52,    51,   156,     0,     0,     0,     0,     0,     0,    78,
      79,    83,    88,    81,    85,     0,   137,  1307,    90,     0,
       0,   118,     0,    93,  1063,   119,   104,   109,   110,     0,
       0,   111,     0,   112,   107,   108,   115,   116,   117,   120,
       0,     0,     0,     0,   145,   150,   233,     0,   230,   231,
    1100,     0,  1040,     0,  1987,  1988,  1986,  1985,   699,  2060,
      58,    57,    59,    68,     0,  1064,  1043,    75,    74,  1092,
    1100,   879,   877,     0,     0,     0,     0,  1908,  1900,  1902,
    1899,   917,   918,   919,     0,   922,   920,     0,   903,  1843,
       0,  1079,     0,  1802,     0,  1803,     0,     0,     0,     0,
       0,  1776,     0,  1792,  1677,  1079,     0,  1775,  1773,  1830,
    1830,  1772,  2044,  2043,  1037,     0,   968,   996,   993,   992,
     995,     0,     0,  1053,     0,   987,     0,   978,   987,   985,
     987,   981,     0,     0,     0,     0,  1037,   990,  1054,     0,
    1052,  1077,  1078,  1094,  1076,     0,   328,   798,   798,   798,
     314,     0,   603,     0,   602,     0,   798,   798,   798,   798,
     798,   798,   798,   798,   626,   625,   275,   338,   590,   592,
     593,   594,   595,   596,   599,   597,   600,   598,   601,     0,
     581,     0,     0,     0,     0,   287,   285,     0,   286,   284,
     279,   324,     0,   296,     0,   798,   798,   798,   798,   798,
     798,   798,     0,   798,   798,   333,     0,   798,   798,     0,
     798,   798,   798,     0,   798,   332,   798,   798,   798,   798,
       0,   798,   798,   798,   798,   408,  1913,  1914,     0,   338,
     336,   361,   362,   423,   631,   633,   636,   634,     0,   638,
       0,  1700,     0,   569,     0,   553,   554,   523,   522,     0,
    1053,  1044,  1103,  1044,     0,  1973,  1959,   317,    41,    40,
       0,    42,   704,     0,     0,     0,   759,   950,     0,     0,
       0,     0,     0,   170,     0,   198,     0,     0,   759,     0,
    1198,     0,     0,   173,   175,   166,   223,     0,     0,     0,
     253,   176,     0,     0,     0,     0,     0,   958,   960,  1100,
       0,   759,   181,     0,   759,     0,   182,     0,     0,     0,
     184,     0,     0,     0,     0,   759,   186,     0,     0,     0,
     185,     0,     0,     0,     0,     0,     0,     0,   188,     0,
     167,   197,   236,     0,   740,   739,   753,     0,     0,   753,
       0,     0,     0,   741,   738,   737,     0,   913,   914,   915,
     869,   801,    84,    89,    82,    86,    91,     0,   953,     0,
       0,   102,   101,     0,     0,     0,     0,    94,  1063,   105,
     227,     0,   951,     0,  1107,  2001,  1989,  1990,  1045,     0,
    1046,     0,     0,  1892,     0,  1906,  1905,  1907,     0,   902,
    1858,  1859,  1857,  1855,  1856,  1845,  1783,  1788,  1787,  1734,
    1084,  1083,  1801,  1823,  1824,  1688,  1672,  1671,  1673,  1044,
    1825,  1053,     0,  1003,   997,   999,  1000,  1002,     0,  1044,
    1948,    61,  1004,   980,   988,     0,   979,     0,   986,   987,
     987,     0,     0,   974,   973,     0,     0,  1006,  1056,  1073,
     799,     0,     0,     0,   614,   798,   798,   274,   338,   605,
     607,   608,   609,   610,   613,   611,   612,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   339,  1828,   798,
     276,   338,   583,   585,  1108,   318,   319,   282,   281,   280,
    1910,     0,     0,     0,     0,     0,   289,   291,     0,     0,
     273,   297,   298,   637,     0,     0,     0,     0,     0,     0,
       0,   798,     0,     0,   798,     0,     0,   424,     0,     0,
       0,   646,     0,     0,     0,     0,     0,   367,   368,     0,
       0,     0,     0,   867,   825,   824,   823,     0,   825,     0,
     394,   396,   397,     0,   867,     0,   635,   895,   630,   632,
       0,     0,   387,   388,   389,   386,   385,     0,  1750,   575,
     526,   524,   525,     0,     0,  1070,  1960,   393,     0,  1934,
    1933,     0,  1926,  1944,  1944,  1929,     0,     0,     0,   759,
     237,   760,     0,   964,     0,   169,   942,  1203,  1203,  1194,
     945,  1190,   941,   949,     0,  1167,   939,  1194,   943,     0,
    1203,   956,     0,   759,   240,   759,     0,     0,     0,     0,
       0,     0,   251,     0,     0,     0,   168,     0,   759,   244,
     759,   242,     0,     0,     0,     0,     0,     0,     0,     0,
     759,   246,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   767,   761,   762,   763,   764,     0,     0,
       0,   751,   751,   753,     0,   753,     0,   742,   157,     0,
     803,    99,    95,    96,     0,  1062,   113,   114,     0,   953,
       0,   103,   232,     0,   952,  1101,  2002,     0,     0,     0,
    1057,  1093,     0,  1891,   923,  1784,  1785,  1780,  1005,    61,
       0,     0,  1070,   982,   983,     0,     0,   975,   984,     0,
       0,     0,     0,     0,  1008,  1009,  1007,  1001,   374,   375,
     373,     0,     0,  1828,     0,   587,  1865,  1866,  1862,  1860,
    1861,   616,   629,   628,  1863,  1864,   622,   627,   618,   624,
     615,   617,  1852,  1851,  1853,   621,  1854,   591,     0,  1828,
       0,     0,   278,  1849,  1850,  1847,  1846,  1848,   294,   292,
     293,   295,   290,   301,   300,   302,     0,     0,     0,   299,
     350,   345,   356,   347,   348,   349,   369,     0,   358,   340,
       0,   383,   384,   382,   363,   370,   343,   344,   372,   351,
     371,   647,     0,     0,   650,     0,   346,   381,   379,   376,
     378,   377,   380,   359,   352,   353,   355,   354,   366,   357,
     390,   341,   342,   409,   868,   826,   867,     0,   867,   895,
     408,     0,     0,     0,   825,   412,   867,     0,   850,  1181,
    1134,  1125,  1203,  1128,  1127,   886,  1194,  1139,  1187,  1184,
       0,  1189,  1186,  1160,  1159,  1176,  1177,  1158,  1163,  1147,
     886,   886,  1146,  1180,   886,  1164,  1162,  1166,     0,  1167,
    1188,  1172,  1161,  1165,  1182,  1157,     0,  1179,  1203,  1194,
    1194,  1143,  1178,   886,     0,  1170,  1203,   399,  1207,  1145,
     893,     0,     0,  1203,  1205,  1190,   337,     0,     0,     0,
       0,     0,  1751,  1753,  1760,     0,     0,  1961,  1944,     0,
    1975,  1091,  1090,  1098,     0,     0,  1917,  1915,  1938,  1932,
    1936,     0,   200,   238,   965,     0,     0,  1204,   936,   937,
       0,   947,     0,   948,  1192,  1191,  1168,   940,   946,   944,
     162,   938,   165,   241,   239,     0,     0,   206,   207,   208,
       0,     0,     0,     0,     0,   178,     0,   180,   245,   243,
     199,   210,   183,   158,     0,   211,     0,   216,   214,     0,
     247,   187,     0,     0,   194,     0,   192,     0,   193,     0,
     195,   163,   768,     0,   769,   755,   754,   745,     0,   750,
     749,     0,   746,     0,   756,   870,   954,   100,    97,    98,
     228,     0,  1095,  1068,  1067,  1047,     0,    54,     0,   998,
    1943,  1942,  1949,  1947,  1961,   977,   976,   969,     0,   971,
       0,   991,     0,   620,   619,   606,     0,   623,   584,  1109,
     320,   321,   305,     0,   304,   310,   307,   306,     0,   364,
     365,     0,     0,     0,     0,     0,   652,     0,   648,     0,
     391,     0,   425,     0,   422,   395,     0,   867,   821,   822,
     411,     0,   406,   413,     0,     0,     0,  1133,  1126,  1144,
     880,   891,   889,   883,  1169,   887,   888,  1130,   886,     0,
    1142,  1185,  1183,     0,  1153,     0,  1148,  1156,   886,  1152,
    1168,  1171,  1173,  1175,     0,   886,  1141,  1140,  1150,  1137,
     415,     0,   398,   400,  1217,     0,     0,     0,     0,     0,
     126,  1211,     0,  1912,     0,     0,  1220,     0,     0,     0,
    1228,  1117,  1115,  1208,  1210,     0,   894,  1132,   893,   886,
     893,   415,     0,  1206,   415,   415,     0,     0,   568,   878,
     570,     0,  1763,  1761,  1762,     0,  1756,  1758,     0,     0,
     555,   557,     0,  1958,  1916,  1927,  1930,     0,     0,     0,
       0,     0,  1939,  1941,     0,     0,   966,     0,     0,     0,
       0,     0,     0,     0,     0,   254,   256,   252,   759,     0,
       0,     0,     0,     0,     0,     0,     0,   191,   189,   190,
     765,     0,   771,   752,   744,   743,     0,   753,     0,  1069,
       0,  1065,     0,  1058,  1059,  1893,  1946,     0,     0,  1010,
       0,     0,     0,     0,     0,     0,     0,     0,  1691,     0,
     311,   312,   309,     0,     0,     0,     0,     0,   651,     0,
     661,     0,     0,     0,   360,     0,     0,     0,     0,   414,
       0,     0,   865,     0,   864,  1075,   856,   858,   857,   851,
     882,   881,   885,     0,   884,  1129,   893,   804,     0,  1149,
    1174,     0,  1151,   419,   420,   421,  1138,   416,   418,     0,
    1223,  1233,  1235,  1234,  1224,  1222,     0,     0,     0,     0,
       0,     0,  1240,   715,  1214,  1239,  1230,  1231,  1232,     0,
       0,     0,  1236,  1237,  1238,  1225,  1221,  1226,  1212,  1213,
    1227,     0,     0,     0,  1209,  1219,  1131,  1135,  1136,  1122,
       0,  1123,  1124,   567,     0,     0,  1713,  1754,     0,  1752,
     576,  1760,     0,     0,     0,   556,  1962,  1100,  1928,  1931,
    1974,     0,  1937,     0,  1935,   201,  1201,  1199,  1202,  1200,
    1195,     0,   204,   205,     0,   248,   225,     0,   179,   212,
     215,   213,   218,   219,     0,     0,   773,   757,   758,     0,
     989,  1066,     0,     0,   970,   972,  1695,  1694,  1696,  1697,
    1699,  1698,  1693,   277,     0,   303,   308,     0,   657,   644,
       0,   642,   646,     0,   639,     0,     0,   655,     0,     0,
     407,     0,     0,     0,   841,     0,     0,   861,   892,   890,
     886,     0,   886,   417,     0,   734,   716,   717,     0,     0,
    1216,  1218,  1118,     0,  1223,  1704,     0,     0,  1705,  1714,
       0,  1736,  1757,   878,     0,     0,     0,     0,     0,  1940,
       0,   255,     0,   770,     0,   794,   793,   795,   766,     0,
     747,  2005,  1061,  1060,  1692,   645,     0,   643,     0,     0,
       0,   663,   641,   649,     0,   656,   830,   836,     0,   860,
     841,  1075,     0,   798,     0,     0,   855,   854,   401,   842,
     843,   845,   846,   849,   863,     0,  1154,   805,  1155,     0,
    1215,  1229,     0,  1702,     0,  1708,  1706,  1717,   878,   577,
    1759,   563,     0,   558,     0,  1945,  1193,   177,   772,     0,
       0,     0,     0,     0,     0,   788,   775,   776,     0,  2021,
     658,     0,   648,   666,   662,     0,   640,     0,   402,   831,
     832,   834,   403,   837,   838,   840,     0,     0,   404,   866,
     848,     0,   853,   852,   844,  1075,   807,     0,  1709,     0,
    1715,     0,     0,     0,   571,     0,     0,  1746,     0,     0,
       0,     0,     0,     0,   529,  1745,  1737,  1744,   561,   562,
       0,   565,   559,   560,     0,     0,     0,     0,   783,     0,
     781,     0,   777,   779,   778,     0,   774,  2006,     0,  2007,
       0,     0,     0,   685,   664,     0,   833,   839,   405,   859,
     847,   862,     0,   811,  1119,     0,  1711,  1716,  1707,  1718,
    1719,  1736,  1738,  1741,  1739,     0,  1740,     0,     0,  1747,
     456,  1329,   504,   527,     0,     0,  1502,   531,   494,   454,
     455,   578,   497,   496,     0,   495,   493,   491,     0,   492,
     498,     0,   499,   500,   501,   502,   503,  1882,  1883,  1286,
    1285,  1287,     0,   564,   529,     0,   784,   786,   785,     0,
       0,     0,   790,     0,   791,     0,     0,  2015,     0,     0,
       0,     0,   798,     0,     0,   798,   798,   798,   798,   680,
     686,   688,     0,   835,   808,   809,   810,     0,   806,  1121,
    1120,  1207,  1710,     0,  1703,  1701,   529,   572,  1743,  1742,
    1748,  1749,     0,     0,   540,   506,     0,     0,   447,   536,
     535,   537,     0,   473,   512,   530,   529,   529,   516,   534,
     507,   566,     0,   782,   780,   789,   792,     0,     0,     0,
       0,     0,  2008,  2010,     0,  2023,   659,     0,     0,   668,
     671,     0,     0,   798,   798,     0,     0,     0,     0,     0,
     665,   687,   798,     0,     0,  1116,  1712,  1724,  1727,  1726,
    1725,  1723,  1721,  1722,  1728,  1729,  1730,  1731,  1732,  1733,
    1720,   529,   457,   468,   471,   463,   505,     0,     0,     0,
     532,   475,   529,     0,   529,     0,     0,     0,   787,  2022,
       0,     0,     0,     0,  2009,     0,     0,  2016,  2018,     0,
    2027,     0,   653,   659,   678,     0,   679,     0,   673,     0,
     676,   669,     0,   667,   670,   696,     0,     0,   692,   693,
     691,   689,     0,     0,   682,     0,   817,     0,   816,     0,
     813,   812,   573,     0,     0,   529,   464,     0,   538,     0,
     448,   487,     0,     0,   489,   519,   517,   509,   509,  2013,
    2014,     0,  2011,     0,     0,  2017,     0,     0,  2034,   660,
     654,   106,   672,     0,   675,     0,   694,   695,   685,   681,
       0,   690,   819,   820,   818,     0,     0,   465,   471,   461,
     469,   529,     0,     0,   528,     0,     0,     0,   529,   515,
     490,     0,     0,   508,   510,   514,  2012,  2020,  2019,  2025,
    2026,  2024,  2029,     0,  2032,     0,  2031,     0,  1993,   674,
     677,   684,   683,     0,     0,     0,   462,     0,     0,   460,
     539,   445,   529,  1868,  1867,     0,   477,     0,   476,   474,
       0,   520,   529,  2033,  2028,     0,     0,  2035,  2037,   815,
     814,   466,     0,   529,     0,   529,     0,   878,     0,     0,
       0,   488,     0,   529,  2030,     0,     0,     0,   458,   529,
     446,   451,   478,   479,     0,   485,   483,     0,     0,  2038,
    2036,   529,   529,   447,   450,     0,   481,  1880,  1872,   482,
    1873,     0,     0,   521,   518,   529,   529,   452,   480,  1881,
       0,   486,  1879,  1877,     0,  1876,   529,  1869,  1875,  1871,
    1874,  1878,     0,   484,  1870
  };

  const short
  Parser::yypgoto_[] =
  {
   -2463, -2463,  2977, -2463,     2,  1282, -2463, -2463, -2463, -2463,
   -2463, -2463,  -619,     1,  2964,  -741,  2104, -2463, -2463, -2463,
   -2463,   438, -2463, -2463,  2473, -2463,  1878, -2463,   426,  3164,
   -2463, -1052, -1016, -2463, -2463,  -624, -2463, -2463, -2463,  -567,
   -2463, -2463, -2463, -2463, -2463, -2463, -2463,  1235, -2463, -2463,
   -2463, -2463, -2463, -2463, -2463, -2463, -2463,  -635,  -569, -2463,
   -2463,  1122, -2463, -2463, -2463, -2463,  1121, -2463, -2463,  1117,
    -585,  1512,  1748, -2463, -2463, -2463,  1764,  1239,   -19, -2463,
    -747,  1078,    93,  -107,   -50, -2463, -2463, -2463,  1076, -2463,
    -953, -2463,   817, -2463, -2463, -2463,   531, -1558, -2463, -2463,
     819,  -594, -2463,   384, -2463,   227,  3023,    43, -2463, -2463,
   -2463, -2463,  -308, -2463, -2463, -2463, -2463,   -28, -2463, -2463,
   -2463, -2463, -2463, -2463, -2463,  -211, -2463, -2463,  -105, -2463,
   -2463,  -208,  -114, -2463, -2463, -2463, -2463, -2463, -2463, -2463,
   -2463,  -922,  -287, -2463,   -22, -2463,  -173,   -18, -2463,   -16,
   -2463,  -109, -2463, -2463, -2463, -2463, -2463, -2463,   -14, -2463,
     -13, -2463,   -12, -2463,    -9, -2463,    -7,    -5,    -4,    -3,
   -2463,    -2, -2463,  2962,  2967, -2463, -2463,  2970, -2463,  -367,
   -2463, -2463, -2463, -2463,  2410, -2463, -2463,  2418, -2463, -2463,
   -2463, -2463,  2422, -2463, -2463, -2463, -2463, -2463, -2463, -2463,
     926, -2463, -2463, -2463,  1195,  1802, -2463, -2463,   968, -2463,
   -1364, -2463, -2463, -2463, -2463, -2463, -1317, -1293, -1328, -2463,
   -1244, -2463,   429,   866,  1432,  1431,  1444, -2463, -2463,   323,
     194, -2463, -2463, -2463, -2462,   -90, -2463, -2463,   192, -2463,
   -2463, -2463, -2463, -1819, -2463,  -146, -2463, -2463,  -152,  -148,
   -2463,    42, -2463, -2463, -2463, -2463, -2463,  1792, -2463, -2463,
   -2463,  -605,  -827, -2463,   605, -1714, -2463, -2463,  1692,  1043,
   -1691, -2463, -1572, -1354, -2463, -1494,   355, -2463, -2463, -2463,
   -2463, -2463, -2463,   279, -2463,    74, -2463, -2463,  -547, -1459,
   -2463, -2463,   625,   199, -2463, -2463, -1598, -2463, -1410, -1636,
   -2463, -2463, -2463,   207, -2463, -2463,   206,   270, -2463,   262,
   -1127,   896, -2463, -2463,  -940,   330, -2424, -1019,   340,  -992,
   -2463, -1818, -2463, -2463, -1795, -2231, -2463, -2463,  -928, -1170,
     -20,  2287, -2463, -2463,  1619,  3099, -2463, -2463, -2463,  1954,
    3101,  -285, -1093,  1434,  1505, -2463,  1345,  -942, -2463,  2110,
   -2463, -2463, -2463,  -467,  1892, -2463, -2463, -2463, -2463,  -277,
   -1260, -2463,  1581,  1894,  1896,  1897,  1904, -2463, -2463, -2463,
    -908, -2463, -1005,   986, -2463,  2328,  -783,  2138, -1090,  1317,
   -2463, -2463,  2526,  2238,  -507, -2463, -2463, -2463,   397,  1367,
   -2463,   407, -2463,  -603, -2463,   333, -2370, -2463,  -549, -2463,
   -2463, -1465,   607, -1856, -1525,   568,  -525, -1038, -1040,   -25,
     -10,  -772,  -767, -2463,  1008, -2463,  2527,   -63, -2463, -2463,
   -2463, -2237, -2463,  -476,   909, -2463, -2463, -2463, -2463, -2463,
     877,   880,  -451,  1478,   133,   -48, -2463,    96, -2463,   653,
   -2463, -2463, -2463, -2463, -2143, -2463,     7,    18, -2463,   203,
     462, -2463,  1459, -2463,  1339, -2463, -2463,  1945, -2463,   -15,
   -2463,   404,  2512, -2463, -2463, -2463, -2463, -2463, -2463, -2463,
   -2463, -2463, -2463, -2463, -2463,   486,   184, -2463, -2463, -2463,
   -2463, -2463,   645, -2463, -2463,   466, -2463, -2463, -2463, -2463,
   -2463, -2463,  2316, -2463, -2463,  -537,   -17,  -430, -2463, -2463,
   -2463,  1148,  2289,  1958, -1711, -2110,  -314, -2368, -1844, -2463,
   -2463, -2463,  -202,  -160, -2463, -2463, -2463, -1458, -2463, -2463,
   -2463, -1359,  2357,  2025, -2463,  2028, -2463, -2463, -2463, -2463,
   -2463, -1556, -2463, -2463,  2565, -2463, -2463, -2463, -2004, -2463,
   -2463,   635, -2463, -2463, -2269, -1512, -2463, -1909,  1092, -2463,
   -2463, -2463, -2463, -2463,   790, -1009,  3097, -2463,  2536,  2215,
   -2463, -2463, -2463, -2463, -2463, -2463,  2065, -2463, -2463, -2463,
   -2463, -2463, -2463, -2463, -2463, -2463, -2463, -2463,    90, -2463,
   -2463,    26, -2463, -2463, -2463, -2463, -2463,  -111, -2463, -2463,
    -130, -2463, -2463, -2463,  1971, -2463,  1380,  2665,  2403, -2463,
   -2463, -2463
  };

  const short
  Parser::yydefgoto_[] =
  {
      -1,    28,    29,    30,    31,   533,   664,  1671,    32,    33,
      34,    35,    36,  1636,    38,   761,    39,    40,  1135,  1136,
    1471,  1231,   545,   546,   547,   800,   801,  1137,   999,  1309,
     763,   764,   765,  1086,  1087,  2498,   766,  1096,  1429,   767,
     768,   769,   770,   771,   772,  1457,  1458,  1459,   773,   774,
     775,  1357,  2332,  2012,  2555,   911,   776,  1232,   777,   548,
      41,  1599,  1600,  1276,  1603,  1896,  1897,  1900,  1901,  1902,
     943,   979,   944,   945,  1257,  1258,  1259,  1638,   634,  1639,
    1878,  1640,  2179,  1641,  1642,  1262,  2193,  2174,  1957,  2429,
    1295,  1939,  1940,  1941,  2482,  1942,  2215,  2499,  2441,  2442,
    2500,  2646,  2647,  2648,    42,   659,    80,   647,    81,   962,
     953,  3290,  3148,  3149,  3255,  3331,  3344,  2998,  2999,  3072,
    3203,  3000,  3073,  3248,  3144,  3249,  3285,  3327,  3145,  3204,
    3288,  3207,  3084,  3151,  3211,  3295,  3346,  3257,  3352,  3351,
    3258,  3152,  3153,  3077,  3002,  3156,  3263,  3003,  3004,  3005,
    3157,  3089,  3155,  3262,  3261,  3322,  1659,  1963,  3006,  3078,
    3007,  3008,  3009,  3082,  3010,  3011,  3012,  3013,  3014,  3015,
    3253,  3016,   649,    82,    83,    84,    85,    86,   954,   955,
    2530,  2705,  2940,  2941,   956,  3024,   957,   958,  1958,  2698,
    2981,  3141,   959,  1654,  2284,  2801,  2934,   941,  1880,  1881,
    1882,  1271,  1576,  1577,  1578,  1269,  1857,  1858,  1859,  1562,
    1579,  1580,  1581,  1582,  1861,  1862,  1583,  1584,  1585,  1586,
    1587,  1588,  2121,  1643,  1644,  1645,  1646,  1647,  2184,  2185,
    2613,  2426,  2610,  2834,  2757,  3172,  2764,  2830,  2831,  2963,
    3183,  3109,  3177,  3110,  3179,  3180,  3120,  3193,  3194,  3049,
    3050,  3051,    43,  1128,    44,   666,   983,   984,    45,    46,
     778,  2637,   779,  2662,   780,   781,   782,   783,  1748,  2369,
    2050,  2577,  1980,  1981,  2044,  2582,  2046,  2363,  2364,  2572,
    2736,  2818,  2885,  2948,  2887,  2949,  2956,  2819,  1850,  1851,
     784,  1080,  2638,  2483,  2973,  3058,  3200,  2216,  2205,  2206,
     895,  2898,  2899,  2900,  2902,  2903,  2904,  2848,  2849,  2850,
    2851,  2217,  2852,  2853,  2629,  2838,  2622,  2623,  2624,  2218,
    2060,   812,   833,   834,  1481,  1142,  2455,  2456,  2457,  2507,
    1648,   829,   825,  1162,  1163,  1164,   599,  1417,  1157,   826,
    1165,   560,  1173,  1999,  1304,  2073,  1769,  1756,  1024,  1025,
     991,  1681,  1307,  1233,  1234,  1542,  1543,  1544,  1841,  1835,
    1546,  1547,  1235,  1236,  1237,  1238,  1239,  1240,  2106,  2107,
    2103,  2104,  1349,  1350,  1355,  1124,  1125,  1305,  1475,  1476,
    2080,    47,   613,   614,   907,  1243,  2387,  2583,  2584,  1771,
    1790,  2383,  2581,   622,   623,  1247,  1553,  1554,   854,   855,
    1198,  1199,  2290,   803,  1248,  2384,   785,  1828,   786,  1241,
     787,   640,   917,  1785,  1885,  2410,   788,   937,  2267,  2682,
    3061,  2268,  2269,  2270,  2271,  2272,  2273,  2274,  2462,  2275,
    2313,  2314,  2311,  1002,  2307,  2308,  2514,  2502,  2503,  2504,
    2669,  2654,  2675,  2664,   789,   515,   516,   517,  3018,   518,
     519,   566,   520,  1818,  1217,   877,   878,   879,  1213,  2459,
    2597,  2598,   960,  1951,  2696,  2918,  2867,  2976,  3064,  2798,
    2799,  2923,  3065,  3066,  3140,  1281,  2869,  2935,  2936,  2937,
    2281,  2282,  2283,  2525,  2526,  2527,  2528,    48,   919,    49,
      50,   601,  1192,   602,  1511,   839,  1589,   858,   604,   605,
     606,   859,  1175,  1501,  2180,  2135,  1805,  2123,  2124,  2125,
    3297,  3366,  3367,  3368,  3350,  3369,  3360,  3022,   568,    51,
     569,  1146,   818,   819,  1153,   820,  1151,   821,  1488,  1891,
    2505,  1649,    52,   524,   668,   986,  1973,  1974,  1975,  1976,
    2299,  2300,  2541,  2542,  2392,  2296,    53,  1829,  1830,   610,
      54,    55,   629,    56,  2533,   973,    90,    91,   655,   656,
    2294,    57,    58,   527,    59,   794,   795,  1466,    60,    61,
      62,   530,  1122,   792,  2077,  2889,  3037,  3102,  3103,  3105,
    3167,  3168,  2959,  3170,  3271,  3228,  3275,  3276,  3278,  3307,
    3308,    63,   900,   901,   902,    64,    68,   631,   927,  1131,
      65,    66
  };

  const short
  Parser::yytable_[] =
  {
     513,    37,   603,   567,   600,   513,   811,   815,   561,   933,
     922,  1118,   642,   830,   513,   513,  1362,  1077,  1394,  1375,
    1393,   916,   914,   626,  1129,   562,  1197,  1661,  1297,  2543,
    1849,    37,  2136,  2052,  1391,  2110,   563,  2501,   513,   850,
    1673,  1810,  1811,  2519,  1428,  1744,  1745,  2417,  1903,   884,
     936,  1310,  1311,  1753,  1754,  1755,  2108,  1012,  2054,  2288,
     645,  1668,   618,   887,  -325,   513,   513,  -589,  1496,  2600,
    1176,  1082,  1083,   912,   630,   978,  2506,  1943,  1082,  1083,
     513,  1430,  1431,  -604,  1123,  1435,  1436,  1437,  1438,  -326,
    1441,  1443,  1444,  1445,  1446,  1447,  1448,  1449,  2421,  1852,
    1853,  2423,  2470,  3123,   989,  1116,  -582,  1869,  1870,  1871,
    1872,  1873,  1874,  1875,  1876,  2291,  2004,  1972,  1591,  1398,
    1116,  1082,  1083,  1013,  1793,  1794,   648,  2048,  1795,  2677,
    1082,  1083, -1837,  1506,  1082,  1083,  1082,  1083,  1807,  2019,
    1898,  1114,  2021,  -634,  2760,  2295,  1904,  1905,  1906,  1907,
    1908,  1909,  1910,  2031,  1912,  1913,  1082,  1083,  1915,  1916,
    3031,  1918,  1919,  1920,  1604,  1922,  1551,  1923,  1924,  1925,
    1926,  1960,  1929,  1930,  1931,  1932,  1082,  1083, -1828,   974,
    1026,  2148,  2149,  2150,  2151,  2450,  1287,  2842,  1073,  1074,
    1075,  1256,  1133,  1116,  2161,  2162, -1039,  2451,  1860,  1115,
    1051,  2168,  1666,  1082,  1083,  2175,   528,  1082,  1083,  1082,
    1083,  2452,  3086,  1082,  1083,  2197,  1256,  1123,   -73,  2199,
     837,   564,   861,   572,   550,  1944,  1318,  2440, -1838,  1143,
    3181,   809,  1604,  1509,  1865,  3098,  1082,  1083,  2211,  1123,
    2011,  1082,  1083,  1082,  1083,  1863,  3099,  1679,  1697,  2045,
    1450,  3205,   866,  1082,  1083,  2777,  1737,  1082,  1083,  2631,
    2346,   525,  1883,  1187,  2678,   814,  1082,  1083,  1116,  1864,
    1327,  1274,    17,   827,  3032,   896,  1158,  1552,  1205,  1077,
    1161,   963,  1665,  1082,  1083,  2536,  1961,  1890,  2697,  1082,
    1083,  1082,  1083,  1082,  1083,  1082,  1083,   572,   550,  1082,
    1083,  3205,  2208,  2599,   923,  2835,  1082,  1083,  2603,  1531,
    1082,  1083,   898,  2136,   881,  2608,  1615,  3269,  1866,  1722,
     660,  1201,  1082,  1083,   639,  1204,   620,  1082,  1083,  1006,
    1208,  1082,  1083, -1909,  1013,  1082,  1083,  1082,  1083,   790,
    1043,  2171,   909,  1082,  1083,  2665,  2694,  2839,  1219,  1220,
    1082,  1083,  1082,  1083,  1302,  1144,  1082,  1083,   806,   860,
    2839,   890,  2371, -1039,  2373,  1250,  1477,  1082,  1083,   885,
    1792,   856,  1687,  2212,  1116,  3087,  1474,  1082,  1083,  2843,
    1615,  1082,  1083,  3059,   925,   531,  1082,  1083,  1052,   532,
    3165,  1082,  1083,  1655,  2427,  2842,  2111,  2112,  2057,  1082,
    1083,  2737,  1499,  1082,  1083,  1013,  2547,  2303,  1082,  1083,
    2919,  1593,  2891,  2140,    67,  1700,  1082,  1083,  2153,    25,
    2138,   -73,  2172,  1772,   857,  3166,   607,  1082,  1083,  2815,
    1117,  2323,  3033,  2324,  1775,  1206,   -73,  1779,  1082,  1083,
    2141,   -73,  2428,  2626,  2809,  1117,  2338,  1084,  2339,  1533,
    1085,   886,  2167,  1218,  1084,  2170,  1657,  1085,  2350,  2920,
    2892,  1221,  2297,   926,  1433,  2803,  3060,  1224,  1425,  3100,
    3040,  2909,   630,  1451,  1770,   910,  1082,  1083,  1658, -1039,
     565,  2816,  2738,  2969,  1325,  2454,  1669,  1303,   609,  1077,
     813,  1394,  1532,  3041,   823,  2695,  1564,  1084,  1026,  1452,
    1085,   -73,  1406, -1039,   835,  1007,  1084,  1127,   793,  1085,
    1084,  1507,  1084,  1085,   852,  1085,  1044, -1254,  1117,  1656,
     899,  3270,  2091,   513,  3196,  2173,  1145,  2790,   891,  1011,
    1013, -1909,  1084,  1434,  2709,  1085,  1637,  1082,  1083,  1082,
    1083,  1145,  1625,   513,   621,  2971,  1899,   513,   561,  2362,
    1455,  1623,  1084,   616,   791,  1085,  1604,   513,  1082,  1083,
    3088,  1275,  1532,  2868,  1013,   562,  1593,   513,   809,  2136,
     596,  1965,  2870,  1966,  2136,   810,   563,  3107,  2439,  1084,
    2548,  2136,  1085,  1084,   838,  1084,  1085,  2843,  1085,  1084,
    3124, -1039,  1085,  1117,  1524,  -410,  1483,  1510,  2049,  2213,
     989,  1286,   513,   -73, -1039,  1319,  1625,  1684,   526,  1594,
    1550,  1808,  1084,   -73,   513,  1085,   513,  1084,  2627,  1084,
    1085,  2679,  1085,   924,   513,   513,   513,   946,   969,  1084,
      37, -1837,  1085,  1084,   513,   513,  1085,  2924,   882,  1082,
    1083,  2636,  1084,   513,    17,  1085,  1082,  1083,   797,   513,
     513,  2155,  1943,  1665,  3182,  1796,  2833,  3101,  1962,  1084,
    1013,  1013,  1085,  2549,  1513,  1084,  1453,  1084,  1085,  1084,
    1085,  1084,  1085,  2471,  1085,  1084,  1013,  2601,  1085,  1197,
    1197,  1517,  1084,  2291,  1518,  1085,  1084,  1521,  2817,  1085,
    2650,  1077,   968,  1082,  1083,   513,  2367,  1081,  1084,  1117,
    2372,  1085,  1098,  1084,   862,  2084,  1085,  1084,   947,  1667,
    1085,  1084,    17,  1084,  1085,  2061,  1085, -1039,  1592,  1084,
    1013,    92,  1085,  2388,  1082,  1083,  1084, -1838,  1084,  1085,
    2531,  1085,  1084,  2535,   867,  1085,  1680,  1813,   975,  2092,
    3143,  1821,  2154,  1084,  1817,  1053,  1085,  3188,  3189,  1860,
     513,  1134,   529,  1084,  1082,  1083,  1085,  1084,  2897,  1076,
    1085,   564,  1084,  1847,  1594,  1085,  3034,  1084,  2066,  2067,
    1085,  1670,  1615,  2453,   897,  1084,  2534,  2025,  1085,  1084,
    2846,  2847,  1085,  2422,  1084,  1865,  2424,  1085,  2214,  1854,
    3247,    25,  1084,  1752,  1766,  1085,  1863,  1082,  1083,  2306,
    1944,  1082,  1083,  1084,   513,  2556,  1085,  1698,  2361,  1082,
    1083,  1883,  1738,   567,  1084,  2778,  1777,  1085,   561,  2347,
    1864,  1185,  1179,   619,  1188,  -325,  1184,  1260,  -589,  1877,
   -1909,   -73,   513,   513,   513,   562,   513,   513,   513,   513,
    2074,  1708, -1039,   513,  -604,  1877,   563,  2632,  3197,   513,
    -326,   513,  1084,   513,  1098,  1085,   513,  2842,  1252,    25,
    1013, -1254,  1412,  1637,   -73,  1413,   -73,  -582,  1877,  1866,
     948,  1412,  1494,  1595,  1704,  1082,  1083,  1726,  1723,   827,
    1727,  2374,  1013,  2750,  1261,  1778,  2739,  2550,  2794,  2628,
     980,   981,  1947,   513,  1327,   513,   513,  1637,  1637,  2875,
    1674,  1011,  2776,   949,  -634,  1877,  1637,  1101,  1597,  3243,
     513,   513,   810,  1084,  1263,  1084,  1085,  1693,  1085,  1298,
    2051,  1277,  2136,   978,  1082,  1083,  1082,  1083,  1394,  1279,
     -73,  1394,  1637,  2292,  1084, -1955,   513,  1085,   624,   513,
     513,  2203,   513,  2156,  1694,  2786,  2787,  1798,  1696,  3198,
    2335,   513,  1806,  2336,  1701,  1296,  1296, -1039,  1082,  1083,
    1652,  1300,   513,  1013,   513,   513,  1816,  1082,  1083,  1011,
     513,   513,   513,  1013,  1013,  1013,   513,   -73,  3075,   -73,
     -73,  3199,  2708,  1154,  2348,  1686,  2725,  2349,  2846,  2847,
    1082,  1083,   928,  2547,  1082,  1083, -1953,  1691,  1625,   513,
    2522,  1692,  1082,  1083,  2938,   948,    17,  3190,  3054,  1302,
    1702,  2523,  1076,   513,   632,  1084,  2377,  2574,  1085,  2575,
     565,  1076,  1084,  1082,  1083,  1085,  1832,  1703,  1414,  1189,
    -879,   564,  1712,  1706,  -708,  1077,    17,  1715,   961,  1718,
    3318,  1082,  1083,  1719,  1351,  1596,   628,  1352,   513,  2843,
    1721,  1394,   633,  1454,  1747,  1148,  3339,  1155,  3317,  1101,
    3319,  3229,  1927,  1597,  1468,  1831,  1751,  2706,  2879,  1084,
    2957,  2333,  1085,  1082,  1083,  2334,  1844,  1845,  1482,  2352,
    2109,  2353, -1955,  1225,    70,  2412,  3333,  2727,  1463,  1819,
    1820,  1716,  1190,  1720,  1952,    17,  1047,  1730,  2126,  2127,
    1084,   793,  1415,  1085,  1982,  2884,   513,  1000,  1741,  2522,
     513,  2113,  1098,  1767,   513,  2805,   513,   513,  1746,  1474,
    2523,   513,  1749,   513,   950,  1289,  2806,  2062,   513,   513,
    1084,   513,  2302,  1085,  2139,  2163,  2164,  2165,  2166,  2880,
    2327,  3070,  1314, -1953,  2328,  3076,   816,   561,  2068,  2329,
    2186,  1260,  2672,  1964,   561,  2524,  1598,  2337,   688,   689,
     636,  3244,  1302,  1055,   562,  2947,  2450,  2548,  2340,   513,
    2673,   562,  2042,  1084,   513,   563,  1085,  1084,  2451,  2341,
    1085,    71,   563,    25,  2056,  1084,   635,  1838,  1085,  2157,
    2158,    77,  2452,  1082,  1083,  1551,  1682,  1519,  1520,  2811,
    2970,    72,  1560,  2065,   572,   550,  2000,  2450,  1261,  2413,
    2000,  3055,   513,   513,  2431,  1534,  2433,  2342,  -879,  2451,
     513,  1839,  1953,  1954,  1082,  1083,  2116,  2939,  1464,   695,
    1327,  1076,   929,  2452,    93,  2091,  1082,  1083,  1263,   951,
    1566,  1098,    25,  1762,  1504,   572,  2465,  2430,  1559,  2643,
    2552,  1084,  1332,  1013,  1085,   513,  1928,  1302,   930,   950,
    1660,  1837,   975,  1842,  2524,   513,  1567,  3071,   513,   513,
     688,   689,  1048,  2136,  1156,   513,  1098,  2579,   513,   513,
    2345,  2090,  2181,  2087,   513,  2182,  2881,  1191,  1705,  3178,
     565,  1567,  3184,  1011,   952,  1368,  2545,  2117,  1568,  2351,
    1084,  2715,  1084,  1085,   608,  1085,  1552,  1110,  1111,  1112,
    1113,    17,  2464,  2467,  2088,  2947,  2469,  1101,  1535,  1416,
    2553,  2554,  1149,  3056,   817,   637,  2414,  2136,  1181,  1182,
    1183,  1302,   704,  1186,  1084,  2478,   217,  1085,  2686,  2562,
    2688,   695,  1935,  1084,  2865,  2143,  1085,  1203,  2644,  2178,
    1226,  2807,  1207, -1828,  1760,  2089,   513,   513,  1536,  2866,
     564,  1264,  2287,  1336,  2674,    73,  1084,   564,  2409,  1085,
    1084,  1936,  1098,  1085,   951,  1705,   663,   644,  1084,  1537,
    2354,  1085,  2844,    69,  2911,  2820,    72,  2356,  2729,  2580,
    1371,     1,  1538,  2645,  2561,  2419,   535,  1569,  2420,  1084,
    2118,   646,  1085,  1485,  1570,  2845,  2605,   513,  2607, -1039,
     521,  1955,  1292,  1782,  3279,   716,  2144,  1084,    70,  1783,
    1085,  2036, -1963,     2,  1486,    87,   658,  1840,  2880,   952,
    1123,   665,  1571,  1076,  2358,  2183,  1282,  1763,  1284,   717,
    1969,  1970,  1465,   796,   704,  2618,  1101,   688,   689,  1084,
    2846,  2847,  1085,  1106,  1566,  1107,   667,  1571,    25,  1110,
    1111,  1112,  1113,  1567,  1381,  2360,  2779,  1487,  1637,    74,
       3,   806, -1039,  1337,  2550,   828,  1539,  1340,  1103,  1104,
    2821,  1101,   567,  2119,  1341,   688,   689,   561,    88,  2394,
    2587,     4,  2588,  1123,   513,  2378,   513,   513,   513,  1394,
    1867,  2292,   836,  1782,   562,  1567,   522,  2518,  2651,  1791,
   -1039,   840,  1568,     5, -1755,   563,   853,  1353,   695,  2145,
    1354,   513,   513,     6,     7,     8,  3201,   716,  1956,  1886,
    2635,   863,   513,   513,   513,  2652,  3079,  3080,  2567,   513,
    2639,     9,  2568,   864,  1572,  1637,  2318,  2642,  1637,   865,
    2569,   717, -1963,   513,  1082,  1083,   695,   880,  1551, -1963,
    1573,  1288,  2095,  2096,   888,  1342,  1574,    10,  1011,  1084,
     883,  1472,  1085, -1039,  2653,  2944,   889,  1101,  1800,    75,
     523,  2687,   513,  3112,   868,  1573,  3115,  3116,  3117,  3118,
    2160,  1574, -1828,   905,  1917,  2765,  2768,  2769,  1540,  3026,
    1084,  2772,  2146,  1085,  2176,  2177,  2590,  1103,  1104,   513,
    2952,  1569,  1084, -1039,   869,  1085,  2726,  3027,  1570,   565,
    3028,   704,   920,  3348,    89,   513,   565, -1039,  2953,  1571,
    1344,  2954, -1039,  1559,  1548,  1855,  1076,  1549,    11,   734,
    2305,  3348,  1103,  1104,  1683,  1967,    76,  1684,  -428,  1801,
     841,    77,   906, -1039,  3186,  3187,  2187,  1764,  2188,   704,
     513,  3348,    12,  3195,  1097,  2730,   870,  2731,  1525,  1552,
     871,  1571,  1541,  1765, -1039,  1685, -1039,  3158,  1684,    13,
     908,   536,    78,    14,   921,  3309,  3310, -1039,  3094, -1963,
   -1039,  1664, -1039,   939,    79, -1039,  2143,  1082,  1083,  2732,
     564,   892,   893,  2189,   716,  1197,   940,  2120,  2733,  2901,
    2905,  1106,  2116,  1107,   842,  2655, -1039,  1110,  1111,  1112,
    1113,  1098,   572,   550,  2591,  1534,  2557,  1663,   717,   894,
    2190,  2770,  1557,   513,   972,  2841,   661, -1039,  1103,  1104,
     532,   976,   716,  2860,  2693,   596,  2882,   843,   572,   550,
   -1039,   734,  1802,  1707,  2453, -1039,  1366,  1573,  1572,  3264,
    3264,   985,  2143,  1574,  2877,  1651,  2196,  2144,  1394,  2191,
     596, -1039,  2901,   513,  1346,  2460,  2905,  1076,  1098,  2454,
    2116,   513,  2974,  2117,  2416,  1082,  1083,   982,  1482,  2116,
     813,  2863,  1348,  2602, -1039,  2453,   987,  1637,  1856,  1573,
     988,  1892,  1893,   662, -1039,  1574,  1894,  1895,  2476,  2477,
     931,   932,   513,    15,   537,   992,  2466,  2265,  2746,  2747,
    2748,  2749,   993,  2751,  2752,  2143,  2147,   994,  1535,   995,
    1575,   872,  1855,  2144, -1039,  1803,   513,  3042,  3342,  3343,
    1106,   513,  1107,   513,  1108,  1109,  1110,  1111,  1112,  1113,
    2169,  2117,  2856,   996,  2858,  1575,  1098, -1039,   513,  2122,
    2117,   915,  2122,  2122,  2122,  2122,   997, -1039,  1536,  2202,
    2145,  1742,  3043,  2389,  1684,  1106,    16,  1107,   998,  1108,
    1109,  1110,  1111,  1112,  1113,  2003,  2132,  1099,  1684,  1537,
    1001,  2116,    17, -1039,   538,  1003,  2144,  1004,  2592,  1534,
      18,  2306,  1538,   513,  2912,  2913,    19,    20,  2593,  1005,
     873,  2058,  2207,  1100,  1684,  2594,  1008,  2689, -1039,   513,
    2691,  2692,   513,   513, -1828,  1009,  1101,   513,   734,  2063,
    1084,  1121,  2064,  1085,   513,  1010,  2145,  1011,  1421,    21,
    2309,  1014,   596,  1015,  3038,  1016,  3030,  2472,   513,  1017,
    2473,  1018,  2321,  2146,  2132,  1019, -1039,  2209,   513,   565,
    2210,   513,  2117,  2132,  1120,  1717,   734, -1039,   844,  2133,
    2038,  1106,  1076,  1107,   874,  1108,  1109,  1110,  1111,  1112,
    1113, -1039,  2343,  1101,   596,  1684,  1539,  1739,  1082,  1083,
    2379,  2538,  2883,  2064,  2539,  1856,  1022,  -878,  1126,  2145,
      17,  3044,  1535,  2484,   931,   932,  1028,    22,  1968,  2099,
      23,  2718,  1141,  2728,  2721,    24,  1684,  2194,  2195,  2146,
    3092,  2595, -1039,  2192,  1130,  2753,  2774,  1575,  2754,  2775,
   -1039,  1384,  1385,   513, -1039,  2945,  1029,  2133,   845,    25,
    -408,  1030,  1536,  1222,  1223,  2780,  2133,  2485,  2781,   513,
    1098,  2486,  2946,  2487,    26, -1039,  1031, -1039,  1032,  1804,
    1035,  1101,  1036,  1537,  1037,  2118,  1933,   572,   550,  1575,
    2910,  2782,  1139,  1038,  2781,  2407,  1538,  1557,  1039,  1040,
    1102,   513,  2146,  1041,  1045, -1039,  1046,  1103,  1104,  3045,
    1558,  2825,  3176,  2827,  2826,  1049,  2826, -1039,   875,  1050,
    1054,  2122,  2122,  2488,  3347,  1147,  2836,  3046,  1540,  2775,
    1534,  2837,  2840,  2894,  2775,  2775,  2895,   846, -1039,  2596,
   -1039, -1039,  2906,  1058,  2315,  2907,   931,   932,   513,  1969,
    1970,  3047,  1422,  1150,  2916,  1059,  2489,  2907,   847,  1174,
     876,  1060,   672,  1209,  1103,  1104,  1098,    25,  2119,  1152,
    2979,  2484,    27,  2982,  1178,  3173,  1061,  1105,  2826,  3231,
    1539,  1084,  1062,   848,  1085,  3154,  3176, -1039, -1039,  3232,
   -1039, -1039,  3233,  2040,  2449,  1296,  2857,  2147,  3234,  1063,
     849,  3235,  1541,  2101, -1039,  -878,  1210,  1394,  -408,  3274,
     513,     2,  1034,  2134,  3239,  2683,   513,  3240,   513,  2486,
     513,  2487,  2946,  1042,   539,   540,   513,   541,   542,   543,
    2475,  1211,  3304,  1535,  1933,  3305,  1056,  1057,  2480,  3176,
    1064,  2656,  1103,  1104,  1065,  2511,   544,  1066,   688,   689,
    1212, -1039,  1098, -1039, -1039,  -634,  1216,  1394,     3,  3306,
    2666,  2667,  2668,  2147,  1067,  2933, -1911,  1068,  1069,  2100,
    1070,  2488,  1245,  1536,  1071,  1101,  1604,  1971,  1072,     4,
    2529,  2134,  1605,  1606,  1119,  1394,  1214,  3274,  1227,  1228,
    2134,  1253,  1254,  1255,  1537,   513,  1265,  1266,  1267,  1268,
    1270,     5,  1540,  3251,  2489,  1272,  1394,  1538,  3306,  1273,
     694,     6,     7,     8,  1278,  1283,   951,  1285,  1607,   695,
    1098,  2128,  2129,  2130,  2131,  1294,  2147,  1299,  1116,     9,
    1098,  1312,  1608,  1317,  1306,  1320,   596,  1356,  1609,  1610,
    1106,  1365,  1107,  1611,  1108,  1109,  1110,  1111,  1112,  1113,
     698,  1366,  1367,  2759,  3048,    10,  1392,  1396,  1399,  1400,
    3185,  1407,  1408,  1409,  1410,  1411,  1418,  1612,  1432,   931,
    2490,  1101,  1423,  2447,  2448,  2491,  1541,  1439,  2458,  1461,
    1474,  2492,  1256,  1484,  1084,   816,  1613,  1085,  1424,   817,
    3315,  1539,  2120,  1491,  1492,  1493,   513,  1106,   639,  1107,
    3323,  1108,  1109,  1110,  1111,  1112,  1113,  1497,   513,  1500,
     513,  3329,   513,  1502, -1911,  1508,   813,  2479,  1512,  1614,
    1504,  2493,   704,  2508,  2509,  2510,    11,  1516,  2315,  1522,
    1545,  1555,  1561,  1565,  3236,  3237,  1103,  1104,  1563,  3355,
    3356,  1602,  1482,  2102,  1664,  1653,  1670,   513,  1302,  1676,
      12,  1688,  1690,  1695,  1077,   513,  2633,  1101,  1699,  1705,
    1711,  1743,  1714,  2933,  1725,  1784,  1728,    13,  1729,   513,
    1740,    14,  1757,  1758,  1759,  1106,  2649,  1107,  -138,  1108,
    1109,  1110,  1111,  1112,  1113,  1113,  1986,  1987,   711,  1776,
    1781,   513,  1615,  1786,  1780,   513,  1616,  1787,  1532,  1789,
     714,  2494,  1145,  1617,   715,   716,  1797,  1815,  1822,  1088,
    1089,  2925,  3159,  1540,  1988,  1823,  1834,   931,  2490,  1824,
    1825,  1826,  1315,  2491,  1618,  1101,  1827,  1833,  2926,  2492,
    1836,   513,  1103,  1104,  1846,  1101,  1868,  1619,   513,  1879,
    1884,  1887,   513,  1911,  1888,  1889,  1914,   513,  1921,   513,
    1090,  1950,  2495,  1369,  1959,  1372,  1290,   514,  1979,  1985,
    2403,  2404,   534,  1091,  2005,  1989,  1382,  2006,  1990,  2493,
    2927,   611,   615,  2740,  2007,  3219,  3220,  1991,  3222,  2018,
    2020,  1783,  2030,  2059,  1620,  2053,  2055,  1541,   513,  2078,
     813,  2079,  2082,  2093,  2083,   627,  2114,  2094,  1605,  1606,
    2097,    15,  1621,  2098,  1092,  2200,  2278,  2279,  2285,  2286,
    2496,   620,  2295,  3370,   513,  2298,   513,  1093,  1103,  1104,
    2306,  2310,   641,   643,  2312,   513,   513,  1114,  2316,  2317,
     513,  2319,  2320,  2322,  1607,  2330,  3266,   654,  3267,  3268,
    1482,  2331,  2365,   513,  1094,  2366,  2368,  2380,  1608,  2494,
    2386,  1684,  2381,  2395,  1609,  1610,  2396,  1622,  2398,  1611,
    2400,  2402,   596,  1623,    16,  2406,  1624,  3001,  2401,  1106,
    2418,  1107,  2415,  1108,  1109,  1110,  1111,  1112,  1113,  2425,
      17,  2432,  2761,  1612,  2436,  2437,  1103,  1104,    18,  2445,
    2438,  2463,  2446,   513,    19,    20,  1103,  1104,  1256,  2461,
    2495,  2481,  1613,  2474,  2512,  1992,  2928,   726,  2517,  1095,
    2516,  2657,  2520,  2521,  2658,  2532,  2497,  2540,  1625,  1993,
    2537,  2551,  2544,  2558,   732,  2570,  2576,    21,  2571,   734,
    2578,  2585,   735,  2604,  2606,  1614,  2609,  2611,  -410,  2612,
    2614,  2619,  2615,  2616,  2620,  1626,  2630,  2634,  3364,  2640,
    -411,  2670,  3361,   513,  2671,  2676,    17,  3091,  2496,  2211,
    2681,  2685,  2690,  2506,  2700,  1106,  2701,  1107,  3364,  1108,
    1109,  1110,  1111,  1112,  1113,  2703,  2704,   513,  2832,  3325,
    2711,   513,  2712,  2713,  2929,   513,  2716,  2717,  2734,  2718,
    2719,  2720,  2722,  2723,   513,    22,  2742,  2724,    23,   513,
    2735,  2743,  2744,    24,  1627,  1628,  1629,   931,   932,  2755,
    2930,  1630,  1616,  1994,  2745,  2756,  1995,  2762,   513,  1617,
    2763,  2766,  2767,  2771,  2785,  1043,  2888,    25,  1675,  1631,
    2784,  1047,  1632,  2789,   714,  2791,   513,  2792,  2793,   513,
    1618,  2721,    26,  2797,  2800,   813,  2804,  1791,  2808,  2810,
    2814,  1106,  2043,  1107,  2181,  1108,  1109,  1110,  1111,  1112,
    1113,  2829,  2855,  2864,  2497,  2862,  2873,  2872,  1633,  2874,
    2871,  2659,  2931,  2660,  3202,  2921,  2876,  2580,  2896,  2942,
    2915,  2922,  2826,  2661,  2943,  3213,  -410,  3213,  2091,  2955,
    2950,  2958,  2960,  1710,  2962,  2952,  1713,  3023,   513,  2953,
    1620,  2954,  2965,    25,  2972,  2975,  1724,  2977,  2980,  2978,
    2988,  2983,  2984,  2985,  2986,  2987,  2989,   513,  1621,  1106,
    3029,  1107,  3036,  1108,  1109,  1110,  1111,  1112,  1113,  1106,
    3035,  1107,  3106,  3039,  1109,  1110,  1111,  1112,  1113,   217,
    3057,  3063,  3068,  3069,  3017,  -459,  3083,  3090,  3095,  3096,
     513,  3094,  3097,  3104,  3122,  3108,  3113,  3114,  3111,  3119,
    3143,  3146,  -513,  3160,  3161,  3162,  3052,  3163,  3169,  3171,
    1996,  3192,  3208,  1622,  3209,  3053,  2932,  3221,  3214,  3223,
    3224,  3226,  1624,  3227,  3213,  3242,  3252,  3245,  3246,  3247,
    3254,  3300,  1634,  3256,  3260,  3277,  3259, -1638,  3182,  3283,
    3284,   513,  3289,  3292,  3017,  3017,   513,  3302,  3298,  3312,
    3313,  3328,  3314,  1635,  3320,  3321,  -634,  3337,  3326,  3334,
    3335,  3336,  3341,  3345,  3353,  3359,  3371,   617,  3354,    37,
    3085,   625,  1473,  2142,  3017,  1249,  2072,  2152,  2159,   805,
    1812,  1997,  1556,  1601,  2076,  2276,  2277,  2435,  3213,   513,
    2680,  2783,    94,  3052,  2443,  3357,  3213,  3286,  3127,  3206,
    3287,  1626,  3213,  3218,  3128,  3265,   650,  3217,  3129,  1998,
    3130,   651,  3131,  3132,  3133,   652,  3017,  3134,   964,  3135,
     627,  3136,  3137,  3138,  3139,  2408,   965,   513,  3213,  3213,
     966,  1948,   804,  2137,  1590,  2434,  3017,  3017,  1949,  3373,
     641,  2405,  1946,  3230,   641,  2828,  2961,  2964,  3282,  3280,
    3281,  1672,  3121,  2663,   641,  2370,  1750,  2822,  2886,  2641,
    1627,  1628,  1629,  3093,   641,  2968,  2966,  1630,   513,  2967,
    2908,  2914,  2444,  1160,  2859,  2854,  1799,   558,  1498,   559,
    2002,  2070,  1526,  1843,  1527,  1631,  1528,  1529,  1632,  3238,
    1138,  3017,  3241,  1364,  1530,  1316,  2086,  3019,   904,   615,
    2823,  2813,  3017,  1242,  3017,  2071,  2710,  2878,  2741,  2411,
    2468,   913,  2515,   918,  2513,  2085,  2684,  3125,  2824,  1514,
     967,   934,   641,   938,  1633,  3067,  2699,  2802,  1193,  1215,
    3374,   942,   641,  1515,  3349,   903,  1076,  1490,  1489,  2714,
     970,  1159,   513,  2393,  2586,   513,   977,   641,   657,   971,
    1293,  1467,  3164,  3225,  3324,  3017,  3340,  3019,  3019,  1523,
     798,  1132,     0,     0,     0,     0,     0,  3017,  3017,     0,
    3303,     0,     0,     0,     0,     0,     0,   513,     0,     0,
       0,  3052,     0,     0,     0,     0,     0,  3019,     0,     0,
       0,     0,  1027,     0,     0,     0,     0,  -634,     0,     0,
       0,  3017,     0,   513,     0,     0,   513,     0,  3017,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1604,     0,
       0,     0,     0,   513,  1605,  1606,     0,   513,     0,  3019,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  3017,     0,     0,     0,     0,   641,  1634,  3019,
    3019,     0,  3017,     0,     0,   513,     0,     0,     0,     0,
    1607,     0,     0,  3017,   513,  3017,   513,     0,     0,     0,
       0,     0,     0,  3017,  1608,     0,   513,     0,     0,  3017,
    1609,  1610,     0,     0,     0,  1611,     0,     0,     0,     0,
       0,  3017,  3017,     0,     0,     0,     0,     0,     0,     0,
       0,   641,   513,     0,  3019,  3017,  3017,     0,     0,  1612,
       0,     0,    37,     0,     0,  3019,  3017,  3019,     0,     0,
       0,     0,   513,     0,  1256,     0,  1082,  1083,  1613,  1180,
    1180,  1180,     0,   627,  1180,   641,   627,     0,     0,     0,
    1200,     0,     0,     0,     0,     0,  1202,     0,  1180,     0,
     641,     0,     0,  1180,     0,     0,  3020,     0,     0,     0,
       0,  1614,     0,     0,     0,     0,     0,     0,  3019,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    3019,  3019,     0,     0,     0,     0,     0,     0,     0,     0,
     627,     0,   615,  1244,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1251,   641,     0,
       0,     0,     0,     0,  3019,     0,  3020,  3020,     0,     0,
       0,  3019,     0,     0,     0,  1328,  1329,  1330,  1331,  1332,
       0,     0,     0,   627,  1615,     0,  1280,  1180,  1616,  1180,
       0,     0,     0,     0,     0,  1617,  3020,     0,  1180,     0,
       0,     0,     0,     0,     0,  3019,     0,     0,     0,  1291,
       0,   627,   654,     0,     0,  3019,  1618,   627,   627,   641,
       0,     0,     0,   627,     0,     0,  3019,     0,  3019,  1328,
    1329,  1330,  1331,  1332,     0,     0,  3019,     0,  3020,     0,
       0,     0,  3019,     0,     0,     0,  1027,     0,     0,     0,
       0,     0,     0,     0,  3019,  3019,     0,     0,  3020,  3020,
    1027,     0,     0,     0,     0,     0,     0,     0,  3019,  3019,
       0,     0,     0,     0,     0,     0,  1620,     0,     0,  3019,
       0,     0,     0,     0,     0,     0,     0,  1333,  1334,  1335,
    1336,     0,     0,     0,  1621,  1395,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  3020,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  3020,     0,  3020,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1333,  1334,  1335,  1336,     0,     0,     0,     0,  1622,
       0,     0,     0,   641,     0,  1623,     0,  1460,  1624,     0,
       0,  1462,     0,   627,   641,     0,     0,     0,  1469,     0,
     627,   804,     0,     0,     0,  1478,  1480,  3020,   641,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  3020,
    3020,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1337,   762,  1338,  1339,  1340,     0,     0,     0,     0,     0,
    1625,  1341,     0,     0,     0,     0,  1503,     0,     0,   802,
       0,  1505,     0,  3020,     0,     0,     0,     0,     0,     0,
    3020,     0,     0,     0,     0,     0,     0,  1626,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    17,     0,
       0,     0,  1084,     0,  1337,  1085,  1338,  1339,  1340,   627,
     627,     0,     0,     0,  3020,  1341,     0,   627,     0,     0,
       0,     0,     0,     0,  3020,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  3020,     0,  3020,     0,     0,
       0,     0,  1342,     0,     0,  3020,  1627,  1628,  1629,     0,
       0,  3020,   641,  1630,     0,     0,     0,     0,     0,     0,
       0,     0,   641,  3020,  3020,  1650,  1180,     0,     0,     0,
       0,  1631,   627,     0,  1632,  1662,   627,  3020,  3020,     0,
       0,   641,     0,     0,     0,     0,     0,     0,  3020,     0,
       0,     0,     0,     0,     0,     0,  1342,   990,     0,     0,
       0,     0,     0,     0,     0,     0,  1343,  1344,     0,     0,
    1633,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1021,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1033,     0,     0,
       0,     0,     0,     0,     0,    25,     0,     0,     0,     0,
       0,     0,     0,  1027,  1709,     0,     0,     0,     0,     0,
    1343,  1344,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1078,     0,     0,     0,     0,     0,     0,     0,
    1345,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   641,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1634,  1140,     0,     0,     0,     0,
       0,     0,     0,     0,  1345,     0,     0,     0,     0,     0,
       0,  1346,     0,     0,  1172,  1011,     0,     0,  -634,     0,
       0,     0,  1177,     0,     0,     0,     0,     0,  1347,  1348,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1809,     0,  1200,  1200,   641,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1346,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1395,   627,
       0,     0,  1347,  1348,     0,     0,     0,     0,     0,   627,
     627,   627,  1246,     0,     0,     0,  1848,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     641,     0,     0,     0,     0,     0,  2219,  2220,     0,     0,
       0,     0,  2221,     0,  2222,     0,  2223,  2224,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   641,
       0,     0,     0,     0,  2225,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   627,     0,     0,     0,
       0,  1301,     0,     0,     0,     0,  1308,     0,     0,     0,
    1313,     0,  1945,     0,     0,     0,     0,     0,  1321,  1322,
       0,  1323,  1324,     0,  1326,  2226,     0,     0,  2227,     0,
       0,  1358,  1359,  1360,  1361,     0,  1363,  2228,     0,     0,
       0,     0,     0,  1370,     0,  1373,  1374,   627,     0,     0,
    1376,  1377,  1378,  1379,  1380,     0,     0,     0,  1383,     0,
    2229,     0,  1386,  1390,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1397,     0,     0,  2230,  1401,  1402,
    1403,  1404,  1405,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1419,  1420,     0,  2219,  2220,  2231,     0,  2232,     0,  2221,
       0,  2222,     0,  2223,  2224,     0,     0,     0,     0,     0,
    2047,     0,     0,  2233,  2234,     0,     0,     0,     0,     0,
       0,  2225,     0,  1456,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   802,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    2075,     0,     0,     0,     0,  2235,  2236,     0,  2075,     0,
       0,     0,  1495,     0,     0,  1172,     0,     0,     0,  2237,
       0,     0,  2226,     0,     0,  2227,     0,     0,     0,     0,
       0,     0,     0,     0,  2228,     0,     0,     0,  2238,   627,
       0,     0,     0,     0,     0,     0,     0,  2239,  2240,     0,
    2241,     0,     0,     0,     0,     0,     0,  2229,     0,     0,
       0,     0,     0,  2105,     0,     0,     0,     0,   641,     0,
     641,     0,     0,     0,  2230,     0,     0,     0,     0,     0,
       0,     0,     0,  3021,     0,  2115,     0,  2242,  2243,  2244,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  2231,     0,  2232,     0,  2245,  2246,  2247,     0,
       0,     0,     0,  2248,     0,     0,  2249,     0,     0,     0,
    2233,  2234,     0,     0,     0,     0,     0,     0,     0,     0,
     641,     0,     0,     0,  2250,  2251,     0,     0,     0,     0,
       0,     0,     0,  3021,  3021,     0,  2198,     0,     0,   641,
    2204,     0,     0,     0,   627,     0,     0,     0,     0,  1677,
    1678,  2204,  2235,  2236,     0,     0,     0,     0,  2252,  2253,
    1677,     0,     0,  3021,     0,  2280,  2237,     0,     0,     0,
       0,     0,     0,     0,     0,  1395,     0,     0,  2293,     0,
       0,     0,     0,     0,  2254,  2238,     0,     0,     0,     0,
       0,     0,     0,     0,  2239,  2240,     0,  2241,     0,     0,
       0,     0,     0,     0,     0,  3021,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  3021,  3021,     0,     0,     0,
       0,  1732,  1734,  1736,  2242,  2243,  2244,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  2255,     0,     0,
    2047,  2256,     0,  2245,  2246,  2247,     0,     0,     0,     0,
    2248,     0,  1761,  2249,  2257,     0,  2375,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1768,     0,     0,     0,
    3021,  2250,  2251,     0,  1773,     0,  1774,     0,     0,     0,
       0,  3021,     0,  3021,     0,     0,     0,     0,  1395,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  2252,  2253,     0,  1788,     0,
       0,     0,     0,     0,     0,  2258,     0,     0,  2259,     0,
       0,  2260,  2261,  2262,  2263,     0,     0,     0,     0,     0,
       0,  2254,     0,     0,  3021,   641,     0,     0,     0,     0,
       0,     0,     0,     0,  1814,     0,  3021,  3021,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  2264,  2265,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    3021,     0,     0,     0,     0,     0,     0,  3021,     0,  1246,
       0,     0,     0,  2266,  2255,     0,     0,   627,  2256,     0,
       0,     0,     0,  2204,     0,  2204,     0,  1945,     0,     0,
       0,  2257,     0,  2204,     0,     0,     0,     0,     0,     0,
       0,  3021,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  3021,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  3021,     0,  3021,     0,     0,     0,     0,     0,
       0,     0,  3021,     0,     0,     0,     0,     0,  3021,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    3021,  3021,  2258,     0,     0,  2259,     0,     0,  2260,  2261,
    2262,  2263,   627,     0,  3021,  3021,     0,     0,     0,     0,
       0,     0,     0,     0,  3316,  3021,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1978,     0,
       0,     0,     0,  1983,  1984,     0,     0,     0,  2001,     0,
       0,  2264,  2265,     0,     0,     0,     0,     0,     0,     0,
       0,  2008,  2009,  2010,     0,     0,  2013,  2014,  2015,  2016,
    2017,     0,     0,     0,     0,     0,     0,     0,     0,  2022,
    2266,  2023,  2024,     0,     0,  2027,  2028,  2029,     0,     0,
       0,  2032,  2033,  2034,     0,  2035,     0,  2037,     0,  2039,
       0,  2041,     0,     0,     0,   570,   571,     0,     0,     0,
       0,     0,     0,  2047,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  2105,     0,  2105,     0,  2589,
       0,   572,   550,     0,     0,     0,     0,     0,     0,     0,
    2069,     0,   573, -1836,     0,  1456,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1172,     0,  2204,     0,     0,     0,   574,     0,
     575,     0,  2625,     0,     0,     0,     0,     0,     0,     0,
     576,     0,     0,     0,     0,     0,   641,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   627,     0,
       0,     0,   641,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0, -1828,   577,     0,     0,     0,     0,   578,
       0,     0,   579,     0,     0,     0,     0,     0,  2280,     0,
       0,     0,   580,     0,     0,  2702,     0,     0,     0,  1200,
       0,     0,     0,     0,  2707,     0,  2293,     0,     0,     0,
       0,     0,     0,     0,   581,     0,   582,     0,     0,     0,
       0,     0,     0,     0,     0,   583,     0,   584,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   627,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  2758,     0,  2758,     0,     0,     0,     0,     0,     0,
       0,  2301,  2625,  2625,     0,     0,  2304,  2625,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   585,
     641,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    2325,  2326,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    2344,     0,     0,   586,     0,     0,     0,     0,     0,     0,
    2355,     0,  2357,     0,  2359,     0,     0,     0,     0,     0,
     641,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  2376,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  2382,  2385,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  2391,     0,     0,     0,   587,     0,
       0,     0,     0,  2397,     0,  2399,     0,     0,     0,     0,
    2047,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   588,     0,     0,     0,     0,
       0,     0,     0,     0,  2758,     0,   589,   590,  2625, -1832,
     591,   592,  2625,     0,     0,     0,     0,     0,     0,     0,
       0,  2625,     0,     0,     0,     0,  2861,     0,     0,     0,
       0,   593,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1395,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  2890,     0,     0,  2893,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   594,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     595,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   641,     0,     0,     0,     0,
       0,     0,  -908,     0,     0,     0,   596,     0,     0,     0,
       0,     0,     0,     0,  2625,     0,     0,     0,     0,     0,
       0,     0, -1836,     0,     0,     0,   597,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  2391,     0,     0,     0, -1832,   641,     0,  2546,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1246,     0,     0,  2559,  2560,     0,
       0,     0,     0,     0,  -908,     0,     0,     0,     0,     0,
    2563,     0,   598,  2564,     0,     0,  2565,  2566,  3074,     0,
       0,     0,     0,  3081,     0,     0,     0,     0,     0,     0,
       0,     0,  2573,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  2758,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    2617,     0,     0,     0,  3147,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  3191,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   641,
       0,     0,   641,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  2382,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1395,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    3291,     0,     0,  3296,     0,  2773,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     641,     0,     0,     0,  1395,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  2788,     0,     0,     0,     0,
       0,     0,  1395,     0,     0,     0,     0,     0,     0,     0,
       0,  3330,     0,  3332,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1395,     0,     0,     0,     0,  2795,  2796,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  2391,     0,  3365,
       0,     0,     0,     0,     0,     0,     0,     0,  1246,     0,
       0,  2812,     0,     0,     0,     0,     0,     0,  2382,  3365,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1246,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  2917,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  2951,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  3025,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  3062,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  3126,     0,     0,
       0,     0,     0,     0,     0,     0,  3142,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  3150,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  3210,     0,     0,     0,     0,     0,  3216,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1078,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  3250,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    95,    96,
       0,   669,    98,    99,   100,   101,  1166,     0,   102,     0,
       0,     0,     0,   103,     0,  3301,   104,     0,   105,   106,
     107,   108,   670,   110,     0,   111,     0,     0,  1167,   112,
     672,     0,     0,   113,     0,     0,   114,   115,   116,  3311,
     117,     0,   118,   119,     0,     0,   120,   673,   674,   121,
     122,     0,   123,   124,   125,   675,   126,     0,   127,   128,
     129,   130,   676,   132,     0,   133,   134,     0,   135,   136,
     137,   138,   139,   140,   141,   142,   143,   144,   145,  2391,
     677,   146,   147,     0,   148,   149,   150,   151,   152,     0,
     678,   679,   153,     0,     0,     0,   680,   154,   681,  3358,
     155,   682,   683,     0,   156,   157,   158,   684,   685,   686,
       0,     0,     0,     0,   687,   161,   688,   689,     0,     0,
    1168,   162,   163,     0,   164,     0,     0,     0,     0,     0,
     165,     0,     0,     0,   691,   166,   167,   168,   169,     0,
       0,     0,   170,     0,     0,   171,   172,   173,     0,     0,
       0,   174,     0,     0,   175,   176,   177,   178,   179,     0,
       0,   180,   181,     0,   182,   183,   184,   185,   186,   187,
     692,     0,   188,   189,   190,   191,   192,   693,   694,   193,
     194,     0,   195,   196,   197,   198,   199,   695,     0,   200,
     201,     0,     0,     0,   202,   203,     0,     0,     0,     0,
       0,   204,     0,   205,   206,   207,   696,     0,   209,     0,
     210,     0,   697,     0,   211,   212,     0,   213,   698,     0,
     214,   215,     0,     0,     0,   699,   217,   218,     0,   700,
       0,   219,   220,   221,     0,     0,   222,     0,     0,     0,
     701,   223,   224,   225,   702,     0,     0,     0,   226,     0,
       0,     0,   227,   228,     0,   229,   230,     0,     0,     0,
     231,     0,   232,     0,     0,   233,   234,     0,     0,   235,
       0,   703,   236,   237,     0,     0,     0,     0,     0,   238,
     239,     0,   240,     0,   241,     0,   242,   243,     0,     0,
     704,     0,     0,     0,     0,   244,     0,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,     0,   263,   264,   265,   705,
     266,   267,   268,   269,   706,   270,   271,     0,     0,     0,
       0,   272,   273,   274,   275,   276,   277,     0,     0,   707,
     279,   708,   280,     0,   281,   709,   710,   283,   284,   285,
     286,   287,   288,   289,   290,     0,   711,   291,   292,     0,
       0,   293,   294,   295,   296,   297,   712,   713,   714,   298,
     299,     0,   715,   716,   300,     0,   301,   302,  1169,   303,
     304,   305,     0,     0,   306,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   307,   308,   309,   717,   310,     0,
     311,     0,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   718,   322,     0,   323,   324,   325,     0,   326,
       0,   327,   328,   329,   330,   331,     0,   332,   333,   334,
       0,     0,   335,     0,     0,     0,   336,   337,     0,   338,
     339,     0,     0,   340,   341,   342,   343,   344,     0,   345,
     346,     0,   347,   348,   349,     0,     0,   350,   351,   352,
     353,   354,   355,   356,   357,     0,   358,     0,   359,   360,
       0,   361,   362,   363,     0,   364,     0,   719,   365,   366,
     367,   368,     0,   369,  1170,   370,   371,   372,   373,   374,
       0,     0,   721,   376,     0,     0,     0,   377,   378,   379,
     380,     0,     0,     0,   381,     0,     0,     0,     0,   382,
       0,   383,   384,   385,   386,     0,   387,   388,   389,   390,
     391,     0,     0,     0,     0,     0,   392,   393,   394,     0,
     395,     0,     0,   396,     0,     0,   397,     0,   398,     0,
     399,   400,   401,   402,   403,   404,     0,     0,   405,   406,
       0,     0,   407,   408,   722,   410,   411,   412,   723,   724,
     413,   414,   415,   416,   725,   417,   418,   419,     0,     0,
     420,   421,   422,   423,     0,   726,   424,   425,     0,   727,
     728,   729,   730,     0,     0,     0,     0,     0,   430,   431,
       0,   731,   732,   733,   433,   434,     0,   734,   435,   436,
     735,   437,   438,     0,   439,   440,     0,     0,   441,     0,
       0,   442,     0,   443,     0,   736,   445,     0,     0,   737,
     738,   739,   446,   740,   447,     0,     0,   448,     0,     0,
       0,   741,   449,     0,   450,   451,   452,   453,     0,     0,
       0,     0,     0,     0,   454,   455,   456,     0,   457,   458,
     459,   460,     0,     0,   742,     0,     0,   462,   463,     0,
     464,   465,   466,   467,   468,     0,   469,     0,     0,     0,
       0,     0,     0,     0,     0,   470,   471,   472,   743,   473,
     474,   475,     0,   476,   744,   745,   477,   746,   478,     0,
     747,   748,   749,   750,   751,   479,   480,     0,   752,   481,
     753,   482,   754,   483,   484,     0,     0,     0,   485,   486,
     487,   488,   489,   490,   491,   492,  1171,   493,   494,   495,
     496,   497,   498,   499,   500,   501,   502,     0,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,     0,   755,
       0,   756,     0,     0,     0,     0,     0,     0,     0,   757,
       0,   758,     0,     0,     0,     0,   759,     0,   760,    95,
      96,     0,   669,    98,    99,   100,   101,     0,     0,   102,
       0,     0,     0,     0,   103,     0,     0,   104,     0,   105,
     106,   107,   108,   670,   110,     0,   111,     0,     0,   671,
     112,   672,     0,     0,   113,     0,     0,   114,   115,   116,
    1387,   117,     0,   118,   119,     0,     0,   120,   673,   674,
     121,   122,     0,   123,   124,   125,   675,   126,     0,   127,
     128,   129,   130,   676,   132,     0,   133,   134,     0,   135,
     136,   137,   138,   139,   140,   141,   142,   143,   144,   145,
       0,   677,   146,   147,     0,   148,   149,   150,   151,   152,
       0,   678,   679,   153,     0,     0,     0,   680,   154,   681,
       0,   155,   682,   683,     0,   156,   157,   158,   684,   685,
     686,     0,     0,     0,     0,   687,   161,   688,   689,     0,
       0,   690,   162,   163,     0,   164,     0,     0,     0,     0,
       0,   165,     0,     0,     0,   691,   166,   167,   168,   169,
       0,     0,     0,   170,     0,     0,   171,   172,   173,     0,
       0,     0,   174,     0,     0,   175,   176,   177,   178,   179,
       0,     0,   180,   181,     0,   182,   183,   184,   185,   186,
     187,   692,     0,   188,   189,   190,   191,   192,   693,   694,
     193,   194,     0,   195,   196,   197,   198,   199,   695,     0,
     200,   201,     0,     0,     0,   202,   203,     0,     0,     0,
       0,     0,   204,     0,   205,   206,   207,   696,     0,   209,
       0,   210,     0,   697,     0,   211,   212,     0,   213,   698,
       0,   214,   215,     0,     0,     0,   699,   217,   218,     0,
     700,     0,   219,   220,   221,     0,     0,   222,     0,     0,
       0,   701,   223,   224,   225,   702,     0,     0,     0,   226,
       0,     0,     0,   227,   228,     0,   229,   230,     0,     0,
       0,   231,     0,   232,     0,     0,   233,   234,     0,  1388,
     235,     0,   703,   236,   237,     0,     0,     0,     0,     0,
     238,   239,     0,   240,     0,   241,     0,   242,   243,     0,
       0,   704,     0,     0,     0,     0,   244,     0,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,     0,   263,   264,   265,
     705,   266,   267,   268,   269,   706,   270,   271,     0,     0,
       0,     0,   272,   273,   274,   275,   276,   277,     0,     0,
     707,   279,   708,   280,     0,   281,   709,   710,   283,   284,
     285,   286,   287,   288,   289,   290,     0,   711,   291,   292,
       0,     0,   293,   294,   295,   296,   297,   712,   713,   714,
     298,   299,     0,   715,   716,   300,     0,   301,   302,     0,
     303,   304,   305,     0,     0,   306,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   307,   308,   309,   717,   310,
       0,   311,     0,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   718,   322,     0,   323,   324,   325,     0,
     326,     0,   327,   328,   329,   330,   331,     0,   332,   333,
     334,     0,     0,   335,     0,     0,     0,   336,   337,     0,
     338,   339,     0,     0,   340,   341,   342,   343,   344,     0,
     345,   346,     0,   347,   348,   349,     0,     0,   350,   351,
     352,   353,   354,   355,   356,   357,     0,   358,     0,   359,
     360,     0,   361,   362,   363,     0,   364,     0,   719,   365,
     366,   367,   368,     0,   369,   720,   370,   371,   372,   373,
     374,     0,     0,   721,   376,     0,     0,     0,   377,   378,
     379,   380,     0,     0,     0,   381,     0,     0,     0,     0,
     382,     0,   383,   384,   385,   386,     0,   387,   388,   389,
     390,   391,     0,     0,     0,     0,     0,   392,   393,   394,
       0,   395,     0,     0,   396,     0,     0,   397,     0,   398,
       0,   399,   400,   401,   402,   403,   404,     0,     0,   405,
     406,     0,     0,   407,   408,   722,   410,   411,   412,   723,
     724,   413,   414,   415,   416,   725,   417,   418,   419,     0,
       0,   420,   421,   422,   423,     0,   726,   424,   425,     0,
     727,   728,   729,   730,     0,     0,     0,     0,  1389,   430,
     431,     0,   731,   732,   733,   433,   434,     0,   734,   435,
     436,   735,   437,   438,     0,   439,   440,     0,     0,   441,
       0,     0,   442,     0,   443,     0,   736,   445,     0,     0,
     737,   738,   739,   446,   740,   447,     0,     0,   448,     0,
       0,     0,   741,   449,     0,   450,   451,   452,   453,     0,
       0,     0,     0,     0,     0,   454,   455,   456,     0,   457,
     458,   459,   460,     0,     0,   742,     0,     0,   462,   463,
       0,   464,   465,   466,   467,   468,     0,   469,     0,     0,
       0,     0,     0,     0,     0,     0,   470,   471,   472,   743,
     473,   474,   475,     0,   476,   744,   745,   477,   746,   478,
       0,   747,   748,   749,   750,   751,   479,   480,     0,   752,
     481,   753,   482,   754,   483,   484,     0,     0,     0,   485,
     486,   487,   488,   489,   490,   491,   492,     0,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,     0,   503,
     504,   505,   506,   507,   508,   509,   510,   511,   512,     0,
     755,     0,   756,     0,     0,     0,     0,     0,     0,     0,
     757,     0,   758,     0,     0,     0,     0,   759,     0,   760,
      95,    96,     0,   669,    98,    99,   100,   101,     0,     0,
     102,     0,     0,     0,     0,   103,     0,     0,   104,     0,
     105,   106,   107,   108,   670,   110,     0,   111,     0,     0,
     671,   112,   672,     0,     0,   113,     0,     0,   114,   115,
     116,     0,   117,     0,   118,   119,     0,     0,   120,   673,
     674,   121,   122,     0,   123,   124,   125,   675,   126,     0,
     127,   128,   129,   130,   676,   132,     0,   133,   134,     0,
     135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
     145,     0,   677,   146,   147,     0,   148,   149,   150,   151,
     152,     0,   678,   679,   153,     0,     0,     0,   680,   154,
     681,     0,   155,   682,   683,     0,   156,   157,   158,   684,
     685,   686,     0,     0,     0,     0,   687,   161,   688,   689,
       0,     0,   690,   162,   163,     0,   164,     0,     0,     0,
       0,     0,   165,     0,     0,     0,   691,   166,   167,   168,
     169,     0,     0,     0,   170,     0,     0,   171,   172,   173,
       0,     0,     0,   174,     0,     0,   175,   176,   177,   178,
     179,     0,     0,   180,   181,     0,   182,   183,   184,   185,
     186,   187,   692,     0,   188,   189,   190,   191,   192,   693,
     694,   193,   194,     0,   195,   196,   197,   198,   199,   695,
       0,   200,   201,     0,     0,     0,   202,   203,     0,     0,
       0,     0,     0,   204,     0,   205,   206,   207,   696,     0,
     209,     0,   210,     0,   697,     0,   211,   212,     0,   213,
     698,     0,   214,   215,     0,     0,     0,   699,   217,   218,
       0,   700,     0,   219,   220,   221,     0,     0,   222,     0,
       0,     0,   701,   223,   224,   225,   702,     0,     0,     0,
     226,     0,     0,     0,   227,   228,     0,   229,   230,     0,
       0,     0,   231,     0,   232,     0,     0,   233,   234,     0,
       0,   235,     0,   703,   236,   237,     0,     0,     0,     0,
       0,   238,   239,     0,   240,     0,   241,     0,   242,   243,
       0,     0,   704,     0,     0,     0,     0,   244,     0,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,     0,   263,   264,
     265,   705,   266,   267,   268,   269,   706,   270,   271,  3174,
       0,     0,     0,   272,   273,   274,   275,   276,   277,     0,
       0,   707,   279,   708,   280,     0,   281,   709,   710,   283,
     284,   285,   286,   287,   288,   289,   290,     0,   711,   291,
     292,     0,     0,   293,   294,   295,   296,   297,   712,   713,
     714,   298,   299,     0,   715,   716,   300,     0,   301,   302,
       0,   303,   304,   305,     0,     0,   306,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   307,   308,   309,   717,
     310,     0,   311,     0,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   718,   322,     0,   323,   324,   325,
       0,   326,     0,   327,   328,   329,   330,   331,     0,   332,
     333,   334,     0,     0,   335,     0,     0,     0,   336,   337,
       0,   338,   339,     0,     0,   340,   341,   342,   343,   344,
       0,   345,   346,     0,   347,   348,   349,     0,     0,   350,
     351,   352,   353,   354,   355,   356,   357,     0,   358,     0,
     359,   360,     0,   361,   362,   363,     0,   364,     0,   719,
     365,   366,   367,   368,     0,   369,   720,   370,   371,   372,
     373,   374,     0,     0,   721,   376,    17,     0,     0,   377,
     378,   379,   380,     0,     0,     0,   381,     0,     0,     0,
       0,   382,     0,   383,   384,   385,   386,     0,   387,   388,
     389,   390,   391,     0,     0,     0,     0,     0,   392,   393,
     394,     0,   395,     0,     0,   396,     0,     0,   397,     0,
     398,     0,   399,   400,   401,   402,   403,   404,     0,     0,
     405,   406,     0,     0,   407,   408,   722,   410,   411,   412,
     723,   724,   413,   414,   415,   416,   725,   417,   418,   419,
       0,     0,   420,   421,   422,   423,     0,   726,   424,   425,
       0,   727,   728,   729,   730,     0,     0,     0,     0,     0,
     430,   431,     0,   731,   732,   733,   433,   434,     0,   734,
     435,   436,   735,   437,   438,     0,   439,   440,     0,     0,
     441,     0,     0,   442,     0,   443,     0,   736,   445,     0,
       0,   737,   738,   739,   446,   740,   447,     0,     0,   448,
       0,     0,     0,   741,   449,     0,   450,   451,   452,   453,
       0,     0,     0,    25,     0,     0,   454,   455,   456,     0,
     457,   458,   459,   460,     0,     0,   742,     0,     0,   462,
     463,     0,   464,   465,   466,   467,   468,     0,   469,     0,
       0,     0,     0,     0,     0,     0,     0,   470,   471,   472,
     743,   473,   474,   475,     0,   476,   744,   745,   477,   746,
     478,     0,   747,   748,   749,   750,   751,   479,   480,     0,
     752,   481,   753,   482,   754,   483,   484,     0,     0,     0,
     485,   486,   487,   488,   489,   490,   491,   492,     0,   493,
     494,   495,   496,   497,   498,   499,   500,   501,   502,     0,
     503,   504,   505,   506,   507,   508,   509,   510,   511,   512,
       0,   755,     0,   756,     0,     0,     0,     0,     0,     0,
       0,   757,     0,   758,     0,     0,     0,     0,   759,     0,
     760,    95,    96,     0,   669,    98,    99,   100,   101,     0,
       0,   102,     0,     0,     0,     0,   103,     0,     0,   104,
       0,   105,   106,   107,   108,   670,   110,     0,   111,     0,
       0,   671,   112,   672,     0,     0,   113,     0,     0,   114,
     115,   116,     0,   117,     0,   118,   119,     0,     0,   120,
     673,   674,   121,   122,     0,   123,   124,   125,   675,   126,
       0,   127,   128,   129,   130,   676,   132,     0,   133,   134,
       0,   135,   136,   137,   138,   139,   140,   141,   142,   143,
     144,   145,     0,   677,   146,   147,     0,   148,   149,   150,
     151,   152,     0,   678,   679,   153,     0,     0,     0,   680,
     154,   681,     0,   155,   682,   683,     0,   156,   157,   158,
     684,   685,   686,     0,     0,     0,     0,   687,   161,   688,
     689,     0,     0,   690,   162,   163,     0,   164,     0,     0,
       0,     0,     0,   165,     0,     0,     0,   691,   166,   167,
     168,   169,     0,     0,     0,   170,     0,     0,   171,   172,
     173,     0,     0,     0,   174,     0,     0,   175,   176,   177,
     178,   179,     0,     0,   180,   181,     0,   182,   183,   184,
     185,   186,   187,   692,     0,   188,   189,   190,   191,   192,
     693,   694,   193,   194,     0,   195,   196,   197,   198,   199,
     695,     0,   200,   201,     0,     0,     0,   202,   203,     0,
       0,     0,     0,     0,   204,     0,   205,   206,   207,   696,
       0,   209,     0,   210,     0,   697,     0,   211,   212,     0,
     213,   698,     0,   214,   215,     0,     0,     0,   699,   217,
     218,     0,   700,     0,   219,   220,   221,     0,     0,   222,
       0,     0,     0,   701,   223,   224,   225,   702,     0,     0,
       0,   226,     0,     0,     0,   227,   228,     0,   229,   230,
       0,     0,     0,   231,     0,   232,     0,     0,   233,   234,
       0,     0,   235,     0,   703,   236,   237,     0,     0,     0,
       0,     0,   238,   239,     0,   240,     0,   241,     0,   242,
     243,     0,     0,   704,     0,     0,     0,     0,   244,     0,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,     0,   263,
     264,   265,   705,   266,   267,   268,   269,   706,   270,   271,
       0,     0,     0,     0,   272,   273,   274,   275,   276,   277,
       0,     0,   707,   279,   708,   280,     0,   281,   709,   710,
     283,   284,   285,   286,   287,   288,   289,   290,     0,   711,
     291,   292,     0,     0,   293,   294,   295,   296,   297,   712,
     713,   714,   298,   299,     0,   715,   716,   300,     0,   301,
     302,     0,   303,   304,   305,     0,     0,   306,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   307,   308,   309,
     717,   310,     0,   311,     0,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   718,   322,     0,   323,   324,
     325,     0,   326,     0,   327,   328,   329,   330,   331,     0,
     332,   333,   334,     0,     0,   335,     0,     0,     0,   336,
     337,     0,   338,   339,     0,     0,   340,   341,   342,   343,
     344,     0,   345,   346,     0,   347,   348,   349,     0,     0,
     350,   351,   352,   353,   354,   355,   356,   357,     0,   358,
       0,   359,   360,     0,   361,   362,   363,     0,   364,     0,
     719,   365,   366,   367,   368,     0,   369,   720,   370,   371,
     372,   373,   374,     0,     0,   721,   376,    17,     0,     0,
     377,   378,   379,   380,     0,     0,     0,   381,     0,     0,
       0,     0,   382,     0,   383,   384,   385,   386,     0,   387,
     388,   389,   390,   391,     0,     0,     0,     0,     0,   392,
     393,   394,     0,   395,     0,     0,   396,     0,     0,   397,
       0,   398,     0,   399,   400,   401,   402,   403,   404,     0,
       0,   405,   406,     0,     0,   407,   408,   722,   410,   411,
     412,   723,   724,   413,   414,   415,   416,   725,   417,   418,
     419,     0,     0,   420,   421,   422,   423,     0,   726,   424,
     425,     0,   727,   728,   729,   730,     0,     0,     0,     0,
       0,   430,   431,     0,   731,   732,   733,   433,   434,     0,
     734,   435,   436,   735,   437,   438,     0,   439,   440,     0,
       0,   441,     0,     0,   442,     0,   443,     0,   736,   445,
       0,     0,   737,   738,   739,   446,   740,   447,     0,     0,
     448,     0,     0,     0,   741,   449,     0,   450,   451,   452,
     453,     0,     0,     0,    25,     0,     0,   454,   455,   456,
       0,   457,   458,   459,   460,     0,     0,   742,     0,     0,
     462,   463,     0,   464,   465,   466,   467,   468,     0,   469,
       0,     0,     0,     0,     0,     0,     0,     0,   470,   471,
     472,   743,   473,   474,   475,     0,   476,   744,   745,   477,
     746,   478,     0,   747,   748,   749,   750,   751,   479,   480,
       0,   752,   481,   753,   482,   754,   483,   484,     0,     0,
       0,   485,   486,   487,   488,   489,   490,   491,   492,     0,
     493,   494,   495,   496,   497,   498,   499,   500,   501,   502,
       0,   503,   504,   505,   506,   507,   508,   509,   510,   511,
     512,     0,   755,     0,   756,     0,     0,     0,     0,     0,
       0,     0,   757,     0,   758,     0,     0,     0,     0,   759,
       0,   760,    95,    96,     0,   669,    98,    99,   100,   101,
       0,     0,   102,     0,     0,     0,     0,   103,     0,     0,
     104,     0,   105,   106,   107,   108,   670,   110,     0,   111,
       0,     0,   671,   112,   672,     0,     0,   113,     0,     0,
     114,   115,   116,     0,   117,     0,   118,   119,     0,     0,
     120,   673,   674,   121,   122,     0,   123,   124,   125,   675,
     126,     0,   127,   128,   129,   130,   676,   132,     0,   133,
     134,     0,   135,   136,   137,   138,   139,   140,   141,   142,
     143,   144,   145,     0,   677,   146,   147,     0,   148,   149,
     150,   151,   152,     0,   678,   679,   153,     0,     0,     0,
     680,   154,   681,     0,   155,   682,   683,     0,   156,   157,
     158,   684,   685,   686,     0,     0,     0,     0,   687,   161,
     688,   689,     0,     0,   690,   162,   163,     0,   164,     0,
       0,     0,     0,     0,   165,     0,     0,     0,   691,   166,
     167,   168,   169,     0,     0,     0,   170,     0,     0,   171,
     172,   173,     0,     0,     0,   174,     0,     0,   175,   176,
     177,   178,   179,     0,     0,   180,   181,     0,   182,   183,
     184,   185,   186,   187,   692,     0,   188,   189,   190,   191,
     192,   693,   694,   193,   194,     0,   195,   196,   197,   198,
     199,   695,     0,   200,   201,     0,     0,     0,   202,   203,
       0,     0,     0,     0,     0,   204,     0,   205,   206,   207,
     696,     0,   209,     0,   210,     0,   697,     0,   211,   212,
       0,   213,   698,     0,   214,   215,     0,     0,     0,   699,
     217,   218,     0,   700,     0,   219,   220,   221,     0,     0,
     222,     0,     0,     0,   701,   223,   224,   225,   702,     0,
       0,     0,   226,     0,     0,     0,   227,   228,     0,   229,
     230,     0,     0,     0,   231,     0,   232,     0,     0,   233,
     234,     0,     0,   235,     0,   703,   236,   237,     0,     0,
       0,     0,     0,   238,   239,     0,   240,     0,   241,     0,
     242,   243,     0,     0,   704,     0,     0,     0,     0,   244,
       0,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,     0,
     263,   264,   265,   705,   266,   267,   268,   269,   706,   270,
     271,     0,     0,     0,     0,   272,   273,   274,   275,   276,
     277,     0,     0,   707,   279,   708,   280,     0,   281,   709,
     710,   283,   284,   285,   286,   287,   288,   289,   290,     0,
     711,   291,   292,     0,     0,   293,   294,   295,   296,   297,
     712,   713,   714,   298,   299,     0,   715,   716,   300,     0,
     301,   302,     0,   303,   304,   305,     0,     0,   306,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   307,   308,
     309,   717,   310,     0,   311,     0,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   718,   322,     0,   323,
     324,   325,     0,   326,     0,   327,   328,   329,   330,   331,
       0,   332,   333,   334,     0,     0,   335,     0,     0,     0,
     336,   337,     0,   338,   339,     0,     0,   340,   341,   342,
     343,   344,     0,   345,   346,     0,   347,   348,   349,     0,
       0,   350,   351,   352,   353,   354,   355,   356,   357,     0,
     358,     0,   359,   360,     0,   361,   362,   363,     0,   364,
       0,   719,   365,   366,   367,   368,     0,   369,   720,   370,
     371,   372,   373,   374,     0,     0,   721,   376,     0,     0,
       0,   377,   378,   379,   380,     0,     0,     0,   381,     0,
       0,     0,     0,   382,     0,   383,   384,   385,   386,     0,
     387,   388,   389,   390,   391,     0,     0,     0,     0,     0,
     392,   393,   394,     0,   395,     0,     0,   396,     0,     0,
     397,     0,   398,     0,   399,   400,   401,   402,   403,   404,
       0,     0,   405,   406,     0,     0,   407,   408,   722,   410,
     411,   412,   723,   724,   413,   414,   415,   416,   725,   417,
     418,   419,     0,     0,   420,   421,   422,   423,     0,   726,
     424,   425,     0,   727,   728,   729,   730,     0,     0,     0,
       0,     0,   430,   431,     0,   731,   732,   733,   433,   434,
       0,   734,   435,   436,   735,   437,   438,     0,   439,   440,
       0,     0,   441,     0,     0,   442,     0,   443,     0,   736,
     445,     0,     0,   737,   738,   739,   446,   740,   447,     0,
       0,   448,     0,     0,     0,   741,   449,     0,   450,   451,
     452,   453,     0,     0,     0,     0,     0,     0,   454,   455,
     456,     0,   457,   458,   459,   460,     0,     0,   742,     0,
       0,   462,   463,     0,   464,   465,   466,   467,   468,     0,
     469,     0,     0,     0,     0,     0,     0,     0,     0,   470,
     471,   472,   743,   473,   474,   475,     0,   476,   744,   745,
     477,   746,   478,     0,   747,   748,   749,   750,   751,   479,
     480,     0,   752,   481,   753,   482,   754,   483,   484,     0,
       0,     0,   485,   486,   487,   488,   489,   490,   491,   492,
       0,   493,   494,   495,   496,   497,   498,   499,   500,   501,
     502,     0,   503,   504,   505,   506,   507,   508,   509,   510,
     511,   512,     0,   755,     0,   756,     0,     0,     0,   799,
       0,     0,     0,   757,     0,   758,     0,     0,     0,     0,
     759,     0,   760,    95,    96,     0,   669,    98,    99,   100,
     101,     0,     0,   102,     0,     0,     0,     0,   103,     0,
       0,   104,     0,   105,   106,   107,   108,   670,   110,     0,
     111,     0,     0,   671,   112,   672,     0,     0,   113,     0,
       0,   114,   115,   116,     0,   117,     0,   118,   119,     0,
       0,   120,   673,   674,   121,   122,     0,   123,   124,   125,
     675,   126,     0,   127,   128,   129,   130,   676,   132,     0,
     133,   134,     0,   135,   136,   137,   138,   139,   140,   141,
     142,   143,   144,   145,     0,   677,   146,   147,     0,   148,
     149,   150,   151,   152,     0,   678,   679,   153,     0,     0,
       0,   680,   154,   681,     0,   155,   682,   683,     0,   156,
     157,   158,   684,   685,   686,     0,     0,     0,     0,   687,
     161,   688,   689,     0,     0,   690,   162,   163,     0,   164,
       0,     0,     0,     0,     0,   165,     0,     0,     0,   691,
     166,   167,   168,   169,     0,     0,     0,   170,     0,     0,
     171,   172,   173,     0,     0,     0,   174,     0,     0,   175,
     176,   177,   178,   179,     0,     0,   180,   181,     0,   182,
     183,   184,   185,   186,   187,   692,     0,   188,   189,   190,
     191,   192,   693,   694,   193,   194,     0,   195,   196,   197,
     198,   199,   695,     0,   200,   201,     0,     0,     0,   202,
     203,     0,     0,     0,     0,     0,   204,     0,   205,   206,
     207,   696,     0,   209,     0,   210,     0,   697,     0,   211,
     212,     0,   213,   698,     0,   214,   215,     0,     0,     0,
     699,   217,   218,     0,   700,     0,   219,   220,   221,     0,
       0,   222,     0,     0,     0,   701,   223,   224,   225,   702,
       0,     0,     0,   226,     0,     0,     0,   227,   228,     0,
     229,   230,     0,     0,     0,   231,     0,   232,     0,     0,
     233,   234,     0,     0,   235,     0,   703,   236,   237,     0,
       0,     0,     0,     0,   238,   239,     0,   240,     0,   241,
       0,   242,   243,     0,     0,   704,     0,     0,     0,     0,
     244,     0,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
       0,   263,   264,   265,   705,   266,   267,   268,   269,   706,
     270,   271,     0,     0,     0,     0,   272,   273,   274,   275,
     276,   277,     0,     0,   707,   279,   708,   280,     0,   281,
     709,   710,   283,   284,   285,   286,   287,   288,   289,   290,
       0,   711,   291,   292,     0,     0,   293,   294,   295,   296,
     297,   712,   713,   714,   298,   299,     0,   715,   716,   300,
       0,   301,   302,     0,   303,   304,   305,     0,     0,   306,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   307,
     308,   309,   717,   310,     0,   311,     0,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   718,   322,     0,
     323,   324,   325,     0,   326,     0,   327,   328,   329,   330,
     331,     0,   332,   333,   334,     0,     0,   335,     0,     0,
       0,   336,   337,     0,   338,   339,     0,     0,   340,   341,
     342,   343,   344,     0,   345,   346,     0,   347,   348,   349,
       0,     0,   350,   351,   352,   353,   354,   355,   356,   357,
       0,   358,     0,   359,   360,     0,   361,   362,   363,     0,
     364,     0,   719,   365,   366,   367,   368,     0,   369,   720,
     370,   371,   372,   373,   374,     0,     0,   721,   376,     0,
       0,     0,   377,   378,   379,   380,     0,     0,     0,   381,
       0,     0,     0,     0,   382,     0,   383,   384,   385,   386,
       0,   387,   388,   389,   390,   391,     0,     0,     0,     0,
       0,   392,   393,   394,     0,   395,     0,     0,   396,     0,
       0,   397,     0,   398,     0,   399,   400,   401,   402,   403,
     404,     0,     0,   405,   406,     0,     0,   407,   408,   722,
     410,   411,   412,   723,   724,   413,   414,   415,   416,   725,
     417,   418,   419,     0,     0,   420,   421,   422,   423,     0,
     726,   424,   425,     0,   727,   728,   729,   730,     0,     0,
       0,     0,     0,   430,   431,     0,   731,   732,   733,   433,
     434,     0,   734,   435,   436,   735,   437,   438,     0,   439,
     440,     0,     0,   441,     0,     0,   442,     0,   443,     0,
     736,   445,     0,     0,   737,   738,   739,   446,   740,   447,
       0,     0,   448,     0,     0,     0,   741,   449,     0,   450,
     451,   452,   453,     0,     0,     0,     0,     0,     0,   454,
     455,   456,     0,   457,   458,   459,   460,     0,     0,   742,
       0,     0,   462,   463,     0,   464,   465,   466,   467,   468,
       0,   469,     0,     0,     0,     0,     0,     0,     0,     0,
     470,   471,   472,   743,   473,   474,   475,     0,   476,   744,
     745,   477,   746,   478,     0,   747,   748,   749,   750,   751,
     479,   480,     0,   752,   481,   753,   482,   754,   483,   484,
       0,     0,     0,   485,   486,   487,   488,   489,   490,   491,
     492,     0,   493,   494,   495,   496,   497,   498,   499,   500,
     501,   502,     0,   503,   504,   505,   506,   507,   508,   509,
     510,   511,   512,     0,   755,     0,   756,     0,     0,     0,
    1689,     0,     0,     0,   757,     0,   758,     0,     0,     0,
       0,   759,     0,   760,    95,    96,     0,   669,    98,    99,
     100,   101,     0,     0,   102,     0,     0,     0,     0,   103,
       0,     0,   104,     0,   105,   106,   107,   108,   670,   110,
       0,   111,     0,     0,   671,   112,   672,     0,     0,   113,
       0,     0,   114,   115,   116,     0,   117,     0,   118,   119,
       0,     0,   120,   673,   674,   121,   122,     0,   123,   124,
     125,   675,   126,     0,   127,   128,   129,   130,   676,   132,
       0,   133,   134,     0,   135,   136,   137,   138,   139,   140,
     141,   142,   143,   144,   145,     0,   677,   146,   147,     0,
     148,   149,   150,   151,   152,     0,   678,   679,   153,     0,
       0,     0,   680,   154,   681,     0,   155,   682,   683,     0,
     156,   157,   158,   684,   685,   686,     0,     0,     0,     0,
     687,   161,   688,   689,     0,     0,   690,   162,   163,     0,
     164,     0,     0,     0,     0,     0,   165,     0,     0,     0,
     691,   166,   167,   168,   169,     0,     0,     0,   170,     0,
       0,   171,   172,   173,     0,     0,     0,   174,     0,     0,
     175,   176,   177,   178,   179,     0,     0,   180,   181,     0,
     182,   183,   184,   185,   186,   187,   692,     0,   188,   189,
     190,   191,   192,   693,   694,   193,   194,     0,   195,   196,
     197,   198,   199,   695,     0,   200,   201,     0,     0,     0,
     202,   203,  1731,     0,     0,     0,     0,   204,     0,   205,
     206,   207,   696,     0,   209,     0,   210,     0,   697,     0,
     211,   212,     0,   213,   698,     0,   214,   215,     0,     0,
       0,   699,   217,   218,     0,   700,     0,   219,   220,   221,
       0,     0,   222,     0,     0,     0,   701,   223,   224,   225,
     702,     0,     0,     0,   226,     0,     0,     0,   227,   228,
       0,   229,   230,     0,     0,     0,   231,     0,   232,     0,
       0,   233,   234,     0,     0,   235,     0,   703,   236,   237,
       0,     0,     0,     0,     0,   238,   239,     0,   240,     0,
     241,     0,   242,   243,     0,     0,   704,     0,     0,     0,
       0,   244,     0,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,     0,   263,   264,   265,   705,   266,   267,   268,   269,
     706,   270,   271,     0,     0,     0,     0,   272,   273,   274,
     275,   276,   277,     0,     0,   707,   279,   708,   280,     0,
     281,   709,   710,   283,   284,   285,   286,   287,   288,   289,
     290,     0,   711,   291,   292,     0,     0,   293,   294,   295,
     296,   297,   712,   713,   714,   298,   299,     0,   715,   716,
     300,     0,   301,   302,     0,   303,   304,   305,     0,     0,
     306,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     307,   308,   309,   717,   310,     0,   311,     0,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   718,   322,
       0,   323,   324,   325,     0,   326,     0,   327,   328,   329,
     330,   331,     0,   332,   333,   334,     0,     0,   335,     0,
       0,     0,   336,   337,     0,   338,   339,     0,     0,   340,
     341,   342,   343,   344,     0,   345,   346,     0,   347,   348,
     349,     0,     0,   350,   351,   352,   353,   354,   355,   356,
     357,     0,   358,     0,   359,   360,     0,   361,   362,   363,
       0,   364,     0,   719,   365,   366,   367,   368,     0,   369,
     720,   370,   371,   372,   373,   374,     0,     0,   721,   376,
       0,     0,     0,   377,   378,   379,   380,     0,     0,     0,
     381,     0,     0,     0,     0,   382,     0,   383,   384,   385,
     386,     0,   387,   388,   389,   390,   391,     0,     0,     0,
       0,     0,   392,   393,   394,     0,   395,     0,     0,   396,
       0,     0,   397,     0,   398,     0,   399,   400,   401,   402,
     403,   404,     0,     0,   405,   406,     0,     0,   407,   408,
     722,   410,   411,   412,   723,   724,   413,   414,   415,   416,
     725,   417,   418,   419,     0,     0,   420,   421,   422,   423,
       0,   726,   424,   425,     0,   727,   728,   729,   730,     0,
       0,     0,     0,     0,   430,   431,     0,   731,   732,   733,
     433,   434,     0,   734,   435,   436,   735,   437,   438,     0,
     439,   440,     0,     0,   441,     0,     0,   442,     0,   443,
       0,   736,   445,     0,     0,   737,   738,   739,   446,   740,
     447,     0,     0,   448,     0,     0,     0,   741,   449,     0,
     450,   451,   452,   453,     0,     0,     0,     0,     0,     0,
     454,   455,   456,     0,   457,   458,   459,   460,     0,     0,
     742,     0,     0,   462,   463,     0,   464,   465,   466,   467,
     468,     0,   469,     0,     0,     0,     0,     0,     0,     0,
       0,   470,   471,   472,   743,   473,   474,   475,     0,   476,
     744,   745,   477,   746,   478,     0,   747,   748,   749,   750,
     751,   479,   480,     0,   752,   481,   753,   482,   754,   483,
     484,     0,     0,     0,   485,   486,   487,   488,   489,   490,
     491,   492,     0,   493,   494,   495,   496,   497,   498,   499,
     500,   501,   502,     0,   503,   504,   505,   506,   507,   508,
     509,   510,   511,   512,     0,   755,     0,   756,     0,     0,
       0,     0,     0,     0,     0,   757,     0,   758,     0,     0,
       0,     0,   759,     0,   760,    95,    96,     0,   669,    98,
      99,   100,   101,     0,     0,   102,     0,     0,     0,     0,
     103,     0,     0,   104,     0,   105,   106,   107,   108,   670,
     110,     0,   111,     0,     0,   671,   112,   672,     0,     0,
     113,     0,     0,   114,   115,   116,     0,   117,     0,   118,
     119,     0,     0,   120,   673,   674,   121,   122,     0,   123,
     124,   125,   675,   126,     0,   127,   128,   129,   130,   676,
     132,     0,   133,   134,     0,   135,   136,   137,   138,   139,
     140,   141,   142,   143,   144,   145,     0,   677,   146,   147,
       0,   148,   149,   150,   151,   152,     0,   678,   679,   153,
       0,     0,     0,   680,   154,   681,     0,   155,   682,   683,
       0,   156,   157,   158,   684,   685,   686,     0,     0,     0,
       0,   687,   161,   688,   689,     0,     0,   690,   162,   163,
       0,   164,     0,     0,     0,     0,     0,   165,     0,     0,
       0,   691,   166,   167,   168,   169,     0,     0,     0,   170,
       0,     0,   171,   172,   173,     0,     0,     0,   174,     0,
       0,   175,   176,   177,   178,   179,     0,     0,   180,   181,
       0,   182,   183,   184,   185,   186,   187,   692,     0,   188,
     189,   190,   191,   192,   693,   694,   193,   194,     0,   195,
     196,   197,   198,   199,   695,     0,   200,   201,     0,     0,
       0,   202,   203,  1733,     0,     0,     0,     0,   204,     0,
     205,   206,   207,   696,     0,   209,     0,   210,     0,   697,
       0,   211,   212,     0,   213,   698,     0,   214,   215,     0,
       0,     0,   699,   217,   218,     0,   700,     0,   219,   220,
     221,     0,     0,   222,     0,     0,     0,   701,   223,   224,
     225,   702,     0,     0,     0,   226,     0,     0,     0,   227,
     228,     0,   229,   230,     0,     0,     0,   231,     0,   232,
       0,     0,   233,   234,     0,     0,   235,     0,   703,   236,
     237,     0,     0,     0,     0,     0,   238,   239,     0,   240,
       0,   241,     0,   242,   243,     0,     0,   704,     0,     0,
       0,     0,   244,     0,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,     0,   263,   264,   265,   705,   266,   267,   268,
     269,   706,   270,   271,     0,     0,     0,     0,   272,   273,
     274,   275,   276,   277,     0,     0,   707,   279,   708,   280,
       0,   281,   709,   710,   283,   284,   285,   286,   287,   288,
     289,   290,     0,   711,   291,   292,     0,     0,   293,   294,
     295,   296,   297,   712,   713,   714,   298,   299,     0,   715,
     716,   300,     0,   301,   302,     0,   303,   304,   305,     0,
       0,   306,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   307,   308,   309,   717,   310,     0,   311,     0,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,   718,
     322,     0,   323,   324,   325,     0,   326,     0,   327,   328,
     329,   330,   331,     0,   332,   333,   334,     0,     0,   335,
       0,     0,     0,   336,   337,     0,   338,   339,     0,     0,
     340,   341,   342,   343,   344,     0,   345,   346,     0,   347,
     348,   349,     0,     0,   350,   351,   352,   353,   354,   355,
     356,   357,     0,   358,     0,   359,   360,     0,   361,   362,
     363,     0,   364,     0,   719,   365,   366,   367,   368,     0,
     369,   720,   370,   371,   372,   373,   374,     0,     0,   721,
     376,     0,     0,     0,   377,   378,   379,   380,     0,     0,
       0,   381,     0,     0,     0,     0,   382,     0,   383,   384,
     385,   386,     0,   387,   388,   389,   390,   391,     0,     0,
       0,     0,     0,   392,   393,   394,     0,   395,     0,     0,
     396,     0,     0,   397,     0,   398,     0,   399,   400,   401,
     402,   403,   404,     0,     0,   405,   406,     0,     0,   407,
     408,   722,   410,   411,   412,   723,   724,   413,   414,   415,
     416,   725,   417,   418,   419,     0,     0,   420,   421,   422,
     423,     0,   726,   424,   425,     0,   727,   728,   729,   730,
       0,     0,     0,     0,     0,   430,   431,     0,   731,   732,
     733,   433,   434,     0,   734,   435,   436,   735,   437,   438,
       0,   439,   440,     0,     0,   441,     0,     0,   442,     0,
     443,     0,   736,   445,     0,     0,   737,   738,   739,   446,
     740,   447,     0,     0,   448,     0,     0,     0,   741,   449,
       0,   450,   451,   452,   453,     0,     0,     0,     0,     0,
       0,   454,   455,   456,     0,   457,   458,   459,   460,     0,
       0,   742,     0,     0,   462,   463,     0,   464,   465,   466,
     467,   468,     0,   469,     0,     0,     0,     0,     0,     0,
       0,     0,   470,   471,   472,   743,   473,   474,   475,     0,
     476,   744,   745,   477,   746,   478,     0,   747,   748,   749,
     750,   751,   479,   480,     0,   752,   481,   753,   482,   754,
     483,   484,     0,     0,     0,   485,   486,   487,   488,   489,
     490,   491,   492,     0,   493,   494,   495,   496,   497,   498,
     499,   500,   501,   502,     0,   503,   504,   505,   506,   507,
     508,   509,   510,   511,   512,     0,   755,     0,   756,     0,
       0,     0,     0,     0,     0,     0,   757,     0,   758,     0,
       0,     0,     0,   759,     0,   760,    95,    96,     0,   669,
      98,    99,   100,   101,     0,     0,   102,     0,     0,     0,
       0,   103,     0,     0,   104,     0,   105,   106,   107,   108,
     670,   110,     0,   111,     0,     0,   671,   112,   672,     0,
       0,   113,     0,     0,   114,   115,   116,     0,   117,     0,
     118,   119,     0,     0,   120,   673,   674,   121,   122,     0,
     123,   124,   125,   675,   126,     0,   127,   128,   129,   130,
     676,   132,     0,   133,   134,     0,   135,   136,   137,   138,
     139,   140,   141,   142,   143,   144,   145,     0,   677,   146,
     147,     0,   148,   149,   150,   151,   152,     0,   678,   679,
     153,     0,     0,     0,   680,   154,   681,     0,   155,   682,
     683,     0,   156,   157,   158,   684,   685,   686,     0,     0,
       0,     0,   687,   161,   688,   689,     0,     0,   690,   162,
     163,     0,   164,     0,     0,     0,     0,     0,   165,     0,
       0,     0,   691,   166,   167,   168,   169,     0,     0,     0,
     170,     0,     0,   171,   172,   173,     0,     0,     0,   174,
       0,     0,   175,   176,   177,   178,   179,     0,     0,   180,
     181,     0,   182,   183,   184,   185,   186,   187,   692,     0,
     188,   189,   190,   191,   192,   693,   694,   193,   194,     0,
     195,   196,   197,   198,   199,   695,     0,   200,   201,     0,
       0,     0,   202,   203,  1735,     0,     0,     0,     0,   204,
       0,   205,   206,   207,   696,     0,   209,     0,   210,     0,
     697,     0,   211,   212,     0,   213,   698,     0,   214,   215,
       0,     0,     0,   699,   217,   218,     0,   700,     0,   219,
     220,   221,     0,     0,   222,     0,     0,     0,   701,   223,
     224,   225,   702,     0,     0,     0,   226,     0,     0,     0,
     227,   228,     0,   229,   230,     0,     0,     0,   231,     0,
     232,     0,     0,   233,   234,     0,     0,   235,     0,   703,
     236,   237,     0,     0,     0,     0,     0,   238,   239,     0,
     240,     0,   241,     0,   242,   243,     0,     0,   704,     0,
       0,     0,     0,   244,     0,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,     0,   263,   264,   265,   705,   266,   267,
     268,   269,   706,   270,   271,     0,     0,     0,     0,   272,
     273,   274,   275,   276,   277,     0,     0,   707,   279,   708,
     280,     0,   281,   709,   710,   283,   284,   285,   286,   287,
     288,   289,   290,     0,   711,   291,   292,     0,     0,   293,
     294,   295,   296,   297,   712,   713,   714,   298,   299,     0,
     715,   716,   300,     0,   301,   302,     0,   303,   304,   305,
       0,     0,   306,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   307,   308,   309,   717,   310,     0,   311,     0,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     718,   322,     0,   323,   324,   325,     0,   326,     0,   327,
     328,   329,   330,   331,     0,   332,   333,   334,     0,     0,
     335,     0,     0,     0,   336,   337,     0,   338,   339,     0,
       0,   340,   341,   342,   343,   344,     0,   345,   346,     0,
     347,   348,   349,     0,     0,   350,   351,   352,   353,   354,
     355,   356,   357,     0,   358,     0,   359,   360,     0,   361,
     362,   363,     0,   364,     0,   719,   365,   366,   367,   368,
       0,   369,   720,   370,   371,   372,   373,   374,     0,     0,
     721,   376,     0,     0,     0,   377,   378,   379,   380,     0,
       0,     0,   381,     0,     0,     0,     0,   382,     0,   383,
     384,   385,   386,     0,   387,   388,   389,   390,   391,     0,
       0,     0,     0,     0,   392,   393,   394,     0,   395,     0,
       0,   396,     0,     0,   397,     0,   398,     0,   399,   400,
     401,   402,   403,   404,     0,     0,   405,   406,     0,     0,
     407,   408,   722,   410,   411,   412,   723,   724,   413,   414,
     415,   416,   725,   417,   418,   419,     0,     0,   420,   421,
     422,   423,     0,   726,   424,   425,     0,   727,   728,   729,
     730,     0,     0,     0,     0,     0,   430,   431,     0,   731,
     732,   733,   433,   434,     0,   734,   435,   436,   735,   437,
     438,     0,   439,   440,     0,     0,   441,     0,     0,   442,
       0,   443,     0,   736,   445,     0,     0,   737,   738,   739,
     446,   740,   447,     0,     0,   448,     0,     0,     0,   741,
     449,     0,   450,   451,   452,   453,     0,     0,     0,     0,
       0,     0,   454,   455,   456,     0,   457,   458,   459,   460,
       0,     0,   742,     0,     0,   462,   463,     0,   464,   465,
     466,   467,   468,     0,   469,     0,     0,     0,     0,     0,
       0,     0,     0,   470,   471,   472,   743,   473,   474,   475,
       0,   476,   744,   745,   477,   746,   478,     0,   747,   748,
     749,   750,   751,   479,   480,     0,   752,   481,   753,   482,
     754,   483,   484,     0,     0,     0,   485,   486,   487,   488,
     489,   490,   491,   492,     0,   493,   494,   495,   496,   497,
     498,   499,   500,   501,   502,     0,   503,   504,   505,   506,
     507,   508,   509,   510,   511,   512,     0,   755,     0,   756,
       0,     0,     0,     0,     0,     0,     0,   757,     0,   758,
       0,     0,     0,     0,   759,     0,   760,    95,    96,     0,
     669,    98,    99,   100,   101,     0,     0,   102,     0,     0,
       0,     0,   103,     0,     0,   104,     0,   105,   106,   107,
     108,   670,   110,     0,   111,     0,     0,   671,   112,   672,
       0,     0,   113,     0,     0,   114,   115,   116,     0,   117,
       0,   118,   119,     0,     0,   120,   673,   674,   121,   122,
       0,   123,   124,   125,   675,   126,     0,   127,   128,   129,
     130,   676,   132,     0,   133,   134,     0,   135,   136,   137,
     138,   139,   140,   141,   142,   143,   144,   145,     0,   677,
     146,   147,     0,   148,   149,   150,   151,   152,     0,   678,
     679,   153,     0,     0,     0,   680,   154,   681,     0,   155,
     682,   683,     0,   156,   157,   158,   684,   685,   686,     0,
       0,     0,     0,   687,   161,   688,   689,     0,     0,   690,
     162,   163,     0,   164,     0,     0,     0,     0,     0,   165,
       0,     0,     0,   691,   166,   167,   168,   169,     0,     0,
       0,   170,     0,     0,   171,   172,   173,     0,     0,     0,
     174,     0,     0,   175,   176,   177,   178,   179,     0,     0,
     180,   181,     0,   182,   183,   184,   185,   186,   187,   692,
       0,   188,   189,   190,   191,   192,   693,   694,   193,   194,
       0,   195,   196,   197,   198,   199,   695,     0,   200,   201,
       0,     0,     0,   202,   203,     0,     0,     0,     0,     0,
     204,     0,   205,   206,   207,   696,     0,   209,     0,   210,
       0,   697,     0,   211,   212,     0,   213,   698,     0,   214,
     215,     0,     0,     0,   699,   217,   218,     0,   700,     0,
     219,   220,   221,     0,     0,   222,     0,     0,     0,   701,
     223,   224,   225,   702,     0,     0,     0,   226,     0,     0,
       0,   227,   228,     0,   229,   230,     0,     0,     0,   231,
       0,   232,     0,     0,   233,   234,     0,     0,   235,     0,
     703,   236,   237,     0,     0,     0,     0,     0,   238,   239,
       0,   240,     0,   241,     0,   242,   243,     0,     0,   704,
       0,     0,     0,     0,   244,     0,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,     0,   263,   264,   265,   705,   266,
     267,   268,   269,   706,   270,   271,     0,     0,     0,     0,
     272,   273,   274,   275,   276,   277,     0,     0,   707,   279,
     708,   280,     0,   281,   709,   710,   283,   284,   285,   286,
     287,   288,   289,   290,     0,   711,   291,   292,     0,     0,
     293,   294,   295,   296,   297,   712,   713,   714,   298,   299,
       0,   715,   716,   300,     0,   301,   302,     0,   303,   304,
     305,     0,     0,   306,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   307,   308,   309,   717,   310,     0,   311,
       0,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,   718,   322,     0,   323,   324,   325,     0,   326,     0,
     327,   328,   329,   330,   331,     0,   332,   333,   334,     0,
       0,   335,     0,     0,     0,   336,   337,     0,   338,   339,
       0,     0,   340,   341,   342,   343,   344,     0,   345,   346,
       0,   347,   348,   349,     0,     0,   350,   351,   352,   353,
     354,   355,   356,   357,     0,   358,     0,   359,   360,     0,
     361,   362,   363,     0,   364,     0,   719,   365,   366,   367,
     368,     0,   369,   720,   370,   371,   372,   373,   374,     0,
       0,   721,   376,     0,     0,     0,   377,   378,   379,   380,
       0,     0,     0,   381,     0,     0,     0,     0,   382,     0,
     383,   384,   385,   386,     0,   387,   388,   389,   390,   391,
       0,     0,     0,     0,     0,   392,   393,   394,     0,   395,
       0,     0,   396,     0,     0,   397,     0,   398,     0,   399,
     400,   401,   402,   403,   404,     0,     0,   405,   406,     0,
       0,   407,   408,   722,   410,   411,   412,   723,   724,   413,
     414,   415,   416,   725,   417,   418,   419,     0,     0,   420,
     421,   422,   423,     0,   726,   424,   425,     0,   727,   728,
     729,   730,     0,     0,     0,     0,     0,   430,   431,     0,
     731,   732,   733,   433,   434,     0,   734,   435,   436,   735,
     437,   438,     0,   439,   440,     0,     0,   441,     0,     0,
     442,     0,   443,     0,   736,   445,     0,     0,   737,   738,
     739,   446,   740,   447,     0,     0,   448,     0,     0,     0,
     741,   449,     0,   450,   451,   452,   453,     0,     0,     0,
       0,     0,     0,   454,   455,   456,     0,   457,   458,   459,
     460,     0,     0,   742,     0,     0,   462,   463,     0,   464,
     465,   466,   467,   468,     0,   469,     0,     0,     0,     0,
       0,     0,     0,     0,   470,   471,   472,   743,   473,   474,
     475,     0,   476,   744,   745,   477,   746,   478,     0,   747,
     748,   749,   750,   751,   479,   480,     0,   752,   481,   753,
     482,   754,   483,   484,     0,     0,     0,   485,   486,   487,
     488,   489,   490,   491,   492,     0,   493,   494,   495,   496,
     497,   498,   499,   500,   501,   502,     0,   503,   504,   505,
     506,   507,   508,   509,   510,   511,   512,     0,   755,     0,
     756,     0,     0,     0,     0,     0,     0,     0,   757,     0,
     758,     0,     0,     0,     0,   759,     0,   760,    95,    96,
       0,   669,    98,    99,   100,   101,     0,     0,   102,     0,
       0,     0,     0,   103,     0,     0,   104,     0,   105,   106,
     107,   108,   670,   110,     0,   111,     0,     0,   671,   112,
     672,     0,     0,   113,     0,     0,   114,   115,   116,     0,
     117,     0,   118,   119,     0,     0,   120,   673,   674,   121,
     122,     0,   123,   124,   125,   675,   126,     0,   127,   128,
     129,   130,   676,   132,     0,   133,   134,     0,   135,   136,
     137,   138,   139,   140,   141,   142,   143,   144,   145,     0,
     677,   146,   147,     0,   148,   149,   150,   151,   152,     0,
     678,   679,   153,     0,     0,     0,   680,   154,   681,     0,
     155,   682,   683,     0,   156,   157,   158,   684,   685,   686,
       0,     0,     0,     0,   687,   161,   688,   689,     0,     0,
     690,   162,   163,     0,   164,     0,     0,     0,     0,     0,
     165,     0,     0,     0,   691,   166,   167,   168,   169,     0,
       0,     0,   170,     0,     0,   171,   172,   173,     0,     0,
       0,   174,     0,     0,   175,   176,   177,   178,   179,     0,
       0,   180,   181,     0,   182,   183,   184,   185,   186,   187,
     692,     0,   188,   189,   190,   191,   192,   693,   694,   193,
     194,     0,   195,   196,   197,   198,   199,   695,     0,   200,
     201,     0,     0,     0,   202,   203,     0,     0,     0,     0,
       0,   204,     0,   205,   206,   207,   696,     0,   209,     0,
     210,     0,   697,     0,   211,   212,     0,   213,   698,     0,
     214,   215,     0,     0,     0,   699,   217,   218,     0,   700,
       0,   219,   220,   221,     0,     0,   222,     0,     0,     0,
     701,   223,   224,   225,   702,     0,     0,     0,   226,     0,
       0,     0,   227,   228,     0,   229,   230,     0,     0,     0,
     231,     0,   232,     0,     0,   233,   234,     0,     0,   235,
       0,   703,   236,   237,     0,     0,     0,     0,     0,   238,
     239,     0,   240,     0,   241,     0,   242,   243,     0,     0,
     704,     0,     0,     0,     0,   244,     0,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,     0,   263,   264,   265,   705,
     266,   267,   268,   269,   706,   270,   271,     0,     0,     0,
       0,   272,   273,   274,   275,   276,   277,     0,     0,   707,
     279,   708,   280,     0,   281,   709,   710,   283,   284,   285,
     286,   287,   288,   289,   290,     0,   711,   291,   292,     0,
       0,   293,   294,   295,   296,   297,   712,   713,   714,   298,
     299,     0,   715,   716,   300,     0,   301,   302,     0,   303,
     304,   305,     0,     0,   306,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   307,   308,   309,   717,   310,     0,
     311,     0,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   718,   322,     0,   323,   324,   325,     0,   326,
       0,   327,   328,   329,   330,   331,     0,   332,   333,   334,
       0,     0,   335,     0,     0,     0,   336,   337,     0,   338,
     339,     0,     0,   340,   341,   342,   343,   344,     0,   345,
     346,     0,   347,   348,   349,     0,     0,   350,   351,   352,
     353,   354,   355,   356,   357,     0,   358,     0,   359,   360,
       0,   361,   362,   363,     0,   364,     0,   719,   365,   366,
     367,   368,     0,   369,   720,   370,   371,   372,   373,   374,
       0,     0,   721,   376,     0,     0,     0,   377,   378,   379,
     380,     0,     0,     0,   381,     0,     0,     0,     0,   382,
       0,   383,   384,   385,   386,     0,   387,   388,   389,   390,
     391,     0,     0,     0,     0,     0,   392,   393,   394,     0,
     395,     0,     0,   396,     0,     0,   397,     0,   398,     0,
     399,   400,   401,   402,   403,   404,     0,     0,   405,   406,
       0,     0,   407,   408,   722,   410,   411,   412,   723,   724,
     413,   414,   415,   416,   725,   417,   418,   419,     0,     0,
     420,   421,   422,   423,     0,   726,   424,   425,     0,   727,
     728,   729,   730,     0,     0,     0,     0,     0,   430,   431,
       0,   731,   732,   733,   433,   434,     0,   734,   435,   436,
     735,   437,   438,     0,   439,   440,     0,     0,   441,     0,
       0,   442,     0,   443,     0,   736,   445,     0,     0,   737,
     738,   739,   446,   740,   447,     0,     0,   448,     0,     0,
       0,   741,   449,     0,   450,   451,   452,   453,     0,     0,
       0,     0,     0,     0,   454,   455,   456,     0,   457,   458,
     459,   460,     0,     0,   742,     0,     0,   462,   463,     0,
     464,   465,   466,   467,   468,     0,   469,     0,     0,     0,
       0,     0,     0,     0,     0,   470,   471,   472,   743,   473,
     474,   475,     0,   476,   744,   745,   477,   746,   478,     0,
     747,   748,   749,   750,   751,   479,   480,     0,   752,   481,
     753,   482,   754,   483,   484,     0,     0,     0,   485,   486,
     487,   488,   489,   490,   491,   492,     0,   493,   494,   495,
     496,   497,   498,   499,   500,   501,   502,     0,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,     0,   755,
       0,   756,     0,     0,     0,     0,     0,     0,     0,   757,
       0,  1020,     0,     0,     0,     0,   759,     0,   760,    95,
      96,     0,   669,    98,    99,   100,   101,  1426,     0,   102,
       0,     0,     0,     0,  1427,     0,     0,   104,     0,   105,
     106,   107,   108,   670,   110,     0,   111,     0,     0,   671,
     112,   672,     0,     0,   113,     0,     0,   114,   115,   116,
       0,   117,     0,   118,   119,     0,     0,   120,   673,   674,
     121,   122,     0,   123,   124,   125,   675,   126,     0,   127,
     128,   129,   130,   676,   132,     0,   133,   134,     0,   135,
     136,   137,   138,   139,   140,   141,   142,   143,   144,   145,
       0,   677,   146,   147,     0,   148,   149,   150,   151,   152,
       0,   678,   679,   153,     0,     0,     0,   680,   154,   681,
       0,   155,   682,   683,     0,   156,   157,   158,   684,   685,
     686,     0,     0,     0,     0,   687,   161,   688,   689,     0,
       0,   690,   162,   163,     0,   164,     0,     0,     0,     0,
       0,   165,     0,     0,     0,   691,   166,   167,   168,   169,
       0,     0,     0,   170,     0,     0,   171,   172,   173,     0,
       0,     0,   174,     0,     0,   175,   176,   177,   178,   179,
       0,     0,   180,   181,     0,   182,   183,   184,   185,   186,
     187,   692,     0,   188,   189,   190,   191,   192,   693,   694,
     193,   194,     0,   195,   196,   197,   198,   199,   695,     0,
     200,   201,     0,     0,     0,   202,   203,     0,     0,     0,
       0,     0,   204,     0,   205,   206,   207,   696,     0,   209,
       0,   210,     0,   697,     0,   211,   212,     0,   213,   698,
       0,   214,   215,     0,     0,     0,   699,   217,   218,     0,
     700,     0,   219,   220,   221,     0,     0,   222,     0,     0,
       0,   701,   223,   224,   225,   702,     0,     0,     0,   226,
       0,     0,     0,   227,   228,     0,   229,   230,     0,     0,
       0,   231,     0,   232,     0,     0,   233,   234,     0,     0,
     235,     0,   703,   236,   237,     0,     0,     0,     0,     0,
     238,   239,     0,   240,     0,   241,     0,   242,   243,     0,
       0,   704,     0,     0,     0,     0,   244,     0,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,     0,   263,   264,   265,
     705,   266,   267,   268,   269,   706,   270,   271,     0,     0,
       0,     0,   272,   273,   274,   275,   276,   277,     0,     0,
     707,   279,   708,   280,     0,   281,   709,   710,   283,   284,
     285,   286,   287,   288,   289,   290,     0,   711,   291,   292,
       0,     0,   293,   294,   295,   296,   297,   712,     0,   714,
     298,   299,     0,   715,   716,   300,     0,   301,   302,     0,
     303,   304,   305,     0,     0,   306,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   307,   308,   309,   717,   310,
       0,   311,     0,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   718,   322,     0,   323,   324,   325,     0,
     326,     0,   327,   328,   329,   330,   331,     0,   332,   333,
     334,     0,     0,   335,     0,     0,     0,   336,   337,     0,
     338,   339,     0,     0,   340,   341,   342,   343,   344,     0,
     345,   346,     0,   347,   348,   349,     0,     0,   350,   351,
     352,   353,   354,   355,   356,   357,     0,   358,     0,   359,
     360,     0,   361,   362,   363,     0,   364,     0,   719,   365,
     366,   367,   368,     0,   369,   720,   370,   371,   372,   373,
     374,     0,     0,   721,   376,     0,     0,     0,   377,   378,
     379,   380,     0,     0,     0,   381,     0,     0,     0,     0,
     382,     0,   383,   384,   385,   386,     0,   387,   388,   389,
     390,   391,     0,     0,     0,     0,     0,   392,   393,   394,
       0,   395,     0,     0,   396,     0,     0,   397,     0,   398,
       0,   399,   400,   401,   402,   403,   404,     0,     0,   405,
     406,     0,     0,   407,   408,   722,   410,   411,   412,   723,
     724,   413,   414,   415,   416,   725,   417,   418,   419,     0,
       0,   420,   421,   422,   423,     0,   726,   424,   425,     0,
     727,   728,   729,   730,     0,     0,     0,     0,     0,   430,
     431,     0,   731,   732,   733,   433,   434,     0,   734,   435,
     436,   735,   437,   438,     0,   439,   440,     0,     0,   441,
       0,     0,   442,     0,   443,     0,   736,   445,     0,     0,
     737,   738,   739,   446,   740,   447,     0,     0,   448,     0,
       0,     0,   741,   449,     0,   450,   451,   452,   453,     0,
       0,     0,     0,     0,     0,   454,   455,   456,     0,   457,
     458,   459,   460,     0,     0,   742,     0,     0,   462,   463,
       0,   464,   465,   466,   467,   468,     0,   469,     0,     0,
       0,     0,     0,     0,     0,     0,   470,   471,   472,   743,
     473,   474,   475,     0,   476,   744,   745,   477,   746,   478,
       0,   747,   748,   749,   750,   751,   479,   480,     0,   752,
     481,   753,   482,   754,   483,   484,     0,     0,     0,   485,
     486,   487,   488,   489,   490,   491,   492,     0,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,     0,   503,
     504,   505,   506,   507,   508,   509,   510,   511,   512,     0,
     755,     0,   756,     0,     0,     0,     0,     0,     0,     0,
     757,     0,   758,     0,     0,     0,     0,   759,     0,   760,
      95,    96,     0,   669,    98,    99,   100,   101,     0,     0,
     102,     0,     0,     0,     0,   103,     0,     0,   104,     0,
     105,   106,   107,   108,   670,   110,     0,   111,     0,     0,
     671,   112,   672,     0,     0,   113,     0,     0,   114,   115,
     116,     0,   117,     0,   118,   119,     0,     0,   120,   673,
     674,   121,   122,     0,   123,   124,   125,   675,   126,     0,
     127,   128,   129,   130,   676,   132,     0,   133,   134,     0,
     135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
     145,     0,   677,   146,   147,     0,   148,   149,   150,   151,
     152,     0,   678,   679,   153,     0,     0,     0,   680,   154,
     681,     0,   155,   682,   683,     0,   156,   157,   158,   684,
     685,   686,     0,     0,     0,     0,   687,   161,   688,   689,
       0,     0,   690,   162,   163,     0,   164,     0,     0,     0,
       0,     0,   165,     0,     0,     0,   691,   166,   167,   168,
     169,     0,     0,     0,   170,     0,     0,   171,   172,   173,
       0,     0,     0,   174,     0,     0,   175,   176,   177,   178,
     179,     0,     0,   180,   181,     0,   182,   183,   184,   185,
     186,   187,   692,     0,   188,   189,   190,   191,   192,   693,
     694,   193,   194,     0,   195,   196,   197,   198,   199,   695,
       0,   200,   201,     0,     0,     0,   202,   203,     0,     0,
       0,     0,     0,   204,     0,   205,   206,   207,   696,     0,
     209,     0,   210,     0,   697,     0,   211,   212,     0,   213,
     698,     0,   214,   215,     0,     0,     0,   699,   217,   218,
       0,   700,     0,   219,   220,   221,     0,     0,   222,     0,
       0,     0,   701,   223,   224,   225,  1977,     0,     0,     0,
     226,     0,     0,     0,   227,   228,     0,   229,   230,     0,
       0,     0,   231,     0,   232,     0,     0,   233,   234,     0,
       0,   235,     0,   703,   236,   237,     0,     0,     0,     0,
       0,   238,   239,     0,   240,     0,   241,     0,   242,   243,
       0,     0,   704,     0,     0,     0,     0,   244,     0,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,     0,   263,   264,
     265,   705,   266,   267,   268,   269,   706,   270,   271,     0,
       0,     0,     0,   272,   273,   274,   275,   276,   277,     0,
       0,   707,   279,   708,   280,     0,   281,   709,   710,   283,
     284,   285,   286,   287,   288,   289,   290,     0,   711,   291,
     292,     0,     0,   293,   294,   295,   296,   297,   712,   713,
     714,   298,   299,     0,   715,   716,   300,     0,   301,   302,
       0,   303,   304,   305,     0,     0,   306,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   307,   308,   309,   717,
     310,     0,   311,     0,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   718,   322,     0,   323,   324,   325,
       0,   326,     0,   327,   328,   329,   330,   331,     0,   332,
     333,   334,     0,     0,   335,     0,     0,     0,   336,   337,
       0,   338,   339,     0,     0,   340,   341,   342,   343,   344,
       0,   345,   346,     0,   347,   348,   349,     0,     0,   350,
     351,   352,   353,   354,   355,   356,   357,     0,   358,     0,
     359,   360,     0,   361,   362,   363,     0,   364,     0,   719,
     365,   366,   367,   368,     0,   369,   720,   370,   371,   372,
     373,   374,     0,     0,   721,   376,     0,     0,     0,   377,
     378,   379,   380,     0,     0,     0,   381,     0,     0,     0,
       0,   382,     0,   383,   384,   385,   386,     0,   387,   388,
     389,   390,   391,     0,     0,     0,     0,     0,   392,   393,
     394,     0,   395,     0,     0,   396,     0,     0,   397,     0,
     398,     0,   399,   400,   401,   402,   403,   404,     0,     0,
     405,   406,     0,     0,   407,   408,   722,   410,   411,   412,
     723,   724,   413,   414,   415,   416,   725,   417,   418,   419,
       0,     0,   420,   421,   422,   423,     0,   726,   424,   425,
       0,   727,   728,   729,   730,     0,     0,     0,     0,     0,
     430,   431,     0,   731,   732,   733,   433,   434,     0,   734,
     435,   436,   735,   437,   438,     0,   439,   440,     0,     0,
     441,     0,     0,   442,     0,   443,     0,   736,   445,     0,
       0,   737,   738,   739,   446,   740,   447,     0,     0,   448,
       0,     0,     0,   741,   449,     0,   450,   451,   452,   453,
       0,     0,     0,     0,     0,     0,   454,   455,   456,     0,
     457,   458,   459,   460,     0,     0,   742,     0,     0,   462,
     463,     0,   464,   465,   466,   467,   468,     0,   469,     0,
       0,     0,     0,     0,     0,     0,     0,   470,   471,   472,
     743,   473,   474,   475,     0,   476,   744,   745,   477,   746,
     478,     0,   747,   748,   749,   750,   751,   479,   480,     0,
     752,   481,   753,   482,   754,   483,   484,     0,     0,     0,
     485,   486,   487,   488,   489,   490,   491,   492,     0,   493,
     494,   495,   496,   497,   498,   499,   500,   501,   502,     0,
     503,   504,   505,   506,   507,   508,   509,   510,   511,   512,
       0,   755,     0,   756,     0,     0,     0,     0,     0,     0,
       0,   757,     0,   758,     0,     0,     0,     0,   759,     0,
     760,    95,    96,     0,   669,    98,    99,   100,   101,     0,
       0,   102,     0,     0,     0,     0,   103,     0,     0,   104,
       0,   105,   106,   107,   108,   670,   110,     0,   111,     0,
       0,   671,   112,   672,     0,     0,   113,     0,     0,   114,
     115,   116,     0,   117,     0,   118,   119,     0,     0,   120,
     673,   674,   121,   122,     0,   123,   124,   125,   675,   126,
       0,   127,   128,   129,   130,   676,   132,     0,   133,   134,
       0,   135,   136,   137,   138,   139,   140,   141,   142,   143,
     144,   145,     0,   677,   146,   147,     0,   148,   149,   150,
     151,   152,     0,   678,   679,   153,     0,     0,     0,   680,
     154,   681,     0,   155,   682,   683,     0,   156,   157,   158,
     684,   685,   686,     0,     0,     0,     0,   687,   161,   688,
     689,     0,     0,   690,   162,   163,     0,   164,     0,     0,
       0,     0,     0,   165,     0,     0,     0,   691,   166,   167,
     168,   169,     0,     0,     0,   170,     0,     0,   171,   172,
     173,     0,     0,     0,   174,     0,     0,   175,   176,   177,
     178,   179,     0,     0,   180,   181,     0,   182,   183,   184,
     185,   186,   187,   692,     0,   188,   189,   190,   191,   192,
     693,   694,   193,   194,     0,   195,   196,   197,   198,   199,
     695,     0,   200,   201,     0,     0,     0,   202,   203,     0,
       0,     0,     0,     0,   204,     0,   205,   206,   207,   696,
       0,   209,     0,   210,     0,   697,     0,   211,   212,     0,
     213,   698,     0,   214,   215,     0,     0,     0,   699,   217,
     218,     0,   700,     0,   219,   220,   221,     0,     0,   222,
       0,     0,     0,   701,   223,   224,   225,  2026,     0,     0,
       0,   226,     0,     0,     0,   227,   228,     0,   229,   230,
       0,     0,     0,   231,     0,   232,     0,     0,   233,   234,
       0,     0,   235,     0,   703,   236,   237,     0,     0,     0,
       0,     0,   238,   239,     0,   240,     0,   241,     0,   242,
     243,     0,     0,   704,     0,     0,     0,     0,   244,     0,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,     0,   263,
     264,   265,   705,   266,   267,   268,   269,   706,   270,   271,
       0,     0,     0,     0,   272,   273,   274,   275,   276,   277,
       0,     0,   707,   279,   708,   280,     0,   281,   709,   710,
     283,   284,   285,   286,   287,   288,   289,   290,     0,   711,
     291,   292,     0,     0,   293,   294,   295,   296,   297,   712,
     713,   714,   298,   299,     0,   715,   716,   300,     0,   301,
     302,     0,   303,   304,   305,     0,     0,   306,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   307,   308,   309,
     717,   310,     0,   311,     0,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   718,   322,     0,   323,   324,
     325,     0,   326,     0,   327,   328,   329,   330,   331,     0,
     332,   333,   334,     0,     0,   335,     0,     0,     0,   336,
     337,     0,   338,   339,     0,     0,   340,   341,   342,   343,
     344,     0,   345,   346,     0,   347,   348,   349,     0,     0,
     350,   351,   352,   353,   354,   355,   356,   357,     0,   358,
       0,   359,   360,     0,   361,   362,   363,     0,   364,     0,
     719,   365,   366,   367,   368,     0,   369,   720,   370,   371,
     372,   373,   374,     0,     0,   721,   376,     0,     0,     0,
     377,   378,   379,   380,     0,     0,     0,   381,     0,     0,
       0,     0,   382,     0,   383,   384,   385,   386,     0,   387,
     388,   389,   390,   391,     0,     0,     0,     0,     0,   392,
     393,   394,     0,   395,     0,     0,   396,     0,     0,   397,
       0,   398,     0,   399,   400,   401,   402,   403,   404,     0,
       0,   405,   406,     0,     0,   407,   408,   722,   410,   411,
     412,   723,   724,   413,   414,   415,   416,   725,   417,   418,
     419,     0,     0,   420,   421,   422,   423,     0,   726,   424,
     425,     0,   727,   728,   729,   730,     0,     0,     0,     0,
       0,   430,   431,     0,   731,   732,   733,   433,   434,     0,
     734,   435,   436,   735,   437,   438,     0,   439,   440,     0,
       0,   441,     0,     0,   442,     0,   443,     0,   736,   445,
       0,     0,   737,   738,   739,   446,   740,   447,     0,     0,
     448,     0,     0,     0,   741,   449,     0,   450,   451,   452,
     453,     0,     0,     0,     0,     0,     0,   454,   455,   456,
       0,   457,   458,   459,   460,     0,     0,   742,     0,     0,
     462,   463,     0,   464,   465,   466,   467,   468,     0,   469,
       0,     0,     0,     0,     0,     0,     0,     0,   470,   471,
     472,   743,   473,   474,   475,     0,   476,   744,   745,   477,
     746,   478,     0,   747,   748,   749,   750,   751,   479,   480,
       0,   752,   481,   753,   482,   754,   483,   484,     0,     0,
       0,   485,   486,   487,   488,   489,   490,   491,   492,     0,
     493,   494,   495,   496,   497,   498,   499,   500,   501,   502,
       0,   503,   504,   505,   506,   507,   508,   509,   510,   511,
     512,     0,   755,     0,   756,     0,     0,     0,     0,     0,
       0,     0,   757,     0,   758,     0,     0,     0,     0,   759,
       0,   760,    95,    96,     0,   669,    98,    99,   100,   101,
       0,     0,   102,     0,     0,     0,     0,   103,     0,     0,
     104,     0,   105,   106,   107,   108,   670,   110,     0,   111,
       0,     0,   671,   112,   672,     0,     0,   113,     0,     0,
     114,   115,   116,     0,   117,     0,   118,   119,     0,     0,
     120,   673,   674,   121,   122,     0,   123,   124,   125,   675,
     126,     0,   127,   128,   129,   130,   676,   132,     0,   133,
     134,     0,   135,   136,   137,   138,   139,   140,   141,   142,
     143,   144,   145,     0,   677,   146,   147,     0,   148,   149,
     150,   151,   152,     0,   678,   679,   153,     0,     0,     0,
     680,   154,   681,     0,   155,   682,   683,     0,   156,   157,
     158,   684,   685,   686,     0,     0,     0,     0,   687,   161,
     688,   689,     0,     0,  2390,   162,   163,     0,   164,     0,
       0,     0,     0,     0,   165,     0,     0,     0,   691,   166,
     167,   168,   169,     0,     0,     0,   170,     0,     0,   171,
     172,   173,     0,     0,     0,   174,     0,     0,   175,   176,
     177,   178,   179,     0,     0,   180,   181,     0,   182,   183,
     184,   185,   186,   187,   692,     0,   188,   189,   190,   191,
     192,   693,   694,   193,   194,     0,   195,   196,   197,   198,
     199,   695,     0,   200,   201,     0,     0,     0,   202,   203,
       0,     0,     0,     0,     0,   204,     0,   205,   206,   207,
     696,     0,   209,     0,   210,     0,   697,     0,   211,   212,
       0,   213,   698,     0,   214,   215,     0,     0,     0,   699,
     217,   218,     0,   700,     0,   219,   220,   221,     0,     0,
     222,     0,     0,     0,   701,   223,   224,   225,   702,     0,
       0,     0,   226,     0,     0,     0,   227,   228,     0,   229,
     230,     0,     0,     0,   231,     0,   232,     0,     0,   233,
     234,     0,     0,   235,     0,   703,   236,   237,     0,     0,
       0,     0,     0,   238,   239,     0,   240,     0,   241,     0,
     242,   243,     0,     0,   704,     0,     0,     0,     0,   244,
       0,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,     0,
     263,   264,   265,   705,   266,   267,   268,   269,   706,   270,
     271,     0,     0,     0,     0,   272,   273,   274,   275,   276,
     277,     0,     0,   707,   279,   708,   280,     0,   281,   709,
     710,   283,   284,   285,   286,   287,   288,   289,   290,     0,
     711,   291,   292,     0,     0,   293,   294,   295,   296,   297,
     712,   713,   714,   298,   299,     0,   715,   716,   300,     0,
     301,   302,     0,   303,   304,   305,     0,     0,   306,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   307,   308,
     309,   717,   310,     0,   311,     0,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   718,   322,     0,   323,
     324,   325,     0,   326,     0,   327,   328,   329,   330,   331,
       0,   332,   333,   334,     0,     0,   335,     0,     0,     0,
     336,   337,     0,   338,   339,     0,     0,   340,   341,   342,
     343,   344,     0,   345,   346,     0,   347,   348,   349,     0,
       0,   350,   351,   352,   353,   354,   355,   356,   357,     0,
     358,     0,   359,   360,     0,   361,   362,   363,     0,   364,
       0,   719,   365,   366,   367,   368,     0,   369,   720,   370,
     371,   372,   373,   374,     0,     0,   721,   376,     0,     0,
       0,   377,   378,   379,   380,     0,     0,     0,   381,     0,
       0,     0,     0,   382,     0,   383,   384,   385,   386,     0,
     387,   388,   389,   390,   391,     0,     0,     0,     0,     0,
     392,   393,   394,     0,   395,     0,     0,   396,     0,     0,
     397,     0,   398,     0,   399,   400,   401,   402,   403,   404,
       0,     0,   405,   406,     0,     0,   407,   408,   722,   410,
     411,   412,   723,   724,   413,   414,   415,   416,   725,   417,
     418,   419,     0,     0,   420,   421,   422,   423,     0,   726,
     424,   425,     0,   727,   728,   729,   730,     0,     0,     0,
       0,     0,   430,   431,     0,   731,   732,   733,   433,   434,
       0,   734,   435,   436,   735,   437,   438,     0,   439,   440,
       0,     0,   441,     0,     0,   442,     0,   443,     0,   736,
     445,     0,     0,   737,   738,   739,   446,   740,   447,     0,
       0,   448,     0,     0,     0,   741,   449,     0,   450,   451,
     452,   453,     0,     0,     0,     0,     0,     0,   454,   455,
     456,     0,   457,   458,   459,   460,     0,     0,   742,     0,
       0,   462,   463,     0,   464,   465,   466,   467,   468,     0,
     469,     0,     0,     0,     0,     0,     0,     0,     0,   470,
     471,   472,   743,   473,   474,   475,     0,   476,   744,   745,
     477,   746,   478,     0,   747,   748,   749,   750,   751,   479,
     480,     0,   752,   481,   753,   482,   754,   483,   484,     0,
       0,     0,   485,   486,   487,   488,   489,   490,   491,   492,
       0,   493,   494,   495,   496,   497,   498,   499,   500,   501,
     502,     0,   503,   504,   505,   506,   507,   508,   509,   510,
     511,   512,     0,   755,     0,   756,     0,     0,     0,     0,
       0,     0,     0,   757,     0,   758,     0,     0,     0,     0,
     759,     0,   760,    95,    96,     0,   669,    98,    99,   100,
     101,     0,     0,   102,     0,     0,     0,     0,   103,     0,
       0,   104,     0,   105,   106,   107,   108,   670,   110,     0,
     111,     0,     0,   671,   112,   672,     0,     0,   113,     0,
       0,   114,   115,   116,     0,   117,     0,   118,   119,     0,
       0,   120,   673,   674,   121,   122,     0,   123,   124,   125,
     675,   126,     0,   127,   128,   129,   130,   676,   132,     0,
     133,   134,     0,   135,   136,   137,   138,   139,   140,   141,
     142,   143,   144,   145,     0,   677,   146,   147,     0,   148,
     149,   150,   151,   152,     0,   678,   679,   153,     0,     0,
       0,   680,   154,   681,     0,   155,   682,   683,     0,   156,
     157,   158,   684,   685,   686,     0,     0,     0,     0,   687,
     161,   688,   689,     0,     0,   690,   162,   163,     0,   164,
       0,     0,     0,     0,     0,   165,     0,     0,     0,   691,
     166,   167,   168,   169,     0,     0,     0,   170,     0,     0,
     171,   172,   173,     0,     0,     0,   174,     0,     0,   175,
     176,   177,   178,   179,     0,     0,   180,   181,     0,   182,
     183,   184,   185,   186,   187,   692,     0,   188,   189,   190,
     191,   192,   693,   694,   193,   194,     0,   195,   196,   197,
     198,   199,   695,     0,   200,   201,     0,     0,     0,   202,
     203,     0,     0,     0,     0,     0,   204,     0,   205,   206,
     207,   696,     0,   209,     0,   210,     0,   697,     0,   211,
     212,     0,   213,   698,     0,   214,   215,     0,     0,     0,
     699,   217,   218,     0,   700,     0,   219,   220,   221,     0,
       0,   222,     0,     0,     0,   701,   223,   224,   225,   702,
       0,     0,     0,   226,     0,     0,     0,   227,   228,     0,
     229,   230,     0,     0,     0,   231,     0,   232,     0,     0,
     233,   234,     0,     0,   235,     0,   703,   236,   237,     0,
       0,     0,     0,     0,   238,   239,     0,   240,     0,   241,
       0,   242,   243,     0,     0,   704,     0,     0,     0,     0,
     244,     0,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
       0,   263,   264,   265,   705,   266,   267,   268,   269,   706,
     270,   271,  3174,     0,     0,     0,   272,   273,   274,   275,
     276,   277,     0,     0,   707,   279,   708,   280,     0,   281,
     709,   710,   283,   284,   285,   286,   287,   288,   289,   290,
       0,   711,   291,   292,     0,     0,   293,   294,   295,   296,
     297,   712,     0,   714,   298,   299,     0,   715,   716,   300,
       0,   301,   302,     0,   303,   304,   305,     0,     0,   306,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   307,
     308,   309,   717,   310,     0,   311,     0,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   718,   322,     0,
     323,   324,   325,     0,   326,     0,   327,   328,   329,   330,
     331,     0,   332,   333,   334,     0,     0,   335,     0,     0,
       0,   336,   337,     0,   338,   339,     0,     0,   340,   341,
     342,   343,   344,     0,   345,   346,     0,   347,   348,   349,
       0,     0,   350,   351,   352,   353,   354,   355,   356,   357,
       0,   358,     0,   359,   360,     0,   361,   362,   363,     0,
     364,     0,   719,   365,   366,   367,   368,     0,   369,   720,
     370,   371,   372,   373,   374,     0,     0,   721,   376,     0,
       0,     0,   377,   378,   379,   380,     0,     0,     0,   381,
       0,     0,     0,     0,   382,     0,   383,   384,   385,   386,
       0,   387,   388,   389,   390,   391,     0,     0,     0,     0,
       0,   392,   393,   394,     0,   395,     0,     0,   396,     0,
       0,   397,     0,   398,     0,   399,   400,   401,   402,   403,
     404,     0,     0,   405,   406,     0,     0,   407,   408,   722,
     410,   411,   412,   723,   724,   413,   414,   415,   416,   725,
     417,   418,   419,     0,     0,   420,   421,   422,   423,     0,
     726,   424,   425,     0,   727,   728,   729,   730,     0,     0,
       0,     0,     0,   430,   431,     0,   731,   732,   733,   433,
     434,     0,   734,   435,   436,   735,   437,   438,     0,   439,
     440,     0,     0,   441,     0,     0,   442,     0,   443,     0,
     736,   445,     0,     0,   737,   738,   739,   446,   740,   447,
       0,     0,   448,     0,     0,     0,   741,   449,     0,   450,
     451,   452,   453,     0,     0,     0,     0,     0,     0,   454,
     455,   456,     0,   457,   458,   459,   460,     0,     0,   742,
       0,     0,   462,   463,     0,   464,   465,   466,   467,   468,
       0,   469,     0,     0,     0,     0,     0,     0,     0,     0,
     470,   471,   472,   743,   473,   474,   475,     0,   476,   744,
     745,   477,   746,   478,     0,   747,   748,   749,   750,   751,
     479,   480,     0,   752,   481,   753,   482,   754,   483,   484,
       0,     0,     0,   485,   486,   487,   488,   489,   490,   491,
     492,     0,   493,   494,   495,   496,   497,   498,   499,   500,
     501,   502,     0,   503,   504,   505,   506,   507,   508,   509,
     510,   511,   512,     0,   755,     0,   756,     0,     0,     0,
       0,     0,     0,     0,   757,     0,  3175,     0,     0,     0,
       0,   759,     0,   760,    95,    96,     0,   669,    98,    99,
     100,   101,     0,     0,   102,     0,     0,     0,     0,   103,
       0,     0,   104,     0,   105,   106,   107,   108,   670,   110,
       0,   111,     0,     0,   671,   112,   672,     0,     0,   113,
       0,     0,   114,   115,   116,     0,   117,     0,   118,   119,
       0,     0,   120,   673,   674,   121,   122,     0,   123,   124,
     125,   675,   126,     0,   127,   128,   129,   130,   676,   132,
       0,   133,   134,     0,   135,   136,   137,   138,   139,   140,
     141,   142,   143,   144,   145,     0,   677,   146,   147,     0,
     148,   149,   150,   151,   152,     0,   678,   679,   153,     0,
       0,     0,   680,   154,   681,     0,   155,   682,   683,     0,
     156,   157,   158,   684,   685,   686,     0,     0,     0,     0,
     687,   161,   688,   689,     0,     0,   690,   162,   163,     0,
     164,     0,     0,     0,     0,     0,   165,     0,     0,     0,
     691,   166,   167,   168,   169,     0,     0,     0,   170,     0,
       0,   171,   172,   173,     0,     0,     0,   174,     0,     0,
     175,   176,   177,   178,   179,     0,     0,   180,   181,     0,
     182,   183,   184,   185,   186,   187,   692,     0,   188,   189,
     190,   191,   192,   693,   694,   193,   194,     0,   195,   196,
     197,   198,   199,   695,     0,   200,   201,     0,     0,     0,
     202,   203,     0,     0,     0,     0,     0,   204,     0,   205,
     206,   207,   696,     0,   209,     0,   210,     0,   697,     0,
     211,   212,     0,   213,   698,     0,   214,   215,     0,     0,
       0,   699,   217,   218,     0,   700,     0,   219,   220,   221,
       0,     0,   222,     0,     0,     0,   701,   223,   224,   225,
     702,     0,     0,     0,   226,     0,     0,     0,   227,   228,
       0,   229,   230,     0,     0,     0,   231,     0,   232,     0,
       0,   233,   234,     0,     0,   235,     0,   703,   236,   237,
       0,     0,     0,     0,     0,   238,   239,     0,   240,     0,
     241,     0,   242,   243,     0,     0,   704,     0,     0,     0,
       0,   244,     0,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,     0,   263,   264,   265,   705,   266,   267,   268,   269,
     706,   270,   271,  3174,     0,     0,     0,   272,   273,   274,
     275,   276,   277,     0,     0,   707,   279,   708,   280,     0,
     281,   709,   710,   283,   284,   285,   286,   287,   288,   289,
     290,     0,   711,   291,   292,     0,     0,   293,   294,   295,
     296,   297,   712,     0,   714,   298,   299,     0,   715,   716,
     300,     0,   301,   302,     0,   303,   304,   305,     0,     0,
     306,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     307,   308,   309,   717,   310,     0,   311,     0,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   718,   322,
       0,   323,   324,   325,     0,   326,     0,   327,   328,   329,
     330,   331,     0,   332,   333,   334,     0,     0,   335,     0,
       0,     0,   336,   337,     0,   338,   339,     0,     0,   340,
     341,   342,   343,   344,     0,   345,   346,     0,   347,   348,
     349,     0,     0,   350,   351,   352,   353,   354,   355,   356,
     357,     0,   358,     0,   359,   360,     0,   361,   362,   363,
       0,   364,     0,   719,   365,   366,   367,   368,     0,   369,
     720,   370,   371,   372,   373,   374,     0,     0,   721,   376,
       0,     0,     0,   377,   378,   379,   380,     0,     0,     0,
     381,     0,     0,     0,     0,   382,     0,   383,   384,   385,
     386,     0,   387,   388,   389,   390,   391,     0,     0,     0,
       0,     0,   392,   393,   394,     0,   395,     0,     0,   396,
       0,     0,   397,     0,   398,     0,   399,   400,   401,   402,
     403,   404,     0,     0,   405,   406,     0,     0,   407,   408,
     722,   410,   411,   412,   723,   724,   413,   414,   415,   416,
     725,   417,   418,   419,     0,     0,   420,   421,   422,   423,
       0,   726,   424,   425,     0,   727,   728,   729,   730,     0,
       0,     0,     0,     0,   430,   431,     0,   731,   732,   733,
     433,   434,     0,   734,   435,   436,   735,   437,   438,     0,
     439,   440,     0,     0,   441,     0,     0,   442,     0,   443,
       0,   736,   445,     0,     0,   737,   738,   739,   446,   740,
     447,     0,     0,   448,     0,     0,     0,   741,   449,     0,
     450,   451,   452,   453,     0,     0,     0,     0,     0,     0,
     454,   455,   456,     0,   457,   458,   459,   460,     0,     0,
     742,     0,     0,   462,   463,     0,   464,   465,   466,   467,
     468,     0,   469,     0,     0,     0,     0,     0,     0,     0,
       0,   470,   471,   472,   743,   473,   474,   475,     0,   476,
     744,   745,   477,   746,   478,     0,   747,   748,   749,   750,
     751,   479,   480,     0,   752,   481,   753,   482,   754,   483,
     484,     0,     0,     0,   485,   486,   487,   488,   489,   490,
     491,   492,     0,   493,   494,   495,   496,   497,   498,   499,
     500,   501,   502,     0,   503,   504,   505,   506,   507,   508,
     509,   510,   511,   512,     0,   755,     0,   756,     0,     0,
       0,     0,     0,     0,     0,   757,     0,   758,     0,     0,
       0,     0,   759,     0,   760,    95,    96,     0,   669,    98,
      99,   100,   101,     0,     0,   102,     0,     0,     0,     0,
     103,     0,     0,   104,     0,   105,   106,   107,   108,   670,
     110,     0,   111,     0,     0,   671,   112,   672,     0,     0,
     113,     0,     0,   114,   115,   116,     0,   117,     0,   118,
     119,     0,     0,   120,   673,   674,   121,   122,     0,   123,
     124,   125,   675,   126,     0,   127,   128,   129,   130,   676,
     132,     0,   133,   134,     0,   135,   136,   137,   138,   139,
     140,   141,   142,   143,   144,   145,     0,   677,   146,   147,
       0,   148,   149,   150,   151,   152,     0,   678,   679,   153,
       0,     0,     0,   680,   154,   681,     0,   155,   682,   683,
       0,   156,   157,   158,   684,   685,   686,     0,     0,     0,
       0,   687,   161,   688,   689,     0,     0,   690,   162,   163,
       0,   164,     0,     0,     0,     0,     0,   165,     0,     0,
       0,   691,   166,   167,   168,   169,     0,     0,     0,   170,
       0,     0,   171,   172,   173,     0,     0,     0,   174,     0,
       0,   175,   176,   177,   178,   179,     0,     0,   180,   181,
       0,   182,   183,   184,   185,   186,   187,   692,     0,   188,
     189,   190,   191,   192,   693,   694,   193,   194,     0,   195,
     196,   197,   198,   199,   695,     0,   200,   201,     0,     0,
       0,   202,   203,     0,     0,     0,     0,     0,   204,     0,
     205,   206,   207,   696,     0,   209,     0,   210,     0,   697,
       0,   211,   212,     0,   213,   698,     0,   214,   215,     0,
       0,     0,   699,   217,   218,     0,   700,     0,   219,   220,
     221,     0,     0,   222,     0,     0,     0,   701,   223,   224,
     225,   702,     0,     0,     0,   226,     0,     0,     0,   227,
     228,     0,   229,   230,     0,     0,     0,   231,     0,   232,
       0,     0,   233,   234,     0,     0,   235,     0,   703,   236,
     237,     0,     0,     0,     0,     0,   238,   239,     0,   240,
       0,   241,     0,   242,   243,     0,     0,   704,     0,     0,
       0,     0,   244,     0,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,     0,   263,   264,   265,   705,   266,   267,   268,
     269,   706,   270,   271,     0,     0,     0,     0,   272,   273,
     274,   275,   276,   277,     0,     0,   707,   279,   708,   280,
       0,   281,   709,   710,   283,   284,   285,   286,   287,   288,
     289,   290,     0,   711,   291,   292,     0,     0,   293,   294,
     295,   296,   297,   712,     0,   714,   298,   299,     0,   715,
     716,   300,     0,   301,   302,     0,   303,   304,   305,     0,
       0,   306,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   307,   308,   309,   717,   310,     0,   311,     0,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,   718,
     322,     0,   323,   324,   325,     0,   326,     0,   327,   328,
     329,   330,   331,     0,   332,   333,   334,     0,     0,   335,
       0,     0,     0,   336,   337,     0,   338,   339,     0,     0,
     340,   341,   342,   343,   344,     0,   345,   346,     0,   347,
     348,   349,     0,     0,   350,   351,   352,   353,   354,   355,
     356,   357,     0,   358,     0,   359,   360,     0,   361,   362,
     363,     0,   364,     0,   719,   365,   366,   367,   368,     0,
     369,   720,   370,   371,   372,   373,   374,     0,     0,   721,
     376,     0,     0,     0,   377,   378,   379,   380,     0,     0,
       0,   381,     0,     0,     0,     0,   382,     0,   383,   384,
     385,   386,     0,   387,   388,   389,   390,   391,     0,     0,
       0,     0,     0,   392,   393,   394,     0,   395,     0,     0,
     396,     0,     0,   397,     0,   398,     0,   399,   400,   401,
     402,   403,   404,     0,     0,   405,   406,     0,     0,   407,
     408,   722,   410,   411,   412,   723,   724,   413,   414,   415,
     416,   725,   417,   418,   419,     0,     0,   420,   421,   422,
     423,     0,   726,   424,   425,     0,   727,   728,   729,   730,
       0,     0,     0,     0,     0,   430,   431,     0,   731,   732,
     733,   433,   434,     0,   734,   435,   436,   735,   437,   438,
       0,   439,   440,     0,     0,   441,     0,     0,   442,     0,
     443,     0,   736,   445,     0,     0,   737,   738,   739,   446,
     740,   447,     0,     0,   448,     0,     0,     0,   741,   449,
       0,   450,   451,   452,   453,     0,     0,     0,     0,     0,
       0,   454,   455,   456,     0,   457,   458,   459,   460,     0,
       0,   742,     0,     0,   462,   463,     0,   464,   465,   466,
     467,   468,     0,   469,     0,     0,     0,     0,     0,     0,
       0,     0,   470,   471,   472,   743,   473,   474,   475,     0,
     476,   744,   745,   477,   746,   478,     0,   747,   748,   749,
     750,   751,   479,   480,     0,   752,   481,   753,   482,   754,
     483,   484,     0,     0,     0,   485,   486,   487,   488,   489,
     490,   491,   492,     0,   493,   494,   495,   496,   497,   498,
     499,   500,   501,   502,     0,   503,   504,   505,   506,   507,
     508,   509,   510,   511,   512,     0,   755,     0,   756,     0,
       0,     0,     0,     0,     0,     0,   757,     0,   758,     0,
       0,     0,     0,   759,     0,   760,    95,    96,     0,   669,
      98,    99,   100,   101,     0,     0,   102,     0,     0,     0,
       0,   103,     0,     0,   104,     0,   105,   106,   107,   108,
     670,   110,     0,   111,     0,     0,   671,   112,   672,     0,
       0,   113,     0,     0,   114,   115,   116,     0,   117,     0,
     118,   119,     0,     0,   120,   673,   674,   121,   122,     0,
     123,   124,   125,   675,   126,     0,   127,   128,   129,   130,
     676,   132,     0,   133,   134,     0,   135,   136,   137,   138,
     139,   140,   141,   142,   143,   144,   145,     0,   677,   146,
     147,     0,   148,   149,   150,   151,   152,     0,   678,   679,
     153,     0,     0,     0,   680,   154,   681,     0,   155,   682,
     683,     0,   156,   157,   158,   684,   685,   686,     0,     0,
       0,     0,   687,   161,   688,   689,     0,     0,   690,   162,
     163,     0,   164,     0,     0,     0,     0,     0,   165,     0,
       0,     0,   691,   166,   167,   168,   169,     0,     0,     0,
     170,     0,     0,   171,   172,   173,     0,     0,     0,   174,
       0,     0,   175,   176,   177,   178,   179,     0,     0,   180,
     181,     0,   182,   183,   184,   185,   186,   187,   692,     0,
     188,   189,   190,   191,   192,   693,   694,   193,   194,     0,
     195,   196,   197,   198,   199,   695,     0,   200,   201,     0,
       0,     0,   202,   203,     0,     0,     0,     0,     0,   204,
       0,   205,   206,   207,   696,     0,   209,     0,   210,     0,
     697,     0,   211,   212,     0,   213,   698,     0,   214,   215,
       0,     0,     0,   699,   217,   218,     0,   700,     0,   219,
     220,   221,     0,     0,   222,     0,     0,     0,   701,   223,
     224,   225,  1440,     0,     0,     0,   226,     0,     0,     0,
     227,   228,     0,   229,   230,     0,     0,     0,   231,     0,
     232,     0,     0,   233,   234,     0,     0,   235,     0,   703,
     236,   237,     0,     0,     0,     0,     0,   238,   239,     0,
     240,     0,   241,     0,   242,   243,     0,     0,   704,     0,
       0,     0,     0,   244,     0,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,     0,   263,   264,   265,   705,   266,   267,
     268,   269,   706,   270,   271,     0,     0,     0,     0,   272,
     273,   274,   275,   276,   277,     0,     0,   707,   279,   708,
     280,     0,   281,   709,   710,   283,   284,   285,   286,   287,
     288,   289,   290,     0,   711,   291,   292,     0,     0,   293,
     294,   295,   296,   297,   712,     0,   714,   298,   299,     0,
     715,   716,   300,     0,   301,   302,     0,   303,   304,   305,
       0,     0,   306,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   307,   308,   309,   717,   310,     0,   311,     0,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     718,   322,     0,   323,   324,   325,     0,   326,     0,   327,
     328,   329,   330,   331,     0,   332,   333,   334,     0,     0,
     335,     0,     0,     0,   336,   337,     0,   338,   339,     0,
       0,   340,   341,   342,   343,   344,     0,   345,   346,     0,
     347,   348,   349,     0,     0,   350,   351,   352,   353,   354,
     355,   356,   357,     0,   358,     0,   359,   360,     0,   361,
     362,   363,     0,   364,     0,   719,   365,   366,   367,   368,
       0,   369,   720,   370,   371,   372,   373,   374,     0,     0,
     721,   376,     0,     0,     0,   377,   378,   379,   380,     0,
       0,     0,   381,     0,     0,     0,     0,   382,     0,   383,
     384,   385,   386,     0,   387,   388,   389,   390,   391,     0,
       0,     0,     0,     0,   392,   393,   394,     0,   395,     0,
       0,   396,     0,     0,   397,     0,   398,     0,   399,   400,
     401,   402,   403,   404,     0,     0,   405,   406,     0,     0,
     407,   408,   722,   410,   411,   412,   723,   724,   413,   414,
     415,   416,   725,   417,   418,   419,     0,     0,   420,   421,
     422,   423,     0,   726,   424,   425,     0,   727,   728,   729,
     730,     0,     0,     0,     0,     0,   430,   431,     0,   731,
     732,   733,   433,   434,     0,   734,   435,   436,   735,   437,
     438,     0,   439,   440,     0,     0,   441,     0,     0,   442,
       0,   443,     0,   736,   445,     0,     0,   737,   738,   739,
     446,   740,   447,     0,     0,   448,     0,     0,     0,   741,
     449,     0,   450,   451,   452,   453,     0,     0,     0,     0,
       0,     0,   454,   455,   456,     0,   457,   458,   459,   460,
       0,     0,   742,     0,     0,   462,   463,     0,   464,   465,
     466,   467,   468,     0,   469,     0,     0,     0,     0,     0,
       0,     0,     0,   470,   471,   472,   743,   473,   474,   475,
       0,   476,   744,   745,   477,   746,   478,     0,   747,   748,
     749,   750,   751,   479,   480,     0,   752,   481,   753,   482,
     754,   483,   484,     0,     0,     0,   485,   486,   487,   488,
     489,   490,   491,   492,     0,   493,   494,   495,   496,   497,
     498,   499,   500,   501,   502,     0,   503,   504,   505,   506,
     507,   508,   509,   510,   511,   512,     0,   755,     0,   756,
       0,     0,     0,     0,     0,     0,     0,   757,     0,   758,
       0,     0,     0,     0,   759,     0,   760,    95,    96,     0,
     669,    98,    99,   100,   101,     0,     0,   102,     0,     0,
       0,     0,   103,     0,     0,   104,     0,   105,   106,   107,
     108,   670,   110,     0,   111,     0,     0,   671,   112,   672,
       0,     0,   113,     0,     0,   114,   115,   116,     0,   117,
       0,   118,   119,     0,     0,   120,   673,   674,   121,   122,
       0,   123,   124,   125,   675,   126,     0,   127,   128,   129,
     130,   676,   132,     0,   133,   134,     0,   135,   136,   137,
     138,   139,   140,   141,   142,   143,   144,   145,     0,   677,
     146,   147,     0,   148,   149,   150,   151,   152,     0,   678,
     679,   153,     0,     0,     0,   680,   154,   681,     0,   155,
     682,   683,     0,   156,   157,   158,   684,   685,   686,     0,
       0,     0,     0,   687,   161,   688,   689,     0,     0,   690,
     162,   163,     0,   164,     0,     0,     0,     0,     0,   165,
       0,     0,     0,   691,   166,   167,   168,   169,     0,     0,
       0,   170,     0,     0,   171,   172,   173,     0,     0,     0,
     174,     0,     0,   175,   176,   177,   178,   179,     0,     0,
     180,   181,     0,   182,   183,   184,   185,   186,   187,   692,
       0,   188,   189,   190,   191,   192,   693,   694,   193,   194,
       0,   195,   196,   197,   198,   199,   695,     0,   200,   201,
       0,     0,     0,   202,   203,     0,     0,     0,     0,     0,
     204,     0,   205,   206,   207,   696,     0,   209,     0,   210,
       0,   697,     0,   211,   212,     0,   213,   698,     0,   214,
     215,     0,     0,     0,   699,   217,   218,     0,   700,     0,
     219,   220,   221,     0,     0,   222,     0,     0,     0,   701,
     223,   224,   225,  1442,     0,     0,     0,   226,     0,     0,
       0,   227,   228,     0,   229,   230,     0,     0,     0,   231,
       0,   232,     0,     0,   233,   234,     0,     0,   235,     0,
     703,   236,   237,     0,     0,     0,     0,     0,   238,   239,
       0,   240,     0,   241,     0,   242,   243,     0,     0,   704,
       0,     0,     0,     0,   244,     0,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,     0,   263,   264,   265,   705,   266,
     267,   268,   269,   706,   270,   271,     0,     0,     0,     0,
     272,   273,   274,   275,   276,   277,     0,     0,   707,   279,
     708,   280,     0,   281,   709,   710,   283,   284,   285,   286,
     287,   288,   289,   290,     0,   711,   291,   292,     0,     0,
     293,   294,   295,   296,   297,   712,     0,   714,   298,   299,
       0,   715,   716,   300,     0,   301,   302,     0,   303,   304,
     305,     0,     0,   306,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   307,   308,   309,   717,   310,     0,   311,
       0,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,   718,   322,     0,   323,   324,   325,     0,   326,     0,
     327,   328,   329,   330,   331,     0,   332,   333,   334,     0,
       0,   335,     0,     0,     0,   336,   337,     0,   338,   339,
       0,     0,   340,   341,   342,   343,   344,     0,   345,   346,
       0,   347,   348,   349,     0,     0,   350,   351,   352,   353,
     354,   355,   356,   357,     0,   358,     0,   359,   360,     0,
     361,   362,   363,     0,   364,     0,   719,   365,   366,   367,
     368,     0,   369,   720,   370,   371,   372,   373,   374,     0,
       0,   721,   376,     0,     0,     0,   377,   378,   379,   380,
       0,     0,     0,   381,     0,     0,     0,     0,   382,     0,
     383,   384,   385,   386,     0,   387,   388,   389,   390,   391,
       0,     0,     0,     0,     0,   392,   393,   394,     0,   395,
       0,     0,   396,     0,     0,   397,     0,   398,     0,   399,
     400,   401,   402,   403,   404,     0,     0,   405,   406,     0,
       0,   407,   408,   722,   410,   411,   412,   723,   724,   413,
     414,   415,   416,   725,   417,   418,   419,     0,     0,   420,
     421,   422,   423,     0,   726,   424,   425,     0,   727,   728,
     729,   730,     0,     0,     0,     0,     0,   430,   431,     0,
     731,   732,   733,   433,   434,     0,   734,   435,   436,   735,
     437,   438,     0,   439,   440,     0,     0,   441,     0,     0,
     442,     0,   443,     0,   736,   445,     0,     0,   737,   738,
     739,   446,   740,   447,     0,     0,   448,     0,     0,     0,
     741,   449,     0,   450,   451,   452,   453,     0,     0,     0,
       0,     0,     0,   454,   455,   456,     0,   457,   458,   459,
     460,     0,     0,   742,     0,     0,   462,   463,     0,   464,
     465,   466,   467,   468,     0,   469,     0,     0,     0,     0,
       0,     0,     0,     0,   470,   471,   472,   743,   473,   474,
     475,     0,   476,   744,   745,   477,   746,   478,     0,   747,
     748,   749,   750,   751,   479,   480,     0,   752,   481,   753,
     482,   754,   483,   484,     0,     0,     0,   485,   486,   487,
     488,   489,   490,   491,   492,     0,   493,   494,   495,   496,
     497,   498,   499,   500,   501,   502,     0,   503,   504,   505,
     506,   507,   508,   509,   510,   511,   512,     0,   755,     0,
     756,     0,     0,     0,     0,     0,     0,     0,   757,     0,
     758,     0,     0,     0,     0,   759,     0,   760,    95,    96,
       0,    97,    98,    99,   100,   101,     0,     0,   102,     0,
       0,     0,     0,   103,     0,     0,   104,     0,   105,   106,
     107,   108,   109,   110,     0,   111,     0,     0,     0,   112,
       0,     0,     0,   113,     0,     0,   114,   115,   116,     0,
     117,     0,   118,   119,     0,     0,   120,     0,     0,   121,
     122,     0,   123,   124,   125,     0,   126,     0,   127,   128,
     129,   130,   131,   132,     0,   133,   134,     0,   135,   136,
     137,   138,   139,   140,   141,   142,   143,   144,   145,     0,
       0,   146,   147,     0,   148,   149,   150,   151,   152,     0,
       0,     0,   153,     0,     0,     0,     0,   154,     0,     0,
     155,     0,     0,     0,   156,   157,   158,     0,     0,   159,
       0,     0,     0,     0,   160,   161,     0,     0,     0,     0,
       0,   162,   163,     0,   164,     0,     0,     0,     0,     0,
     165,     0,     0,     0,     0,   166,   167,   168,   169,     0,
       0,     0,   170,     0,     0,   171,   172,   173,     0,     0,
       0,   174,     0,     0,   175,   176,   177,   178,   179,     0,
       0,   180,   181,     0,   182,   183,   184,   185,   186,   187,
       0,     0,   188,   189,   190,   191,   192,     0,     0,   193,
     194,     0,   195,   196,   197,   198,   199,     0,     0,   200,
     201,     0,     0,     0,   202,   203,     0,     0,     0,     0,
       0,   204,     0,   205,   206,   207,   208,     0,   209,     0,
     210,     0,     0,     0,   211,   212,     0,   213,     0,     0,
     214,   215,     0,     0,     0,   216,   217,   218,     0,     0,
       0,   219,   220,   221,     0,     0,   222,     0,     0,     0,
       0,   223,   224,   225,     0,     0,     0,     0,   226,     0,
       0,     0,   227,   228,     0,   229,   230,     0,     0,     0,
     231,     0,   232,     0,     0,   233,   234,     0,     0,   235,
       0,     0,   236,   237,   638,     0,     0,     0,     0,   238,
     239,     0,   240,     0,   241,     0,   242,   243,     0,     0,
       0,     0,     0,     0,     0,   244,     0,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,     0,   263,   264,   265,     0,
     266,   267,   268,   269,     0,   270,   271,     0,     0,     0,
       0,   272,   273,   274,   275,   276,   277,     0,     0,   278,
     279,     0,   280,     0,   281,     0,   282,   283,   284,   285,
     286,   287,   288,   289,   290,     0,     0,   291,   292,     0,
       0,   293,   294,   295,   296,   297,     0,     0,     0,   298,
     299,     0,     0,     0,   300,     0,   301,   302,     0,   303,
     304,   305,     0,     0,   306,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   307,   308,   309,     0,   310,     0,
     311,     0,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,     0,   322,     0,   323,   324,   325,     0,   326,
       0,   327,   328,   329,   330,   331,     0,   332,   333,   334,
       0,     0,   335,     0,     0,     0,   336,   337,     0,   338,
     339,     0,     0,   340,   341,   342,   343,   344,     0,   345,
     346,     0,   347,   348,   349,     0,     0,   350,   351,   352,
     353,   354,   355,   356,   357,     0,   358,     0,   359,   360,
       0,   361,   362,   363,     0,   364,     0,     0,   365,   366,
     367,   368,     0,   369,     0,   370,   371,   372,   373,   374,
       0,     0,   375,   376,     0,     0,     0,   377,   378,   379,
     380,     0,     0,     0,   381,     0,     0,     0,     0,   382,
       0,   383,   384,   385,   386,     0,   387,   388,   389,   390,
     391,     0,     0,     0,     0,     0,   392,   393,   394,     0,
     395,     0,     0,   396,     0,     0,   397,     0,   398,     0,
     399,   400,   401,   402,   403,   404,     0,     0,   405,   406,
       0,     0,   407,   408,   409,   410,   411,   412,     0,     0,
     413,   414,   415,   416,     0,   417,   418,   419,     0,     0,
     420,   421,   422,   423,     0,   639,   424,   425,     0,   426,
     427,   428,   429,     0,     0,     0,     0,     0,   430,   431,
       0,     0,     0,   432,   433,   434,     0,     0,   435,   436,
       0,   437,   438,     0,   439,   440,     0,     0,   441,     0,
       0,   442,     0,   443,     0,   444,   445,     0,     0,     0,
       0,     0,   446,     0,   447,     0,     0,   448,     0,     0,
       0,     0,   449,     0,   450,   451,   452,   453,     0,     0,
       0,     0,     0,     0,   454,   455,   456,     0,   457,   458,
     459,   460,     0,     0,   461,     0,     0,   462,   463,     0,
     464,   465,   466,   467,   468,     0,   469,     0,     0,     0,
       0,     0,     0,     0,     0,   470,   471,   472,     0,   473,
     474,   475,     0,   476,     0,     0,   477,     0,   478,     0,
       0,     0,     0,     0,     0,   479,   480,     0,     0,   481,
       0,   482,     0,   483,   484,     0,     0,     0,   485,   486,
     487,   488,   489,   490,   491,   492,     0,   493,   494,   495,
     496,   497,   498,   499,   500,   501,   502,     0,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,     0,    95,
      96,     0,    97,    98,    99,   100,   101,     0,     0,   102,
       0,     0,     0,     0,   103,     0,     0,   104,   822,   105,
     106,   107,   108,   109,   110,     0,   111,     0,     0,     0,
     112,     0,     0,     0,   113,     0,     0,   114,   115,   116,
       0,   117,     0,   118,   119,     0,     0,   120,     0,     0,
     121,   122,     0,   123,   124,   125,     0,   126,     0,   127,
     128,   129,   130,   131,   132,     0,   133,   134,     0,   135,
     136,   137,   138,   139,   140,   141,   142,   143,   144,   145,
       0,     0,   146,   147,     0,   148,   149,   150,   151,   152,
       0,     0,     0,   153,     0,     0,     0,     0,   154,     0,
       0,   155,     0,     0,     0,   156,   157,   158,     0,     0,
     159,     0,     0,     0,     0,   160,   161,     0,     0,     0,
       0,     0,   162,   163,     0,   164,     0,     0,     0,     0,
       0,   165,     0,     0,     0,     0,   166,   167,   168,   169,
       0,     0,     0,   170,     0,     0,   171,   172,   173,     0,
       0,     0,   174,     0,     0,   175,   176,   177,   178,   179,
       0,     0,   180,   181,     0,   182,   183,   184,   185,   186,
     187,     0,     0,   188,   189,   190,   191,   192,     0,     0,
     193,   194,     0,   195,   196,   197,   198,   199,     0,     0,
     200,   201,     0,     0,     0,   202,   203,     0,     0,     0,
       0,     0,   204,     0,   205,   206,   207,   208,     0,   209,
       0,   210,     0,     0,     0,   211,   212,     0,   213,     0,
       0,   214,   215,     0,     0,     0,   216,   217,   218,     0,
       0,     0,   219,   220,   221,     0,     0,   222,     0,     0,
       0,     0,   223,   224,   225,     0,     0,     0,     0,   226,
       0,     0,     0,   227,   228,     0,   229,   230,     0,     0,
       0,   231,     0,   232,     0,     0,   233,   234,     0,     0,
     235,     0,     0,   236,   237,   638,     0,     0,     0,     0,
     238,   239,     0,   240,     0,   241,     0,   242,   243,     0,
       0,     0,     0,     0,     0,     0,   244,     0,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,     0,   263,   264,   265,
       0,   266,   267,   268,   269,     0,   270,   271,     0,     0,
       0,     0,   272,   273,   274,   275,   276,   277,     0,     0,
     278,   279,     0,   280,     0,   281,     0,   282,   283,   284,
     285,   286,   287,   288,   289,   290,     0,     0,   291,   292,
       0,     0,   293,   294,   295,   296,   297,     0,     0,     0,
     298,   299,     0,     0,     0,   300,     0,   301,   302,     0,
     303,   304,   305,     0,     0,   306,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   307,   308,   309,     0,   310,
       0,   311,     0,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,     0,   322,     0,   323,   324,   325,     0,
     326,     0,   327,   328,   329,   330,   331,     0,   332,   333,
     334,     0,     0,   335,     0,     0,     0,   336,   337,     0,
     338,   339,     0,     0,   340,   341,   342,   343,   344,     0,
     345,   346,     0,   347,   348,   349,     0,     0,   350,   351,
     352,   353,   354,   355,   356,   357,     0,   358,     0,   359,
     360,     0,   361,   362,   363,     0,   364,     0,     0,   365,
     366,   367,   368,     0,   369,     0,   370,   371,   372,   373,
     374,     0,     0,   375,   376,     0,     0,     0,   377,   378,
     379,   380,     0,     0,     0,   381,     0,     0,     0,     0,
     382,     0,   383,   384,   385,   386,     0,   387,   388,   389,
     390,   391,     0,     0,     0,     0,     0,   392,   393,   394,
       0,   395,     0,     0,   396,     0,     0,   397,     0,   398,
       0,   399,   400,   401,   402,   403,   404,     0,     0,   405,
     406,     0,     0,   407,   408,   409,   410,   411,   412,     0,
       0,   413,   414,   415,   416,     0,   417,   418,   419,     0,
       0,   420,   421,   422,   423,     0,   639,   424,   425,     0,
     426,   427,   428,   429,     0,     0,     0,     0,     0,   430,
     431,     0,     0,     0,   432,   433,   434,     0,     0,   435,
     436,     0,   437,   438,     0,   439,   440,     0,     0,   441,
       0,     0,   442,     0,   443,     0,   444,   445,     0,     0,
       0,     0,     0,   446,     0,   447,     0,     0,   448,     0,
       0,     0,     0,   449,     0,   450,   451,   452,   453,     0,
       0,     0,     0,     0,     0,   454,   455,   456,     0,   457,
     458,   459,   460,     0,     0,   461,     0,     0,   462,   463,
       0,   464,   465,   466,   467,   468,     0,   469,     0,     0,
       0,     0,     0,     0,     0,     0,   470,   471,   472,     0,
     473,   474,   475,     0,   476,     0,     0,   477,     0,   478,
       0,     0,     0,     0,     0,     0,   479,   480,     0,     0,
     481,     0,   482,     0,   483,   484,     0,     0,     0,   485,
     486,   487,   488,   489,   490,   491,   492,     0,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,     0,   503,
     504,   505,   506,   507,   508,   509,   510,   511,   512,     0,
      95,    96,     0,    97,    98,    99,   100,   101,     0,     0,
     102,     0,     0,     0,     0,   103,     0,     0,   104,  1079,
     105,   106,   107,   108,   109,   110,     0,   111,     0,     0,
       0,   112,     0,     0,     0,   113,     0,     0,   114,   115,
     116,     0,   117,     0,   118,   119,     0,     0,   120,     0,
       0,   121,   122,     0,   123,   124,   125,     0,   126,     0,
     127,   128,   129,   130,   131,   132,     0,   133,   134,     0,
     135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
     145,     0,     0,   146,   147,     0,   148,   149,   150,   151,
     152,     0,     0,     0,   153,     0,     0,     0,     0,   154,
       0,     0,   155,     0,     0,     0,   156,   157,   158,     0,
       0,   159,     0,     0,     0,     0,   160,   161,     0,     0,
       0,     0,     0,   162,   163,     0,   164,     0,     0,     0,
       0,     0,   165,     0,     0,     0,     0,   166,   167,   168,
     169,     0,     0,     0,   170,     0,     0,   171,   172,   173,
       0,     0,     0,   174,     0,     0,   175,   176,   177,   178,
     179,     0,     0,   180,   181,     0,   182,   183,   184,   185,
     186,   187,     0,     0,   188,   189,   190,   191,   192,     0,
       0,   193,   194,     0,   195,   196,   197,   198,   199,     0,
       0,   200,   201,     0,     0,     0,   202,   203,     0,     0,
       0,     0,     0,   204,     0,   205,   206,   207,   208,     0,
     209,     0,   210,     0,     0,     0,   211,   212,     0,   213,
       0,     0,   214,   215,     0,     0,     0,   216,   217,   218,
       0,     0,     0,   219,   220,   221,     0,     0,   222,     0,
       0,     0,     0,   223,   224,   225,     0,     0,     0,     0,
     226,     0,     0,     0,   227,   228,     0,   229,   230,     0,
       0,     0,   231,     0,   232,     0,     0,   233,   234,     0,
       0,   235,     0,     0,   236,   237,     0,     0,     0,     0,
       0,   238,   239,     0,   240,     0,   241,     0,   242,   243,
       0,     0,     0,     0,     0,     0,     0,   244,     0,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,     0,   263,   264,
     265,     0,   266,   267,   268,   269,     0,   270,   271,     0,
       0,     0,     0,   272,   273,   274,   275,   276,   277,     0,
       0,   278,   279,     0,   280,     0,   281,     0,   282,   283,
     284,   285,   286,   287,   288,   289,   290,     0,     0,   291,
     292,     0,     0,   293,   294,   295,   296,   297,     0,     0,
       0,   298,   299,     0,     0,     0,   300,     0,   301,   302,
       0,   303,   304,   305,     0,     0,   306,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   307,   308,   309,     0,
     310,     0,   311,     0,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,     0,   322,     0,   323,   324,   325,
       0,   326,     0,   327,   328,   329,   330,   331,     0,   332,
     333,   334,     0,     0,   335,     0,     0,     0,   336,   337,
       0,   338,   339,     0,     0,   340,   341,   342,   343,   344,
       0,   345,   346,     0,   347,   348,   349,     0,     0,   350,
     351,   352,   353,   354,   355,   356,   357,     0,   358,     0,
     359,   360,     0,   361,   362,   363,     0,   364,     0,     0,
     365,   366,   367,   368,     0,   369,     0,   370,   371,   372,
     373,   374,     0,     0,   375,   376,     0,     0,     0,   377,
     378,   379,   380,     0,     0,     0,   381,     0,     0,     0,
       0,   382,     0,   383,   384,   385,   386,     0,   387,   388,
     389,   390,   391,     0,     0,     0,     0,     0,   392,   393,
     394,     0,   395,     0,     0,   396,     0,     0,   397,     0,
     398,     0,   399,   400,   401,   402,   403,   404,     0,     0,
     405,   406,     0,     0,   407,   408,   409,   410,   411,   412,
       0,     0,   413,   414,   415,   416,     0,   417,   418,   419,
       0,     0,   420,   421,   422,   423,     0,     0,   424,   425,
       0,   426,   427,   428,   429,     0,     0,     0,     0,     0,
     430,   431,     0,     0,     0,   432,   433,   434,     0,     0,
     435,   436,     0,   437,   438,     0,   439,   440,     0,     0,
     441,     0,     0,   442,     0,   443,     0,   444,   445,     0,
       0,     0,     0,     0,   446,     0,   447,     0,     0,   448,
       0,     0,     0,     0,   449,     0,   450,   451,   452,   453,
       0,     0,     0,     0,     0,     0,   454,   455,   456,     0,
     457,   458,   459,   460,     0,     0,   461,     0,     0,   462,
     463,     0,   464,   465,   466,   467,   468,     0,   469,     0,
       0,     0,     0,     0,     0,     0,     0,   470,   471,   472,
       0,   473,   474,   475,     0,   476,     0,     0,   477,     0,
     478,     0,     0,     0,     0,     0,     0,   479,   480,     0,
       0,   481,     0,   482,     0,   483,   484,     0,     0,     0,
     485,   486,   487,   488,   489,   490,   491,   492,     0,   493,
     494,   495,   496,   497,   498,   499,   500,   501,   502,     0,
     503,   504,   505,   506,   507,   508,   509,   510,   511,   512,
       0,    95,    96,     0,    97,    98,    99,   100,   101,     0,
       0,   102,     0,     0,  3272,     0,   103,     0,     0,   104,
    3273,   105,   106,   107,   108,   109,   110,     0,   111,     0,
       0,     0,   112,     0,     0,     0,   113,     0,     0,   114,
     115,   116,     0,   117,     0,   118,   119,     0,     0,   120,
       0,     0,   121,   122,     0,   123,   124,   125,     0,   126,
       0,   127,   128,   129,   130,   131,   132,     0,   133,   134,
       0,   135,   136,   137,   138,   139,   140,   141,   142,   143,
     144,   145,     0,     0,   146,   147,     0,   148,   149,   150,
     151,   152,     0,     0,     0,   153,     0,     0,     0,     0,
     154,     0,     0,   155,     0,     0,     0,   156,   157,   158,
       0,     0,   159,     0,     0,     0,     0,   160,   161,     0,
       0,     0,     0,     0,   162,   163,     0,   164,     0,     0,
       0,     0,     0,   165,     0,     0,     0,     0,   166,   167,
     168,   169,     0,     0,     0,   170,     0,     0,   171,   172,
     173,     0,     0,     0,   174,     0,     0,   175,   176,   177,
     178,   179,     0,     0,   180,   181,     0,   182,   183,   184,
     185,   186,   187,     0,     0,   188,   189,   190,   191,   192,
       0,     0,   193,   194,     0,   195,   196,   197,   198,   199,
       0,     0,   200,   201,     0,     0,     0,   202,   203,     0,
       0,     0,     0,     0,   204,     0,   205,   206,   207,   208,
       0,   209,     0,   210,     0,     0,     0,   211,   212,     0,
     213,     0,     0,   214,   215,     0,     0,     0,   216,   217,
     218,     0,     0,     0,   219,   220,   221,     0,     0,   222,
       0,     0,     0,     0,   223,   224,   225,     0,     0,     0,
       0,   226,     0,     0,     0,   227,   228,     0,   229,   230,
       0,     0,     0,   231,     0,   232,     0,     0,   233,   234,
       0,     0,   235,     0,     0,   236,   237,     0,     0,     0,
       0,     0,   238,   239,     0,   240,     0,   241,     0,   242,
     243,     0,     0,     0,     0,     0,     0,     0,   244,     0,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,     0,   263,
     264,   265,     0,   266,   267,   268,   269,     0,   270,   271,
       0,     0,     0,     0,   272,   273,   274,   275,   276,   277,
       0,     0,   278,   279,     0,   280,     0,   281,     0,   282,
     283,   284,   285,   286,   287,   288,   289,   290,     0,     0,
     291,   292,     0,     0,   293,   294,   295,   296,   297,     0,
       0,     0,   298,   299,     0,     0,     0,   300,     0,   301,
     302,     0,   303,   304,   305,     0,     0,   306,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   307,   308,   309,
       0,   310,     0,   311,     0,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,     0,   322,     0,   323,   324,
     325,     0,   326,     0,   327,   328,   329,   330,   331,     0,
     332,   333,   334,     0,     0,   335,     0,     0,     0,   336,
     337,     0,   338,   339,     0,     0,   340,   341,   342,   343,
     344,     0,   345,   346,     0,   347,   348,   349,     0,     0,
     350,   351,   352,   353,   354,   355,   356,   357,     0,   358,
       0,   359,   360,     0,   361,   362,   363,     0,   364,     0,
       0,   365,   366,   367,   368,     0,   369,     0,   370,   371,
     372,   373,   374,     0,     0,   375,   376,     0,     0,     0,
     377,   378,   379,   380,     0,     0,     0,   381,     0,     0,
       0,     0,   382,     0,   383,   384,   385,   386,     0,   387,
     388,   389,   390,   391,     0,     0,     0,     0,     0,   392,
     393,   394,     0,   395,     0,     0,   396,     0,     0,   397,
       0,   398,     0,   399,   400,   401,   402,   403,   404,     0,
       0,   405,   406,     0,     0,   407,   408,   409,   410,   411,
     412,     0,     0,   413,   414,   415,   416,     0,   417,   418,
     419,     0,     0,   420,   421,   422,   423,     0,     0,   424,
     425,     0,   426,   427,   428,   429,     0,     0,     0,     0,
       0,   430,   431,     0,     0,     0,   432,   433,   434,     0,
       0,   435,   436,     0,   437,   438,     0,   439,   440,     0,
       0,   441,     0,     0,   442,     0,   443,     0,   444,   445,
       0,     0,     0,     0,     0,   446,     0,   447,     0,     0,
     448,     0,     0,     0,     0,   449,     0,   450,   451,   452,
     453,     0,     0,     0,     0,     0,     0,   454,   455,   456,
       0,   457,   458,   459,   460,     0,     0,   461,     0,     0,
     462,   463,     0,   464,   465,   466,   467,   468,     0,   469,
       0,     0,     0,     0,     0,     0,     0,     0,   470,   471,
     472,     0,   473,   474,   475,     0,   476,     0,     0,   477,
       0,   478,     0,     0,     0,     0,     0,     0,   479,   480,
       0,     0,   481,     0,   482,     0,   483,   484,     0,     0,
       0,   485,   486,   487,   488,   489,   490,   491,   492,     0,
     493,   494,   495,   496,   497,   498,   499,   500,   501,   502,
       0,   503,   504,   505,   506,   507,   508,   509,   510,   511,
     512,     0,    95,    96,     0,    97,    98,    99,   100,   101,
       0,     0,   102,     0,     0,     0,     0,   103,     0,     0,
     104,  3273,   105,   106,   107,   108,   109,   110,     0,   111,
       0,     0,     0,   112,     0,     0,     0,   113,     0,     0,
     114,   115,   116,     0,   117,     0,   118,   119,     0,     0,
     120,     0,     0,   121,   122,     0,   123,   124,   549,   550,
     126,     0,   127,   128,   129,   130,   131,   132,     0,   133,
     134,     0,   135,   136,   137,   138,   139,   140,   141,   142,
     143,   144,   145,     0,     0,   146,   147,     0,   148,   149,
     150,   151,   152,     0,     0,     0,   153,     0,     0,     0,
       0,   154,     0,     0,   155,     0,     0,     0,   156,   157,
     158,     0,     0,   159,     0,     0,     0,     0,   160,   161,
       0,     0,     0,     0,     0,   162,   163,     0,   164,     0,
       0,     0,     0,     0,   165,     0,     0,     0,     0,   166,
     167,   168,   169,     0,     0,     0,   170,     0,     0,   171,
     172,   173,     0,     0,     0,   174,     0,     0,   175,   176,
     177,   178,   179,     0,     0,   180,   181,     0,   182,   183,
     184,   185,   186,   187,     0,     0,   188,   189,   190,   191,
     192,     0,     0,   193,   194,     0,   195,   196,   197,   198,
     199,     0,     0,   200,   201,     0,     0,     0,   202,   203,
       0,     0,     0,     0,     0,   204,     0,   205,   206,   207,
     208,     0,   551,     0,   210,     0,     0,     0,   211,   212,
       0,   213,     0,     0,   214,   215,     0,     0,     0,   216,
     217,   218,     0,     0,     0,   219,   220,   221,     0,     0,
     222,     0,     0,     0,     0,   223,   224,   225,     0,     0,
       0,     0,   226,     0,     0,     0,   227,   228,     0,   229,
     230,     0,     0,     0,   231,     0,   232,     0,     0,   233,
     234,     0,     0,   235,     0,     0,   236,   237,     0,     0,
       0,     0,     0,   238,   239,     0,   552,     0,   241,     0,
     242,   243,     0,     0,     0,     0,     0,     0,     0,   244,
       0,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,     0,
     263,   264,   265,     0,   266,   267,   268,   269,     0,   270,
     271,     0,     0,     0,     0,   272,   273,   274,   275,   276,
     277,     0,     0,   278,   279,     0,   280,     0,   281,     0,
     282,   283,   284,   285,   286,   287,   553,   289,   290,     0,
       0,   291,   292,     0,     0,   293,   294,   295,   296,   297,
       0,     0,     0,   298,   299,     0,     0,     0,   300,     0,
     301,   302,     0,   303,   304,   305,     0,     0,   306,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   307,   308,
     309,     0,   310,     0,   311,     0,   312,   313,   554,   315,
     316,   317,   318,   319,   320,   321,     0,   322,     0,   323,
     324,   325,     0,   326,     0,   327,   328,   329,   330,   331,
       0,   332,   333,   334,     0,     0,   335,     0,     0,     0,
     336,   337,     0,   338,   339,     0,     0,   340,   341,   342,
     343,   344,     0,   345,   346,     0,   347,   348,   349,     0,
       0,   350,   351,   352,   353,   354,   355,   356,   357,     0,
     358,     0,   359,   360,     0,   361,   362,   363,     0,   364,
       0,     0,   365,   366,   367,   368,     0,   369,     0,   370,
     371,   372,   373,   374,     0,     0,   375,   376,     0,     0,
       0,   377,   378,   555,   380,     0,     0,     0,   381,     0,
       0,     0,     0,   382,     0,   383,   384,   385,   386,     0,
     387,   388,   389,   390,   391,     0,     0,     0,     0,     0,
     392,   393,   394,     0,   395,     0,     0,   396,     0,     0,
     397,     0,   398,     0,   399,   400,   401,   402,   403,   404,
       0,     0,   405,   406,     0,     0,   407,   408,   409,   410,
     411,   412,     0,     0,   413,   414,   415,   416,     0,   417,
     418,   419,     0,     0,   420,   421,   422,   423,     0,     0,
     424,   425,     0,   426,   427,   428,   429,     0,     0,     0,
       0,     0,   556,   431,     0,     0,     0,   432,   433,   434,
       0,     0,   435,   436,     0,   437,   438,     0,   439,   440,
       0,     0,   441,     0,     0,   442,     0,   443,     0,   444,
     445,     0,     0,     0,     0,     0,   446,     0,   447,     0,
       0,   448,     0,     0,     0,     0,   449,     0,   450,   451,
     452,   453,     0,     0,     0,     0,     0,     0,   454,   455,
     456,     0,   457,   458,   459,   460,     0,     0,   461,     0,
       0,   462,   463,     0,     0,   465,   466,   467,   468,     0,
     469,     0,     0,     0,     0,     0,     0,     0,     0,   470,
     471,   472,     0,     0,   474,   475,     0,   476,     0,     0,
     477,     0,   478,     0,     0,     0,     0,     0,     0,   479,
     480,     0,     0,   481,     0,   482,     0,   483,   484,     0,
       0,     0,   485,   486,   487,   488,   489,   490,   491,   492,
       0,   493,   494,   495,   496,   497,   498,   499,   500,   501,
     502,     0,   503,   504,   505,   506,   507,   508,   509,   510,
     511,   512,     0,    95,    96,     0,    97,    98,    99,   100,
     101,     0,     0,   102,     0,     0,     0,     0,   103,     0,
       0,   104,   557,   105,   106,   107,   108,   109,   110,     0,
     111,     0,     0,     0,   112,     0,     0,     0,   113,     0,
       0,   114,   115,   116,     0,   117,     0,   118,   119,     0,
       0,   120,     0,     0,   121,   122,     0,   123,   124,   549,
     550,   126,     0,   127,   128,   129,   130,   131,   132,     0,
     133,   134,     0,   135,   136,   137,   138,   139,   140,   141,
     142,   143,   144,   145,     0,     0,   146,   147,     0,   148,
     149,   150,   151,   152,     0,     0,     0,   153,     0,     0,
       0,     0,   154,     0,     0,   155,     0,     0,     0,   156,
     157,   158,     0,     0,   159,     0,     0,     0,     0,   160,
     161,     0,     0,     0,     0,     0,   162,   163,     0,   164,
       0,     0,     0,     0,     0,   165,     0,     0,     0,     0,
     166,   167,   168,   169,     0,     0,     0,   170,     0,     0,
     171,   172,   173,     0,     0,     0,   174,     0,     0,   175,
     176,   177,   178,   179,     0,     0,   180,   181,     0,   182,
     183,   184,   185,   186,   187,     0,     0,   188,   189,   190,
     191,   192,     0,     0,   193,   194,     0,   195,   196,   197,
     198,   199,     0,     0,   200,   201,     0,     0,     0,   202,
     203,     0,     0,     0,     0,     0,   204,     0,   205,   206,
     207,   208,     0,   551,     0,   210,     0,     0,     0,   211,
     212,     0,   213,     0,     0,   214,   215,     0,     0,     0,
     216,   217,   218,     0,     0,     0,   219,   220,   221,     0,
       0,   222,     0,     0,     0,     0,   223,   224,   225,     0,
       0,     0,     0,   226,     0,     0,     0,   227,   228,     0,
     229,   230,     0,     0,     0,   231,     0,   232,     0,     0,
     233,   234,     0,     0,   235,     0,     0,   236,   237,     0,
       0,     0,     0,     0,   238,   239,     0,   552,     0,   241,
       0,   242,   243,     0,     0,     0,     0,     0,     0,     0,
     244,     0,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
       0,   263,   264,   265,     0,   266,   267,   268,   269,     0,
     270,   271,     0,     0,     0,     0,   272,   273,   274,   275,
     276,   277,     0,     0,   278,   279,     0,   280,     0,   281,
       0,   282,   283,   284,   285,   286,   287,   553,   289,   290,
       0,     0,   291,   292,     0,     0,   293,   294,   295,   296,
     297,     0,     0,     0,   298,   299,     0,     0,     0,   300,
       0,   301,   302,     0,   303,   304,   305,     0,     0,   306,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   307,
     308,   309,     0,   310,     0,   311,     0,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,     0,   322,     0,
     323,   324,   325,     0,   326,     0,   327,   328,   329,   330,
     331,     0,   332,   333,   334,     0,     0,   335,     0,     0,
       0,   336,   337,     0,   338,   339,     0,     0,   340,   341,
     342,   343,   344,     0,   345,   346,     0,   347,   348,   349,
       0,     0,   350,   351,   352,   353,   354,   355,   356,   357,
       0,   358,     0,   359,   360,     0,   361,   362,   363,     0,
     364,     0,     0,   365,   366,   367,   368,     0,   369,     0,
     370,   371,   372,   373,   374,     0,     0,   375,   376,     0,
       0,     0,   377,   378,   555,   380,     0,     0,     0,   381,
       0,     0,     0,     0,   382,     0,   383,   384,   385,   386,
       0,   387,   388,   389,   390,   391,     0,     0,     0,     0,
       0,   392,   393,   394,     0,   395,     0,     0,   396,     0,
       0,   397,     0,   398,     0,   399,   400,   401,   402,   403,
     404,     0,     0,   405,   406,     0,     0,   407,   408,   409,
     410,   411,   412,     0,     0,   413,   414,   415,   416,     0,
     417,   418,   419,     0,     0,   420,   421,   422,   423,     0,
       0,   424,   425,     0,   426,   427,   428,   429,     0,     0,
       0,     0,     0,   430,   431,     0,     0,     0,   432,   433,
     434,     0,     0,   435,   436,     0,   437,   438,     0,   439,
     440,     0,     0,   441,     0,     0,   442,     0,   443,     0,
     444,   445,     0,     0,     0,     0,     0,   446,     0,   447,
       0,     0,   448,     0,     0,     0,     0,   449,     0,   450,
     451,   452,   453,     0,     0,     0,     0,     0,     0,   454,
     455,   456,     0,   457,   458,   459,   460,     0,     0,   461,
       0,     0,   462,   463,     0,     0,   465,   466,   467,   468,
       0,   469,     0,     0,     0,     0,     0,     0,     0,     0,
     470,   471,   472,     0,     0,   474,   475,     0,   476,     0,
       0,   477,     0,   478,     0,     0,     0,     0,     0,     0,
     479,   480,     0,     0,   481,     0,   482,     0,   483,   484,
       0,     0,     0,   485,   486,   487,   488,   489,   490,   491,
     492,     0,   493,   494,   495,   496,   497,   498,   499,   500,
     501,   502,     0,   503,   504,   505,   506,   507,   508,   509,
     510,   511,   512,     0,    95,    96,     0,    97,    98,    99,
     100,   101,     0,     0,   102,     0,     0,     0,     0,   103,
       0,     0,     0,   557,   105,   106,   107,   108,   109,   110,
       0,  -511,     0,     0,     0,   112,     0,     0,     0,   113,
       0,     0,   114,   115,   116,     0,   117,     0,     0,     0,
       0,     0,   120,  2990,     0,   121,   122,     0,   123,   124,
       0,     0,     0,     0,   127,   128,   129,  2991,   131,   132,
       0,   133,   134,     0,   135,   136,     0,   138,     0,   140,
     141,   142,   143,   144,   145,     0,     0,   146,   147,     0,
     148,   149,   150,     0,   152,     0,     0,     0,   153,     0,
       0,     0,     0,   154,     0,     0,   155,     0,     0,     0,
     156,   157,   158,     0,     0,   159,     0,     0,     0,     0,
     160,     0,     0,     0,     0,     0,     0,   162,   163,     0,
     164,     0,     0,     0,     0,     0,   165,     0,     0,     0,
       0,   166,   167,   168,   169,     0,     0,     0,     0,     0,
       0,   171,   172,   173,     0,     0,     0,   174,     0,     0,
       0,   176,   177,   178,   179,     0,     0,   180,   181,     0,
     182,   183,   184,   185,   186,     0,     0,     0,   188,   189,
     190,   191,   192,     0,     0,   193,   194,  2992,   195,   196,
     197,   198,   199,     0,     0,     0,     0,     0,     0,     0,
     202,   203,     0,     0,     0,     0,     0,   204,     0,   205,
     206,   207,   208,     0,   209,     0,   210,     0,     0,     0,
       0,   212,     0,     0,     0,     0,   214,   215,     0,     0,
       0,   216,   217,   218,     0,  2993,     0,   219,     0,   221,
       0,     0,   222,     0,     0,     0,     0,   223,   224,     0,
       0,     0,     0,     0,   226,     0,     0,     0,   227,   228,
       0,   229,   230,  2994,     0,     0,   231,     0,   232,     0,
       0,     0,   234,     0,     0,   235,  2995,     0,   236,   237,
       0,     0,     0,     0,     0,   238,   239,     0,   240,     0,
     241,     0,   242,   243,     0,     0,     0,     0,  -533,     0,
       0,   244,     0,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,     0,   263,   264,   265,     0,   266,   267,   268,   269,
       0,   270,   271,     0,     0,     0,     0,   272,   273,   274,
     275,   276,   277,     0,     0,   278,   279,     0,   280,     0,
     281,     0,   282,   283,   284,   285,   286,   287,   288,   289,
     290,     0,     0,   291,   292,     0,     0,   293,   294,   295,
     296,   297,     0,     0,     0,     0,   299,     0,     0,     0,
     300,     0,   301,   302,     0,   303,   304,  2996,     0,     0,
     306,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     307,   308,   309,     0,   310,     0,   311,     0,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,     0,     0,
       0,     0,   324,   325,     0,   326,     0,   327,   328,   329,
     330,   331,     0,   332,   333,   334,     0,     0,   335,     0,
       0,     0,   336,   337,     0,   338,   339,     0,     0,   340,
     341,   342,   343,   344,     0,   345,   346,     0,   347,     0,
     349,  -533,     0,   350,   351,   352,   353,   354,   355,   356,
     357,     0,     0,     0,   359,   360,     0,   361,   362,   363,
    2997,   364,     0,     0,     0,   366,   367,   368,     0,   369,
       0,   370,   371,     0,   373,   374,     0,     0,   375,   376,
       0,     0,     0,   377,   378,   379,   380,     0,     0,     0,
     381,     0,     0,     0,     0,     0,     0,     0,   384,     0,
     386,     0,   387,   388,   389,   390,   391,     0,     0,     0,
       0,     0,   392,   393,   394,     0,   395,     0,     0,   396,
       0,     0,   397,     0,   398,     0,   399,     0,   401,   402,
     403,   404,     0,     0,     0,   406,     0,     0,   407,   408,
     409,   410,   411,   412,     0,     0,   413,   414,   415,   416,
       0,   417,   418,   419,     0,     0,   420,   421,   422,   423,
       0,     0,   424,   425,     0,   426,   427,   428,   429,     0,
       0,     0,     0,     0,   430,   431,     0,     0,     0,     0,
     433,   434,     0,     0,   435,   436,     0,   437,   438,     0,
       0,     0,     0,     0,   441,     0,     0,   442,     0,   443,
       0,   444,   445,     0,     0,     0,     0,     0,   446,     0,
     447,     0,     0,   448,     0,     0,     0,     0,   449,     0,
     450,   451,   452,   453,     0,     0,  -533,     0,     0,     0,
     454,   455,   456,     0,   457,     0,   459,   460,     0,     0,
     461,     0,     0,   462,   463,     0,   464,   465,   466,   467,
     468,     0,   469,     0,     0,     0,     0,     0,     0,     0,
       0,   470,   471,   472,     0,   473,   474,   475,     0,     0,
       0,     0,   477,     0,   478,     0,     0,     0,     0,     0,
       0,   479,   480,     0,     0,   481,     0,   482,     0,   483,
     484,     0,     0,     0,   485,   486,   487,   488,   489,   490,
     491,   492,     0,   493,   494,   495,     0,   497,   498,   499,
     500,   501,   502,     0,   503,   504,   505,   506,   507,   508,
     509,   510,   511,   512,    95,    96,     0,    97,    98,    99,
     100,   101,     0,     0,   102,     0,     0,     0,     0,   103,
       0,  3372,   104,     0,   105,   106,   107,   108,   109,   110,
       0,   111,     0,     0,     0,   112,     0,     0,     0,   113,
       0,     0,   114,   115,   116,     0,   117,     0,   118,   119,
       0,     0,   120,     0,     0,   121,   122,     0,   123,   124,
     125,     0,   126,     0,   127,   128,   129,   130,   131,   132,
       0,   133,   134,     0,   135,   136,   137,   138,   139,   140,
     141,   142,   143,   144,   145,     0,     0,   146,   147,     0,
     148,   149,   150,   151,   152,     0,     0,     0,   153,     0,
       0,     0,     0,   154,     0,     0,   155,     0,     0,     0,
     156,   157,   158,     0,     0,   159,     0,     0,     0,     0,
     160,   161,     0,     0,     0,     0,     0,   162,   163,     0,
     164,     0,     0,     0,     0,     0,   165,     0,     0,     0,
       0,   166,   167,   168,   169,     0,     0,     0,   170,     0,
       0,   171,   172,   173,     0,     0,     0,   174,     0,     0,
     175,   176,   177,   178,   179,     0,     0,   180,   181,     0,
     182,   183,   184,   185,   186,   187,     0,     0,   188,   189,
     190,   191,   192,     0,     0,   193,   194,     0,   195,   196,
     197,   198,   199,     0,     0,   200,   201,     0,     0,     0,
     202,   203,     0,     0,     0,     0,     0,   204,     0,   205,
     206,   207,   208,     0,   209,     0,   210,     0,     0,     0,
     211,   212,     0,   213,     0,     0,   214,   215,     0,     0,
       0,   216,   217,   218,     0,     0,     0,   219,   220,   221,
       0,     0,   222,     0,     0,     0,     0,   223,   224,   225,
       0,     0,     0,     0,   226,     0,     0,     0,   227,   228,
       0,   229,   230,     0,     0,     0,   231,     0,   232,     0,
       0,   233,   234,     0,     0,   235,     0,     0,   236,   237,
       0,     0,     0,     0,     0,   238,   239,     0,   240,     0,
     241,     0,   242,   243,     0,     0,     0,     0,     0,     0,
       0,   244,     0,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,     0,   263,   264,   265,     0,   266,   267,   268,   269,
       0,   270,   271,     0,     0,     0,     0,   272,   273,   274,
     275,   276,   277,     0,     0,   278,   279,     0,   280,     0,
     281,     0,   282,   283,   284,   285,   286,   287,   288,   289,
     290,     0,     0,   291,   292,     0,     0,   293,   294,   295,
     296,   297,     0,     0,     0,   298,   299,     0,     0,     0,
     300,     0,   301,   302,     0,   303,   304,   305,     0,     0,
     306,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     307,   308,   309,     0,   310,     0,   311,     0,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,     0,   322,
       0,   323,   324,   325,     0,   326,     0,   327,   328,   329,
     330,   331,     0,   332,   333,   334,     0,     0,   335,     0,
       0,     0,   336,   337,     0,   338,   339,     0,     0,   340,
     341,   342,   343,   344,     0,   345,   346,     0,   347,   348,
     349,     0,     0,   350,   351,   352,   353,   354,   355,   356,
     357,     0,   358,     0,   359,   360,     0,   361,   362,   363,
       0,   364,     0,     0,   365,   366,   367,   368,     0,   369,
       0,   370,   371,   372,   373,   374,     0,     0,   375,   376,
      17,     0,     0,   377,   378,   379,   380,     0,     0,     0,
     381,     0,     0,     0,     0,   382,     0,   383,   384,   385,
     386,     0,   387,   388,   389,   390,   391,     0,     0,     0,
       0,     0,   392,   393,   394,     0,   395,     0,     0,   396,
       0,     0,   397,     0,   398,     0,   399,   400,   401,   402,
     403,   404,     0,     0,   405,   406,     0,     0,   407,   408,
     409,   410,   411,   412,     0,     0,   413,   414,   415,   416,
       0,   417,   418,   419,     0,     0,   420,   421,   422,   423,
       0,     0,   424,   425,     0,   426,   427,   428,   429,     0,
       0,     0,     0,     0,   430,   431,     0,     0,     0,   432,
     433,   434,     0,     0,   435,   436,     0,   437,   438,     0,
     439,   440,     0,     0,   441,     0,     0,   442,     0,   443,
       0,   444,   445,     0,     0,     0,     0,     0,   446,     0,
     447,     0,     0,   448,     0,     0,     0,     0,   449,     0,
     450,   451,   452,   453,     0,     0,     0,    25,     0,     0,
     454,   455,   456,     0,   457,   458,   459,   460,     0,     0,
     461,     0,     0,   462,   463,     0,   464,   465,   466,   467,
     468,     0,   469,     0,     0,     0,     0,     0,     0,     0,
       0,   470,   471,   472,     0,   473,   474,   475,     0,   476,
       0,     0,   477,     0,   478,     0,     0,     0,     0,     0,
       0,   479,   480,     0,     0,   481,     0,   482,     0,   483,
     484,     0,     0,     0,   485,   486,   487,   488,   489,   490,
     491,   492,     0,   493,   494,   495,   496,   497,   498,   499,
     500,   501,   502,     0,   503,   504,   505,   506,   507,   508,
     509,   510,   511,   512,    95,    96,     0,    97,    98,    99,
     100,   101,     0,     0,   102,     0,     0,  1011,  2289,   103,
       0,     0,   104,     0,   105,   106,   107,   108,   109,   110,
       0,   111,     0,     0,     0,   112,     0,     0,     0,   113,
       0,     0,   114,   115,   116,     0,   117,     0,   118,   119,
       0,     0,   120,     0,     0,   121,   122,     0,   123,   124,
     125,     0,   126,     0,   127,   128,   129,   130,   131,   132,
       0,   133,   134,     0,   135,   136,   137,   138,   139,   140,
     141,   142,   143,   144,   145,     0,     0,   146,   147,  1933,
     148,   149,   150,   151,   152,     0,     0,     0,   153,     0,
       0,     0,     0,   154,     0,     0,   155,     0,     0,     0,
     156,   157,   158,     0,     0,   159,     0,     0,     0,     0,
     160,   161,     0,     0,     0,     0,     0,   162,   163,     0,
     164,     0,     0,     0,     0,     0,   165,     0,     0,     0,
       0,   166,   167,   168,   169,     0,     0,     0,   170,     0,
       0,   171,   172,   173,     0,     0,     0,   174,     0,     0,
     175,   176,   177,   178,   179,     0,     0,   180,   181,     0,
     182,   183,   184,   185,   186,   187,     0,     0,   188,   189,
     190,   191,   192,     0,     0,   193,   194,     0,   195,   196,
     197,   198,   199,     0,     0,   200,   201,     0,     0,     0,
     202,   203,     0,     0,  1934,     0,     0,   204,     0,   205,
     206,   207,   208,     0,   209,     0,   210,     0,     0,     0,
     211,   212,     0,   213,     0,     0,   214,   215,     0,     0,
       0,   216,   217,   218,     0,     0,     0,   219,   220,   221,
    1935,     0,   222,     0,     0,     0,     0,   223,   224,   225,
       0,     0,     0,     0,   226,     0,     0,     0,   227,   228,
       0,   229,   230,     0,     0,     0,   231,     0,   232,  1936,
       0,   233,   234,     0,     0,   235,     0,     0,   236,   237,
       0,  1937,     0,     0,     0,   238,   239,     0,   240,     0,
     241,     0,   242,   243,     0,     0,     0,     0,     0,     0,
       0,   244,     0,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,     0,   263,   264,   265,     0,   266,   267,   268,   269,
       0,   270,   271,     0,     0,     0,     0,   272,   273,   274,
     275,   276,   277,     0,     0,   278,   279,     0,   280,     0,
     281,     0,   282,   283,   284,   285,   286,   287,   288,   289,
     290,     0,     0,   291,   292,     0,     0,   293,   294,   295,
     296,   297,     0,     0,     0,   298,   299,     0,     0,     0,
     300,     0,   301,   302,     0,   303,   304,   305,     0,     0,
     306,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     307,   308,   309,     0,   310,     0,   311,     0,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,     0,   322,
       0,   323,   324,   325,     0,   326,     0,   327,   328,   329,
     330,   331,     0,   332,   333,   334,     0,     0,   335,     0,
       0,     0,   336,   337,     0,   338,   339,     0,     0,   340,
     341,   342,   343,   344,     0,   345,   346,     0,   347,   348,
     349,     0,     0,   350,   351,   352,   353,   354,   355,   356,
     357,     0,   358,     0,   359,   360,     0,   361,   362,   363,
       0,   364,     0,     0,   365,   366,   367,   368,     0,   369,
       0,   370,   371,   372,   373,   374,     0,     0,   375,   376,
      17,     0,     0,   377,   378,   379,   380,     0,     0,     0,
     381,     0,     0,     0,     0,   382,     0,   383,   384,   385,
     386,     0,   387,   388,   389,   390,   391,  1938,     0,     0,
       0,     0,   392,   393,   394,     0,   395,     0,     0,   396,
       0,     0,   397,     0,   398,     0,   399,   400,   401,   402,
     403,   404,     0,     0,   405,   406,     0,     0,   407,   408,
     409,   410,   411,   412,     0,     0,   413,   414,   415,   416,
       0,   417,   418,   419,     0,     0,   420,   421,   422,   423,
       0,     0,   424,   425,     0,   426,   427,   428,   429,     0,
       0,     0,     0,     0,   430,   431,     0,     0,     0,   432,
     433,   434,     0,     0,   435,   436,     0,   437,   438,     0,
     439,   440,     0,     0,   441,     0,     0,   442,     0,   443,
       0,   444,   445,     0,     0,     0,     0,     0,   446,     0,
     447,     0,     0,   448,     0,     0,     0,     0,   449,     0,
     450,   451,   452,   453,     0,     0,     0,    25,     0,     0,
     454,   455,   456,     0,   457,   458,   459,   460,     0,     0,
     461,     0,     0,   462,   463,     0,   464,   465,   466,   467,
     468,     0,   469,     0,     0,     0,     0,     0,     0,     0,
       0,   470,   471,   472,     0,   473,   474,   475,     0,   476,
       0,     0,   477,     0,   478,     0,     0,     0,     0,     0,
       0,   479,   480,     0,     0,   481,     0,   482,     0,   483,
     484,     0,     0,     0,   485,   486,   487,   488,   489,   490,
     491,   492,     0,   493,   494,   495,   496,   497,   498,   499,
     500,   501,   502,     0,   503,   504,   505,   506,   507,   508,
     509,   510,   511,   512,    95,    96,     0,    97,    98,    99,
     100,   101,     0,     0,   102,     0,     0,  1011,     0,   103,
       0,     0,   104,     0,   105,   106,   107,   108,   109,   110,
       0,   111,     0,     0,     0,   112,     0,     0,     0,   113,
       0,     0,   114,   115,   116,     0,   117,     0,   118,   119,
       0,     0,   120,     0,     0,   121,   122,     0,   123,   124,
     125,     0,   126,     0,   127,   128,   129,   130,   131,   132,
       0,   133,   134,     0,   135,   136,   137,   138,   139,   140,
     141,   142,   143,   144,   145,     0,     0,   146,   147,     0,
     148,   149,   150,   151,   152,     0,     0,     0,   153,     0,
       0,     0,     0,   154,     0,     0,   155,     0,     0,     0,
     156,   157,   158,     0,     0,   159,     0,     0,     0,     0,
     160,   161,     0,     0,     0,     0,     0,   162,   163,     0,
     164,     0,     0,     0,     0,     0,   165,     0,     0,     0,
       0,   166,   167,   168,   169,     0,     0,     0,   170,     0,
       0,   171,   172,   173,     0,     0,     0,   174,     0,     0,
     175,   176,   177,   178,   179,     0,     0,   180,   181,     0,
     182,   183,   184,   185,   186,   187,     0,     0,   188,   189,
     190,   191,   192,     0,     0,   193,   194,     0,   195,   196,
     197,   198,   199,     0,     0,   200,   201,     0,     0,     0,
     202,   203,     0,     0,     0,     0,     0,   204,     0,   205,
     206,   207,   208,     0,   209,     0,   210,     0,     0,     0,
     211,   212,     0,   213,     0,     0,   214,   215,     0,     0,
       0,   216,   217,   218,     0,     0,     0,   219,   220,   221,
       0,     0,   222,     0,     0,     0,     0,   223,   224,   225,
       0,     0,     0,     0,   226,     0,     0,     0,   227,   228,
       0,   229,   230,     0,     0,     0,   231,     0,   232,     0,
       0,   233,   234,     0,     0,   235,     0,     0,   236,   237,
       0,     0,     0,     0,     0,   238,   239,     0,   240,     0,
     241,     0,   242,   243,     0,     0,     0,     0,     0,     0,
       0,   244,     0,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,     0,   263,   264,   265,     0,   266,   267,   268,   269,
       0,   270,   271,     0,     0,     0,     0,   272,   273,   274,
     275,   276,   277,     0,     0,   278,   279,     0,   280,     0,
     281,     0,   282,   283,   284,   285,   286,   287,   288,   289,
     290,     0,     0,   291,   292,     0,     0,   293,   294,   295,
     296,   297,     0,     0,     0,   298,   299,     0,     0,     0,
     300,     0,   301,   302,     0,   303,   304,   305,     0,     0,
     306,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     307,   308,   309,     0,   310,     0,   311,     0,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,     0,   322,
       0,   323,   324,   325,     0,   326,     0,   327,   328,   329,
     330,   331,     0,   332,   333,   334,     0,     0,   335,     0,
       0,     0,   336,   337,     0,   338,   339,     0,     0,   340,
     341,   342,   343,   344,     0,   345,   346,     0,   347,   348,
     349,     0,     0,   350,   351,   352,   353,   354,   355,   356,
     357,     0,   358,     0,   359,   360,     0,   361,   362,   363,
       0,   364,     0,     0,   365,   366,   367,   368,     0,   369,
       0,   370,   371,   372,   373,   374,     0,     0,   375,   376,
      17,     0,     0,   377,   378,   379,   380,     0,     0,     0,
     381,     0,     0,     0,     0,   382,     0,   383,   384,   385,
     386,     0,   387,   388,   389,   390,   391,     0,     0,     0,
       0,     0,   392,   393,   394,     0,   395,     0,     0,   396,
       0,     0,   397,     0,   398,     0,   399,   400,   401,   402,
     403,   404,     0,     0,   405,   406,     0,     0,   407,   408,
     409,   410,   411,   412,     0,     0,   413,   414,   415,   416,
       0,   417,   418,   419,     0,     0,   420,   421,   422,   423,
       0,     0,   424,   425,     0,   426,   427,   428,   429,     0,
       0,     0,     0,     0,   430,   431,     0,     0,     0,   432,
     433,   434,     0,     0,   435,   436,     0,   437,   438,     0,
     439,   440,     0,     0,   441,     0,     0,   442,     0,   443,
       0,   444,   445,     0,     0,     0,     0,     0,   446,     0,
     447,     0,     0,   448,     0,     0,     0,     0,   449,     0,
     450,   451,   452,   453,     0,     0,     0,    25,     0,     0,
     454,   455,   456,     0,   457,   458,   459,   460,     0,     0,
     461,     0,     0,   462,   463,     0,   464,   465,   466,   467,
     468,     0,   469,     0,     0,     0,     0,     0,     0,     0,
       0,   470,   471,   472,     0,   473,   474,   475,     0,   476,
       0,     0,   477,     0,   478,     0,     0,     0,     0,     0,
       0,   479,   480,     0,     0,   481,     0,   482,     0,   483,
     484,     0,     0,     0,   485,   486,   487,   488,   489,   490,
     491,   492,     0,   493,   494,   495,   496,   497,   498,   499,
     500,   501,   502,  1229,   503,   504,   505,   506,   507,   508,
     509,   510,   511,   512,    95,    96,     0,    97,    98,    99,
     100,   101,     0,     0,   102,     0,     0,  1230,     0,   103,
       0,     0,   104,     0,   105,   106,   107,   108,   109,   110,
       0,   111,     0,     0,     0,   112,     0,     0,     0,   113,
       0,     0,   114,   115,   116,     0,   117,     0,   118,   119,
       0,     0,   120,     0,     0,   121,   122,     0,   123,   124,
     125,     0,   126,     0,   127,   128,   129,   130,   131,   132,
       0,   133,   134,     0,   135,   136,   137,   138,   139,   140,
     141,   142,   143,   144,   145,     0,     0,   146,   147,     0,
     148,   149,   150,   151,   152,     0,     0,     0,   153,     0,
       0,     0,     0,   154,     0,     0,   155,     0,     0,     0,
     156,   157,   158,     0,     0,   159,     0,     0,     0,     0,
     160,   161,     0,     0,     0,     0,     0,   162,   163,     0,
     164,     0,     0,     0,     0,     0,   165,     0,     0,     0,
       0,   166,   167,   168,   169,     0,     0,     0,   170,     0,
    1470,   171,   172,   173,     0,     0,     0,   174,     0,     0,
     175,   176,   177,   178,   179,     0,     0,   180,   181,     0,
     182,   183,   184,   185,   186,   187,     0,     0,   188,   189,
     190,   191,   192,     0,     0,   193,   194,     0,   195,   196,
     197,   198,   199,     0,     0,   200,   201,     0,     0,     0,
     202,   203,     0,     0,     0,     0,     0,   204,     0,   205,
     206,   207,   208,     0,   209,     0,   210,     0,     0,     0,
     211,   212,     0,   213,     0,     0,   214,   215,     0,     0,
       0,   216,   217,   218,     0,     0,     0,   219,   220,   221,
       0,     0,   222,     0,     0,     0,     0,   223,   224,   225,
       0,     0,     0,     0,   226,     0,     0,     0,   227,   228,
       0,   229,   230,     0,     0,     0,   231,     0,   232,     0,
       0,   233,   234,     0,     0,   235,     0,     0,   236,   237,
       0,     0,     0,     0,     0,   238,   239,     0,   240,     0,
     241,     0,   242,   243,     0,     0,     0,     0,     0,     0,
       0,   244,     0,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,     0,   263,   264,   265,     0,   266,   267,   268,   269,
       0,   270,   271,     0,     0,     0,     0,   272,   273,   274,
     275,   276,   277,     0,     0,   278,   279,     0,   280,     0,
     281,     0,   282,   283,   284,   285,   286,   287,   288,   289,
     290,     0,     0,   291,   292,     0,     0,   293,   294,   295,
     296,   297,     0,     0,     0,   298,   299,     0,     0,     0,
     300,     0,   301,   302,     0,   303,   304,   305,     0,     0,
     306,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     307,   308,   309,     0,   310,     0,   311,     0,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,     0,   322,
       0,   323,   324,   325,     0,   326,     0,   327,   328,   329,
     330,   331,     0,   332,   333,   334,     0,     0,   335,     0,
       0,     0,   336,   337,     0,   338,   339,     0,     0,   340,
     341,   342,   343,   344,     0,   345,   346,     0,   347,   348,
     349,     0,     0,   350,   351,   352,   353,   354,   355,   356,
     357,     0,   358,     0,   359,   360,     0,   361,   362,   363,
       0,   364,     0,     0,   365,   366,   367,   368,     0,   369,
       0,   370,   371,   372,   373,   374,     0,     0,   375,   376,
       0,     0,     0,   377,   378,   379,   380,     0,     0,     0,
     381,     0,     0,     0,     0,   382,     0,   383,   384,   385,
     386,     0,   387,   388,   389,   390,   391,     0,     0,     0,
       0,     0,   392,   393,   394,     0,   395,     0,     0,   396,
       0,     0,   397,     0,   398,     0,   399,   400,   401,   402,
     403,   404,     0,     0,   405,   406,     0,     0,   407,   408,
     409,   410,   411,   412,     0,     0,   413,   414,   415,   416,
       0,   417,   418,   419,     0,     0,   420,   421,   422,   423,
       0,     0,   424,   425,     0,   426,   427,   428,   429,     0,
       0,     0,     0,     0,   430,   431,     0,     0,     0,   432,
     433,   434,     0,     0,   435,   436,     0,   437,   438,     0,
     439,   440,     0,     0,   441,     0,     0,   442,     0,   443,
       0,   444,   445,     0,     0,     0,     0,     0,   446,     0,
     447,     0,     0,   448,     0,     0,     0,     0,   449,     0,
     450,   451,   452,   453,     0,     0,     0,     0,     0,     0,
     454,   455,   456,     0,   457,   458,   459,   460,     0,     0,
     461,     0,     0,   462,   463,     0,   464,   465,   466,   467,
     468,     0,   469,     0,     0,     0,     0,     0,     0,     0,
       0,   470,   471,   472,     0,   473,   474,   475,     0,   476,
       0,     0,   477,     0,   478,     0,     0,     0,     0,     0,
       0,   479,   480,     0,     0,   481,     0,   482,     0,   483,
     484,     0,     0,     0,   485,   486,   487,   488,   489,   490,
     491,   492,     0,   493,   494,   495,   496,   497,   498,   499,
     500,   501,   502,  1229,   503,   504,   505,   506,   507,   508,
     509,   510,   511,   512,    95,    96,     0,    97,    98,    99,
     100,   101,     0,     0,   102,     0,     0,  1230,     0,   103,
       0,     0,   104,     0,   105,   106,   107,   108,   109,   110,
       0,   111,     0,     0,     0,   112,     0,     0,     0,   113,
       0,     0,   114,   115,   116,     0,   117,     0,   118,   119,
       0,     0,   120,     0,     0,   121,   122,     0,   123,   124,
     125,     0,   126,     0,   127,   128,   129,   130,   131,   132,
       0,   133,   134,     0,   135,   136,   137,   138,   139,   140,
     141,   142,   143,   144,   145,     0,     0,   146,   147,     0,
     148,   149,   150,   151,   152,     0,     0,     0,   153,     0,
       0,     0,     0,   154,     0,     0,   155,     0,     0,     0,
     156,   157,   158,     0,     0,   159,     0,     0,     0,     0,
     160,   161,     0,     0,     0,     0,     0,   162,   163,     0,
     164,     0,     0,     0,     0,     0,   165,     0,     0,     0,
       0,   166,   167,   168,   169,     0,     0,     0,   170,     0,
       0,   171,   172,   173,     0,     0,     0,   174,     0,     0,
     175,   176,   177,   178,   179,     0,     0,   180,   181,     0,
     182,   183,   184,   185,   186,   187,     0,     0,   188,   189,
     190,   191,   192,     0,     0,   193,   194,     0,   195,   196,
     197,   198,   199,     0,     0,   200,   201,     0,     0,     0,
     202,   203,     0,     0,     0,     0,     0,   204,     0,   205,
     206,   207,   208,     0,   209,     0,   210,     0,     0,     0,
     211,   212,     0,   213,     0,     0,   214,   215,     0,     0,
       0,   216,   217,   218,     0,     0,     0,   219,   220,   221,
       0,     0,   222,     0,     0,     0,     0,   223,   224,   225,
       0,     0,     0,     0,   226,     0,     0,     0,   227,   228,
       0,   229,   230,     0,     0,     0,   231,     0,   232,     0,
       0,   233,   234,     0,     0,   235,     0,     0,   236,   237,
       0,     0,     0,     0,     0,   238,   239,     0,   240,     0,
     241,     0,   242,   243,     0,     0,     0,     0,     0,     0,
       0,   244,     0,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,     0,   263,   264,   265,     0,   266,   267,   268,   269,
       0,   270,   271,     0,     0,     0,     0,   272,   273,   274,
     275,   276,   277,     0,     0,   278,   279,     0,   280,     0,
     281,     0,   282,   283,   284,   285,   286,   287,   288,   289,
     290,     0,     0,   291,   292,     0,     0,   293,   294,   295,
     296,   297,     0,     0,     0,   298,   299,     0,     0,     0,
     300,     0,   301,   302,     0,   303,   304,   305,     0,     0,
     306,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     307,   308,   309,     0,   310,     0,   311,     0,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,     0,   322,
       0,   323,   324,   325,     0,   326,     0,   327,   328,   329,
     330,   331,     0,   332,   333,   334,     0,     0,   335,     0,
       0,     0,   336,   337,     0,   338,   339,     0,     0,   340,
     341,   342,   343,   344,     0,   345,   346,     0,   347,   348,
     349,     0,     0,   350,   351,   352,   353,   354,   355,   356,
     357,     0,   358,     0,   359,   360,     0,   361,   362,   363,
       0,   364,     0,     0,   365,   366,   367,   368,     0,   369,
       0,   370,   371,   372,   373,   374,     0,     0,   375,   376,
       0,     0,     0,   377,   378,   379,   380,     0,     0,     0,
     381,     0,     0,     0,     0,   382,     0,   383,   384,   385,
     386,     0,   387,   388,   389,   390,   391,     0,     0,     0,
       0,     0,   392,   393,   394,     0,   395,     0,     0,   396,
       0,     0,   397,     0,   398,     0,   399,   400,   401,   402,
     403,   404,     0,     0,   405,   406,     0,     0,   407,   408,
     409,   410,   411,   412,     0,     0,   413,   414,   415,   416,
       0,   417,   418,   419,     0,     0,   420,   421,   422,   423,
       0,     0,   424,   425,     0,   426,   427,   428,   429,     0,
       0,     0,     0,     0,   430,   431,     0,     0,     0,   432,
     433,   434,     0,     0,   435,   436,     0,   437,   438,     0,
     439,   440,     0,     0,   441,     0,     0,   442,     0,   443,
       0,   444,   445,     0,     0,     0,     0,     0,   446,     0,
     447,     0,     0,   448,     0,     0,     0,     0,   449,     0,
     450,   451,   452,   453,     0,     0,     0,     0,     0,     0,
     454,   455,   456,     0,   457,   458,   459,   460,     0,     0,
     461,     0,     0,   462,   463,     0,   464,   465,   466,   467,
     468,     0,   469,     0,     0,     0,     0,     0,     0,     0,
       0,   470,   471,   472,     0,   473,   474,   475,     0,   476,
       0,     0,   477,     0,   478,     0,     0,     0,     0,     0,
       0,   479,   480,     0,     0,   481,     0,   482,     0,   483,
     484,     0,     0,     0,   485,   486,   487,   488,   489,   490,
     491,   492,     0,   493,   494,   495,   496,   497,   498,   499,
     500,   501,   502,  1229,   503,   504,   505,   506,   507,   508,
     509,   510,   511,   512,    95,    96,     0,    97,    98,    99,
     100,   101,     0,     0,   102,     0,     0,  1230,     0,   103,
       0,     0,   104,     0,   105,   106,   107,   108,   109,   110,
       0,   111,     0,     0,     0,   112,     0,     0,     0,   113,
       0,     0,   114,   115,   116,     0,   117,     0,   118,   119,
       0,     0,   120,     0,     0,   121,   122,     0,   123,   124,
     125,     0,   126,     0,   127,   128,   129,   130,   131,   132,
       0,   133,   134,     0,   135,   136,   137,   138,   139,   140,
     141,   142,   143,   144,   145,     0,     0,   146,   147,     0,
     148,   149,   150,   151,   152,     0,     0,     0,   153,     0,
       0,     0,     0,   154,     0,     0,   155,     0,     0,     0,
     156,   157,   158,     0,     0,   159,     0,     0,     0,     0,
     160,   161,     0,     0,     0,     0,     0,   162,   163,     0,
     164,     0,     0,     0,     0,     0,   165,     0,     0,     0,
       0,   166,   167,   168,   169,     0,     0,     0,   170,     0,
       0,   171,   172,   173,     0,     0,     0,   174,     0,     0,
     175,   176,   177,   178,   179,     0,     0,   180,   181,     0,
     182,   183,   184,   185,   186,   187,     0,     0,   188,   189,
     190,   191,   192,     0,     0,   193,   194,     0,   195,   196,
     197,   198,   199,     0,     0,   200,   201,     0,     0,     0,
     202,   203,     0,     0,     0,     0,     0,   204,     0,   205,
     206,   207,   208,     0,   209,     0,   210,     0,     0,     0,
     211,   212,     0,   213,     0,     0,   214,   215,     0,     0,
       0,   216,   217,   218,     0,     0,     0,   219,   220,   221,
       0,     0,   222,     0,     0,     0,     0,   223,   224,   225,
       0,     0,     0,     0,   226,     0,     0,     0,   227,   228,
       0,   229,   230,     0,     0,     0,   231,     0,   232,     0,
       0,   233,   234,     0,     0,   235,     0,     0,   236,   237,
       0,     0,     0,     0,     0,   238,   239,     0,   240,     0,
     241,     0,   242,   243,     0,     0,     0,     0,     0,     0,
       0,   244,     0,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,     0,   263,   264,   265,     0,   266,   267,   268,   269,
       0,   270,   271,     0,     0,     0,     0,   272,   273,   274,
     275,   276,   277,     0,     0,   278,   279,     0,   280,     0,
     281,     0,   282,   283,   284,   285,   286,   287,   288,   289,
     290,     0,     0,   291,   292,     0,     0,   293,   294,   295,
     296,   297,     0,     0,     0,   298,   299,     0,     0,     0,
     300,     0,   301,   302,     0,   303,   304,   305,     0,     0,
     306,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     307,   308,   309,     0,   310,     0,   311,     0,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,     0,   322,
       0,   323,   324,   325,     0,   326,     0,   327,   328,   329,
     330,   331,     0,   332,   333,   334,     0,     0,   335,     0,
       0,     0,   336,   337,     0,   338,   339,     0,     0,   340,
     341,   342,   343,   344,     0,   345,   346,     0,   347,   348,
     349,     0,     0,   350,   351,   352,   353,   354,   355,   356,
     357,     0,   358,     0,   359,   360,     0,   361,   362,   363,
       0,   364,     0,     0,   365,   366,   367,   368,     0,   369,
       0,   370,   371,   372,   373,   374,     0,     0,   375,   376,
       0,     0,     0,   377,   378,   379,   380,     0,     0,     0,
     381,     0,     0,     0,     0,   382,     0,   383,   384,   385,
     386,     0,   387,   388,   389,   390,   391,     0,     0,     0,
       0,     0,   392,   393,   394,     0,   395,     0,     0,   396,
       0,     0,   397,     0,   398,     0,   399,   400,   401,   402,
     403,   404,     0,     0,   405,   406,     0,     0,   407,   408,
     409,   410,   411,   412,     0,     0,   413,   414,   415,   416,
       0,   417,   418,   419,     0,     0,   420,   421,   422,   423,
       0,     0,   424,   425,     0,   426,   427,   428,   429,     0,
       0,     0,     0,     0,   430,   431,     0,     0,     0,   432,
     433,   434,     0,     0,   435,   436,     0,   437,   438,     0,
     439,   440,     0,     0,   441,     0,     0,   442,     0,   443,
       0,   444,   445,     0,     0,     0,     0,     0,   446,     0,
     447,     0,     0,   448,     0,     0,     0,     0,   449,     0,
     450,   451,   452,   453,     0,     0,     0,     0,     0,     0,
     454,   455,   456,     0,   457,   458,   459,   460,     0,     0,
     461,     0,     0,   462,   463,     0,   464,   465,   466,   467,
     468,     0,   469,     0,     0,     0,     0,     0,     0,     0,
       0,   470,   471,   472,     0,   473,   474,   475,     0,   476,
       0,     0,   477,     0,   478,     0,     0,     0,     0,     0,
       0,   479,   480,     0,     0,   481,     0,   482,     0,   483,
     484,     0,     0,     0,   485,   486,   487,   488,   489,   490,
     491,   492,     0,   493,   494,   495,   496,   497,   498,   499,
     500,   501,   502,     0,   503,   504,   505,   506,   507,   508,
     509,   510,   511,   512,    95,    96,     0,    97,    98,    99,
     100,   101,     0,     0,   102,     0,     0,  1023,     0,   103,
       0,     0,   104,     0,   105,   106,   107,   108,   109,   110,
       0,   111,     0,     0,     0,   112,     0,     0,     0,   113,
       0,     0,   114,   115,   116,     0,   117,     0,   118,   119,
       0,     0,   120,     0,     0,   121,   122,     0,   123,   124,
     125,     0,   126,     0,   127,   128,   129,   130,   131,   132,
       0,   133,   134,     0,   135,   136,   137,   138,   139,   140,
     141,   142,   143,   144,   145,     0,     0,   146,   147,     0,
     148,   149,   150,   151,   152,     0,     0,     0,   153,     0,
       0,     0,     0,   154,     0,     0,   155,     0,     0,     0,
     156,   157,   158,     0,     0,   159,     0,     0,     0,     0,
     160,   161,     0,     0,     0,     0,     0,   162,   163,     0,
     164,     0,     0,     0,     0,     0,   165,     0,     0,     0,
       0,   166,   167,   168,   169,     0,     0,     0,   170,     0,
       0,   171,   172,   173,     0,     0,     0,   174,     0,     0,
     175,   176,   177,   178,   179,     0,     0,   180,   181,     0,
     182,   183,   184,   185,   186,   187,     0,     0,   188,   189,
     190,   191,   192,     0,     0,   193,   194,     0,   195,   196,
     197,   198,   199,     0,     0,   200,   201,     0,     0,     0,
     202,   203,     0,     0,     0,     0,     0,   204,     0,   205,
     206,   207,   208,     0,   209,     0,   210,     0,     0,     0,
     211,   212,     0,   213,     0,     0,   214,   215,     0,     0,
       0,   216,   217,   218,     0,     0,     0,   219,   220,   221,
       0,     0,   222,     0,     0,     0,     0,   223,   224,   225,
       0,     0,     0,     0,   226,     0,     0,     0,   227,   228,
       0,   229,   230,     0,     0,     0,   231,     0,   232,     0,
       0,   233,   234,     0,     0,   235,     0,     0,   236,   237,
       0,     0,     0,     0,     0,   238,   239,     0,   240,     0,
     241,     0,   242,   243,     0,     0,     0,     0,     0,     0,
       0,   244,     0,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,     0,   263,   264,   265,     0,   266,   267,   268,   269,
       0,   270,   271,     0,     0,     0,     0,   272,   273,   274,
     275,   276,   277,     0,     0,   278,   279,     0,   280,     0,
     281,     0,   282,   283,   284,   285,   286,   287,   288,   289,
     290,     0,     0,   291,   292,     0,     0,   293,   294,   295,
     296,   297,     0,     0,     0,   298,   299,     0,     0,     0,
     300,     0,   301,   302,     0,   303,   304,   305,     0,     0,
     306,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     307,   308,   309,     0,   310,     0,   311,     0,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,     0,   322,
       0,   323,   324,   325,     0,   326,     0,   327,   328,   329,
     330,   331,     0,   332,   333,   334,     0,     0,   335,     0,
       0,     0,   336,   337,     0,   338,   339,     0,     0,   340,
     341,   342,   343,   344,     0,   345,   346,     0,   347,   348,
     349,     0,     0,   350,   351,   352,   353,   354,   355,   356,
     357,     0,   358,     0,   359,   360,     0,   361,   362,   363,
       0,   364,     0,     0,   365,   366,   367,   368,     0,   369,
       0,   370,   371,   372,   373,   374,     0,     0,   375,   376,
       0,     0,     0,   377,   378,   379,   380,     0,     0,     0,
     381,     0,     0,     0,     0,   382,     0,   383,   384,   385,
     386,     0,   387,   388,   389,   390,   391,     0,     0,     0,
       0,     0,   392,   393,   394,     0,   395,     0,     0,   396,
       0,     0,   397,     0,   398,     0,   399,   400,   401,   402,
     403,   404,     0,     0,   405,   406,     0,     0,   407,   408,
     409,   410,   411,   412,     0,     0,   413,   414,   415,   416,
       0,   417,   418,   419,     0,     0,   420,   421,   422,   423,
       0,     0,   424,   425,     0,   426,   427,   428,   429,     0,
       0,     0,     0,     0,   430,   431,     0,     0,     0,   432,
     433,   434,     0,     0,   435,   436,     0,   437,   438,     0,
     439,   440,     0,     0,   441,     0,     0,   442,     0,   443,
       0,   444,   445,     0,     0,     0,     0,     0,   446,     0,
     447,     0,     0,   448,     0,     0,     0,     0,   449,     0,
     450,   451,   452,   453,     0,     0,     0,     0,     0,     0,
     454,   455,   456,     0,   457,   458,   459,   460,     0,     0,
     461,     0,     0,   462,   463,     0,   464,   465,   466,   467,
     468,     0,   469,     0,     0,     0,     0,     0,     0,     0,
       0,   470,   471,   472,     0,   473,   474,   475,     0,   476,
       0,     0,   477,     0,   478,     0,     0,     0,     0,     0,
       0,   479,   480,     0,     0,   481,     0,   482,     0,   483,
     484,     0,     0,     0,   485,   486,   487,   488,   489,   490,
     491,   492,     0,   493,   494,   495,   496,   497,   498,   499,
     500,   501,   502,     0,   503,   504,   505,   506,   507,   508,
     509,   510,   511,   512,    95,    96,     0,    97,    98,    99,
     100,   101,     0,     0,   102,     0,     0,  2043,     0,   103,
       0,     0,   104,     0,   105,   106,   107,   108,   109,   110,
       0,   111,     0,     0,     0,   112,     0,     0,     0,   113,
       0,     0,   114,   115,   116,     0,   117,     0,   118,   119,
       0,     0,   120,     0,     0,   121,   122,     0,   123,   124,
     125,     0,   126,     0,   127,   128,   129,   130,   131,   132,
       0,   133,   134,     0,   135,   136,   137,   138,   139,   140,
     141,   142,   143,   144,   145,     0,     0,   146,   147,     0,
     148,   149,   150,   151,   152,     0,     0,     0,   153,     0,
       0,     0,     0,   154,     0,     0,   155,     0,     0,     0,
     156,   157,   158,     0,     0,   159,     0,     0,     0,     0,
     160,   161,     0,     0,     0,     0,     0,   162,   163,     0,
     164,     0,     0,     0,     0,     0,   165,     0,     0,     0,
       0,   166,   167,   168,   169,     0,     0,     0,   170,     0,
       0,   171,   172,   173,     0,     0,     0,   174,     0,     0,
     175,   176,   177,   178,   179,     0,     0,   180,   181,     0,
     182,   183,   184,   185,   186,   187,     0,     0,   188,   189,
     190,   191,   192,     0,     0,   193,   194,     0,   195,   196,
     197,   198,   199,     0,     0,   200,   201,     0,     0,     0,
     202,   203,     0,     0,     0,     0,     0,   204,     0,   205,
     206,   207,   208,     0,   209,     0,   210,     0,     0,     0,
     211,   212,     0,   213,     0,     0,   214,   215,     0,     0,
       0,   216,   217,   218,     0,     0,     0,   219,   220,   221,
       0,     0,   222,     0,     0,     0,     0,   223,   224,   225,
       0,     0,     0,     0,   226,     0,     0,     0,   227,   228,
       0,   229,   230,     0,     0,     0,   231,     0,   232,     0,
       0,   233,   234,     0,     0,   235,     0,     0,   236,   237,
       0,     0,     0,     0,     0,   238,   239,     0,   240,     0,
     241,     0,   242,   243,     0,     0,     0,     0,     0,     0,
       0,   244,     0,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,     0,   263,   264,   265,     0,   266,   267,   268,   269,
       0,   270,   271,     0,     0,     0,     0,   272,   273,   274,
     275,   276,   277,     0,     0,   278,   279,     0,   280,     0,
     281,     0,   282,   283,   284,   285,   286,   287,   288,   289,
     290,     0,     0,   291,   292,     0,     0,   293,   294,   295,
     296,   297,     0,     0,     0,   298,   299,     0,     0,     0,
     300,     0,   301,   302,     0,   303,   304,   305,     0,     0,
     306,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     307,   308,   309,     0,   310,     0,   311,     0,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,     0,   322,
       0,   323,   324,   325,     0,   326,     0,   327,   328,   329,
     330,   331,     0,   332,   333,   334,     0,     0,   335,     0,
       0,     0,   336,   337,     0,   338,   339,     0,     0,   340,
     341,   342,   343,   344,     0,   345,   346,     0,   347,   348,
     349,     0,     0,   350,   351,   352,   353,   354,   355,   356,
     357,     0,   358,     0,   359,   360,     0,   361,   362,   363,
       0,   364,     0,     0,   365,   366,   367,   368,     0,   369,
       0,   370,   371,   372,   373,   374,     0,     0,   375,   376,
       0,     0,     0,   377,   378,   379,   380,     0,     0,     0,
     381,     0,     0,     0,     0,   382,     0,   383,   384,   385,
     386,     0,   387,   388,   389,   390,   391,     0,     0,     0,
       0,     0,   392,   393,   394,     0,   395,     0,     0,   396,
       0,     0,   397,     0,   398,     0,   399,   400,   401,   402,
     403,   404,     0,     0,   405,   406,     0,     0,   407,   408,
     409,   410,   411,   412,     0,     0,   413,   414,   415,   416,
       0,   417,   418,   419,     0,     0,   420,   421,   422,   423,
       0,     0,   424,   425,     0,   426,   427,   428,   429,     0,
       0,     0,     0,     0,   430,   431,     0,     0,     0,   432,
     433,   434,     0,     0,   435,   436,     0,   437,   438,     0,
     439,   440,     0,     0,   441,     0,     0,   442,     0,   443,
       0,   444,   445,     0,     0,     0,     0,     0,   446,     0,
     447,     0,     0,   448,     0,     0,     0,     0,   449,     0,
     450,   451,   452,   453,     0,     0,     0,     0,     0,     0,
     454,   455,   456,     0,   457,   458,   459,   460,     0,     0,
     461,     0,     0,   462,   463,     0,   464,   465,   466,   467,
     468,     0,   469,     0,     0,     0,     0,     0,     0,     0,
       0,   470,   471,   472,     0,   473,   474,   475,     0,   476,
       0,     0,   477,     0,   478,     0,     0,     0,     0,     0,
       0,   479,   480,     0,     0,   481,     0,   482,     0,   483,
     484,     0,     0,     0,   485,   486,   487,   488,   489,   490,
     491,   492,     0,   493,   494,   495,   496,   497,   498,   499,
     500,   501,   502,     0,   503,   504,   505,   506,   507,   508,
     509,   510,   511,   512,    95,    96,     0,    97,    98,    99,
     100,   101,     0,     0,   102,     0,     0,  2621,     0,   103,
       0,     0,   104,     0,   105,   106,   107,   108,   109,   110,
       0,   111,     0,     0,     0,   112,     0,     0,     0,   113,
       0,     0,   114,   115,   116,     0,   117,     0,   118,   119,
       0,     0,   120,     0,     0,   121,   122,     0,   123,   124,
     125,     0,   126,     0,   127,   128,   129,   130,   131,   132,
       0,   133,   134,     0,   135,   136,   137,   138,   139,   140,
     141,   142,   143,   144,   145,     0,     0,   146,   147,     0,
     148,   149,   150,   151,   152,     0,     0,     0,   153,     0,
       0,     0,     0,   154,     0,     0,   155,     0,     0,     0,
     156,   157,   158,     0,     0,   159,     0,     0,     0,     0,
     160,   161,     0,     0,     0,     0,     0,   162,   163,     0,
     164,     0,     0,     0,     0,     0,   165,     0,     0,     0,
       0,   166,   167,   168,   169,     0,     0,     0,   170,     0,
       0,   171,   172,   173,     0,     0,     0,   174,     0,     0,
     175,   176,   177,   178,   179,     0,     0,   180,   181,     0,
     182,   183,   184,   185,   186,   187,     0,     0,   188,   189,
     190,   191,   192,     0,     0,   193,   194,     0,   195,   196,
     197,   198,   199,     0,     0,   200,   201,     0,     0,     0,
     202,   203,     0,     0,     0,     0,     0,   204,     0,   205,
     206,   207,   208,     0,   209,     0,   210,     0,     0,     0,
     211,   212,     0,   213,     0,     0,   214,   215,     0,     0,
       0,   216,   217,   218,     0,     0,     0,   219,   220,   221,
       0,     0,   222,     0,     0,     0,     0,   223,   224,   225,
       0,     0,     0,     0,   226,     0,     0,     0,   227,   228,
       0,   229,   230,     0,     0,     0,   231,     0,   232,     0,
       0,   233,   234,     0,     0,   235,     0,     0,   236,   237,
       0,     0,     0,     0,     0,   238,   239,     0,   240,     0,
     241,     0,   242,   243,     0,     0,     0,     0,     0,     0,
       0,   244,     0,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,     0,   263,   264,   265,     0,   266,   267,   268,   269,
       0,   270,   271,     0,     0,     0,     0,   272,   273,   274,
     275,   276,   277,     0,     0,   278,   279,     0,   280,     0,
     281,     0,   282,   283,   284,   285,   286,   287,   288,   289,
     290,     0,     0,   291,   292,     0,     0,   293,   294,   295,
     296,   297,     0,     0,     0,   298,   299,     0,     0,     0,
     300,     0,   301,   302,     0,   303,   304,   305,     0,     0,
     306,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     307,   308,   309,     0,   310,     0,   311,     0,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,     0,   322,
       0,   323,   324,   325,     0,   326,     0,   327,   328,   329,
     330,   331,     0,   332,   333,   334,     0,     0,   335,     0,
       0,     0,   336,   337,     0,   338,   339,     0,     0,   340,
     341,   342,   343,   344,     0,   345,   346,     0,   347,   348,
     349,     0,     0,   350,   351,   352,   353,   354,   355,   356,
     357,     0,   358,     0,   359,   360,     0,   361,   362,   363,
       0,   364,     0,     0,   365,   366,   367,   368,     0,   369,
       0,   370,   371,   372,   373,   374,     0,     0,   375,   376,
       0,     0,     0,   377,   378,   379,   380,     0,     0,     0,
     381,     0,     0,     0,     0,   382,     0,   383,   384,   385,
     386,     0,   387,   388,   389,   390,   391,     0,     0,     0,
       0,     0,   392,   393,   394,     0,   395,     0,     0,   396,
       0,     0,   397,     0,   398,     0,   399,   400,   401,   402,
     403,   404,     0,     0,   405,   406,     0,     0,   407,   408,
     409,   410,   411,   412,     0,     0,   413,   414,   415,   416,
       0,   417,   418,   419,     0,     0,   420,   421,   422,   423,
       0,     0,   424,   425,     0,   426,   427,   428,   429,     0,
       0,     0,     0,     0,   430,   431,     0,     0,     0,   432,
     433,   434,     0,     0,   435,   436,     0,   437,   438,     0,
     439,   440,     0,     0,   441,     0,     0,   442,     0,   443,
       0,   444,   445,     0,     0,     0,     0,     0,   446,     0,
     447,     0,     0,   448,     0,     0,     0,     0,   449,     0,
     450,   451,   452,   453,     0,     0,     0,     0,     0,     0,
     454,   455,   456,     0,   457,   458,   459,   460,     0,     0,
     461,     0,     0,   462,   463,     0,   464,   465,   466,   467,
     468,     0,   469,     0,     0,     0,     0,     0,     0,     0,
       0,   470,   471,   472,     0,   473,   474,   475,     0,   476,
       0,     0,   477,     0,   478,     0,     0,     0,     0,     0,
       0,   479,   480,     0,     0,   481,     0,   482,     0,   483,
     484,     0,     0,     0,   485,   486,   487,   488,   489,   490,
     491,   492,     0,   493,   494,   495,   496,   497,   498,   499,
     500,   501,   502,     0,   503,   504,   505,   506,   507,   508,
     509,   510,   511,   512,     0,     0,     0,     0,     0,    95,
      96,  1290,    97,    98,    99,   100,   101,     0,     0,   102,
       0,     0,     0,     0,   103,     0,     0,   104,     0,   105,
     106,   107,   108,   109,   110,     0,   111,     0,     0,     0,
     112,     0,     0,     0,   113,     0,     0,   114,   115,   116,
       0,   117,     0,   118,   119,     0,     0,   120,     0,     0,
     121,   122,     0,   123,   124,   125,     0,   126,     0,   127,
     128,   129,   130,   131,   132,     0,   133,   134,     0,   135,
     136,   137,   138,   139,   140,   141,   142,   143,   144,   145,
       0,     0,   146,   147,     0,   148,   149,   150,   151,   152,
       0,     0,     0,   153,     0,     0,     0,     0,   154,     0,
       0,   155,     0,     0,     0,   156,   157,   158,     0,     0,
     159,     0,     0,     0,     0,   160,   161,     0,     0,     0,
       0,     0,   162,   163,     0,   164,     0,     0,     0,     0,
       0,   165,     0,     0,     0,     0,   166,   167,   168,   169,
       0,     0,     0,   170,     0,     0,   171,   172,   173,     0,
       0,     0,   174,     0,     0,   175,   176,   177,   178,   179,
       0,     0,   180,   181,     0,   182,   183,   184,   185,   186,
     187,     0,     0,   188,   189,   190,   191,   192,     0,     0,
     193,   194,     0,   195,   196,   197,   198,   199,     0,     0,
     200,   201,     0,     0,     0,   202,   203,     0,     0,     0,
       0,     0,   204,     0,   205,   206,   207,   208,     0,   209,
       0,   210,     0,     0,     0,   211,   212,     0,   213,     0,
       0,   214,   215,     0,     0,     0,   216,   217,   218,     0,
       0,     0,   219,   220,   221,     0,     0,   222,     0,     0,
       0,     0,   223,   224,   225,     0,     0,     0,     0,   226,
       0,     0,     0,   227,   228,     0,   229,   230,     0,     0,
       0,   231,     0,   232,     0,     0,   233,   234,     0,     0,
     235,     0,     0,   236,   237,     0,     0,     0,     0,     0,
     238,   239,     0,   240,     0,   241,     0,   242,   243,     0,
       0,     0,     0,     0,     0,     0,   244,     0,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,     0,   263,   264,   265,
       0,   266,   267,   268,   269,     0,   270,   271,     0,     0,
       0,     0,   272,   273,   274,   275,   276,   277,     0,     0,
     278,   279,     0,   280,     0,   281,     0,   282,   283,   284,
     285,   286,   287,   288,   289,   290,     0,     0,   291,   292,
       0,     0,   293,   294,   295,   296,   297,     0,     0,     0,
     298,   299,     0,     0,     0,   300,     0,   301,   302,     0,
     303,   304,   305,     0,     0,   306,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   307,   308,   309,     0,   310,
       0,   311,     0,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,     0,   322,     0,   323,   324,   325,     0,
     326,     0,   327,   328,   329,   330,   331,     0,   332,   333,
     334,     0,     0,   335,     0,     0,     0,   336,   337,     0,
     338,   339,     0,     0,   340,   341,   342,   343,   344,     0,
     345,   346,     0,   347,   348,   349,     0,     0,   350,   351,
     352,   353,   354,   355,   356,   357,     0,   358,     0,   359,
     360,     0,   361,   362,   363,     0,   364,     0,     0,   365,
     366,   367,   368,     0,   369,     0,   370,   371,   372,   373,
     374,     0,     0,   375,   376,     0,     0,     0,   377,   378,
     379,   380,     0,     0,     0,   381,     0,     0,     0,     0,
     382,     0,   383,   384,   385,   386,     0,   387,   388,   389,
     390,   391,     0,     0,     0,     0,     0,   392,   393,   394,
       0,   395,     0,     0,   396,     0,     0,   397,     0,   398,
       0,   399,   400,   401,   402,   403,   404,     0,     0,   405,
     406,     0,     0,   407,   408,   409,   410,   411,   412,     0,
       0,   413,   414,   415,   416,     0,   417,   418,   419,     0,
       0,   420,   421,   422,   423,     0,     0,   424,   425,     0,
     426,   427,   428,   429,     0,     0,     0,     0,     0,   430,
     431,     0,     0,     0,   432,   433,   434,     0,     0,   435,
     436,     0,   437,   438,     0,   439,   440,     0,     0,   441,
       0,     0,   442,     0,   443,     0,   444,   445,     0,     0,
       0,     0,     0,   446,     0,   447,     0,     0,   448,     0,
       0,     0,     0,   449,     0,   450,   451,   452,   453,     0,
       0,     0,     0,     0,     0,   454,   455,   456,     0,   457,
     458,   459,   460,     0,     0,   461,     0,     0,   462,   463,
       0,   464,   465,   466,   467,   468,     0,   469,     0,     0,
       0,     0,     0,     0,     0,     0,   470,   471,   472,     0,
     473,   474,   475,     0,   476,     0,     0,   477,     0,   478,
       0,     0,     0,     0,     0,     0,   479,   480,     0,     0,
     481,     0,   482,     0,   483,   484,     0,     0,     0,   485,
     486,   487,   488,   489,   490,   491,   492,     0,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,     0,   503,
     504,   505,   506,   507,   508,   509,   510,   511,   512,     0,
       0,     0,     0,     0,    95,    96,  1479,    97,    98,    99,
     100,   101,     0,     0,   102,     0,     0,     0,     0,   103,
       0,     0,   104,     0,   105,   106,   107,   108,   109,   110,
       0,   111,     0,     0,     0,   112,     0,     0,     0,   113,
       0,     0,   114,   115,   116,     0,   117,     0,   118,   119,
       0,     0,   120,     0,     0,   121,   122,     0,   123,   124,
     125,     0,   126,     0,   127,   128,   129,   130,   131,   132,
       0,   133,   134,     0,   135,   136,   137,   138,   139,   140,
     141,   142,   143,   144,   145,     0,     0,   146,   147,     0,
     148,   149,   150,   151,   152,     0,     0,     0,   153,     0,
       0,     0,     0,   154,     0,     0,   155,     0,     0,     0,
     156,   157,   158,     0,     0,   159,     0,     0,     0,     0,
     160,   161,     0,     0,     0,     0,     0,   162,   163,     0,
     164,     0,     0,     0,     0,     0,   165,     0,     0,     0,
       0,   166,   167,   168,   169,     0,     0,     0,   170,     0,
       0,   171,   172,   173,     0,     0,     0,   174,     0,     0,
     175,   176,   177,   178,   179,     0,     0,   180,   181,     0,
     182,   183,   184,   185,   186,   187,     0,     0,   188,   189,
     190,   191,   192,     0,     0,   193,   194,     0,   195,   196,
     197,   198,   199,     0,     0,   200,   201,     0,     0,     0,
     202,   203,     0,     0,     0,     0,     0,   204,     0,   205,
     206,   207,   208,     0,   209,     0,   210,     0,     0,     0,
     211,   212,     0,   213,     0,     0,   214,   215,     0,     0,
       0,   216,   217,   218,     0,     0,     0,   219,   220,   221,
       0,     0,   222,     0,     0,     0,     0,   223,   224,   225,
       0,     0,     0,     0,   226,     0,     0,     0,   227,   228,
       0,   229,   230,     0,     0,     0,   231,     0,   232,     0,
       0,   233,   234,     0,     0,   235,     0,     0,   236,   237,
       0,     0,     0,     0,     0,   238,   239,     0,   240,     0,
     241,     0,   242,   243,     0,     0,     0,     0,     0,     0,
       0,   244,     0,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,     0,   263,   264,   265,     0,   266,   267,   268,   269,
       0,   270,   271,     0,     0,     0,     0,   272,   273,   274,
     275,   276,   277,     0,     0,   278,   279,     0,   280,     0,
     281,     0,   282,   283,   284,   285,   286,   287,   288,   289,
     290,     0,     0,   291,   292,     0,     0,   293,   294,   295,
     296,   297,     0,     0,     0,   298,   299,     0,     0,     0,
     300,     0,   301,   302,     0,   303,   304,   305,     0,     0,
     306,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     307,   308,   309,     0,   310,     0,   311,     0,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,     0,   322,
       0,   323,   324,   325,     0,   326,     0,   327,   328,   329,
     330,   331,     0,   332,   333,   334,     0,     0,   335,     0,
       0,     0,   336,   337,     0,   338,   339,     0,     0,   340,
     341,   342,   343,   344,     0,   345,   346,     0,   347,   348,
     349,     0,     0,   350,   351,   352,   353,   354,   355,   356,
     357,     0,   358,     0,   359,   360,     0,   361,   362,   363,
       0,   364,     0,     0,   365,   366,   367,   368,     0,   369,
       0,   370,   371,   372,   373,   374,     0,     0,   375,   376,
       0,     0,     0,   377,   378,   379,   380,     0,     0,     0,
     381,     0,     0,     0,     0,   382,     0,   383,   384,   385,
     386,     0,   387,   388,   389,   390,   391,     0,     0,     0,
       0,     0,   392,   393,   394,     0,   395,     0,     0,   396,
       0,     0,   397,     0,   398,     0,   399,   400,   401,   402,
     403,   404,     0,     0,   405,   406,     0,     0,   407,   408,
     409,   410,   411,   412,     0,     0,   413,   414,   415,   416,
       0,   417,   418,   419,     0,     0,   420,   421,   422,   423,
       0,     0,   424,   425,     0,   426,   427,   428,   429,     0,
       0,     0,     0,     0,   430,   431,     0,     0,     0,   432,
     433,   434,     0,     0,   435,   436,     0,   437,   438,     0,
     439,   440,     0,     0,   441,     0,     0,   442,     0,   443,
       0,   444,   445,     0,     0,     0,     0,     0,   446,     0,
     447,     0,     0,   448,     0,     0,     0,     0,   449,     0,
     450,   451,   452,   453,     0,     0,     0,     0,     0,     0,
     454,   455,   456,     0,   457,   458,   459,   460,     0,     0,
     461,     0,     0,   462,   463,     0,   464,   465,   466,   467,
     468,     0,   469,     0,     0,     0,     0,     0,     0,     0,
       0,   470,   471,   472,     0,   473,   474,   475,     0,   476,
       0,     0,   477,     0,   478,     0,     0,     0,     0,     0,
       0,   479,   480,     0,     0,   481,     0,   482,     0,   483,
     484,     0,     0,     0,   485,   486,   487,   488,   489,   490,
     491,   492,     0,   493,   494,   495,   496,   497,   498,   499,
     500,   501,   502,     0,   503,   504,   505,   506,   507,   508,
     509,   510,   511,   512,     0,     0,     0,     0,     0,    95,
      96,  2081,    97,    98,    99,   100,   101,     0,     0,   102,
       0,     0,     0,     0,   103,     0,     0,   104,     0,   105,
     106,   107,   108,   109,   110,     0,   111,     0,     0,     0,
     112,     0,     0,     0,   113,     0,     0,   114,   115,   116,
       0,   117,     0,   118,   119,     0,     0,   120,     0,     0,
     121,   122,     0,   123,   124,   125,     0,   126,     0,   127,
     128,   129,   130,   131,   132,     0,   133,   134,     0,   135,
     136,   137,   138,   139,   140,   141,   142,   143,   144,   145,
       0,     0,   146,   147,     0,   148,   149,   150,   151,   152,
       0,     0,     0,   153,     0,     0,     0,     0,   154,     0,
       0,   155,     0,     0,     0,   156,   157,   158,     0,     0,
     159,     0,     0,     0,     0,   160,   161,  2143,     0,     0,
       0,     0,   162,   163,     0,   164,     0,     0,     0,     0,
       0,   165,     0,     0,     0,     0,   166,   167,   168,   169,
       0,     0,     0,   170,     0,     0,   171,   172,   173,     0,
       0,     0,   174,     0,     0,   175,   176,   177,   178,   179,
       0,     0,   180,   181,     0,   182,   183,   184,   185,   186,
     187,     0,     0,   188,   189,   190,   191,   192,     0,     0,
     193,   194,     0,   195,   196,   197,   198,   199,  2144,     0,
     200,   201,     0,     0,     0,   202,   203,     0,     0,     0,
       0,     0,   204,     0,   205,   206,   207,   208,     0,   209,
       0,   210,     0,     0,     0,   211,   212,     0,   213,     0,
       0,   214,   215,     0,     0,     0,   216,   217,   218,     0,
       0,     0,   219,   220,   221,     0,     0,   222,     0,     0,
       0,     0,   223,   224,   225,     0,     0,     0,     0,   226,
       0,     0,     0,   227,   228,     0,   229,   230,     0,     0,
       0,   231,     0,   232,     0,     0,   233,   234,     0,     0,
     235,     0,     0,   236,   237,     0,     0,     0,     0,     0,
     238,   239,     0,   240,     0,   241,     0,   242,   243,     0,
       0,  2145,     0,     0,     0,     0,   244,     0,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,     0,   263,   264,   265,
       0,   266,   267,   268,   269,     0,   270,   271,     0,     0,
       0,     0,   272,   273,   274,   275,   276,   277,     0,     0,
     278,   279,     0,   280,     0,   281,     0,   282,   283,   284,
     285,   286,   287,   288,   289,   290,     0,     0,   291,   292,
       0,     0,   293,   294,   295,   296,   297,   931,   932,     0,
     298,   299,     0,     0,  2146,   300,     0,   301,   302,     0,
     303,   304,   305,     0,     0,   306,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   307,   308,   309,     0,   310,
       0,   311,     0,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,     0,   322,     0,   323,   324,   325,     0,
     326,     0,   327,   328,   329,   330,   331,     0,   332,   333,
     334,     0,     0,   335,     0,     0,     0,   336,   337,     0,
     338,   339,     0,     0,   340,   341,   342,   343,   344,     0,
     345,   346,     0,   347,   348,   349,     0,     0,   350,   351,
     352,   353,   354,   355,   356,   357,     0,   358,     0,   359,
     360,     0,   361,   362,   363,     0,   364,     0,     0,   365,
     366,   367,   368,     0,   369,     0,   370,   371,   372,   373,
     374,     0,     0,   375,   376,     0,     0,     0,   377,   378,
     379,   380,     0,     0,     0,   381,     0,     0,     0,     0,
     382,     0,   383,   384,   385,   386,     0,   387,   388,   389,
     390,   391,     0,     0,  3362,  3347,  3363,   392,   393,   394,
       0,   395,     0,     0,   396,     0,     0,   397,     0,   398,
       0,   399,   400,   401,   402,   403,   404,     0,     0,   405,
     406,     0,     0,   407,   408,   409,   410,   411,   412,     0,
       0,   413,   414,   415,   416,     0,   417,   418,   419,     0,
       0,   420,   421,   422,   423,     0,     0,   424,   425,     0,
     426,   427,   428,   429,     0,     0,     0,     0,     0,   430,
     431,     0,     0,     0,   432,   433,   434,     0,  2147,   435,
     436,     0,   437,   438,     0,   439,   440,     0,     0,   441,
       0,     0,   442,     0,   443,     0,   444,   445,     0,     0,
       0,     0,     0,   446,     0,   447,     0,     0,   448,     0,
       0,     0,     0,   449,     0,   450,   451,   452,   453,     0,
       0,     0,     0,     0,     0,   454,   455,   456,     0,   457,
     458,   459,   460,     0,     0,   461,     0,     0,   462,   463,
       0,   464,   465,   466,   467,   468,     0,   469,     0,     0,
       0,     0,     0,     0,     0,     0,   470,   471,   472,     0,
     473,   474,   475,     0,   476,     0,     0,   477,     0,   478,
       0,     0,     0,     0,     0,     0,   479,   480,     0,     0,
     481,     0,   482,     0,   483,   484,     0,     0,     0,   485,
     486,   487,   488,   489,   490,   491,   492,     0,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,     0,   503,
     504,   505,   506,   507,   508,   509,   510,   511,   512,    95,
      96,     0,    97,    98,    99,   100,   101,     0,     0,   102,
       0,     0,     0,     0,   103,     0,     0,   104,     0,   105,
     106,   107,   108,   109,   110,     0,   111,     0,     0,   807,
     112,     0,     0,     0,   113,     0,     0,   114,   115,   116,
       0,   117,     0,   118,   119,     0,     0,   120,     0,     0,
     121,   122,     0,   123,   124,   125,     0,   126,     0,   127,
     128,   129,   130,   131,   132,     0,   133,   134,     0,   135,
     136,   137,   138,   139,   140,   141,   142,   143,   144,   145,
       0,     0,   146,   147,     0,   148,   149,   150,   151,   152,
       0,     0,     0,   153,     0,     0,     0,     0,   154,     0,
       0,   155,     0,     0,     0,   156,   157,   158,     0,     0,
     159,     0,     0,     0,     0,   160,   161,     0,     0,     0,
       0,   808,   162,   163,     0,   164,     0,     0,     0,     0,
       0,   165,     0,     0,     0,     0,   166,   167,   168,   169,
       0,     0,     0,   170,     0,     0,   171,   172,   173,     0,
       0,     0,   174,     0,     0,   175,   176,   177,   178,   179,
     809,     0,   180,   181,     0,   182,   183,   184,   185,   186,
     187,     0,     0,   188,   189,   190,   191,   192,     0,     0,
     193,   194,     0,   195,   196,   197,   198,   199,     0,     0,
     200,   201,     0,     0,     0,   202,   203,     0,     0,     0,
       0,     0,   204,     0,   205,   206,   207,   208,     0,   209,
       0,   210,     0,     0,     0,   211,   212,     0,   213,     0,
       0,   214,   215,     0,     0,     0,   216,   217,   218,     0,
       0,     0,   219,   220,   221,     0,     0,   222,     0,     0,
       0,     0,   223,   224,   225,     0,     0,     0,     0,   226,
       0,     0,     0,   227,   228,     0,   229,   230,     0,     0,
       0,   231,     0,   232,     0,     0,   233,   234,     0,     0,
     235,     0,     0,   236,   237,   638,     0,     0,     0,     0,
     238,   239,     0,   240,     0,   241,     0,   242,   243,     0,
       0,     0,     0,     0,     0,     0,   244,     0,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,     0,   263,   264,   265,
       0,   266,   267,   268,   269,     0,   270,   271,     0,     0,
       0,     0,   272,   273,   274,   275,   276,   277,     0,     0,
     278,   279,     0,   280,     0,   281,     0,   282,   283,   284,
     285,   286,   287,   288,   289,   290,     0,     0,   291,   292,
       0,     0,   293,   294,   295,   296,   297,     0,     0,     0,
     298,   299,     0,     0,     0,   300,     0,   301,   302,     0,
     303,   304,   305,     0,     0,   306,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   307,   308,   309,     0,   310,
       0,   311,     0,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,     0,   322,     0,   323,   324,   325,     0,
     326,     0,   327,   328,   329,   330,   331,     0,   332,   333,
     334,     0,     0,   335,     0,     0,     0,   336,   337,     0,
     338,   339,     0,     0,   340,   341,   342,   343,   344,     0,
     345,   346,     0,   347,   348,   349,     0,     0,   350,   351,
     352,   353,   354,   355,   356,   357,     0,   358,     0,   359,
     360,     0,   361,   362,   363,     0,   364,     0,     0,   365,
     366,   367,   368,     0,   369,     0,   370,   371,   372,   373,
     374,     0,     0,   375,   376,     0,     0,     0,   377,   378,
     379,   380,     0,     0,   810,   381,     0,     0,     0,     0,
     382,     0,   383,   384,   385,   386,     0,   387,   388,   389,
     390,   391,     0,     0,     0,     0,     0,   392,   393,   394,
       0,   395,     0,     0,   396,     0,     0,   397,     0,   398,
       0,   399,   400,   401,   402,   403,   404,     0,     0,   405,
     406,     0,     0,   407,   408,   409,   410,   411,   412,     0,
       0,   413,   414,   415,   416,     0,   417,   418,   419,     0,
       0,   420,   421,   422,   423,     0,   639,   424,   425,     0,
     426,   427,   428,   429,     0,     0,     0,     0,     0,   430,
     431,     0,     0,     0,   432,   433,   434,     0,     0,   435,
     436,     0,   437,   438,     0,   439,   440,     0,     0,   441,
       0,     0,   442,     0,   443,     0,   444,   445,     0,     0,
       0,     0,     0,   446,     0,   447,     0,     0,   448,     0,
       0,     0,     0,   449,     0,   450,   451,   452,   453,     0,
       0,     0,     0,     0,     0,   454,   455,   456,     0,   457,
     458,   459,   460,     0,     0,   461,     0,     0,   462,   463,
       0,   464,   465,   466,   467,   468,     0,   469,     0,     0,
       0,     0,     0,     0,     0,     0,   470,   471,   472,     0,
     473,   474,   475,     0,   476,     0,     0,   477,     0,   478,
       0,     0,     0,     0,     0,     0,   479,   480,     0,     0,
     481,     0,   482,     0,   483,   484,     0,     0,     0,   485,
     486,   487,   488,   489,   490,   491,   492,     0,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,     0,   503,
     504,   505,   506,   507,   508,   509,   510,   511,   512,    95,
      96,     0,    97,    98,    99,   100,   101,     0,     0,   102,
       0,     0,     0,     0,   103,     0,     0,   104,     0,   105,
     106,   107,   108,   109,   110,     0,   111,     0,     0,     0,
     112,     0,     0,     0,   113,     0,     0,   114,   115,   116,
       0,   117,     0,   118,   119,     0,     0,   120,     0,     0,
     121,   122,     0,   123,   124,   125,     0,   126,     0,   127,
     128,   129,   130,   131,   132,     0,   133,   134,     0,   135,
     136,   137,   138,   139,   140,   141,   142,   143,   144,   145,
       0,     0,   146,   147,  1933,   148,   149,   150,   151,   152,
       0,     0,     0,   153,     0,     0,     0,     0,   154,     0,
       0,   155,     0,     0,     0,   156,   157,   158,     0,     0,
     159,     0,     0,     0,     0,   160,   161,     0,     0,     0,
       0,     0,   162,   163,     0,   164,     0,     0,     0,     0,
       0,   165,     0,     0,     0,     0,   166,   167,   168,   169,
       0,     0,     0,   170,     0,     0,   171,   172,   173,     0,
       0,     0,   174,     0,     0,   175,   176,   177,   178,   179,
       0,     0,   180,   181,     0,   182,   183,   184,   185,   186,
     187,     0,     0,   188,   189,   190,   191,   192,     0,     0,
     193,   194,     0,   195,   196,   197,   198,   199,     0,     0,
     200,   201,     0,     0,     0,   202,   203,     0,     0,  1934,
       0,     0,   204,     0,   205,   206,   207,   208,     0,   209,
       0,   210,     0,     0,     0,   211,   212,     0,   213,     0,
       0,   214,   215,     0,     0,     0,   216,   217,   218,     0,
       0,     0,   219,   220,   221,  1935,     0,   222,     0,     0,
       0,     0,   223,   224,   225,     0,     0,     0,     0,   226,
       0,     0,     0,   227,   228,     0,   229,   230,     0,     0,
       0,   231,     0,   232,  1936,     0,   233,   234,     0,     0,
     235,     0,     0,   236,   237,     0,     0,     0,     0,     0,
     238,   239,     0,   240,     0,   241,     0,   242,   243,     0,
       0,     0,     0,     0,     0,     0,   244,     0,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,     0,   263,   264,   265,
       0,   266,   267,   268,   269,     0,   270,   271,     0,     0,
       0,     0,   272,   273,   274,   275,   276,   277,     0,     0,
     278,   279,     0,   280,     0,   281,     0,   282,   283,   284,
     285,   286,   287,   288,   289,   290,     0,     0,   291,   292,
       0,     0,   293,   294,   295,   296,   297,     0,     0,     0,
     298,   299,     0,     0,     0,   300,     0,   301,   302,     0,
     303,   304,   305,     0,     0,   306,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   307,   308,   309,     0,   310,
       0,   311,     0,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,     0,   322,     0,   323,   324,   325,     0,
     326,     0,   327,   328,   329,   330,   331,     0,   332,   333,
     334,     0,     0,   335,     0,     0,     0,   336,   337,     0,
     338,   339,     0,     0,   340,   341,   342,   343,   344,     0,
     345,   346,     0,   347,   348,   349,     0,     0,   350,   351,
     352,   353,   354,   355,   356,   357,     0,   358,     0,   359,
     360,     0,   361,   362,   363,     0,   364,     0,     0,   365,
     366,   367,   368,     0,   369,     0,   370,   371,   372,   373,
     374,     0,     0,   375,   376,     0,     0,     0,   377,   378,
     379,   380,     0,     0,     0,   381,     0,     0,     0,     0,
     382,     0,   383,   384,   385,   386,     0,   387,   388,   389,
     390,   391,  1938,     0,     0,     0,     0,   392,   393,   394,
       0,   395,     0,     0,   396,     0,     0,   397,     0,   398,
       0,   399,   400,   401,   402,   403,   404,     0,     0,   405,
     406,     0,     0,   407,   408,   409,   410,   411,   412,     0,
       0,   413,   414,   415,   416,     0,   417,   418,   419,     0,
       0,   420,   421,   422,   423,     0,     0,   424,   425,     0,
     426,   427,   428,   429,     0,     0,     0,     0,     0,   430,
     431,     0,     0,     0,   432,   433,   434,     0,     0,   435,
     436,     0,   437,   438,     0,   439,   440,     0,     0,   441,
       0,     0,   442,     0,   443,     0,   444,   445,     0,     0,
       0,     0,     0,   446,     0,   447,     0,     0,   448,     0,
       0,     0,     0,   449,     0,   450,   451,   452,   453,     0,
       0,     0,     0,     0,     0,   454,   455,   456,     0,   457,
     458,   459,   460,     0,     0,   461,     0,     0,   462,   463,
       0,   464,   465,   466,   467,   468,     0,   469,     0,     0,
       0,     0,     0,     0,     0,     0,   470,   471,   472,     0,
     473,   474,   475,     0,   476,     0,     0,   477,     0,   478,
       0,     0,     0,     0,     0,     0,   479,   480,     0,     0,
     481,     0,   482,     0,   483,   484,     0,     0,     0,   485,
     486,   487,   488,   489,   490,   491,   492,     0,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,     0,   503,
     504,   505,   506,   507,   508,   509,   510,   511,   512,    95,
      96,     0,    97,    98,    99,   100,   101,     0,     0,   102,
       0,     0,     0,     0,   103,     0,     0,   104,     0,   105,
     106,   107,   108,   109,   110,     0,   111,     0,     0,   831,
     112,     0,     0,     0,   113,     0,     0,   114,   115,   116,
       0,   117,     0,   118,   119,     0,     0,   120,     0,     0,
     121,   122,     0,   123,   124,   125,     0,   126,     0,   127,
     128,   129,   130,   131,   132,     0,   133,   134,     0,   135,
     136,   137,   138,   139,   140,   141,   142,   143,   144,   145,
       0,     0,   146,   147,     0,   148,   149,   150,   151,   152,
       0,     0,     0,   153,     0,     0,     0,     0,   154,     0,
       0,   155,     0,     0,     0,   156,   157,   158,     0,     0,
     159,     0,     0,     0,     0,   160,   161,     0,     0,     0,
       0,   832,   162,   163,     0,   164,     0,     0,     0,     0,
       0,   165,     0,     0,     0,     0,   166,   167,   168,   169,
       0,     0,     0,   170,     0,     0,   171,   172,   173,     0,
       0,     0,   174,     0,     0,   175,   176,   177,   178,   179,
       0,     0,   180,   181,     0,   182,   183,   184,   185,   186,
     187,     0,     0,   188,   189,   190,   191,   192,     0,     0,
     193,   194,     0,   195,   196,   197,   198,   199,     0,     0,
     200,   201,     0,     0,     0,   202,   203,     0,     0,     0,
       0,     0,   204,     0,   205,   206,   207,   208,     0,   209,
       0,   210,     0,     0,     0,   211,   212,     0,   213,     0,
       0,   214,   215,     0,     0,     0,   216,   217,   218,     0,
       0,     0,   219,   220,   221,     0,     0,   222,     0,     0,
       0,     0,   223,   224,   225,     0,     0,     0,     0,   226,
       0,     0,     0,   227,   228,     0,   229,   230,     0,     0,
       0,   231,     0,   232,     0,     0,   233,   234,     0,     0,
     235,     0,     0,   236,   237,   638,     0,     0,     0,     0,
     238,   239,     0,   240,     0,   241,     0,   242,   243,     0,
       0,     0,     0,     0,     0,     0,   244,     0,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,     0,   263,   264,   265,
       0,   266,   267,   268,   269,     0,   270,   271,     0,     0,
       0,     0,   272,   273,   274,   275,   276,   277,     0,     0,
     278,   279,     0,   280,     0,   281,     0,   282,   283,   284,
     285,   286,   287,   288,   289,   290,     0,     0,   291,   292,
       0,     0,   293,   294,   295,   296,   297,     0,     0,     0,
     298,   299,     0,     0,     0,   300,     0,   301,   302,     0,
     303,   304,   305,     0,     0,   306,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   307,   308,   309,     0,   310,
       0,   311,     0,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,     0,   322,     0,   323,   324,   325,     0,
     326,     0,   327,   328,   329,   330,   331,     0,   332,   333,
     334,     0,     0,   335,     0,     0,     0,   336,   337,     0,
     338,   339,     0,     0,   340,   341,   342,   343,   344,     0,
     345,   346,     0,   347,   348,   349,     0,     0,   350,   351,
     352,   353,   354,   355,   356,   357,     0,   358,     0,   359,
     360,     0,   361,   362,   363,     0,   364,     0,     0,   365,
     366,   367,   368,     0,   369,     0,   370,   371,   372,   373,
     374,     0,     0,   375,   376,     0,     0,     0,   377,   378,
     379,   380,     0,     0,     0,   381,     0,     0,     0,     0,
     382,     0,   383,   384,   385,   386,     0,   387,   388,   389,
     390,   391,     0,     0,     0,     0,     0,   392,   393,   394,
       0,   395,     0,     0,   396,     0,     0,   397,     0,   398,
       0,   399,   400,   401,   402,   403,   404,     0,     0,   405,
     406,     0,     0,   407,   408,   409,   410,   411,   412,     0,
       0,   413,   414,   415,   416,     0,   417,   418,   419,     0,
       0,   420,   421,   422,   423,     0,   639,   424,   425,     0,
     426,   427,   428,   429,     0,     0,     0,     0,     0,   430,
     431,     0,     0,     0,   432,   433,   434,     0,     0,   435,
     436,     0,   437,   438,     0,   439,   440,     0,     0,   441,
       0,     0,   442,     0,   443,     0,   444,   445,     0,     0,
       0,     0,     0,   446,     0,   447,     0,     0,   448,     0,
       0,     0,     0,   449,     0,   450,   451,   452,   453,     0,
       0,     0,     0,     0,     0,   454,   455,   456,     0,   457,
     458,   459,   460,     0,     0,   461,     0,     0,   462,   463,
       0,   464,   465,   466,   467,   468,     0,   469,     0,     0,
       0,     0,     0,     0,     0,     0,   470,   471,   472,     0,
     473,   474,   475,     0,   476,     0,     0,   477,     0,   478,
       0,     0,     0,     0,     0,     0,   479,   480,     0,     0,
     481,     0,   482,     0,   483,   484,     0,     0,     0,   485,
     486,   487,   488,   489,   490,   491,   492,     0,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,     0,   503,
     504,   505,   506,   507,   508,   509,   510,   511,   512,    95,
      96,     0,    97,    98,    99,   100,   101,     0,     0,   102,
       0,     0,     0,     0,   103,     0,     0,   104,     0,   105,
     106,   107,   108,   109,   110,     0,   111,     0,     0,     0,
     112,     0,     0,     0,   113,     0,     0,   114,   115,   116,
       0,   117,     0,   118,   119,     0,     0,   120,     0,     0,
     121,   122,     0,   123,   124,   125,     0,   126,     0,   127,
     128,   129,   130,   131,   132,     0,   133,   134,     0,   135,
     136,   137,   138,   139,   140,   141,   142,   143,   144,   145,
       0,     0,   146,   147,     0,   148,   149,   150,   151,   152,
       0,     0,     0,   153,     0,     0,     0,     0,   154,     0,
       0,   155,     0,     0,     0,   156,   157,   158,     0,     0,
     159,     0,     0,     0,     0,   160,   161,     0,     0,     0,
       0,     0,   162,   163,     0,   164,     0,     0,     0,     0,
       0,   165,     0,     0,     0,     0,   166,   167,   168,   169,
       0,     0,     0,   170,     0,     0,   171,   172,   173,     0,
       0,     0,   174,     0,     0,   175,   176,   177,   178,   179,
       0,     0,   180,   181,     0,   182,   183,   184,   185,   186,
     187,     0,     0,   188,   189,   190,   191,   192,     0,     0,
     193,   194,     0,   195,   196,   197,   198,   199,     0,     0,
     200,   201,     0,     0,     0,   202,   203,     0,     0,     0,
       0,     0,   204,     0,   205,   206,   207,   208,     0,   209,
       0,   210,     0,     0,     0,   211,   212,     0,   213,     0,
       0,   214,   215,     0,     0,     0,   216,   217,   218,     0,
       0,     0,   219,   220,   221,     0,     0,   222,     0,     0,
       0,     0,   223,   224,   225,     0,     0,     0,     0,   226,
       0,     0,     0,   227,   228,     0,   229,   230,     0,     0,
       0,   231,     0,   232,     0,     0,   233,   234,     0,     0,
     235,     0,     0,   236,   237,     0,     0,     0,     0,     0,
     238,   239,     0,   240,     0,   241,     0,   242,   243,     0,
       0,  1194,     0,     0,     0,     0,   244,     0,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,     0,   263,   264,   265,
       0,   266,   267,   268,   269,     0,   270,   271,     0,     0,
       0,     0,   272,   273,   274,   275,   276,   277,     0,     0,
     278,   279,     0,   280,     0,   281,     0,   282,   283,   284,
     285,   286,   287,   288,   289,   290,     0,     0,   291,   292,
       0,     0,   293,   294,   295,   296,   297,     0,     0,     0,
     298,   299,     0,     0,  1195,   300,     0,   301,   302,     0,
     303,   304,   305,     0,     0,   306,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   307,   308,   309,   717,   310,
       0,   311,     0,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,     0,   322,     0,   323,   324,   325,     0,
     326,     0,   327,   328,   329,   330,   331,     0,   332,   333,
     334,     0,     0,   335,     0,     0,     0,   336,   337,     0,
     338,   339,     0,     0,   340,   341,   342,   343,   344,     0,
     345,   346,     0,   347,   348,   349,     0,     0,   350,   351,
     352,   353,   354,   355,   356,   357,     0,   358,     0,   359,
     360,     0,   361,   362,   363,     0,   364,     0,     0,   365,
     366,   367,   368,     0,   369,     0,   370,   371,   372,   373,
     374,     0,     0,   375,   376,     0,     0,     0,   377,   378,
     379,   380,     0,     0,     0,   381,     0,     0,     0,     0,
     382,     0,   383,   384,   385,   386,     0,   387,   388,   389,
     390,   391,     0,     0,     0,     0,     0,   392,   393,   394,
       0,   395,     0,     0,   396,     0,     0,   397,     0,   398,
       0,   399,   400,   401,   402,   403,   404,     0,     0,   405,
     406,     0,     0,   407,   408,   409,   410,   411,   412,     0,
       0,   413,   414,   415,   416,     0,   417,   418,   419,     0,
       0,   420,   421,   422,   423,     0,     0,   424,   425,     0,
     426,   427,   428,   429,     0,     0,     0,     0,     0,   430,
     431,     0,     0,     0,   432,   433,   434,     0,  1196,   435,
     436,     0,   437,   438,     0,   439,   440,     0,     0,   441,
       0,     0,   442,     0,   443,     0,   444,   445,     0,     0,
       0,     0,     0,   446,     0,   447,     0,     0,   448,     0,
       0,     0,     0,   449,     0,   450,   451,   452,   453,     0,
       0,     0,     0,     0,     0,   454,   455,   456,     0,   457,
     458,   459,   460,     0,     0,   461,     0,     0,   462,   463,
       0,   464,   465,   466,   467,   468,     0,   469,     0,     0,
       0,     0,     0,     0,     0,     0,   470,   471,   472,     0,
     473,   474,   475,     0,   476,     0,     0,   477,     0,   478,
       0,     0,     0,     0,     0,     0,   479,   480,     0,     0,
     481,     0,   482,     0,   483,   484,     0,     0,     0,   485,
     486,   487,   488,   489,   490,   491,   492,     0,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,     0,   503,
     504,   505,   506,   507,   508,   509,   510,   511,   512,    95,
      96,     0,    97,    98,    99,   100,   101,   851,     0,   102,
       0,     0,     0,     0,   103,     0,     0,   104,     0,   105,
     106,   107,   108,   109,   110,     0,   111,     0,     0,     0,
     112,     0,     0,     0,   113,     0,     0,   114,   115,   116,
       0,   117,     0,   118,   119,     0,     0,   120,     0,     0,
     121,   122,     0,   123,   124,   125,     0,   126,     0,   127,
     128,   129,   130,   131,   132,     0,   133,   134,     0,   135,
     136,   137,   138,   139,   140,   141,   142,   143,   144,   145,
       0,     0,   146,   147,     0,   148,   149,   150,   151,   152,
       0,     0,     0,   153,     0,     0,     0,     0,   154,     0,
       0,   155,     0,     0,     0,   156,   157,   158,     0,     0,
     159,     0,     0,     0,     0,   160,   161,     0,     0,     0,
       0,     0,   162,   163,     0,   164,     0,     0,     0,     0,
       0,   165,     0,     0,     0,     0,   166,   167,   168,   169,
       0,     0,     0,   170,     0,     0,   171,   172,   173,     0,
       0,     0,   174,     0,     0,   175,   176,   177,   178,   179,
       0,     0,   180,   181,     0,   182,   183,   184,   185,   186,
     187,     0,     0,   188,   189,   190,   191,   192,     0,     0,
     193,   194,     0,   195,   196,   197,   198,   199,     0,     0,
     200,   201,     0,     0,     0,   202,   203,     0,     0,     0,
       0,     0,   204,     0,   205,   206,   207,   208,     0,   209,
       0,   210,     0,     0,     0,   211,   212,     0,   213,     0,
       0,   214,   215,     0,     0,     0,   216,   217,   218,     0,
       0,     0,   219,   220,   221,     0,     0,   222,     0,     0,
       0,     0,   223,   224,   225,     0,     0,     0,     0,   226,
       0,     0,     0,   227,   228,     0,   229,   230,     0,     0,
       0,   231,     0,   232,     0,     0,   233,   234,     0,     0,
     235,     0,     0,   236,   237,   638,     0,     0,     0,     0,
     238,   239,     0,   240,     0,   241,     0,   242,   243,     0,
       0,     0,     0,     0,     0,     0,   244,     0,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,     0,   263,   264,   265,
       0,   266,   267,   268,   269,     0,   270,   271,     0,     0,
       0,     0,   272,   273,   274,   275,   276,   277,     0,     0,
     278,   279,     0,   280,     0,   281,     0,   282,   283,   284,
     285,   286,   287,   288,   289,   290,     0,     0,   291,   292,
       0,     0,   293,   294,   295,   296,   297,     0,     0,     0,
     298,   299,     0,     0,     0,   300,     0,   301,   302,     0,
     303,   304,   305,     0,     0,   306,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   307,   308,   309,     0,   310,
       0,   311,     0,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,     0,   322,     0,   323,   324,   325,     0,
     326,     0,   327,   328,   329,   330,   331,     0,   332,   333,
     334,     0,     0,   335,     0,     0,     0,   336,   337,     0,
     338,   339,     0,     0,   340,   341,   342,   343,   344,     0,
     345,   346,     0,   347,   348,   349,     0,     0,   350,   351,
     352,   353,   354,   355,   356,   357,     0,   358,     0,   359,
     360,     0,   361,   362,   363,     0,   364,     0,     0,   365,
     366,   367,   368,     0,   369,     0,   370,   371,   372,   373,
     374,     0,     0,   375,   376,     0,     0,     0,   377,   378,
     379,   380,     0,     0,     0,   381,     0,     0,     0,     0,
     382,     0,   383,   384,   385,   386,     0,   387,   388,   389,
     390,   391,     0,     0,     0,     0,     0,   392,   393,   394,
       0,   395,     0,     0,   396,     0,     0,   397,     0,   398,
       0,   399,   400,   401,   402,   403,   404,     0,     0,   405,
     406,     0,     0,   407,   408,   409,   410,   411,   412,     0,
       0,   413,   414,   415,   416,     0,   417,   418,   419,     0,
       0,   420,   421,   422,   423,     0,   639,   424,   425,     0,
     426,   427,   428,   429,     0,     0,     0,     0,     0,   430,
     431,     0,     0,     0,   432,   433,   434,     0,     0,   435,
     436,     0,   437,   438,     0,   439,   440,     0,     0,   441,
       0,     0,   442,     0,   443,     0,   444,   445,     0,     0,
       0,     0,     0,   446,     0,   447,     0,     0,   448,     0,
       0,     0,     0,   449,     0,   450,   451,   452,   453,     0,
       0,     0,     0,     0,     0,   454,   455,   456,     0,   457,
     458,   459,   460,     0,     0,   461,     0,     0,   462,   463,
       0,   464,   465,   466,   467,   468,     0,   469,     0,     0,
       0,     0,     0,     0,     0,     0,   470,   471,   472,     0,
     473,   474,   475,     0,   476,     0,     0,   477,     0,   478,
       0,     0,     0,     0,     0,     0,   479,   480,     0,     0,
     481,     0,   482,     0,   483,   484,     0,     0,     0,   485,
     486,   487,   488,   489,   490,   491,   492,     0,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,     0,   503,
     504,   505,   506,   507,   508,   509,   510,   511,   512,    95,
      96,     0,    97,    98,    99,   100,   101,     0,     0,   102,
       0,     0,     0,     0,   103,     0,     0,   104,     0,   105,
     106,   107,   108,   109,   110,     0,   111,     0,     0,     0,
     112,     0,     0,     0,   113,     0,     0,   114,   115,   116,
       0,   117,     0,   118,   119,     0,     0,   120,     0,     0,
     121,   122,     0,   123,   124,   125,     0,   126,     0,   127,
     128,   129,   130,   131,   132,     0,   133,   134,     0,   135,
     136,   137,   138,   139,   140,   141,   142,   143,   144,   145,
       0,     0,   146,   147,     0,   148,   149,   150,   151,   152,
       0,     0,     0,   153,     0,     0,     0,     0,   154,   935,
       0,   155,     0,     0,     0,   156,   157,   158,     0,     0,
     159,     0,     0,     0,     0,   160,   161,     0,     0,     0,
       0,     0,   162,   163,     0,   164,     0,     0,     0,     0,
       0,   165,     0,     0,     0,     0,   166,   167,   168,   169,
       0,     0,     0,   170,     0,     0,   171,   172,   173,     0,
       0,     0,   174,     0,     0,   175,   176,   177,   178,   179,
       0,     0,   180,   181,     0,   182,   183,   184,   185,   186,
     187,     0,     0,   188,   189,   190,   191,   192,     0,     0,
     193,   194,     0,   195,   196,   197,   198,   199,     0,     0,
     200,   201,     0,     0,     0,   202,   203,     0,     0,     0,
       0,     0,   204,     0,   205,   206,   207,   208,     0,   209,
       0,   210,     0,     0,     0,   211,   212,     0,   213,     0,
       0,   214,   215,     0,     0,     0,   216,   217,   218,     0,
       0,     0,   219,   220,   221,     0,     0,   222,     0,     0,
       0,     0,   223,   224,   225,     0,     0,     0,     0,   226,
       0,     0,     0,   227,   228,     0,   229,   230,     0,     0,
       0,   231,     0,   232,     0,     0,   233,   234,     0,     0,
     235,     0,     0,   236,   237,   638,     0,     0,     0,     0,
     238,   239,     0,   240,     0,   241,     0,   242,   243,     0,
       0,     0,     0,     0,     0,     0,   244,     0,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,     0,   263,   264,   265,
       0,   266,   267,   268,   269,     0,   270,   271,     0,     0,
       0,     0,   272,   273,   274,   275,   276,   277,     0,     0,
     278,   279,     0,   280,     0,   281,     0,   282,   283,   284,
     285,   286,   287,   288,   289,   290,     0,     0,   291,   292,
       0,     0,   293,   294,   295,   296,   297,     0,     0,     0,
     298,   299,     0,     0,     0,   300,     0,   301,   302,     0,
     303,   304,   305,     0,     0,   306,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   307,   308,   309,     0,   310,
       0,   311,     0,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,     0,   322,     0,   323,   324,   325,     0,
     326,     0,   327,   328,   329,   330,   331,     0,   332,   333,
     334,     0,     0,   335,     0,     0,     0,   336,   337,     0,
     338,   339,     0,     0,   340,   341,   342,   343,   344,     0,
     345,   346,     0,   347,   348,   349,     0,     0,   350,   351,
     352,   353,   354,   355,   356,   357,     0,   358,     0,   359,
     360,     0,   361,   362,   363,     0,   364,     0,     0,   365,
     366,   367,   368,     0,   369,     0,   370,   371,   372,   373,
     374,     0,     0,   375,   376,     0,     0,     0,   377,   378,
     379,   380,     0,     0,     0,   381,     0,     0,     0,     0,
     382,     0,   383,   384,   385,   386,     0,   387,   388,   389,
     390,   391,     0,     0,     0,     0,     0,   392,   393,   394,
       0,   395,     0,     0,   396,     0,     0,   397,     0,   398,
       0,   399,   400,   401,   402,   403,   404,     0,     0,   405,
     406,     0,     0,   407,   408,   409,   410,   411,   412,     0,
       0,   413,   414,   415,   416,     0,   417,   418,   419,     0,
       0,   420,   421,   422,   423,     0,   639,   424,   425,     0,
     426,   427,   428,   429,     0,     0,     0,     0,     0,   430,
     431,     0,     0,     0,   432,   433,   434,     0,     0,   435,
     436,     0,   437,   438,     0,   439,   440,     0,     0,   441,
       0,     0,   442,     0,   443,     0,   444,   445,     0,     0,
       0,     0,     0,   446,     0,   447,     0,     0,   448,     0,
       0,     0,     0,   449,     0,   450,   451,   452,   453,     0,
       0,     0,     0,     0,     0,   454,   455,   456,     0,   457,
     458,   459,   460,     0,     0,   461,     0,     0,   462,   463,
       0,   464,   465,   466,   467,   468,     0,   469,     0,     0,
       0,     0,     0,     0,     0,     0,   470,   471,   472,     0,
     473,   474,   475,     0,   476,     0,     0,   477,     0,   478,
       0,     0,     0,     0,     0,     0,   479,   480,     0,     0,
     481,     0,   482,     0,   483,   484,     0,     0,     0,   485,
     486,   487,   488,   489,   490,   491,   492,     0,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,     0,   503,
     504,   505,   506,   507,   508,   509,   510,   511,   512,    95,
      96,     0,    97,    98,    99,   100,   101,     0,     0,   102,
       0,     0,     0,     0,   103,     0,     0,   104,     0,   105,
     106,   107,   108,   109,   110,     0,   111,     0,     0,   807,
     112,     0,     0,     0,   113,     0,     0,   114,   115,   116,
       0,   117,     0,   118,   119,     0,     0,   120,     0,     0,
     121,   122,     0,   123,   124,   125,     0,   126,     0,   127,
     128,   129,   130,   131,   132,     0,   133,   134,     0,   135,
     136,   137,   138,   139,   140,   141,   142,   143,   144,   145,
       0,     0,   146,   147,     0,   148,   149,   150,   151,   152,
       0,     0,     0,   153,     0,     0,     0,     0,   154,     0,
       0,   155,     0,     0,     0,   156,   157,   158,     0,     0,
     159,     0,     0,     0,     0,   160,   161,     0,     0,     0,
       0,     0,   162,   163,     0,   164,     0,     0,     0,     0,
       0,   165,     0,     0,     0,     0,   166,   167,   168,   169,
       0,     0,     0,   170,     0,     0,   171,   172,   173,     0,
       0,     0,   174,     0,     0,   175,   176,   177,   178,   179,
       0,     0,   180,   181,     0,   182,   183,   184,   185,   186,
     187,     0,     0,   188,   189,   190,   191,   192,     0,     0,
     193,   194,     0,   195,   196,   197,   198,   199,     0,     0,
     200,   201,     0,     0,     0,   202,   203,     0,     0,     0,
       0,     0,   204,     0,   205,   206,   207,   208,     0,   209,
       0,   210,     0,     0,     0,   211,   212,     0,   213,     0,
       0,   214,   215,     0,     0,     0,   216,   217,   218,     0,
       0,     0,   219,   220,   221,     0,     0,   222,     0,     0,
       0,     0,   223,   224,   225,     0,     0,     0,     0,   226,
       0,     0,     0,   227,   228,     0,   229,   230,     0,     0,
       0,   231,     0,   232,     0,     0,   233,   234,     0,     0,
     235,     0,     0,   236,   237,   638,     0,     0,     0,     0,
     238,   239,     0,   240,     0,   241,     0,   242,   243,     0,
       0,     0,     0,     0,     0,     0,   244,     0,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,     0,   263,   264,   265,
       0,   266,   267,   268,   269,     0,   270,   271,     0,     0,
       0,     0,   272,   273,   274,   275,   276,   277,     0,     0,
     278,   279,     0,   280,     0,   281,     0,   282,   283,   284,
     285,   286,   287,   288,   289,   290,     0,     0,   291,   292,
       0,     0,   293,   294,   295,   296,   297,     0,     0,     0,
     298,   299,     0,     0,     0,   300,     0,   301,   302,     0,
     303,   304,   305,     0,     0,   306,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   307,   308,   309,     0,   310,
       0,   311,     0,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,     0,   322,     0,   323,   324,   325,     0,
     326,     0,   327,   328,   329,   330,   331,     0,   332,   333,
     334,     0,     0,   335,     0,     0,     0,   336,   337,     0,
     338,   339,     0,     0,   340,   341,   342,   343,   344,     0,
     345,   346,     0,   347,   348,   349,     0,     0,   350,   351,
     352,   353,   354,   355,   356,   357,     0,   358,     0,   359,
     360,     0,   361,   362,   363,     0,   364,     0,     0,   365,
     366,   367,   368,     0,   369,     0,   370,   371,   372,   373,
     374,     0,     0,   375,   376,     0,     0,     0,   377,   378,
     379,   380,     0,     0,     0,   381,     0,     0,     0,     0,
     382,     0,   383,   384,   385,   386,     0,   387,   388,   389,
     390,   391,     0,     0,     0,     0,     0,   392,   393,   394,
       0,   395,     0,     0,   396,     0,     0,   397,     0,   398,
       0,   399,   400,   401,   402,   403,   404,     0,     0,   405,
     406,     0,     0,   407,   408,   409,   410,   411,   412,     0,
       0,   413,   414,   415,   416,     0,   417,   418,   419,     0,
       0,   420,   421,   422,   423,     0,   639,   424,   425,     0,
     426,   427,   428,   429,     0,     0,     0,     0,     0,   430,
     431,     0,     0,     0,   432,   433,   434,     0,     0,   435,
     436,     0,   437,   438,     0,   439,   440,     0,     0,   441,
       0,     0,   442,     0,   443,     0,   444,   445,     0,     0,
       0,     0,     0,   446,     0,   447,     0,     0,   448,     0,
       0,     0,     0,   449,     0,   450,   451,   452,   453,     0,
       0,     0,     0,     0,     0,   454,   455,   456,     0,   457,
     458,   459,   460,     0,     0,   461,     0,     0,   462,   463,
       0,   464,   465,   466,   467,   468,     0,   469,     0,     0,
       0,     0,     0,     0,     0,     0,   470,   471,   472,     0,
     473,   474,   475,     0,   476,     0,     0,   477,     0,   478,
       0,     0,     0,     0,     0,     0,   479,   480,     0,     0,
     481,     0,   482,     0,   483,   484,     0,     0,     0,   485,
     486,   487,   488,   489,   490,   491,   492,     0,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,     0,   503,
     504,   505,   506,   507,   508,   509,   510,   511,   512,    95,
      96,     0,    97,    98,    99,   100,   101,     0,     0,   102,
       0,     0,     0,     0,   103,     0,     0,   104,     0,   105,
     106,   107,   108,   109,   110,     0,   111,     0,     0,     0,
     112,     0,     0,     0,   113,     0,     0,   114,   115,   116,
       0,   117,     0,   118,   119,     0,     0,   120,     0,     0,
     121,   122,     0,   123,   124,   125,     0,   126,     0,   127,
     128,   129,   130,   131,   132,     0,   133,   134,     0,   135,
     136,   137,   138,   139,   140,   141,   142,   143,   144,   145,
       0,     0,   146,   147,     0,   148,   149,   150,   151,   152,
       0,     0,     0,   153,     0,     0,     0,     0,   154,     0,
       0,   155,     0,     0,     0,   156,   157,   158,     0,     0,
     159,     0,     0,     0,     0,   160,   161,     0,     0,     0,
       0,     0,   162,   163,     0,   164,     0,     0,     0,     0,
       0,   165,     0,     0,     0,     0,   166,   167,   168,   169,
       0,     0,     0,   170,     0,     0,   171,   172,   173,     0,
       0,     0,   174,     0,     0,   175,   176,   177,   178,   179,
       0,     0,   180,   181,     0,   182,   183,   184,   185,   186,
     187,     0,     0,   188,   189,   190,   191,   192,     0,     0,
     193,   194,     0,   195,   196,   197,   198,   199,     0,     0,
     200,   201,     0,     0,     0,   202,   203,     0,     0,     0,
       0,     0,   204,     0,   205,   206,   207,   208,     0,   209,
       0,   210,     0,     0,     0,   211,   212,     0,   213,     0,
       0,   214,   215,     0,     0,     0,   216,   217,   218,     0,
       0,     0,   219,   220,   221,     0,     0,   222,     0,     0,
       0,     0,   223,   224,   225,     0,     0,     0,     0,   226,
       0,     0,     0,   227,   228,     0,   229,   230,     0,     0,
       0,   231,     0,   232,     0,     0,   233,   234,     0,     0,
     235,     0,     0,   236,   237,   638,     0,     0,     0,     0,
     238,   239,     0,   240,     0,   241,     0,   242,   243,     0,
       0,     0,     0,     0,     0,     0,   244,     0,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,     0,   263,   264,   265,
       0,   266,   267,   268,   269,     0,   270,   271,     0,     0,
       0,     0,   272,   273,   274,   275,   276,   277,     0,     0,
     278,   279,     0,   280,     0,   281,     0,   282,   283,   284,
     285,   286,   287,   288,   289,   290,     0,     0,   291,   292,
       0,     0,   293,   294,   295,   296,   297,     0,     0,     0,
     298,   299,     0,  2201,     0,   300,     0,   301,   302,     0,
     303,   304,   305,     0,     0,   306,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   307,   308,   309,     0,   310,
       0,   311,     0,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,     0,   322,     0,   323,   324,   325,     0,
     326,     0,   327,   328,   329,   330,   331,     0,   332,   333,
     334,     0,     0,   335,     0,     0,     0,   336,   337,     0,
     338,   339,     0,     0,   340,   341,   342,   343,   344,     0,
     345,   346,     0,   347,   348,   349,     0,     0,   350,   351,
     352,   353,   354,   355,   356,   357,     0,   358,     0,   359,
     360,     0,   361,   362,   363,     0,   364,     0,     0,   365,
     366,   367,   368,     0,   369,     0,   370,   371,   372,   373,
     374,     0,     0,   375,   376,     0,     0,     0,   377,   378,
     379,   380,     0,     0,     0,   381,     0,     0,     0,     0,
     382,     0,   383,   384,   385,   386,     0,   387,   388,   389,
     390,   391,     0,     0,     0,     0,     0,   392,   393,   394,
       0,   395,     0,     0,   396,     0,     0,   397,     0,   398,
       0,   399,   400,   401,   402,   403,   404,     0,     0,   405,
     406,     0,     0,   407,   408,   409,   410,   411,   412,     0,
       0,   413,   414,   415,   416,     0,   417,   418,   419,     0,
       0,   420,   421,   422,   423,     0,   639,   424,   425,     0,
     426,   427,   428,   429,     0,     0,     0,     0,     0,   430,
     431,     0,     0,     0,   432,   433,   434,     0,     0,   435,
     436,     0,   437,   438,     0,   439,   440,     0,     0,   441,
       0,     0,   442,     0,   443,     0,   444,   445,     0,     0,
       0,     0,     0,   446,     0,   447,     0,     0,   448,     0,
       0,     0,     0,   449,     0,   450,   451,   452,   453,     0,
       0,     0,     0,     0,     0,   454,   455,   456,     0,   457,
     458,   459,   460,     0,     0,   461,     0,     0,   462,   463,
       0,   464,   465,   466,   467,   468,     0,   469,     0,     0,
       0,     0,     0,     0,     0,     0,   470,   471,   472,     0,
     473,   474,   475,     0,   476,     0,     0,   477,     0,   478,
       0,     0,     0,     0,     0,     0,   479,   480,     0,     0,
     481,     0,   482,     0,   483,   484,     0,     0,     0,   485,
     486,   487,   488,   489,   490,   491,   492,     0,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,     0,   503,
     504,   505,   506,   507,   508,   509,   510,   511,   512,    95,
      96,     0,    97,    98,    99,   100,   101,     0,     0,   102,
       0,     0,     0,     0,   103,     0,     0,   104,     0,   105,
     106,   107,   108,   109,   110,     0,   111,     0,     0,     0,
     112,     0,     0,     0,   113,     0,     0,   114,   115,   116,
       0,   117,     0,   118,   119,     0,     0,   120,     0,     0,
     121,   122,     0,   123,   124,   125,     0,   126,     0,   127,
     128,   129,   130,   131,   132,     0,   133,   134,     0,   135,
     136,   137,   138,   139,   140,   141,   142,   143,   144,   145,
       0,     0,   146,   147,     0,   148,   149,   150,   151,   152,
       0,     0,     0,   153,     0,     0,     0,     0,   154,     0,
       0,   155,     0,     0,     0,   156,   157,   158,     0,     0,
     159,     0,     0,     0,     0,   160,   161,     0,     0,     0,
       0,     0,   162,   163,     0,   164,     0,     0,     0,     0,
       0,   165,     0,     0,     0,     0,   166,   167,   168,   169,
       0,     0,     0,   170,     0,     0,   171,   172,   173,     0,
       0,     0,   174,     0,     0,   175,   176,   177,   178,   179,
       0,     0,   180,   181,     0,   182,   183,   184,   185,   186,
     187,     0,     0,   188,   189,   190,   191,   192,     0,     0,
     193,   194,     0,   195,   196,   197,   198,   199,     0,     0,
     200,   201,     0,     0,     0,   202,   203,     0,     0,     0,
       0,     0,   204,     0,   205,   206,   207,   208,     0,   209,
       0,   210,     0,     0,     0,   211,   212,     0,   213,     0,
       0,   214,   215,     0,     0,     0,   216,   217,   218,     0,
       0,     0,   219,   220,   221,     0,     0,   222,     0,     0,
       0,     0,   223,   224,   225,     0,     0,     0,     0,   226,
       0,     0,     0,   227,   228,     0,   229,   230,     0,     0,
       0,   231,     0,   232,     0,     0,   233,   234,     0,     0,
     235,     0,     0,   236,   237,   638,     0,     0,     0,     0,
     238,   239,     0,   240,     0,   241,     0,   242,   243,     0,
       0,     0,     0,     0,     0,     0,   244,     0,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,     0,   263,   264,   265,
       0,   266,   267,   268,   269,     0,   270,   271,     0,     0,
       0,     0,   272,   273,   274,   275,   276,   277,     0,     0,
     278,   279,     0,   280,     0,   281,     0,   282,   283,   284,
     285,   286,   287,   288,   289,   290,     0,     0,   291,   292,
       0,     0,   293,   294,   295,   296,   297,     0,     0,     0,
     298,   299,     0,     0,     0,   300,     0,   301,   302,     0,
     303,   304,   305,     0,     0,   306,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   307,   308,   309,     0,   310,
       0,   311,     0,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,     0,   322,     0,   323,   324,   325,     0,
     326,     0,   327,   328,   329,   330,   331,     0,   332,   333,
     334,     0,     0,   335,     0,     0,     0,   336,   337,     0,
     338,   339,     0,     0,   340,   341,   342,   343,   344,     0,
     345,   346,     0,   347,   348,   349,     0,     0,   350,   351,
     352,   353,   354,   355,   356,   357,     0,   358,     0,   359,
     360,     0,   361,   362,   363,     0,   364,     0,     0,   365,
     366,   367,   368,     0,   369,     0,   370,   371,   372,   373,
     374,     0,     0,   375,   376,     0,     0,     0,   377,   378,
     379,   380,     0,     0,     0,   381,     0,     0,     0,     0,
     382,     0,   383,   384,   385,   386,     0,   387,   388,   389,
     390,   391,     0,     0,     0,     0,     0,   392,   393,   394,
       0,   395,     0,     0,   396,     0,     0,   397,     0,   398,
       0,   399,   400,   401,   402,   403,   404,     0,     0,   405,
     406,     0,     0,   407,   408,   409,   410,   411,   412,     0,
       0,   413,   414,   415,   416,     0,   417,   418,   419,     0,
       0,   420,   421,   422,   423,     0,   639,   424,   425,     0,
     426,   427,   428,   429,     0,     0,     0,     0,     0,   430,
     431,     0,     0,     0,   432,   433,   434,     0,     0,   435,
     436,     0,   437,   438,     0,   439,   440,     0,     0,   441,
       0,     0,   442,     0,   443,     0,   444,   445,     0,     0,
       0,     0,     0,   446,     0,   447,     0,     0,   448,     0,
       0,     0,     0,   449,     0,   450,   451,   452,   453,     0,
       0,     0,     0,     0,     0,   454,   455,   456,     0,   457,
     458,   459,   460,     0,     0,   461,     0,     0,   462,   463,
       0,   464,   465,   466,   467,   468,     0,   469,     0,     0,
       0,     0,     0,     0,     0,     0,   470,   471,   472,     0,
     473,   474,   475,     0,   476,     0,     0,   477,     0,   478,
       0,     0,     0,     0,     0,     0,   479,   480,     0,     0,
     481,     0,   482,     0,   483,   484,     0,     0,     0,   485,
     486,   487,   488,   489,   490,   491,   492,     0,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,     0,   503,
     504,   505,   506,   507,   508,   509,   510,   511,   512,    95,
      96,     0,    97,    98,    99,   100,   101,     0,     0,   102,
       0,     0,     0,     0,   103,     0,     0,   104,     0,   105,
     106,   107,   108,   109,   110,     0,   111,     0,     0,     0,
     112,     0,     0,     0,   113,     0,     0,   114,   115,   116,
       0,   117,     0,   118,   119,     0,     0,   120,     0,     0,
     121,   122,     0,   123,   124,   125,     0,   126,     0,   127,
     128,   129,   130,   131,   132,     0,   133,   134,     0,   135,
     136,   137,   138,   139,   140,   141,   142,   143,   144,   145,
       0,     0,   146,   147,     0,   148,   149,   150,   151,   152,
    3293,     0,     0,   153,     0,     0,     0,     0,   154,     0,
       0,   155,     0,     0,     0,   156,   157,   158,     0,     0,
     159,     0,     0,     0,     0,   160,   161,     0,     0,     0,
       0,     0,   162,   163,     0,   164,     0,     0,     0,     0,
       0,   165,     0,     0,     0,     0,   166,   167,   168,   169,
       0,     0,     0,   170,     0,     0,   171,   172,   173,     0,
       0,     0,   174,     0,     0,   175,   176,   177,   178,   179,
       0,     0,   180,   181,     0,   182,   183,   184,   185,   186,
     187,     0,  3294,   188,   189,   190,   191,   192,     0,     0,
     193,   194,     0,   195,   196,   197,   198,   199,     0,     0,
     200,   201,     0,     0,     0,   202,   203,     0,     0,     0,
       0,     0,   204,     0,   205,   206,   207,   208,     0,   209,
       0,   210,     0,     0,     0,   211,   212,     0,   213,     0,
       0,   214,   215,     0,     0,     0,   216,   217,   218,     0,
       0,     0,   219,   220,   221,     0,     0,   222,     0,     0,
       0,     0,   223,   224,   225,     0,     0,     0,     0,   226,
       0,     0,     0,   227,   228,     0,   229,   230,     0,     0,
       0,   231,     0,   232,     0,     0,   233,   234,     0,     0,
     235,     0,     0,   236,   237,     0,     0,     0,     0,     0,
     238,   239,     0,   240,     0,   241,     0,   242,   243,     0,
       0,     0,     0,     0,     0,     0,   244,     0,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,     0,   263,   264,   265,
       0,   266,   267,   268,   269,     0,   270,   271,     0,     0,
       0,     0,   272,   273,   274,   275,   276,   277,     0,     0,
     278,   279,     0,   280,     0,   281,     0,   282,   283,   284,
     285,   286,   287,   288,   289,   290,     0,     0,   291,   292,
       0,     0,   293,   294,   295,   296,   297,     0,     0,     0,
     298,   299,     0,     0,     0,   300,     0,   301,   302,     0,
     303,   304,   305,     0,     0,   306,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   307,   308,   309,     0,   310,
       0,   311,     0,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,     0,   322,     0,   323,   324,   325,     0,
     326,     0,   327,   328,   329,   330,   331,     0,   332,   333,
     334,     0,     0,   335,     0,     0,     0,   336,   337,     0,
     338,   339,     0,     0,   340,   341,   342,   343,   344,     0,
     345,   346,     0,   347,   348,   349,     0,     0,   350,   351,
     352,   353,   354,   355,   356,   357,     0,   358,     0,   359,
     360,     0,   361,   362,   363,     0,   364,     0,     0,   365,
     366,   367,   368,     0,   369,     0,   370,   371,   372,   373,
     374,     0,     0,   375,   376,     0,     0,     0,   377,   378,
     379,   380,     0,     0,     0,   381,     0,     0,     0,     0,
     382,     0,   383,   384,   385,   386,     0,   387,   388,   389,
     390,   391,     0,     0,     0,     0,     0,   392,   393,   394,
       0,   395,     0,     0,   396,     0,     0,   397,     0,   398,
       0,   399,   400,   401,   402,   403,   404,     0,     0,   405,
     406,     0,     0,   407,   408,   409,   410,   411,   412,     0,
       0,   413,   414,   415,   416,     0,   417,   418,   419,     0,
       0,   420,   421,   422,   423,     0,     0,   424,   425,     0,
     426,   427,   428,   429,     0,     0,     0,     0,     0,   430,
     431,     0,     0,     0,   432,   433,   434,     0,     0,   435,
     436,     0,   437,   438,     0,   439,   440,     0,     0,   441,
       0,     0,   442,     0,   443,     0,   444,   445,     0,     0,
       0,     0,     0,   446,     0,   447,     0,     0,   448,     0,
       0,     0,     0,   449,     0,   450,   451,   452,   453,     0,
       0,     0,     0,     0,     0,   454,   455,   456,     0,   457,
     458,   459,   460,     0,     0,   461,     0,     0,   462,   463,
       0,   464,   465,   466,   467,   468,     0,   469,     0,     0,
       0,     0,     0,     0,     0,     0,   470,   471,   472,     0,
     473,   474,   475,     0,   476,     0,     0,   477,     0,   478,
       0,     0,     0,     0,     0,     0,   479,   480,     0,     0,
     481,     0,   482,     0,   483,   484,     0,     0,     0,   485,
     486,   487,   488,   489,   490,   491,   492,     0,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,     0,   503,
     504,   505,   506,   507,   508,   509,   510,   511,   512,    95,
      96,     0,    97,    98,    99,   100,   101,     0,     0,   102,
       0,     0,     0,     0,   103,     0,     0,   104,     0,   105,
     106,   107,   108,   109,   110,     0,   111,     0,     0,     0,
     112,     0,     0,     0,   113,     0,     0,   114,   115,   116,
       0,   117,     0,   118,   119,     0,     0,   120,     0,     0,
     121,   122,     0,   123,   124,   125,     0,   126,     0,   127,
     128,   129,   130,   131,   132,     0,   133,   134,     0,   135,
     136,   137,   138,   139,   140,   141,   142,   143,   144,   145,
       0,     0,   146,   147,     0,   148,   149,   150,   151,   152,
       0,     0,     0,   153,     0,     0,     0,     0,   154,     0,
       0,   155,     0,     0,     0,   156,   157,   158,     0,     0,
     159,     0,     0,     0,     0,   160,   161,     0,     0,     0,
       0,     0,   162,   163,     0,   164,     0,     0,     0,     0,
       0,   165,     0,     0,     0,     0,   166,   167,   168,   169,
       0,     0,     0,   170,     0,     0,   171,   172,   173,     0,
       0,     0,   174,     0,     0,   175,   176,   177,   178,   179,
       0,     0,   180,   181,     0,   182,   183,   184,   185,   186,
     187,     0,     0,   188,   189,   190,   191,   192,     0,     0,
     193,   194,     0,   195,   196,   197,   198,   199,     0,     0,
     200,   201,     0,     0,     0,   202,   203,     0,     0,     0,
       0,     0,   204,     0,   205,   206,   207,   208,     0,   209,
       0,   210,     0,     0,     0,   211,   212,     0,   213,     0,
       0,   214,   215,     0,     0,     0,   216,   217,   218,     0,
       0,     0,   219,   220,   221,     0,     0,   222,     0,     0,
       0,     0,   223,   224,   225,     0,     0,     0,     0,   226,
       0,     0,     0,   227,   228,     0,   229,   230,     0,     0,
       0,   231,     0,   232,     0,     0,   233,   234,     0,     0,
     235,     0,     0,   236,   237,     0,     0,     0,     0,     0,
     238,   239,     0,   240,     0,   241,     0,   242,   243,     0,
       0,     0,     0,     0,     0,     0,   244,     0,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,     0,   263,   264,   265,
       0,   266,   267,   268,   269,     0,   270,   271,     0,     0,
       0,     0,   272,   273,   274,   275,   276,   277,     0,     0,
     278,   279,     0,   280,     0,   281,     0,   282,   283,   284,
     285,   286,   287,   288,   289,   290,     0,     0,   291,   292,
       0,     0,   293,   294,   295,   296,   297,     0,     0,     0,
     298,   299,     0,     0,     0,   300,     0,   301,   302,     0,
     303,   304,   305,     0,     0,   306,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   307,   308,   309,     0,   310,
       0,   311,     0,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,     0,   322,     0,   323,   324,   325,     0,
     326,     0,   327,   328,   329,   330,   331,     0,   332,   333,
     334,     0,     0,   335,     0,     0,     0,   336,   337,     0,
     338,   339,     0,     0,   340,   341,   342,   343,   344,     0,
     345,   346,     0,   347,   348,   349,     0,     0,   350,   351,
     352,   353,   354,   355,   356,   357,     0,   358,     0,   359,
     360,     0,   361,   362,   363,     0,   364,     0,     0,   365,
     366,   367,   368,     0,   369,     0,   370,   371,   372,   373,
     374,     0,     0,   375,   376,     0,     0,     0,   377,   378,
     379,   380,     0,     0,     0,   381,     0,     0,     0,     0,
     382,     0,   383,   384,   385,   386,     0,   387,   388,   389,
     390,   391,     0,     0,     0,     0,     0,   392,   393,   394,
       0,   395,     0,     0,   396,     0,     0,   397,     0,   398,
       0,   399,   400,   401,   402,   403,   404,     0,     0,   405,
     406,     0,     0,   407,   408,   409,   410,   411,   412,     0,
       0,   413,   414,   415,   416,     0,   417,   418,   419,     0,
       0,   420,   421,   422,   423,     0,     0,   424,   425,     0,
     426,   427,   428,   429,     0,     0,     0,     0,     0,   430,
     431,     0,     0,     0,   432,   433,   434,     0,     0,   435,
     436,     0,   437,   438,     0,   439,   440,     0,     0,   441,
       0,     0,   442,     0,   443,     0,   444,   445,     0,     0,
       0,     0,     0,   446,     0,   447,     0,     0,   448,     0,
       0,     0,     0,   449,     0,   450,   451,   452,   453,     0,
       0,     0,     0,     0,     0,   454,   455,   456,     0,   457,
     458,   459,   460,     0,     0,   461,     0,     0,   462,   463,
       0,   464,   465,   466,   467,   468,     0,   469,   612,     0,
       0,     0,     0,     0,     0,     0,   470,   471,   472,     0,
     473,   474,   475,     0,   476,     0,     0,   477,     0,   478,
       0,     0,     0,     0,     0,     0,   479,   480,     0,     0,
     481,     0,   482,     0,   483,   484,     0,     0,     0,   485,
     486,   487,   488,   489,   490,   491,   492,     0,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,     0,   503,
     504,   505,   506,   507,   508,   509,   510,   511,   512,    95,
      96,     0,    97,    98,    99,   100,   101,     0,     0,   102,
       0,     0,     0,     0,   103,     0,     0,   104,     0,   105,
     106,   107,   108,   109,   110,     0,   111,     0,     0,     0,
     112,     0,     0,     0,   113,     0,     0,   114,   115,   116,
       0,   117,     0,   118,   119,     0,     0,   120,     0,     0,
     121,   122,     0,   123,   124,   125,     0,   126,     0,   127,
     128,   129,   130,   131,   132,     0,   133,   134,     0,   135,
     136,   137,   138,   139,   140,   141,   142,   143,   144,   145,
       0,     0,   146,   147,     0,   148,   149,   150,   151,   152,
       0,     0,     0,   153,     0,     0,     0,     0,   154,     0,
       0,   155,     0,     0,     0,   156,   157,   158,     0,     0,
     159,     0,     0,     0,     0,   160,   161,     0,     0,     0,
       0,     0,   162,   163,     0,   164,     0,     0,     0,     0,
       0,   165,     0,     0,     0,     0,   166,   167,   168,   169,
       0,     0,     0,   170,     0,     0,   171,   172,   173,     0,
       0,     0,   174,     0,     0,   175,   176,   177,   178,   179,
       0,     0,   180,   181,     0,   182,   183,   184,   185,   186,
     187,     0,     0,   188,   189,   190,   191,   192,     0,     0,
     193,   194,     0,   195,   196,   197,   198,   199,     0,     0,
     200,   201,     0,     0,     0,   202,   203,   653,     0,     0,
       0,     0,   204,     0,   205,   206,   207,   208,     0,   209,
       0,   210,     0,     0,     0,   211,   212,     0,   213,     0,
       0,   214,   215,     0,     0,     0,   216,   217,   218,     0,
       0,     0,   219,   220,   221,     0,     0,   222,     0,     0,
       0,     0,   223,   224,   225,     0,     0,     0,     0,   226,
       0,     0,     0,   227,   228,     0,   229,   230,     0,     0,
       0,   231,     0,   232,     0,     0,   233,   234,     0,     0,
     235,     0,     0,   236,   237,     0,     0,     0,     0,     0,
     238,   239,     0,   240,     0,   241,     0,   242,   243,     0,
       0,     0,     0,     0,     0,     0,   244,     0,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,     0,   263,   264,   265,
       0,   266,   267,   268,   269,     0,   270,   271,     0,     0,
       0,     0,   272,   273,   274,   275,   276,   277,     0,     0,
     278,   279,     0,   280,     0,   281,     0,   282,   283,   284,
     285,   286,   287,   288,   289,   290,     0,     0,   291,   292,
       0,     0,   293,   294,   295,   296,   297,     0,     0,     0,
     298,   299,     0,     0,     0,   300,     0,   301,   302,     0,
     303,   304,   305,     0,     0,   306,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   307,   308,   309,     0,   310,
       0,   311,     0,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,     0,   322,     0,   323,   324,   325,     0,
     326,     0,   327,   328,   329,   330,   331,     0,   332,   333,
     334,     0,     0,   335,     0,     0,     0,   336,   337,     0,
     338,   339,     0,     0,   340,   341,   342,   343,   344,     0,
     345,   346,     0,   347,   348,   349,     0,     0,   350,   351,
     352,   353,   354,   355,   356,   357,     0,   358,     0,   359,
     360,     0,   361,   362,   363,     0,   364,     0,     0,   365,
     366,   367,   368,     0,   369,     0,   370,   371,   372,   373,
     374,     0,     0,   375,   376,     0,     0,     0,   377,   378,
     379,   380,     0,     0,     0,   381,     0,     0,     0,     0,
     382,     0,   383,   384,   385,   386,     0,   387,   388,   389,
     390,   391,     0,     0,     0,     0,     0,   392,   393,   394,
       0,   395,     0,     0,   396,     0,     0,   397,     0,   398,
       0,   399,   400,   401,   402,   403,   404,     0,     0,   405,
     406,     0,     0,   407,   408,   409,   410,   411,   412,     0,
       0,   413,   414,   415,   416,     0,   417,   418,   419,     0,
       0,   420,   421,   422,   423,     0,     0,   424,   425,     0,
     426,   427,   428,   429,     0,     0,     0,     0,     0,   430,
     431,     0,     0,     0,   432,   433,   434,     0,     0,   435,
     436,     0,   437,   438,     0,   439,   440,     0,     0,   441,
       0,     0,   442,     0,   443,     0,   444,   445,     0,     0,
       0,     0,     0,   446,     0,   447,     0,     0,   448,     0,
       0,     0,     0,   449,     0,   450,   451,   452,   453,     0,
       0,     0,     0,     0,     0,   454,   455,   456,     0,   457,
     458,   459,   460,     0,     0,   461,     0,     0,   462,   463,
       0,   464,   465,   466,   467,   468,     0,   469,     0,     0,
       0,     0,     0,     0,     0,     0,   470,   471,   472,     0,
     473,   474,   475,     0,   476,     0,     0,   477,     0,   478,
       0,     0,     0,     0,     0,     0,   479,   480,     0,     0,
     481,     0,   482,     0,   483,   484,     0,     0,     0,   485,
     486,   487,   488,   489,   490,   491,   492,     0,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,     0,   503,
     504,   505,   506,   507,   508,   509,   510,   511,   512,    95,
      96,     0,    97,    98,    99,   100,   101,     0,     0,   102,
       0,     0,     0,     0,   103,     0,     0,   104,     0,   105,
     106,   107,   108,   109,   110,     0,   111,     0,     0,     0,
     112,     0,     0,     0,   113,     0,     0,   114,   115,   116,
       0,   117,     0,   118,   119,     0,     0,   120,     0,     0,
     121,   122,     0,   123,   124,   125,     0,   126,     0,   127,
     128,   129,   130,   131,   132,     0,   133,   134,     0,   135,
     136,   137,   138,   139,   140,   141,   142,   143,   144,   145,
       0,     0,   146,   147,     0,   148,   149,   150,   151,   152,
       0,     0,     0,   153,     0,     0,     0,     0,   154,     0,
       0,   155,     0,     0,     0,   156,   157,   158,     0,     0,
     159,     0,     0,     0,     0,   160,   161,     0,     0,     0,
       0,     0,   162,   163,     0,   164,     0,     0,     0,     0,
       0,   165,     0,     0,     0,     0,   166,   167,   168,   169,
       0,     0,     0,   170,     0,     0,   171,   172,   173,     0,
       0,     0,   174,     0,     0,   175,   176,   177,   178,   179,
       0,     0,   180,   181,     0,   182,   183,   184,   185,   186,
     187,     0,     0,   188,   189,   190,   191,   192,     0,     0,
     193,   194,     0,   195,   196,   197,   198,   199,     0,     0,
     200,   201,     0,     0,     0,   202,   203,     0,     0,     0,
       0,     0,   204,     0,   205,   206,   207,   208,     0,   209,
       0,   210,     0,     0,     0,   211,   212,     0,   213,     0,
       0,   214,   215,     0,     0,     0,   216,   217,   218,     0,
       0,     0,   219,   220,   221,     0,     0,   222,     0,     0,
       0,     0,   223,   224,   225,     0,     0,     0,     0,   226,
       0,     0,     0,   227,   228,     0,   229,   230,     0,     0,
       0,   231,     0,   232,     0,     0,   233,   234,     0,     0,
     235,     0,     0,   236,   237,     0,     0,     0,     0,     0,
     238,   239,     0,   240,     0,   241,     0,   242,   243,     0,
       0,     0,     0,     0,     0,     0,   244,     0,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,     0,   263,   264,   265,
       0,   266,   267,   268,   269,     0,   270,   271,     0,     0,
       0,     0,   272,   273,   274,   275,   276,   277,     0,     0,
     278,   279,     0,   280,     0,   281,     0,   282,   283,   284,
     285,   286,   287,   288,   289,   290,     0,     0,   291,   292,
       0,     0,   293,   294,   295,   296,   297,     0,     0,     0,
     298,   299,     0,     0,     0,   300,     0,   301,   302,     0,
     303,   304,   305,     0,     0,   306,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   307,   308,   309,     0,   310,
       0,   311,     0,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,     0,   322,     0,   323,   324,   325,     0,
     326,     0,   327,   328,   329,   330,   331,     0,   332,   333,
     334,     0,     0,   335,     0,     0,     0,   336,   337,     0,
     338,   339,     0,     0,   340,   341,   342,   343,   344,     0,
     345,   346,     0,   347,   348,   349,     0,     0,   350,   351,
     352,   353,   354,   355,   356,   357,     0,   358,     0,   359,
     360,     0,   361,   362,   363,     0,   364,     0,     0,   365,
     366,   367,   368,     0,   369,     0,   370,   371,   372,   373,
     374,     0,     0,   375,   376,     0,     0,     0,   377,   378,
     379,   380,     0,     0,     0,   381,     0,     0,     0,     0,
     382,     0,   383,   384,   385,   386,     0,   387,   388,   389,
     390,   391,     0,     0,     0,     0,     0,   392,   393,   394,
       0,   395,     0,     0,   396,     0,     0,   397,     0,   398,
       0,   399,   400,   401,   402,   403,   404,     0,     0,   405,
     406,     0,     0,   407,   408,   409,   410,   411,   412,     0,
       0,   413,   414,   415,   416,     0,   417,   418,   419,     0,
       0,   420,   421,   422,   423,     0,   915,   424,   425,     0,
     426,   427,   428,   429,     0,     0,     0,     0,     0,   430,
     431,     0,     0,     0,   432,   433,   434,     0,     0,   435,
     436,     0,   437,   438,     0,   439,   440,     0,     0,   441,
       0,     0,   442,     0,   443,     0,   444,   445,     0,     0,
       0,     0,     0,   446,     0,   447,     0,     0,   448,     0,
       0,     0,     0,   449,     0,   450,   451,   452,   453,     0,
       0,     0,     0,     0,     0,   454,   455,   456,     0,   457,
     458,   459,   460,     0,     0,   461,     0,     0,   462,   463,
       0,   464,   465,   466,   467,   468,     0,   469,     0,     0,
       0,     0,     0,     0,     0,     0,   470,   471,   472,     0,
     473,   474,   475,     0,   476,     0,     0,   477,     0,   478,
       0,     0,     0,     0,     0,     0,   479,   480,     0,     0,
     481,     0,   482,     0,   483,   484,     0,     0,     0,   485,
     486,   487,   488,   489,   490,   491,   492,     0,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,     0,   503,
     504,   505,   506,   507,   508,   509,   510,   511,   512,    95,
      96,     0,    97,    98,    99,   100,   101,     0,     0,   102,
       0,     0,     0,     0,   103,     0,     0,   104,     0,   105,
     106,   107,   108,   109,   110,     0,   111,     0,     0,     0,
     112,     0,     0,     0,   113,     0,     0,   114,   115,   116,
       0,   117,     0,   118,   119,     0,     0,   120,     0,     0,
     121,   122,     0,   123,   124,   125,     0,   126,     0,   127,
     128,   129,   130,   131,   132,     0,   133,   134,     0,   135,
     136,   137,   138,   139,   140,   141,   142,   143,   144,   145,
       0,     0,   146,   147,     0,   148,   149,   150,   151,   152,
       0,     0,     0,   153,     0,     0,     0,     0,   154,     0,
       0,   155,     0,     0,     0,   156,   157,   158,     0,     0,
     159,     0,     0,     0,     0,   160,   161,     0,     0,     0,
       0,     0,   162,   163,     0,   164,     0,     0,     0,     0,
       0,   165,     0,     0,     0,     0,   166,   167,   168,   169,
       0,     0,     0,   170,     0,     0,   171,   172,   173,     0,
       0,     0,   174,     0,     0,   175,   176,   177,   178,   179,
       0,     0,   180,   181,     0,   182,   183,   184,   185,   186,
     187,     0,     0,   188,   189,   190,   191,   192,     0,     0,
     193,   194,     0,   195,   196,   197,   198,   199,     0,     0,
     200,   201,     0,     0,     0,   202,   203,     0,     0,     0,
       0,     0,   204,     0,   205,   206,   207,   208,     0,   209,
       0,   210,     0,     0,     0,   211,   212,     0,   213,     0,
       0,   214,   215,     0,     0,     0,   216,   217,   218,     0,
       0,     0,   219,   220,   221,     0,     0,   222,     0,     0,
       0,     0,   223,   224,   225,     0,     0,     0,     0,   226,
       0,     0,     0,   227,   228,     0,   229,   230,     0,     0,
       0,   231,     0,   232,     0,     0,   233,   234,     0,     0,
     235,     0,     0,   236,   237,     0,     0,     0,     0,     0,
     238,   239,     0,   240,     0,   241,     0,   242,   243,     0,
       0,     0,     0,     0,     0,     0,   244,     0,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,     0,   263,   264,   265,
       0,   266,   267,   268,   269,     0,   270,   271,     0,     0,
       0,     0,   272,   273,   274,   275,   276,   277,     0,     0,
     278,   279,     0,   280,     0,   281,     0,   282,   283,   284,
     285,   286,   287,   288,   289,   290,     0,     0,   291,   292,
       0,     0,   293,   294,   295,   296,   297,     0,     0,     0,
     298,   299,     0,     0,     0,   300,     0,   301,   302,     0,
     303,   304,   305,     0,     0,   306,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   307,   308,   309,     0,   310,
       0,   311,     0,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,     0,   322,     0,   323,   324,   325,     0,
     326,     0,   327,   328,   329,   330,   331,     0,   332,   333,
     334,     0,     0,   335,     0,     0,     0,   336,   337,     0,
     338,   339,     0,     0,   340,   341,   342,   343,   344,     0,
     345,   346,     0,   347,   348,   349,     0,     0,   350,   351,
     352,   353,   354,   355,   356,   357,     0,   358,     0,   359,
     360,     0,   361,   362,   363,     0,   364,     0,     0,   365,
     366,   367,   368,     0,   369,     0,   370,   371,   372,   373,
     374,     0,     0,   375,   376,     0,     0,     0,   377,   378,
     379,   380,     0,     0,     0,   381,     0,     0,     0,     0,
     382,     0,   383,   384,   385,   386,     0,   387,   388,   389,
     390,   391,     0,     0,     0,     0,     0,   392,   393,   394,
       0,   395,     0,     0,   396,     0,     0,   397,     0,   398,
       0,   399,   400,   401,   402,   403,   404,     0,     0,   405,
     406,     0,     0,   407,   408,   409,   410,   411,   412,     0,
       0,   413,   414,   415,   416,     0,   417,   418,   419,     0,
       0,   420,   421,   422,   423,     0,   639,   424,   425,     0,
     426,   427,   428,   429,     0,     0,     0,     0,     0,   430,
     431,     0,     0,     0,   432,   433,   434,     0,     0,   435,
     436,     0,   437,   438,     0,   439,   440,     0,     0,   441,
       0,     0,   442,     0,   443,     0,   444,   445,     0,     0,
       0,     0,     0,   446,     0,   447,     0,     0,   448,     0,
       0,     0,     0,   449,     0,   450,   451,   452,   453,     0,
       0,     0,     0,     0,     0,   454,   455,   456,     0,   457,
     458,   459,   460,     0,     0,   461,     0,     0,   462,   463,
       0,   464,   465,   466,   467,   468,     0,   469,     0,     0,
       0,     0,     0,     0,     0,     0,   470,   471,   472,     0,
     473,   474,   475,     0,   476,     0,     0,   477,     0,   478,
       0,     0,     0,     0,     0,     0,   479,   480,     0,     0,
     481,     0,   482,     0,   483,   484,     0,     0,     0,   485,
     486,   487,   488,   489,   490,   491,   492,     0,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,     0,   503,
     504,   505,   506,   507,   508,   509,   510,   511,   512,    95,
      96,     0,    97,    98,    99,   100,   101,     0,     0,   102,
       0,     0,     0,     0,   103,     0,     0,   104,     0,   105,
     106,   107,   108,   109,   110,     0,   111,     0,     0,     0,
     112,     0,     0,     0,   113,     0,     0,   114,   115,   116,
       0,   117,     0,   118,   119,     0,     0,   120,     0,     0,
     121,   122,     0,   123,   124,   125,     0,   126,     0,   127,
     128,   129,   130,   131,   132,     0,   133,   134,     0,   135,
     136,   137,   138,   139,   140,   141,   142,   143,   144,   145,
       0,     0,   146,   147,     0,   148,   149,   150,   151,   152,
       0,     0,     0,   153,     0,     0,     0,     0,   154,     0,
       0,   155,     0,     0,     0,   156,   157,   158,     0,     0,
     159,     0,     0,     0,     0,   160,   161,     0,     0,     0,
       0,     0,   162,   163,     0,   164,     0,     0,     0,     0,
       0,   165,     0,     0,     0,     0,   166,   167,   168,   169,
       0,     0,     0,   170,     0,     0,   171,   172,   173,     0,
       0,     0,   174,     0,     0,   175,   176,   177,   178,   179,
       0,     0,   180,   181,     0,   182,   183,   184,   185,   186,
     187,     0,     0,   188,   189,   190,   191,   192,     0,     0,
     193,   194,     0,   195,   196,   197,   198,   199,     0,     0,
     200,   201,     0,     0,     0,   202,   203,     0,     0,     0,
       0,     0,   204,     0,   205,   206,   207,   208,     0,   209,
       0,   210,     0,     0,     0,   211,   212,     0,   213,     0,
       0,   214,   215,     0,     0,     0,   216,   217,   218,     0,
       0,     0,   219,   220,   221,     0,     0,   222,     0,     0,
       0,     0,   223,   224,   225,     0,     0,     0,     0,   226,
       0,     0,     0,   227,   228,     0,   229,   230,     0,     0,
       0,   231,     0,   232,     0,     0,   233,   234,     0,     0,
     235,     0,     0,   236,   237,     0,     0,     0,     0,     0,
     238,   239,     0,   240,     0,   241,     0,   242,   243,     0,
       0,     0,     0,     0,     0,     0,   244,     0,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,     0,   263,   264,   265,
       0,   266,   267,   268,   269,     0,   270,   271,     0,     0,
       0,     0,   272,   273,   274,   275,   276,   277,     0,     0,
     278,   279,     0,   280,     0,   281,     0,   282,   283,   284,
     285,   286,   287,   288,   289,   290,     0,     0,   291,   292,
       0,     0,   293,   294,   295,   296,   297,     0,     0,     0,
     298,   299,     0,     0,     0,   300,     0,   301,   302,     0,
     303,   304,   305,     0,     0,   306,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   307,   308,   309,     0,   310,
       0,   311,     0,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,     0,   322,     0,   323,   324,   325,     0,
     326,     0,   327,   328,   329,   330,   331,     0,   332,   333,
     334,     0,     0,   335,     0,     0,     0,   336,   337,     0,
     338,   339,     0,     0,   340,   341,   342,   343,   344,     0,
     345,   346,     0,   347,   348,   349,     0,     0,   350,   351,
     352,   353,   354,   355,   356,   357,     0,   358,     0,   359,
     360,     0,   361,   362,   363,     0,   364,     0,     0,   365,
     366,   367,   368,     0,   369,     0,   370,   371,   372,   373,
     374,     0,     0,   375,   376,     0,     0,     0,   377,   378,
     379,   380,     0,     0,     0,   381,     0,     0,     0,     0,
     382,     0,   383,   384,   385,   386,     0,   387,   388,   389,
     390,   391,     0,     0,     0,     0,     0,   392,   393,   394,
       0,   395,     0,     0,   396,     0,     0,   397,     0,   398,
       0,   399,   400,   401,   402,   403,   404,     0,     0,   405,
     406,     0,     0,   407,   408,   409,   410,   411,   412,     0,
       0,   413,   414,   415,   416,     0,   417,   418,   419,     0,
       0,   420,   421,   422,   423,     0,     0,   424,   425,     0,
     426,   427,   428,   429,     0,     0,     0,     0,     0,   430,
     431,     0,     0,     0,   432,   433,   434,     0,     0,   435,
     436,     0,   437,   438,     0,   439,   440,     0,     0,   441,
       0,     0,   442,     0,   443,     0,   444,   445,     0,     0,
       0,     0,     0,   446,     0,   447,     0,     0,   448,     0,
       0,     0,     0,   449,     0,   450,   451,   452,   453,     0,
       0,     0,     0,     0,     0,   454,   455,   456,     0,   457,
     458,   459,   460,     0,     0,   461,     0,     0,   462,   463,
       0,   464,   465,   466,   467,   468,     0,   469,     0,     0,
       0,     0,     0,     0,     0,     0,   470,   471,   472,     0,
     473,   474,   475,     0,   476,     0,     0,   477,     0,   478,
       0,     0,     0,     0,     0,     0,   479,   480,     0,     0,
     481,     0,   482,     0,   483,   484,     0,     0,     0,   485,
     486,   487,   488,   489,   490,   491,   492,     0,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,     0,   503,
     504,   505,   506,   507,   508,   509,   510,   511,   512,    95,
      96,     0,    97,    98,    99,   100,   101,     0,     0,   102,
       0,     0,     0,     0,   103,     0,     0,   104,     0,   105,
     106,   107,   108,   109,   110,     0,   111,     0,     0,     0,
     112,     0,     0,     0,   113,     0,     0,   114,   115,   116,
       0,   117,     0,   118,   119,     0,     0,   120,     0,     0,
     121,   122,     0,   123,   124,   125,     0,   126,     0,   127,
     128,   129,   130,   131,   132,     0,   133,   134,     0,   135,
     136,   137,   138,   139,   140,   141,   142,   143,   144,   145,
       0,     0,   146,   147,     0,   148,   149,   150,   151,   152,
       0,     0,     0,   153,     0,     0,     0,     0,   154,     0,
       0,   155,     0,     0,     0,   156,   157,   158,     0,     0,
     159,     0,     0,     0,     0,   160,   161,     0,     0,     0,
       0,     0,   162,   163,     0,   164,     0,     0,     0,     0,
       0,   165,     0,     0,     0,     0,   166,   167,   168,   169,
       0,     0,     0,   170,     0,     0,   171,   172,   173,     0,
       0,     0,   174,     0,     0,   175,   176,   177,   178,   179,
       0,     0,   180,   181,     0,   182,   183,   184,   185,   186,
     187,     0,     0,   188,   189,   190,   191,   192,     0,     0,
     193,   194,     0,   195,   196,   197,   198,   199,     0,     0,
     200,   201,     0,     0,     0,   202,   203,     0,     0,     0,
       0,     0,   204,     0,   205,   206,   207,   208,     0,     0,
       0,   210,     0,     0,     0,   211,   212,     0,   213,     0,
       0,   214,   215,     0,     0,     0,   216,   217,   218,     0,
       0,     0,   219,   220,   221,     0,     0,   222,     0,     0,
       0,     0,   223,   224,   225,     0,     0,     0,     0,   226,
       0,     0,     0,   227,   228,     0,   229,   230,     0,     0,
       0,   231,     0,   232,     0,     0,   233,   234,     0,     0,
     235,     0,     0,   236,   237,     0,     0,     0,     0,     0,
     238,   239,     0,     0,     0,   241,     0,   242,   243,     0,
       0,     0,     0,     0,     0,     0,   244,     0,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,     0,   263,   264,   265,
       0,   266,   267,   268,   269,     0,   270,   271,     0,     0,
       0,     0,   272,   273,   274,   275,   276,   277,     0,     0,
     278,   279,     0,   280,     0,   281,     0,   282,   283,   284,
     285,   286,   287,   288,   289,   290,     0,     0,   291,   292,
       0,     0,   293,   294,   295,   296,   297,     0,     0,     0,
     298,   299,     0,     0,     0,   300,     0,   301,   302,     0,
     303,   304,   305,     0,     0,   306,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   307,   308,   309,     0,   310,
       0,   311,     0,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,     0,   322,     0,   323,   324,   325,     0,
     326,     0,   327,   328,   329,   330,   331,     0,   332,   333,
     334,     0,     0,   335,     0,     0,     0,   336,   337,     0,
     338,   339,     0,     0,   340,   341,   342,   343,   344,     0,
     345,   346,     0,   347,   348,   349,     0,     0,   350,   351,
     352,   353,   354,   355,   356,   357,     0,   358,     0,   359,
     360,     0,   361,   362,   363,     0,   364,     0,     0,   365,
     366,   367,   368,     0,   369,     0,   370,   371,   372,   373,
     374,     0,     0,   375,   376,     0,     0,     0,   377,   378,
       0,   380,     0,     0,     0,   381,     0,     0,     0,     0,
     382,     0,   383,   384,   385,   386,     0,   387,   388,   389,
     390,   391,     0,     0,     0,     0,     0,   392,   393,   394,
       0,   395,     0,     0,   396,     0,     0,   397,     0,   398,
       0,   399,   400,   401,   402,   403,   404,     0,     0,   405,
     406,     0,     0,   407,   408,   409,   410,   411,   412,     0,
       0,   413,   414,   415,   416,     0,   417,   418,   419,     0,
       0,   420,   421,   422,   423,     0,     0,   424,   425,     0,
     426,   427,   428,   429,     0,     0,     0,     0,     0,   824,
     431,     0,     0,     0,   432,   433,   434,     0,     0,   435,
     436,     0,   437,   438,     0,   439,   440,     0,     0,   441,
       0,     0,   442,     0,   443,     0,   444,   445,     0,     0,
       0,     0,     0,   446,     0,   447,     0,     0,   448,     0,
       0,     0,     0,   449,     0,   450,   451,   452,   453,     0,
       0,     0,     0,     0,     0,   454,   455,   456,     0,   457,
     458,   459,   460,     0,     0,   461,     0,     0,   462,   463,
       0,     0,   465,   466,   467,   468,     0,   469,     0,     0,
       0,     0,     0,     0,     0,     0,   470,   471,   472,     0,
       0,   474,   475,     0,   476,     0,     0,   477,     0,   478,
       0,     0,     0,     0,     0,     0,   479,   480,     0,     0,
     481,     0,   482,     0,   483,   484,     0,     0,     0,   485,
     486,   487,   488,   489,   490,   491,   492,     0,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,     0,   503,
     504,   505,   506,   507,   508,   509,   510,   511,   512,    95,
      96,     0,    97,    98,    99,   100,   101,     0,     0,   102,
       0,     0,     0,     0,   103,     0,     0,   104,     0,   105,
     106,   107,   108,   109,   110,     0,   111,     0,     0,     0,
     112,     0,     0,     0,   113,     0,     0,   114,   115,   116,
       0,   117,     0,   118,   119,     0,     0,   120,     0,     0,
     121,   122,     0,   123,   124,   125,     0,   126,     0,   127,
     128,   129,   130,   131,   132,     0,   133,   134,     0,   135,
     136,   137,   138,   139,   140,   141,   142,   143,   144,   145,
       0,     0,   146,   147,     0,   148,   149,   150,   151,   152,
       0,     0,     0,   153,     0,     0,     0,     0,   154,     0,
       0,   155,     0,     0,     0,   156,   157,   158,     0,     0,
     159,     0,     0,     0,     0,   160,   161,     0,     0,     0,
       0,     0,   162,   163,     0,   164,     0,     0,     0,     0,
       0,   165,     0,     0,     0,     0,   166,   167,   168,   169,
       0,     0,     0,   170,     0,     0,   171,   172,   173,     0,
       0,     0,   174,     0,     0,   175,   176,   177,   178,   179,
       0,     0,   180,   181,     0,   182,   183,   184,   185,   186,
     187,     0,     0,   188,   189,   190,   191,   192,     0,     0,
     193,   194,     0,   195,   196,   197,   198,   199,     0,     0,
     200,   201,     0,     0,     0,   202,   203,     0,     0,     0,
       0,     0,   204,     0,   205,   206,   207,   208,     0,     0,
       0,   210,     0,     0,     0,   211,   212,     0,   213,     0,
       0,   214,   215,     0,     0,     0,   216,   217,   218,     0,
       0,     0,   219,   220,   221,     0,     0,   222,     0,     0,
       0,     0,   223,   224,   225,     0,     0,     0,     0,   226,
       0,     0,     0,   227,   228,     0,   229,   230,     0,     0,
       0,   231,     0,   232,     0,     0,   233,   234,     0,     0,
     235,     0,     0,   236,   237,     0,     0,     0,     0,     0,
     238,   239,     0,     0,     0,   241,     0,   242,   243,     0,
       0,     0,     0,     0,     0,     0,   244,     0,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,     0,   263,   264,   265,
       0,   266,   267,   268,   269,     0,   270,   271,     0,     0,
       0,     0,   272,   273,   274,   275,   276,   277,     0,     0,
     278,   279,     0,   280,     0,   281,     0,   282,   283,   284,
     285,   286,   287,   288,   289,   290,     0,     0,   291,   292,
       0,     0,   293,   294,   295,   296,   297,     0,     0,     0,
     298,   299,     0,     0,     0,   300,     0,   301,   302,     0,
     303,   304,   305,     0,     0,   306,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   307,   308,   309,     0,   310,
       0,   311,     0,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,     0,   322,     0,   323,   324,   325,     0,
     326,     0,   327,   328,   329,   330,   331,     0,   332,   333,
     334,     0,     0,   335,     0,     0,     0,   336,   337,     0,
     338,   339,     0,     0,   340,   341,   342,   343,   344,     0,
     345,   346,     0,   347,   348,   349,     0,     0,   350,   351,
     352,   353,   354,   355,   356,   357,     0,   358,     0,   359,
     360,     0,   361,   362,   363,     0,   364,     0,     0,   365,
     366,   367,   368,     0,   369,     0,   370,   371,   372,   373,
     374,     0,     0,   375,   376,     0,     0,     0,   377,   378,
       0,   380,     0,     0,     0,   381,     0,     0,     0,     0,
     382,     0,   383,   384,   385,   386,     0,   387,   388,   389,
     390,   391,     0,     0,     0,     0,     0,   392,   393,   394,
       0,   395,     0,     0,   396,     0,     0,   397,     0,   398,
       0,   399,   400,   401,   402,   403,   404,     0,     0,   405,
     406,     0,     0,   407,   408,   409,   410,   411,   412,     0,
       0,   413,   414,   415,   416,     0,   417,   418,   419,     0,
       0,   420,   421,   422,   423,     0,     0,   424,   425,     0,
     426,   427,   428,   429,     0,     0,     0,     0,     0,   430,
     431,     0,     0,     0,   432,   433,   434,     0,     0,   435,
     436,     0,   437,   438,     0,   439,   440,     0,     0,   441,
       0,     0,   442,     0,   443,     0,   444,   445,     0,     0,
       0,     0,     0,   446,     0,   447,     0,     0,   448,     0,
       0,     0,     0,   449,     0,   450,   451,   452,   453,     0,
       0,     0,     0,     0,     0,   454,   455,   456,     0,   457,
     458,   459,   460,     0,     0,   461,     0,     0,   462,   463,
       0,     0,   465,   466,   467,   468,     0,   469,     0,     0,
       0,     0,     0,     0,     0,     0,   470,   471,   472,     0,
       0,   474,   475,     0,   476,     0,     0,   477,     0,   478,
       0,     0,     0,     0,     0,     0,   479,   480,     0,     0,
     481,     0,   482,     0,   483,   484,     0,     0,     0,   485,
     486,   487,   488,   489,   490,   491,   492,     0,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,     0,   503,
     504,   505,   506,   507,   508,   509,   510,   511,   512,    95,
      96,     0,    97,    98,    99,   100,   101,     0,     0,   102,
       0,     0,     0,     0,   103,     0,     0,     0,     0,   105,
     106,   107,   108,   109,   110,     0,  -511,     0,     0,     0,
     112,     0,     0,     0,   113,     0,     0,   114,   115,   116,
       0,   117,     0,     0,     0,     0,     0,   120,  2990,     0,
     121,   122,     0,   123,   124,     0,     0,     0,     0,   127,
     128,   129,  2991,   131,   132,     0,   133,   134,     0,   135,
     136,     0,   138,     0,   140,   141,   142,   143,   144,   145,
       0,     0,   146,   147,     0,   148,   149,   150,     0,   152,
       0,     0,     0,   153,     0,     0,     0,     0,   154,     0,
       0,   155,     0,     0,     0,   156,   157,   158,     0,     0,
     159,     0,     0,     0,     0,   160,     0,     0,     0,     0,
       0,     0,   162,   163,     0,   164,     0,     0,     0,     0,
       0,   165,     0,     0,     0,     0,   166,   167,   168,   169,
       0,     0,     0,     0,     0,     0,   171,   172,   173,     0,
    -449,  -449,   174,     0,     0,  -449,   176,   177,   178,   179,
       0,     0,   180,   181,     0,   182,   183,   184,   185,   186,
       0,     0,     0,   188,   189,   190,   191,   192,     0,     0,
     193,   194,  2992,   195,   196,   197,   198,   199,     0,     0,
       0,     0,     0,     0,     0,   202,   203,     0,     0,     0,
       0,     0,   204,     0,   205,   206,   207,   208,     0,   209,
       0,   210,     0,     0,     0,     0,   212,     0,     0,     0,
       0,   214,   215,     0,     0,     0,   216,   217,   218,     0,
    2993,     0,   219,     0,   221,     0,     0,   222,     0,     0,
       0,     0,   223,   224,     0,     0,     0,     0,     0,   226,
       0,     0,     0,   227,   228,     0,   229,   230,  2994,     0,
       0,   231,     0,   232,     0,     0,     0,   234,     0,     0,
     235,  2995,     0,   236,   237,     0,     0,     0,     0,     0,
     238,   239,     0,   240,     0,   241,     0,   242,   243,     0,
       0,     0,     0,  -533,     0,     0,   244,     0,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,     0,   263,   264,   265,
       0,   266,   267,   268,   269,     0,   270,   271,     0,     0,
       0,     0,   272,   273,   274,   275,   276,   277,     0,     0,
     278,   279,     0,   280,     0,   281,     0,   282,   283,   284,
     285,   286,   287,   288,   289,   290,     0,     0,   291,   292,
       0,     0,   293,   294,   295,   296,   297,     0,     0,     0,
       0,   299,     0,     0,     0,   300,     0,   301,   302,     0,
     303,   304,  2996,     0,     0,   306,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   307,   308,   309,     0,   310,
       0,   311,     0,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,     0,     0,     0,     0,   324,   325,     0,
     326,     0,   327,   328,   329,   330,   331,     0,   332,   333,
     334,     0,     0,   335,     0,     0,     0,   336,   337,     0,
     338,   339,     0,     0,   340,   341,   342,   343,   344,     0,
     345,   346,     0,   347,     0,   349,  -533,     0,   350,   351,
     352,   353,   354,   355,   356,   357,     0,     0,     0,   359,
     360,     0,   361,   362,   363,  2997,   364,     0,     0,     0,
     366,   367,   368,     0,   369,     0,   370,   371,     0,   373,
     374,     0,     0,   375,   376,     0,     0,     0,   377,   378,
     379,   380,     0,     0,     0,   381,     0,     0,     0,     0,
       0,     0,     0,   384,     0,   386,     0,   387,   388,   389,
     390,   391,     0,     0,     0,     0,     0,   392,   393,   394,
       0,   395,     0,     0,   396,     0,     0,   397,     0,   398,
       0,   399,     0,   401,   402,   403,   404,     0,     0,     0,
     406,     0,     0,   407,   408,   409,   410,   411,   412,     0,
       0,   413,   414,   415,   416,     0,   417,   418,   419,     0,
       0,   420,   421,   422,   423,     0,     0,   424,   425,     0,
     426,   427,   428,   429,     0,     0,     0,     0,     0,   430,
     431,     0,     0,     0,     0,   433,   434,     0,     0,   435,
     436,     0,   437,   438,     0,     0,     0,     0,     0,   441,
       0,     0,   442,     0,   443,     0,   444,   445,     0,     0,
       0,     0,     0,   446,     0,   447,     0,     0,   448,     0,
       0,     0,     0,   449,     0,   450,   451,   452,   453,     0,
       0,  -533,     0,     0,     0,   454,   455,   456,     0,   457,
       0,   459,   460,     0,     0,   461,     0,     0,   462,   463,
       0,   464,   465,   466,   467,   468,     0,   469,     0,     0,
       0,     0,     0,     0,     0,     0,   470,   471,   472,     0,
     473,   474,   475,     0,     0,     0,     0,   477,     0,   478,
       0,     0,     0,     0,     0,     0,   479,   480,     0,     0,
     481,     0,   482,     0,   483,   484,     0,     0,     0,   485,
     486,   487,   488,   489,   490,   491,   492,     0,   493,   494,
     495,     0,   497,   498,   499,   500,   501,   502,     0,   503,
     504,   505,   506,   507,   508,   509,   510,   511,   512,    95,
      96,     0,    97,    98,    99,   100,   101,     0,     0,   102,
       0,     0,     0,     0,   103,     0,     0,     0,     0,   105,
     106,   107,   108,   109,   110,     0,  -511,     0,     0,     0,
     112,     0,     0,     0,   113,     0,     0,   114,   115,   116,
       0,   117,     0,     0,     0,     0,     0,   120,  2990,     0,
     121,   122,     0,   123,   124,     0,     0,     0,     0,   127,
     128,   129,  2991,   131,   132,     0,   133,   134,     0,   135,
     136,     0,   138,     0,   140,   141,   142,   143,   144,   145,
       0,     0,   146,   147,     0,   148,   149,   150,     0,   152,
       0,     0,     0,   153,     0,     0,     0,     0,   154,     0,
       0,   155,     0,     0,     0,   156,   157,   158,     0,     0,
     159,     0,     0,     0,     0,   160,     0,     0,     0,     0,
       0,     0,   162,   163,     0,   164,     0,     0,     0,     0,
       0,   165,     0,     0,     0,     0,   166,   167,   168,   169,
       0,     0,     0,     0,     0,     0,   171,   172,   173,     0,
    -470,     0,   174,     0,     0,  -470,   176,   177,   178,   179,
       0,     0,   180,   181,     0,   182,   183,   184,   185,   186,
       0,     0,     0,   188,   189,   190,   191,   192,     0,     0,
     193,   194,  2992,   195,   196,   197,   198,   199,     0,     0,
       0,     0,     0,     0,     0,   202,   203,     0,     0,     0,
       0,     0,   204,     0,   205,   206,   207,   208,     0,   209,
       0,   210,     0,     0,     0,     0,   212,     0,     0,     0,
       0,   214,   215,     0,     0,     0,   216,   217,   218,     0,
    2993,     0,   219,     0,   221,     0,     0,   222,     0,     0,
       0,     0,   223,   224,     0,     0,     0,     0,     0,   226,
       0,     0,     0,   227,   228,     0,   229,   230,  2994,     0,
       0,   231,     0,   232,     0,     0,     0,   234,     0,     0,
     235,  2995,     0,   236,   237,     0,     0,     0,     0,     0,
     238,   239,     0,   240,     0,   241,     0,   242,   243,     0,
       0,     0,     0,  -533,     0,     0,   244,     0,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,     0,   263,   264,   265,
       0,   266,   267,   268,   269,     0,   270,   271,     0,     0,
       0,     0,   272,   273,   274,   275,   276,   277,     0,     0,
     278,   279,     0,   280,     0,   281,     0,   282,   283,   284,
     285,   286,   287,   288,   289,   290,     0,     0,   291,   292,
       0,     0,   293,   294,   295,   296,   297,     0,     0,     0,
       0,   299,     0,     0,     0,   300,     0,   301,   302,     0,
     303,   304,  2996,     0,     0,   306,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   307,   308,   309,     0,   310,
       0,   311,     0,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,     0,     0,     0,     0,   324,   325,     0,
     326,     0,   327,   328,   329,   330,   331,     0,   332,   333,
     334,     0,     0,   335,     0,     0,     0,   336,   337,     0,
     338,   339,     0,     0,   340,   341,   342,   343,   344,     0,
     345,   346,     0,   347,     0,   349,  -533,     0,   350,   351,
     352,   353,   354,   355,   356,   357,     0,     0,     0,   359,
     360,     0,   361,   362,   363,  2997,   364,     0,     0,     0,
     366,   367,   368,     0,   369,     0,   370,   371,     0,   373,
     374,     0,     0,   375,   376,     0,     0,     0,   377,   378,
     379,   380,     0,     0,     0,   381,     0,     0,     0,     0,
       0,     0,     0,   384,     0,   386,     0,   387,   388,   389,
     390,   391,     0,     0,     0,     0,     0,   392,   393,   394,
       0,   395,     0,     0,   396,     0,     0,   397,     0,   398,
       0,   399,     0,   401,   402,   403,   404,     0,     0,     0,
     406,     0,     0,   407,   408,   409,   410,   411,   412,     0,
       0,   413,   414,   415,   416,     0,   417,   418,   419,     0,
       0,   420,   421,   422,   423,     0,     0,   424,   425,     0,
     426,   427,   428,   429,     0,     0,     0,     0,     0,   430,
     431,     0,     0,     0,     0,   433,   434,     0,     0,   435,
     436,     0,   437,   438,     0,     0,     0,     0,     0,   441,
       0,     0,   442,     0,   443,     0,   444,   445,     0,     0,
       0,     0,     0,   446,     0,   447,     0,     0,   448,     0,
       0,     0,     0,   449,     0,   450,   451,   452,   453,  -470,
       0,  -533,     0,     0,     0,   454,   455,   456,     0,   457,
       0,   459,   460,     0,     0,   461,     0,     0,   462,   463,
       0,   464,   465,   466,   467,   468,     0,   469,     0,     0,
       0,     0,     0,     0,     0,     0,   470,   471,   472,     0,
     473,   474,   475,     0,     0,     0,     0,   477,     0,   478,
       0,     0,     0,     0,     0,     0,   479,   480,     0,     0,
     481,     0,   482,     0,   483,   484,     0,     0,     0,   485,
     486,   487,   488,   489,   490,   491,   492,     0,   493,   494,
     495,     0,   497,   498,   499,   500,   501,   502,     0,   503,
     504,   505,   506,   507,   508,   509,   510,   511,   512,    95,
      96,     0,    97,    98,    99,   100,   101,     0,     0,   102,
       0,     0,     0,     0,   103,     0,     0,     0,     0,   105,
     106,   107,   108,   109,   110,     0,  -511,     0,     0,     0,
     112,     0,     0,     0,   113,     0,     0,   114,   115,   116,
       0,   117,     0,     0,     0,     0,     0,   120,  2990,     0,
     121,   122,     0,   123,   124,     0,     0,     0,     0,   127,
     128,   129,  2991,   131,   132,     0,   133,   134,     0,   135,
     136,     0,   138,     0,   140,   141,   142,   143,   144,   145,
       0,     0,   146,   147,     0,   148,   149,   150,     0,   152,
       0,     0,     0,   153,     0,     0,     0,     0,   154,     0,
       0,   155,     0,     0,     0,   156,   157,   158,     0,     0,
     159,     0,     0,     0,     0,   160,     0,     0,     0,     0,
       0,     0,   162,   163,     0,   164,     0,     0,     0,     0,
       0,   165,     0,     0,     0,     0,   166,   167,   168,   169,
       0,     0,     0,     0,     0,     0,   171,   172,   173,     0,
    -467,     0,   174,     0,     0,  -467,   176,   177,   178,   179,
       0,     0,   180,   181,     0,   182,   183,   184,   185,   186,
       0,     0,     0,   188,   189,   190,   191,   192,     0,     0,
     193,   194,  2992,   195,   196,   197,   198,   199,     0,     0,
       0,     0,     0,     0,     0,   202,   203,     0,     0,     0,
       0,     0,   204,     0,   205,   206,   207,   208,     0,   209,
       0,   210,     0,     0,     0,     0,   212,     0,     0,     0,
       0,   214,   215,     0,     0,     0,   216,   217,   218,     0,
    2993,     0,   219,     0,   221,     0,     0,   222,     0,     0,
       0,     0,   223,   224,     0,     0,     0,     0,     0,   226,
       0,     0,     0,   227,   228,     0,   229,   230,  2994,     0,
       0,   231,     0,   232,     0,     0,     0,   234,     0,     0,
     235,  2995,     0,   236,   237,     0,     0,     0,     0,     0,
     238,   239,     0,   240,     0,   241,     0,   242,   243,     0,
       0,     0,     0,  -533,     0,     0,   244,     0,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,     0,   263,   264,   265,
       0,   266,   267,   268,   269,     0,   270,   271,     0,     0,
       0,     0,   272,   273,   274,   275,   276,   277,     0,     0,
     278,   279,     0,   280,     0,   281,     0,   282,   283,   284,
     285,   286,   287,   288,   289,   290,     0,     0,   291,   292,
       0,     0,   293,   294,   295,   296,   297,     0,     0,     0,
       0,   299,     0,     0,     0,   300,     0,   301,   302,     0,
     303,   304,  2996,     0,     0,   306,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   307,   308,   309,     0,   310,
       0,   311,     0,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,     0,     0,     0,     0,   324,   325,     0,
     326,     0,   327,   328,   329,   330,   331,     0,   332,   333,
     334,     0,     0,   335,     0,     0,     0,   336,   337,     0,
     338,   339,     0,     0,   340,   341,   342,   343,   344,     0,
     345,   346,     0,   347,     0,   349,  -533,     0,   350,   351,
     352,   353,   354,   355,   356,   357,     0,     0,     0,   359,
     360,     0,   361,   362,   363,  2997,   364,     0,     0,     0,
     366,   367,   368,     0,   369,     0,   370,   371,     0,   373,
     374,     0,     0,   375,   376,     0,     0,     0,   377,   378,
     379,   380,     0,     0,     0,   381,     0,     0,     0,     0,
       0,     0,     0,   384,     0,   386,     0,   387,   388,   389,
     390,   391,     0,     0,     0,     0,     0,   392,   393,   394,
       0,   395,     0,     0,   396,     0,     0,   397,     0,   398,
       0,   399,     0,   401,   402,   403,   404,     0,     0,     0,
     406,     0,     0,   407,   408,   409,   410,   411,   412,     0,
       0,   413,   414,   415,   416,     0,   417,   418,   419,     0,
       0,   420,   421,   422,   423,     0,     0,   424,   425,     0,
     426,   427,   428,   429,     0,     0,     0,     0,     0,   430,
     431,     0,     0,     0,     0,   433,   434,     0,     0,   435,
     436,     0,   437,   438,     0,     0,     0,     0,     0,   441,
       0,     0,   442,     0,   443,     0,   444,   445,     0,     0,
       0,     0,     0,   446,     0,   447,     0,     0,   448,     0,
       0,     0,     0,   449,     0,   450,   451,   452,   453,  -467,
       0,  -533,     0,     0,     0,   454,   455,   456,     0,   457,
       0,   459,   460,     0,     0,   461,     0,     0,   462,   463,
       0,   464,   465,   466,   467,   468,     0,   469,     0,     0,
       0,     0,     0,     0,     0,     0,   470,   471,   472,     0,
     473,   474,   475,     0,     0,     0,     0,   477,     0,   478,
       0,     0,     0,     0,     0,     0,   479,   480,     0,     0,
     481,     0,   482,     0,   483,   484,     0,     0,     0,   485,
     486,   487,   488,   489,   490,   491,   492,     0,   493,   494,
     495,     0,   497,   498,   499,   500,   501,   502,     0,   503,
     504,   505,   506,   507,   508,   509,   510,   511,   512,    95,
      96,     0,    97,    98,    99,   100,   101,     0,     0,   102,
       0,     0,     0,     0,   103,     0,     0,     0,     0,   105,
     106,   107,   108,   109,   110,     0,  -511,     0,     0,     0,
     112,     0,     0,     0,   113,     0,     0,   114,   115,   116,
       0,   117,     0,     0,     0,     0,     0,   120,  2990,     0,
     121,   122,     0,   123,   124,     0,     0,     0,     0,   127,
     128,   129,  2991,   131,   132,     0,   133,   134,     0,   135,
     136,     0,   138,     0,   140,   141,   142,   143,   144,   145,
       0,     0,   146,   147,     0,   148,   149,   150,     0,   152,
       0,     0,     0,   153,     0,     0,     0,     0,   154,     0,
       0,   155,     0,     0,     0,   156,   157,   158,     0,     0,
     159,     0,     0,     0,     0,   160,     0,     0,     0,     0,
       0,     0,   162,   163,     0,   164,     0,     0,     0,     0,
       0,   165,     0,     0,     0,     0,   166,   167,   168,   169,
       0,     0,     0,     0,     0,     0,   171,   172,   173,     0,
       0,     0,   174,     0,     0,  3212,   176,   177,   178,   179,
       0,     0,   180,   181,     0,   182,   183,   184,   185,   186,
       0,     0,     0,   188,   189,   190,   191,   192,     0,     0,
     193,   194,  2992,   195,   196,   197,   198,   199,     0,     0,
       0,     0,     0,     0,     0,   202,   203,     0,     0,     0,
       0,     0,   204,     0,   205,   206,   207,   208,     0,   209,
       0,   210,     0,     0,     0,     0,   212,     0,     0,     0,
       0,   214,   215,     0,     0,     0,   216,   217,   218,     0,
    2993,     0,   219,     0,   221,     0,     0,   222,     0,     0,
       0,     0,   223,   224,     0,     0,     0,     0,     0,   226,
       0,     0,     0,   227,   228,     0,   229,   230,  2994,     0,
       0,   231,     0,   232,     0,     0,     0,   234,     0,     0,
     235,  2995,     0,   236,   237,     0,     0,     0,     0,     0,
     238,   239,     0,   240,     0,   241,     0,   242,   243,     0,
       0,     0,     0,  -533,     0,     0,   244,     0,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,     0,   263,   264,   265,
       0,   266,   267,   268,   269,     0,   270,   271,     0,     0,
       0,     0,   272,   273,   274,   275,   276,   277,     0,     0,
     278,   279,     0,   280,     0,   281,     0,   282,   283,   284,
     285,   286,   287,   288,   289,   290,     0,     0,   291,   292,
       0,     0,   293,   294,   295,   296,   297,     0,     0,     0,
       0,   299,     0,     0,     0,   300,     0,   301,   302,     0,
     303,   304,  2996,     0,     0,   306,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   307,   308,   309,     0,   310,
       0,   311,     0,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,     0,     0,     0,     0,   324,   325,     0,
     326,     0,   327,   328,   329,   330,   331,     0,   332,   333,
     334,     0,     0,   335,     0,     0,     0,   336,   337,     0,
     338,   339,     0,     0,   340,   341,   342,   343,   344,     0,
     345,   346,     0,   347,     0,   349,  -533,     0,   350,   351,
     352,   353,   354,   355,   356,   357,     0,     0,     0,   359,
     360,     0,   361,   362,   363,  2997,   364,     0,     0,     0,
     366,   367,   368,     0,   369,     0,   370,   371,     0,   373,
     374,     0,     0,   375,   376,     0,     0,     0,   377,   378,
     379,   380,     0,     0,     0,   381,     0,     0,     0,     0,
       0,     0,     0,   384,     0,   386,     0,   387,   388,   389,
     390,   391,     0,     0,     0,     0,     0,   392,   393,   394,
       0,   395,     0,     0,   396,     0,     0,   397,     0,   398,
       0,   399,     0,   401,   402,   403,   404,     0,     0,     0,
     406,     0,     0,   407,   408,   409,   410,   411,   412,     0,
       0,   413,   414,   415,   416,     0,   417,   418,   419,     0,
       0,   420,   421,   422,   423,     0,     0,   424,   425,     0,
     426,   427,   428,   429,     0,     0,     0,     0,     0,   430,
     431,     0,     0,     0,     0,   433,   434,     0,     0,   435,
     436,     0,   437,   438,     0,     0,     0,     0,     0,   441,
       0,     0,   442,     0,   443,     0,   444,   445,     0,     0,
       0,     0,     0,   446,     0,   447,     0,     0,   448,     0,
       0,     0,     0,   449,     0,   450,   451,   452,   453,     0,
       0,  -533,     0,     0,     0,   454,   455,   456,     0,   457,
       0,   459,   460,     0,     0,   461,     0,     0,   462,   463,
       0,   464,   465,   466,   467,   468,     0,   469,     0,     0,
       0,     0,     0,     0,     0,     0,   470,   471,   472,     0,
     473,   474,   475,     0,     0,     0,     0,   477,     0,   478,
       0,     0,     0,     0,     0,     0,   479,   480,     0,     0,
     481,     0,   482,     0,   483,   484,     0,     0,     0,   485,
     486,   487,   488,   489,   490,   491,   492,     0,   493,   494,
     495,     0,   497,   498,   499,   500,   501,   502,     0,   503,
     504,   505,   506,   507,   508,   509,   510,   511,   512,    95,
      96,     0,    97,    98,    99,   100,   101,     0,     0,   102,
       0,     0,     0,     0,   103,     0,     0,     0,     0,   105,
     106,   107,   108,   109,   110,     0,  -511,     0,     0,     0,
     112,     0,     0,     0,   113,     0,     0,   114,   115,   116,
       0,   117,     0,     0,     0,     0,     0,   120,  2990,     0,
     121,   122,     0,   123,   124,     0,     0,     0,     0,   127,
     128,   129,  2991,   131,   132,     0,   133,   134,     0,   135,
     136,     0,   138,     0,   140,   141,   142,   143,   144,   145,
       0,     0,   146,   147,     0,   148,   149,   150,     0,   152,
       0,     0,     0,   153,     0,     0,     0,     0,   154,     0,
       0,   155,     0,     0,     0,   156,   157,   158,     0,     0,
     159,     0,     0,     0,     0,   160,     0,     0,     0,     0,
       0,     0,   162,   163,     0,   164,     0,     0,     0,     0,
       0,   165,     0,     0,     0,     0,   166,   167,   168,   169,
       0,     0,     0,     0,     0,     0,   171,   172,   173,     0,
       0,     0,   174,     0,     0,  -472,   176,   177,   178,   179,
       0,     0,   180,   181,     0,   182,   183,   184,   185,   186,
       0,     0,     0,   188,   189,   190,   191,   192,     0,     0,
     193,   194,  2992,   195,   196,   197,   198,   199,     0,     0,
       0,     0,     0,     0,     0,   202,   203,     0,     0,     0,
       0,     0,   204,     0,   205,   206,   207,   208,     0,   209,
       0,   210,     0,     0,     0,     0,   212,     0,     0,     0,
       0,   214,   215,     0,     0,     0,   216,   217,   218,     0,
    2993,     0,   219,     0,   221,     0,     0,   222,     0,     0,
       0,     0,   223,   224,     0,     0,     0,     0,     0,   226,
       0,     0,     0,   227,   228,     0,   229,   230,  2994,     0,
       0,   231,     0,   232,     0,     0,     0,   234,     0,     0,
     235,  2995,     0,   236,   237,     0,     0,     0,     0,     0,
     238,   239,     0,   240,     0,   241,     0,   242,   243,     0,
       0,     0,     0,  -533,     0,     0,   244,     0,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,     0,   263,   264,   265,
       0,   266,   267,   268,   269,     0,   270,   271,     0,     0,
       0,     0,   272,   273,   274,   275,   276,   277,     0,     0,
     278,   279,     0,   280,     0,   281,     0,   282,   283,   284,
     285,   286,   287,   288,   289,   290,     0,     0,   291,   292,
       0,     0,   293,   294,   295,   296,   297,     0,     0,     0,
       0,   299,     0,     0,     0,   300,     0,   301,   302,     0,
     303,   304,  2996,     0,     0,   306,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   307,   308,   309,     0,   310,
       0,   311,     0,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,     0,     0,     0,     0,   324,   325,     0,
     326,     0,   327,   328,   329,   330,   331,     0,   332,   333,
     334,     0,     0,   335,     0,     0,     0,   336,   337,     0,
     338,   339,     0,     0,   340,   341,   342,   343,   344,     0,
     345,   346,     0,   347,     0,   349,  -533,     0,   350,   351,
     352,   353,   354,   355,   356,   357,     0,     0,     0,   359,
     360,     0,   361,   362,   363,  2997,   364,     0,     0,     0,
     366,   367,   368,     0,   369,     0,   370,   371,     0,   373,
     374,     0,     0,   375,   376,     0,     0,     0,   377,   378,
     379,   380,     0,     0,     0,   381,     0,     0,     0,     0,
       0,     0,     0,   384,     0,   386,     0,   387,   388,   389,
     390,   391,     0,     0,     0,     0,     0,   392,   393,   394,
       0,   395,     0,     0,   396,     0,     0,   397,     0,   398,
       0,   399,     0,   401,   402,   403,   404,     0,     0,     0,
     406,     0,     0,   407,   408,   409,   410,   411,   412,     0,
       0,   413,   414,   415,   416,     0,   417,   418,   419,     0,
       0,   420,   421,   422,   423,     0,     0,   424,   425,     0,
     426,   427,   428,   429,     0,     0,     0,     0,     0,   430,
     431,     0,     0,     0,     0,   433,   434,     0,     0,   435,
     436,     0,   437,   438,     0,     0,     0,     0,     0,   441,
       0,     0,   442,     0,   443,     0,   444,   445,     0,     0,
       0,     0,     0,   446,     0,   447,     0,     0,   448,     0,
       0,     0,     0,   449,     0,   450,   451,   452,   453,     0,
       0,  -533,     0,     0,     0,   454,   455,   456,     0,   457,
       0,   459,   460,     0,     0,   461,     0,     0,   462,   463,
       0,   464,   465,   466,   467,   468,     0,   469,     0,     0,
       0,     0,     0,     0,     0,     0,   470,   471,   472,     0,
     473,   474,   475,     0,     0,     0,     0,   477,     0,   478,
       0,     0,     0,     0,     0,     0,   479,   480,     0,     0,
     481,     0,   482,     0,   483,   484,     0,     0,     0,   485,
     486,   487,   488,   489,   490,   491,   492,     0,   493,   494,
     495,     0,   497,   498,   499,   500,   501,   502,     0,   503,
     504,   505,   506,   507,   508,   509,   510,   511,   512,    95,
      96,     0,    97,    98,    99,   100,   101,     0,     0,   102,
       0,     0,     0,     0,   103,     0,     0,     0,     0,   105,
     106,   107,   108,   109,   110,     0,  -511,     0,     0,     0,
     112,     0,     0,     0,   113,     0,     0,   114,   115,   116,
       0,   117,     0,     0,     0,     0,     0,   120,  2990,     0,
     121,   122,     0,   123,   124,     0,     0,     0,     0,   127,
     128,   129,  2991,   131,   132,     0,   133,   134,     0,   135,
     136,     0,   138,     0,   140,   141,   142,   143,   144,   145,
       0,     0,   146,   147,     0,   148,   149,   150,     0,   152,
       0,     0,     0,   153,     0,     0,     0,     0,   154,     0,
       0,   155,     0,     0,     0,   156,   157,   158,     0,     0,
     159,     0,     0,     0,     0,   160,     0,     0,     0,     0,
       0,     0,   162,   163,     0,   164,     0,     0,     0,     0,
       0,   165,     0,     0,     0,     0,   166,   167,   168,   169,
       0,     0,     0,     0,     0,     0,   171,   172,   173,     0,
       0,     0,   174,     0,     0,  3299,   176,   177,   178,   179,
       0,     0,   180,   181,     0,   182,   183,   184,   185,   186,
       0,     0,     0,   188,   189,   190,   191,   192,     0,     0,
     193,   194,  2992,   195,   196,   197,   198,   199,     0,     0,
       0,     0,     0,     0,     0,   202,   203,     0,     0,     0,
       0,     0,   204,     0,   205,   206,   207,   208,     0,   209,
       0,   210,     0,     0,     0,     0,   212,     0,     0,     0,
       0,   214,   215,     0,     0,     0,   216,   217,   218,     0,
    2993,     0,   219,     0,   221,     0,     0,   222,     0,     0,
       0,     0,   223,   224,     0,     0,     0,     0,     0,   226,
       0,     0,     0,   227,   228,     0,   229,   230,  2994,     0,
       0,   231,     0,   232,     0,     0,     0,   234,     0,     0,
     235,  2995,     0,   236,   237,     0,     0,     0,     0,     0,
     238,   239,     0,   240,     0,   241,     0,   242,   243,     0,
       0,     0,     0,  -533,     0,     0,   244,     0,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,     0,   263,   264,   265,
       0,   266,   267,   268,   269,     0,   270,   271,     0,     0,
       0,     0,   272,   273,   274,   275,   276,   277,     0,     0,
     278,   279,     0,   280,     0,   281,     0,   282,   283,   284,
     285,   286,   287,   288,   289,   290,     0,     0,   291,   292,
       0,     0,   293,   294,   295,   296,   297,     0,     0,     0,
       0,   299,     0,     0,     0,   300,     0,   301,   302,     0,
     303,   304,  2996,     0,     0,   306,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   307,   308,   309,     0,   310,
       0,   311,     0,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,     0,     0,     0,     0,   324,   325,     0,
     326,     0,   327,   328,   329,   330,   331,     0,   332,   333,
     334,     0,     0,   335,     0,     0,     0,   336,   337,     0,
     338,   339,     0,     0,   340,   341,   342,   343,   344,     0,
     345,   346,     0,   347,     0,   349,  -533,     0,   350,   351,
     352,   353,   354,   355,   356,   357,     0,     0,     0,   359,
     360,     0,   361,   362,   363,  2997,   364,     0,     0,     0,
     366,   367,   368,     0,   369,     0,   370,   371,     0,   373,
     374,     0,     0,   375,   376,     0,     0,     0,   377,   378,
     379,   380,     0,     0,     0,   381,     0,     0,     0,     0,
       0,     0,     0,   384,     0,   386,     0,   387,   388,   389,
     390,   391,     0,     0,     0,     0,     0,   392,   393,   394,
       0,   395,     0,     0,   396,     0,     0,   397,     0,   398,
       0,   399,     0,   401,   402,   403,   404,     0,     0,     0,
     406,     0,     0,   407,   408,   409,   410,   411,   412,     0,
       0,   413,   414,   415,   416,     0,   417,   418,   419,     0,
       0,   420,   421,   422,   423,     0,     0,   424,   425,     0,
     426,   427,   428,   429,     0,     0,     0,     0,     0,   430,
     431,     0,     0,     0,     0,   433,   434,     0,     0,   435,
     436,     0,   437,   438,     0,     0,     0,     0,     0,   441,
       0,     0,   442,     0,   443,     0,   444,   445,     0,     0,
       0,     0,     0,   446,     0,   447,     0,     0,   448,     0,
       0,     0,     0,   449,     0,   450,   451,   452,   453,     0,
       0,  -533,     0,     0,     0,   454,   455,   456,     0,   457,
       0,   459,   460,     0,     0,   461,     0,     0,   462,   463,
       0,   464,   465,   466,   467,   468,     0,   469,     0,     0,
       0,     0,     0,     0,     0,     0,   470,   471,   472,     0,
     473,   474,   475,     0,     0,     0,     0,   477,     0,   478,
       0,     0,     0,     0,     0,     0,   479,   480,     0,     0,
     481,     0,   482,     0,   483,   484,     0,     0,     0,   485,
     486,   487,   488,   489,   490,   491,   492,     0,   493,   494,
     495,     0,   497,   498,   499,   500,   501,   502,     0,   503,
     504,   505,   506,   507,   508,   509,   510,   511,   512,    95,
      96,     0,    97,    98,    99,   100,   101,     0,     0,   102,
       0,     0,     0,     0,   103,     0,     0,     0,     0,   105,
     106,   107,   108,   109,   110,     0,  -511,     0,     0,     0,
     112,     0,     0,     0,   113,     0,     0,   114,   115,   116,
       0,   117,     0,     0,     0,     0,     0,   120,  2990,     0,
     121,   122,     0,   123,   124,     0,     0,     0,     0,   127,
     128,   129,  2991,   131,   132,     0,   133,   134,     0,   135,
     136,     0,   138,     0,   140,   141,   142,   143,   144,   145,
       0,     0,   146,   147,     0,   148,   149,   150,     0,   152,
       0,     0,     0,   153,     0,     0,     0,     0,   154,     0,
       0,   155,     0,     0,     0,   156,   157,   158,     0,     0,
     159,     0,     0,     0,     0,   160,     0,     0,     0,     0,
       0,     0,   162,   163,     0,   164,     0,     0,     0,     0,
       0,   165,     0,     0,     0,     0,   166,   167,   168,   169,
       0,     0,     0,     0,     0,     0,   171,   172,   173,     0,
       0,     0,   174,     0,     0,  3338,   176,   177,   178,   179,
       0,     0,   180,   181,     0,   182,   183,   184,   185,   186,
       0,     0,     0,   188,   189,   190,   191,   192,     0,     0,
     193,   194,  2992,   195,   196,   197,   198,   199,     0,     0,
       0,     0,     0,     0,     0,   202,   203,     0,     0,     0,
       0,     0,   204,     0,   205,   206,   207,   208,     0,   209,
       0,   210,     0,     0,     0,     0,   212,     0,     0,     0,
       0,   214,   215,     0,     0,     0,   216,   217,   218,     0,
    2993,     0,   219,     0,   221,     0,     0,   222,     0,     0,
       0,     0,   223,   224,     0,     0,     0,     0,     0,   226,
       0,     0,     0,   227,   228,     0,   229,   230,  2994,     0,
       0,   231,     0,   232,     0,     0,     0,   234,     0,     0,
     235,  2995,     0,   236,   237,     0,     0,     0,     0,     0,
     238,   239,     0,   240,     0,   241,     0,   242,   243,     0,
       0,     0,     0,  -533,     0,     0,   244,     0,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,     0,   263,   264,   265,
       0,   266,   267,   268,   269,     0,   270,   271,     0,     0,
       0,     0,   272,   273,   274,   275,   276,   277,     0,     0,
     278,   279,     0,   280,     0,   281,     0,   282,   283,   284,
     285,   286,   287,   288,   289,   290,     0,     0,   291,   292,
       0,     0,   293,   294,   295,   296,   297,     0,     0,     0,
       0,   299,     0,     0,     0,   300,     0,   301,   302,     0,
     303,   304,  2996,     0,     0,   306,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   307,   308,   309,     0,   310,
       0,   311,     0,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,     0,     0,     0,     0,   324,   325,     0,
     326,     0,   327,   328,   329,   330,   331,     0,   332,   333,
     334,     0,     0,   335,     0,     0,     0,   336,   337,     0,
     338,   339,     0,     0,   340,   341,   342,   343,   344,     0,
     345,   346,     0,   347,     0,   349,  -533,     0,   350,   351,
     352,   353,   354,   355,   356,   357,     0,     0,     0,   359,
     360,     0,   361,   362,   363,  2997,   364,     0,     0,     0,
     366,   367,   368,     0,   369,     0,   370,   371,     0,   373,
     374,     0,     0,   375,   376,     0,     0,     0,   377,   378,
     379,   380,     0,     0,     0,   381,     0,     0,     0,     0,
       0,     0,     0,   384,     0,   386,     0,   387,   388,   389,
     390,   391,     0,     0,     0,     0,     0,   392,   393,   394,
       0,   395,     0,     0,   396,     0,     0,   397,     0,   398,
       0,   399,     0,   401,   402,   403,   404,     0,     0,     0,
     406,     0,     0,   407,   408,   409,   410,   411,   412,     0,
       0,   413,   414,   415,   416,     0,   417,   418,   419,     0,
       0,   420,   421,   422,   423,     0,     0,   424,   425,     0,
     426,   427,   428,   429,     0,     0,     0,     0,     0,   430,
     431,     0,     0,     0,     0,   433,   434,     0,     0,   435,
     436,     0,   437,   438,     0,     0,     0,     0,     0,   441,
       0,     0,   442,     0,   443,     0,   444,   445,     0,     0,
       0,     0,     0,   446,     0,   447,     0,     0,   448,     0,
       0,     0,     0,   449,     0,   450,   451,   452,   453,     0,
       0,  -533,     0,     0,     0,   454,   455,   456,     0,   457,
       0,   459,   460,     0,     0,   461,     0,     0,   462,   463,
       0,   464,   465,   466,   467,   468,     0,   469,     0,     0,
       0,     0,     0,     0,     0,     0,   470,   471,   472,     0,
     473,   474,   475,     0,     0,     0,     0,   477,     0,   478,
       0,     0,     0,     0,     0,     0,   479,   480,     0,     0,
     481,     0,   482,     0,   483,   484,     0,     0,     0,   485,
     486,   487,   488,   489,   490,   491,   492,     0,   493,   494,
     495,     0,   497,   498,   499,   500,   501,   502,     0,   503,
     504,   505,   506,   507,   508,   509,   510,   511,   512,    95,
      96,     0,    97,    98,    99,   100,   101,     0,     0,   102,
       0,     0,     0,     0,   103,     0,     0,     0,     0,   105,
     106,   107,   108,   109,   110,     0,  -511,     0,     0,     0,
     112,     0,     0,     0,   113,     0,     0,   114,   115,   116,
       0,   117,     0,     0,     0,     0,     0,   120,  2990,     0,
     121,   122,     0,   123,   124,     0,     0,     0,     0,   127,
     128,   129,  2991,   131,   132,     0,   133,   134,     0,   135,
     136,     0,   138,     0,   140,   141,   142,   143,   144,   145,
       0,     0,   146,   147,     0,   148,   149,   150,     0,   152,
       0,     0,     0,   153,     0,     0,     0,     0,   154,     0,
       0,   155,     0,     0,     0,   156,   157,   158,     0,     0,
     159,     0,     0,     0,     0,   160,     0,     0,     0,     0,
       0,     0,   162,   163,     0,   164,     0,     0,     0,     0,
       0,   165,     0,     0,     0,     0,   166,   167,   168,   169,
       0,     0,     0,     0,     0,     0,   171,   172,   173,     0,
       0,     0,   174,     0,     0,  -453,   176,   177,   178,   179,
       0,     0,   180,   181,     0,   182,   183,   184,   185,   186,
       0,     0,     0,   188,   189,   190,   191,   192,     0,     0,
     193,   194,  2992,   195,   196,   197,   198,   199,     0,     0,
       0,     0,     0,     0,     0,   202,   203,     0,     0,     0,
       0,     0,   204,     0,   205,   206,   207,   208,     0,   209,
       0,   210,     0,     0,     0,     0,   212,     0,     0,     0,
       0,   214,   215,     0,     0,     0,   216,   217,   218,     0,
    2993,     0,   219,     0,   221,     0,     0,   222,     0,     0,
       0,     0,   223,   224,     0,     0,     0,     0,     0,   226,
       0,     0,     0,   227,   228,     0,   229,   230,  2994,     0,
       0,   231,     0,   232,     0,     0,     0,   234,     0,     0,
     235,  2995,     0,   236,   237,     0,     0,     0,     0,     0,
     238,   239,     0,   240,     0,   241,     0,   242,   243,     0,
       0,     0,     0,  -533,     0,     0,   244,     0,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,     0,   263,   264,   265,
       0,   266,   267,   268,   269,     0,   270,   271,     0,     0,
       0,     0,   272,   273,   274,   275,   276,   277,     0,     0,
     278,   279,     0,   280,     0,   281,     0,   282,   283,   284,
     285,   286,   287,   288,   289,   290,     0,     0,   291,   292,
       0,     0,   293,   294,   295,   296,   297,     0,     0,     0,
       0,   299,     0,     0,     0,   300,     0,   301,   302,     0,
     303,   304,  2996,     0,     0,   306,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   307,   308,   309,     0,   310,
       0,   311,     0,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,     0,     0,     0,     0,   324,   325,     0,
     326,     0,   327,   328,   329,   330,   331,     0,   332,   333,
     334,     0,     0,   335,     0,     0,     0,   336,   337,     0,
     338,   339,     0,     0,   340,   341,   342,   343,   344,     0,
     345,   346,     0,   347,     0,   349,  -533,     0,   350,   351,
     352,   353,   354,   355,   356,   357,     0,     0,     0,   359,
     360,     0,   361,   362,   363,  2997,   364,     0,     0,     0,
     366,   367,   368,     0,   369,     0,   370,   371,     0,   373,
     374,     0,     0,   375,   376,     0,     0,     0,   377,   378,
     379,   380,     0,     0,     0,   381,     0,     0,     0,     0,
       0,     0,     0,   384,     0,   386,     0,   387,   388,   389,
     390,   391,     0,     0,     0,     0,     0,   392,   393,   394,
       0,   395,     0,     0,   396,     0,     0,   397,     0,   398,
       0,   399,     0,   401,   402,   403,   404,     0,     0,     0,
     406,     0,     0,   407,   408,   409,   410,   411,   412,     0,
       0,   413,   414,   415,   416,     0,   417,   418,   419,     0,
       0,   420,   421,   422,   423,     0,     0,   424,   425,     0,
     426,   427,   428,   429,     0,     0,     0,     0,     0,   430,
     431,     0,     0,     0,     0,   433,   434,     0,     0,   435,
     436,     0,   437,   438,     0,     0,     0,     0,     0,   441,
       0,     0,   442,     0,   443,     0,   444,   445,     0,     0,
       0,     0,     0,   446,     0,   447,     0,     0,   448,     0,
       0,     0,     0,   449,     0,   450,   451,   452,   453,     0,
       0,  -533,     0,     0,     0,   454,   455,   456,     0,   457,
       0,   459,   460,     0,     0,   461,     0,     0,   462,   463,
       0,   464,   465,   466,   467,   468,     0,   469,     0,     0,
       0,     0,     0,     0,     0,     0,   470,   471,   472,     0,
     473,   474,   475,     0,     0,     0,     0,   477,     0,   478,
       0,     0,     0,     0,     0,     0,   479,   480,     0,     0,
     481,     0,   482,     0,   483,   484,     0,     0,     0,   485,
     486,   487,   488,   489,   490,   491,   492,     0,   493,   494,
     495,     0,   497,   498,   499,   500,   501,   502,     0,   503,
     504,   505,   506,   507,   508,   509,   510,   511,   512,    95,
      96,     0,    97,    98,    99,   100,   101,     0,     0,   102,
       0,     0,     0,     0,   103,     0,     0,     0,     0,   105,
     106,   107,   108,   109,   110,     0,  -511,     0,     0,     0,
     112,     0,     0,     0,   113,     0,     0,   114,   115,   116,
       0,   117,     0,     0,     0,     0,     0,   120,  2990,     0,
     121,   122,     0,   123,   124,     0,     0,     0,     0,   127,
     128,   129,  2991,   131,   132,     0,   133,   134,     0,   135,
     136,     0,   138,     0,   140,   141,   142,   143,   144,   145,
       0,     0,   146,   147,     0,   148,   149,   150,     0,   152,
       0,     0,     0,   153,     0,     0,     0,     0,   154,     0,
       0,   155,     0,     0,     0,   156,   157,   158,     0,     0,
     159,     0,     0,     0,     0,   160,     0,     0,     0,     0,
       0,     0,   162,   163,     0,   164,     0,     0,     0,     0,
       0,   165,     0,     0,     0,     0,   166,   167,   168,   169,
       0,     0,     0,     0,     0,     0,   171,   172,   173,     0,
       0,     0,   174,     0,     0,     0,   176,   177,   178,   179,
       0,     0,   180,   181,     0,   182,   183,   184,   185,   186,
       0,     0,     0,   188,   189,   190,   191,   192,     0,     0,
     193,   194,  2992,   195,   196,   197,   198,   199,     0,     0,
       0,     0,     0,     0,     0,   202,   203,     0,     0,     0,
       0,     0,   204,     0,   205,   206,   207,   208,     0,   209,
       0,   210,     0,     0,     0,     0,   212,     0,     0,     0,
       0,   214,   215,     0,     0,     0,   216,   217,   218,     0,
    2993,     0,   219,     0,   221,     0,     0,   222,     0,     0,
       0,     0,   223,   224,     0,     0,     0,     0,     0,   226,
       0,     0,     0,   227,   228,     0,   229,   230,  2994,     0,
       0,   231,     0,   232,     0,     0,     0,   234,     0,     0,
     235,  2995,     0,   236,   237,     0,     0,     0,     0,     0,
     238,   239,     0,   240,     0,   241,     0,   242,   243,     0,
       0,     0,     0,  -533,     0,     0,   244,     0,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,     0,   263,   264,   265,
       0,   266,   267,   268,   269,     0,   270,   271,     0,     0,
       0,     0,   272,   273,   274,   275,   276,   277,     0,     0,
     278,   279,     0,   280,     0,   281,     0,   282,   283,   284,
     285,   286,   287,   288,   289,   290,     0,     0,   291,   292,
       0,     0,   293,   294,   295,   296,   297,     0,     0,     0,
       0,   299,     0,     0,     0,   300,     0,   301,   302,     0,
     303,   304,  2996,     0,     0,   306,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   307,   308,   309,     0,   310,
       0,   311,     0,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,     0,     0,     0,     0,   324,   325,     0,
     326,     0,   327,   328,   329,   330,   331,     0,   332,   333,
     334,     0,     0,   335,     0,     0,     0,   336,   337,     0,
     338,   339,     0,     0,   340,   341,   342,   343,   344,     0,
     345,   346,     0,   347,     0,   349,  -533,     0,   350,   351,
     352,   353,   354,   355,   356,   357,     0,     0,     0,   359,
     360,     0,   361,   362,   363,  2997,   364,     0,     0,     0,
     366,   367,   368,     0,   369,     0,   370,   371,     0,   373,
     374,     0,     0,   375,   376,     0,     0,     0,   377,   378,
     379,   380,     0,     0,     0,   381,     0,     0,     0,     0,
       0,     0,     0,   384,     0,   386,     0,   387,   388,   389,
     390,   391,     0,     0,     0,     0,     0,   392,   393,   394,
       0,   395,     0,     0,   396,     0,     0,   397,     0,   398,
       0,   399,     0,   401,   402,   403,   404,     0,     0,     0,
     406,     0,     0,   407,   408,   409,   410,   411,   412,     0,
       0,   413,   414,   415,   416,     0,   417,   418,   419,     0,
       0,   420,   421,   422,   423,     0,     0,   424,   425,     0,
     426,   427,   428,   429,     0,     0,     0,     0,     0,   430,
     431,     0,     0,     0,     0,   433,   434,     0,     0,   435,
     436,     0,   437,   438,     0,     0,     0,     0,     0,   441,
       0,     0,   442,     0,   443,     0,   444,   445,     0,     0,
       0,     0,     0,   446,     0,   447,     0,     0,   448,     0,
       0,     0,     0,   449,     0,   450,   451,   452,   453,     0,
       0,  -533,     0,     0,     0,   454,   455,   456,     0,   457,
       0,   459,   460,     0,     0,   461,     0,     0,   462,   463,
       0,   464,   465,   466,   467,   468,     0,   469,     0,     0,
       0,     0,     0,     0,     0,     0,   470,   471,   472,     0,
     473,   474,   475,     0,     0,     0,     0,   477,     0,   478,
       0,     0,     0,     0,     0,     0,   479,   480,     0,     0,
     481,     0,   482,     0,   483,   484,     0,     0,     0,   485,
     486,   487,   488,   489,   490,   491,   492,     0,   493,   494,
     495,     0,   497,   498,   499,   500,   501,   502,     0,   503,
     504,   505,   506,   507,   508,   509,   510,   511,   512,    95,
      96,     0,    97,    98,    99,   100,   101,     0,     0,   102,
       0,     0,     0,     0,   103,     0,     0,     0,     0,   105,
     106,   107,   108,   109,   110,     0,  -511,     0,     0,     0,
     112,     0,     0,     0,   113,     0,     0,   114,   115,   116,
       0,   117,     0,     0,     0,     0,     0,   120,  2990,     0,
     121,   122,     0,   123,   124,     0,     0,     0,     0,   127,
     128,   129,  2991,   131,   132,     0,   133,   134,     0,   135,
     136,     0,   138,     0,   140,   141,   142,   143,   144,   145,
       0,     0,   146,   147,     0,   148,   149,   150,     0,   152,
       0,     0,     0,   153,     0,     0,     0,     0,   154,     0,
       0,   155,     0,     0,     0,   156,   157,   158,     0,     0,
     159,     0,     0,     0,     0,   160,     0,     0,     0,     0,
       0,     0,   162,   163,     0,   164,     0,     0,     0,     0,
       0,   165,     0,     0,     0,     0,   166,   167,   168,   169,
       0,     0,     0,     0,     0,     0,   171,   172,   173,     0,
       0,     0,   174,     0,     0,     0,   176,   177,   178,   179,
       0,     0,   180,   181,     0,   182,   183,   184,   185,   186,
       0,     0,     0,   188,   189,   190,   191,   192,     0,     0,
     193,   194,  2992,   195,   196,   197,   198,   199,     0,     0,
       0,     0,     0,     0,     0,   202,   203,     0,     0,     0,
       0,     0,   204,     0,   205,   206,   207,   208,     0,   209,
       0,   210,     0,     0,     0,     0,   212,     0,     0,     0,
       0,   214,   215,     0,     0,     0,   216,   217,   218,     0,
    2993,     0,   219,     0,   221,     0,     0,   222,     0,     0,
       0,     0,   223,   224,     0,     0,     0,     0,     0,   226,
       0,     0,     0,   227,   228,     0,   229,   230,  2994,     0,
       0,   231,     0,   232,     0,     0,     0,   234,     0,     0,
     235,  2995,     0,   236,   237,     0,     0,     0,     0,     0,
     238,   239,     0,   240,     0,   241,     0,   242,   243,     0,
       0,     0,     0,  -533,     0,     0,   244,     0,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,     0,   263,   264,   265,
       0,   266,   267,   268,   269,     0,   270,   271,     0,     0,
       0,     0,   272,   273,   274,   275,   276,   277,     0,     0,
     278,   279,     0,   280,     0,   281,     0,   282,   283,   284,
     285,   286,   287,   288,   289,   290,     0,     0,   291,   292,
       0,     0,   293,   294,   295,   296,   297,     0,     0,     0,
       0,   299,     0,     0,     0,   300,     0,   301,   302,     0,
     303,   304,  2996,     0,     0,   306,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   307,   308,   309,     0,   310,
       0,   311,     0,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,     0,     0,     0,     0,   324,   325,     0,
     326,     0,   327,   328,   329,   330,   331,     0,   332,   333,
     334,     0,     0,   335,     0,     0,     0,   336,   337,     0,
     338,   339,     0,     0,   340,   341,   342,   343,   344,     0,
     345,   346,     0,   347,     0,   349,  -533,     0,   350,   351,
     352,   353,   354,   355,   356,   357,     0,     0,     0,   359,
     360,     0,   361,   362,   363,  2997,   364,     0,     0,     0,
     366,   367,   368,     0,   369,     0,   370,   371,     0,   373,
     374,     0,     0,   375,   376,     0,     0,     0,   377,   378,
     379,   380,     0,     0,     0,   381,     0,     0,     0,     0,
       0,     0,     0,   384,     0,   386,     0,   387,   388,   389,
     390,   391,     0,     0,     0,     0,     0,   392,   393,   394,
       0,   395,     0,     0,   396,     0,     0,   397,     0,   398,
       0,   399,     0,   401,   402,   403,   404,     0,     0,     0,
     406,     0,     0,   407,   408,   409,   410,   411,   412,     0,
       0,   413,   414,   415,   416,     0,   417,   418,   419,     0,
       0,   420,   421,   422,   423,     0,     0,   424,   425,     0,
     426,   427,   428,   429,     0,     0,     0,     0,     0,   430,
     431,     0,     0,     0,     0,   433,   434,     0,     0,   435,
     436,     0,   437,   438,     0,     0,     0,     0,     0,   441,
       0,     0,  3215,     0,   443,     0,   444,   445,     0,     0,
       0,     0,     0,   446,     0,   447,     0,     0,   448,     0,
       0,     0,     0,   449,     0,   450,   451,   452,   453,     0,
       0,  -533,     0,     0,     0,   454,   455,   456,     0,   457,
       0,   459,   460,     0,     0,   461,     0,     0,   462,   463,
       0,   464,   465,   466,   467,   468,     0,   469,     0,     0,
       0,     0,     0,     0,     0,     0,   470,   471,   472,     0,
     473,   474,   475,     0,     0,     0,     0,   477,     0,   478,
       0,     0,     0,     0,     0,     0,   479,   480,     0,     0,
     481,     0,   482,     0,   483,   484,     0,     0,     0,   485,
     486,   487,   488,   489,   490,   491,   492,     0,   493,   494,
     495,     0,   497,   498,   499,   500,   501,   502,     0,   503,
     504,   505,   506,   507,   508,   509,   510,   511,   512,    95,
      96,     0,    97,    98,    99,   100,   101,     0,     0,   102,
       0,     0,     0,     0,   103,     0,     0,     0,     0,   105,
     106,   107,   108,   109,   110,     0,     0,     0,     0,     0,
     112,     0,     0,     0,   113,     0,     0,   114,   115,   116,
       0,   117,     0,     0,     0,     0,     0,   120,     0,     0,
     121,   122,     0,   123,   124,     0,     0,     0,     0,   127,
     128,   129,   130,   131,   132,     0,   133,   134,     0,   135,
     136,     0,   138,     0,   140,   141,   142,   143,   144,   145,
       0,     0,   146,   147,     0,   148,   149,   150,     0,   152,
       0,     0,     0,   153,     0,     0,     0,     0,   154,     0,
       0,   155,     0,     0,     0,   156,   157,   158,     0,     0,
     159,     0,     0,     0,     0,   160,     0,     0,     0,     0,
       0,     0,   162,   163,     0,   164,     0,     0,     0,     0,
       0,   165,     0,     0,     0,     0,   166,   167,   168,   169,
       0,     0,     0,     0,     0,     0,   171,   172,   173,     0,
       0,     0,   174,     0,     0,     0,   176,   177,   178,   179,
       0,     0,   180,   181,     0,   182,   183,   184,   185,   186,
       0,     0,     0,   188,   189,   190,   191,   192,     0,     0,
     193,   194,     0,   195,   196,   197,   198,   199,     0,     0,
       0,     0,     0,     0,     0,   202,   203,     0,     0,     0,
       0,     0,   204,     0,   205,   206,   207,   208,     0,   209,
       0,   210,     0,     0,     0,     0,   212,     0,     0,     0,
       0,   214,   215,     0,     0,     0,   216,   217,   218,     0,
       0,     0,   219,     0,   221,     0,     0,   222,     0,     0,
       0,     0,   223,   224,     0,     0,     0,     0,     0,   226,
       0,     0,     0,   227,   228,     0,   229,   230,     0,     0,
       0,   231,     0,   232,     0,     0,     0,   234,     0,     0,
     235,     0,     0,   236,   237,     0,     0,     0,     0,     0,
     238,   239,     0,   240,     0,   241,     0,   242,   243,     0,
       0,     0,     0,     0,     0,     0,   244,     0,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,     0,   263,   264,   265,
       0,   266,   267,   268,   269,     0,   270,   271,     0,     0,
       0,     0,   272,   273,   274,   275,   276,   277,     0,     0,
     278,   279,     0,   280,     0,   281,     0,   282,   283,   284,
     285,   286,   287,   288,   289,   290,     0,     0,   291,   292,
       0,     0,   293,   294,   295,   296,   297,     0,     0,     0,
       0,   299,     0,     0,     0,   300,     0,   301,   302,     0,
     303,   304,   305,     0,     0,   306,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   307,   308,   309,     0,   310,
       0,   311,     0,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,     0,     0,     0,     0,   324,   325,     0,
     326,     0,   327,   328,   329,   330,   331,     0,   332,   333,
     334,     0,     0,   335,     0,     0,     0,   336,   337,     0,
     338,   339,     0,     0,   340,   341,   342,   343,   344,     0,
     345,   346,     0,   347,     0,   349,     0,     0,   350,   351,
     352,   353,   354,   355,   356,   357,     0,     0,     0,   359,
     360,     0,   361,   362,   363,     0,   364,     0,     0,     0,
     366,   367,   368,     0,   369,     0,   370,   371,     0,   373,
     374,     0,     0,   375,   376,     0,     0,     0,   377,   378,
     379,   380,     0,     0,     0,   381,     0,     0,     0,     0,
       0,     0,     0,   384,     0,   386,     0,   387,   388,   389,
     390,   391,     0,     0,     0,     0,     0,   392,   393,   394,
       0,   395,     0,     0,   396,     0,     0,   397,     0,   398,
       0,   399,     0,   401,   402,   403,   404,     0,     0,     0,
     406,     0,     0,   407,   408,   409,   410,   411,   412,     0,
       0,   413,   414,   415,   416,     0,   417,   418,   419,     0,
       0,   420,   421,   422,   423,     0,     0,   424,   425,     0,
     426,   427,   428,   429,     0,     0,     0,     0,     0,   430,
     431,     0,     0,     0,     0,   433,   434,     0,     0,   435,
     436,     0,   437,   438,     0,     0,     0,     0,     0,   441,
       0,     0,   442,     0,   443,     0,   444,   445,     0,     0,
       0,     0,     0,   446,     0,   447,     0,     0,   448,     0,
       0,     0,     0,   449,     0,   450,   451,   452,   453,     0,
       0,     0,     0,     0,     0,   454,   455,   456,     0,   457,
       0,   459,   460,     0,     0,   461,     0,     0,   462,   463,
       0,   464,   465,   466,   467,   468,     0,   469,     0,     0,
       0,     0,     0,     0,     0,     0,   470,   471,   472,     0,
     473,   474,   475,     0,     0,     0,     0,   477,     0,   478,
       0,     0,     0,     0,     0,     0,   479,   480,     0,     0,
     481,     0,   482,     0,   483,   484,     0,     0,     0,   485,
     486,   487,   488,   489,   490,   491,   492,     0,   493,   494,
     495,     0,   497,   498,   499,   500,   501,   502,     0,   503,
     504,   505,   506,   507,   508,   509,   510,   511,   512
  };

  const short
  Parser::yycheck_[] =
  {
      10,     0,    19,    18,    19,    15,   553,   554,    18,   633,
     629,   778,    75,   560,    24,    25,  1021,   758,  1058,  1035,
    1058,   626,   625,    48,   796,    18,   853,  1287,   981,  2298,
    1555,    30,  1876,  1747,  1050,  1853,    18,  2268,    48,   576,
    1300,  1506,  1507,  2280,  1096,  1399,  1400,  2157,  1604,   598,
     635,   993,   994,  1407,  1408,  1409,  1851,   692,  1749,  1968,
      79,    52,     0,   600,     0,    75,    76,     0,  1161,   127,
     837,    18,    19,   622,    19,   660,    35,  1635,    18,    19,
      90,  1097,  1098,     0,    21,  1101,  1102,  1103,  1104,     0,
    1106,  1107,  1108,  1109,  1110,  1111,  1112,  1113,    73,  1558,
    1559,    73,    62,   132,   671,    71,     0,  1566,  1567,  1568,
    1569,  1570,  1571,  1572,  1573,  1971,  1688,  1673,    48,  1061,
      71,    18,    19,   692,  1483,  1484,    83,   237,    78,  2497,
      18,    19,    73,   384,    18,    19,    18,    19,   169,  1711,
       5,   765,  1714,     0,  2606,   385,  1605,  1606,  1607,  1608,
    1609,  1610,  1611,  1725,  1613,  1614,    18,    19,  1617,  1618,
     104,  1620,  1621,  1622,    21,  1624,    22,  1626,  1627,  1628,
    1629,   132,  1631,  1632,  1633,  1634,    18,    19,   164,   203,
     705,  1892,  1893,  1894,  1895,    23,   969,    77,   755,   756,
     757,   127,   203,    71,  1905,  1906,     0,    35,  1562,   766,
      37,  1912,  1292,    18,    19,  1916,   112,    18,    19,    18,
      19,    49,   299,    18,    19,  1926,   127,    21,     0,  1930,
     282,    18,    70,    61,    62,  1635,   380,   374,    73,   814,
     334,   166,    21,   282,  1562,   159,    18,    19,    64,    21,
     395,    18,    19,    18,    19,  1562,   170,   156,   203,  1743,
      33,   156,    70,    18,    19,  2625,   203,    18,    19,    23,
     200,    88,  1590,   848,   379,   200,    18,    19,    71,  1562,
    1011,   472,   501,   558,   218,    73,   823,   133,   863,  1020,
     827,   648,  1291,    18,    19,  2289,   247,    19,  2519,    18,
      19,    18,    19,    18,    19,    18,    19,    61,    62,    18,
      19,   156,  1938,  2413,    57,  2767,    18,    19,  2418,   509,
      18,    19,   440,  2157,   228,  2425,   237,   285,  1562,   203,
      93,   858,    18,    19,   582,   862,   395,    18,    19,   582,
     867,    18,    19,    65,   903,    18,    19,    18,    19,    85,
     582,   192,    13,    18,    19,  2488,    25,  2771,   885,   886,
      18,    19,    18,    19,    13,   411,    18,    19,   509,   204,
    2784,   429,  2053,   300,  2055,   914,  1138,    18,    19,   552,
     411,   203,  1314,   199,    71,   462,   646,    18,    19,   269,
     237,    18,    19,   557,   376,   572,    18,    19,   225,   576,
     546,    18,    19,   129,   222,    77,  1855,  1856,  1752,    18,
      19,   192,  1174,    18,    19,   974,   123,  1979,    18,    19,
     374,    65,   222,    21,   652,  1357,    18,    19,   292,   648,
    1879,   203,   273,  1439,   256,   581,   595,    18,    19,   437,
     396,  2003,   376,  2005,  1450,   865,   218,  1453,    18,    19,
      48,   223,   270,    47,  2713,   396,  2018,   394,  2020,  1232,
     397,   634,  1911,   883,   394,  1914,     9,   397,  2030,   423,
     270,   891,  1974,   455,  1099,  2702,   640,   897,  1092,   393,
     256,  2841,    19,   256,   171,   146,    18,    19,    31,   283,
      18,   489,   273,  2907,  1009,   636,   477,   146,   300,  1230,
     553,  1531,   762,   279,   557,   174,  1268,   394,  1023,   282,
     397,   283,  1069,   440,   567,   758,   394,   765,   533,   397,
     394,   762,   394,   397,   577,   397,   758,   166,   396,   255,
     648,   489,   762,   533,    52,   376,   582,  2670,   596,   758,
    1099,   263,   394,  1100,  2538,   397,  1277,    18,    19,    18,
      19,   582,   463,   553,   613,  2915,   411,   557,   558,  2043,
    1117,   408,   394,     0,   300,   397,    21,   567,    18,    19,
     647,   762,   762,  2800,  1133,   558,    65,   577,   166,  2413,
     556,  1661,  2803,  1663,  2418,   510,   558,  3039,  2214,   394,
     297,  2425,   397,   394,   646,   394,   397,   269,   397,   394,
     619,   395,   397,   396,  1229,   742,  1143,   646,   708,   425,
    1167,   968,   612,   385,   408,   759,   463,   762,   435,   263,
    1245,   642,   394,   395,   624,   397,   626,   394,   222,   394,
     397,   736,   397,   376,   634,   635,   636,   646,   653,   394,
     629,   572,   397,   394,   644,   645,   397,  2868,   552,    18,
      19,  2459,   394,   653,   501,   397,    18,    19,   593,   659,
     660,   180,  2210,  1662,   758,   605,  2766,   581,   619,   394,
    1229,  1230,   397,   380,  1213,   394,   449,   394,   397,   394,
     397,   394,   397,   633,   397,   394,  1245,   735,   397,  1506,
    1507,  1218,   394,  2539,  1221,   397,   394,  1224,   696,   397,
    2485,  1432,   649,    18,    19,   705,  2050,   760,   394,   396,
    2054,   397,   147,   394,   552,  1798,   397,   394,    11,  1294,
     397,   394,   501,   394,   397,  1767,   397,   654,   648,   394,
    1289,   109,   397,  2082,    18,    19,   394,   572,   394,   397,
    2286,   397,   394,  2289,   552,   397,   645,  1509,   762,  1829,
     645,  1524,   616,   394,  1516,   582,   397,  3115,  3116,  2113,
     760,   762,   658,   394,    18,    19,   397,   394,   648,   758,
     397,   558,   394,  1546,   263,   397,   710,   394,  1773,  1774,
     397,   762,   237,   611,   572,   394,  2288,  1719,   397,   394,
     670,   671,   397,   758,   394,  2113,   758,   397,   614,  1561,
     645,   648,   394,   759,  1429,   397,  2113,    18,    19,   758,
    2210,    18,    19,   394,   814,  2330,   397,   762,   759,    18,
      19,  2139,   759,   828,   394,  2633,  1451,   397,   828,   759,
    2113,   846,   841,   761,   849,   761,   845,   934,   761,   762,
     562,   613,   842,   843,   844,   828,   846,   847,   848,   849,
    1782,  1366,   646,   853,   761,   762,   828,   611,   376,   859,
     761,   861,   394,   863,   147,   397,   866,    77,   921,   648,
    1429,   510,   759,  1604,   646,   762,   648,   761,   762,  2113,
     173,   759,  1157,   372,   762,    18,    19,   759,   762,  1164,
     762,   759,  1451,  2594,   934,  1452,  2577,   604,  2683,   493,
     663,   664,  1639,   903,  1635,   905,   906,  1638,  1639,  2808,
     762,   758,   758,   206,   761,   762,  1647,   352,   562,   127,
     920,   921,   510,   394,   934,   394,   397,   759,   397,   982,
    1747,   946,  2766,  1508,    18,    19,    18,    19,  1968,   948,
     712,  1971,  1673,  1971,   394,   501,   946,   397,   422,   949,
     950,  1933,   952,   472,   759,  2659,  2660,  1494,   759,   477,
     759,   961,  1501,   762,   759,   980,   981,   761,    18,    19,
     480,   986,   972,  1532,   974,   975,  1515,    18,    19,   758,
     980,   981,   982,  1542,  1543,  1544,   986,   759,   203,   761,
     762,   509,  2538,   215,   759,   762,  2558,   762,   670,   671,
      18,    19,   340,   123,    18,    19,   501,   762,   463,  1009,
     245,   762,    18,    19,   197,   173,   501,  3117,   204,    13,
     762,   256,  1011,  1023,   166,   394,  2068,  2371,   397,  2373,
     558,  1020,   394,    18,    19,   397,  1533,   762,   215,   294,
      21,   828,   759,   762,   422,  1776,   501,   762,   206,   762,
      86,    18,    19,   762,   113,   544,   201,   116,  1058,   269,
     762,  2091,   236,  1116,   762,   387,  3325,   289,  3295,   352,
     106,  3171,   145,   562,  1127,  1532,   762,  2532,    33,   394,
    2888,   762,   397,    18,    19,   762,  1543,  1544,  1141,   762,
    1852,   762,   648,   387,    12,   127,  3317,   762,   300,  1519,
    1520,   759,   357,   759,   125,   501,   582,   759,  1870,  1871,
     394,  1126,   289,   397,   585,  2819,  1116,   681,   759,   245,
    1120,  1858,   147,    19,  1124,    53,  1126,  1127,   759,   646,
     256,  1131,   759,  1133,   427,   625,    64,   759,  1138,  1139,
     394,  1141,   759,   397,  1881,  1907,  1908,  1909,  1910,   104,
     759,   129,   146,   648,   759,   370,   262,  1157,    19,   759,
    1922,  1258,   127,  1660,  1164,   400,   655,   759,   123,   124,
     218,   379,    13,   737,  1157,  2879,    23,   297,   759,  1179,
     145,  1164,  1739,   394,  1184,  1157,   397,   394,    35,   759,
     397,   109,  1164,   648,  1751,   394,   166,   244,   397,   718,
     719,   579,    49,    18,    19,    22,    21,  1222,  1223,  2724,
    2911,   129,  1265,  1770,    61,    62,  1682,    23,  1258,   251,
    1686,   407,  1222,  1223,  2206,   101,  2208,   759,   209,    35,
    1230,   278,   253,   254,    18,    19,   123,   420,   440,   194,
    1971,  1230,   580,    49,   622,   762,    18,    19,  1258,   542,
      26,   147,   648,   185,   764,    61,    62,  2200,  1263,   518,
     380,   394,   121,  1822,   397,  1265,   339,    13,   606,   427,
    1285,  1538,   762,  1540,   400,  1275,    77,   255,  1278,  1279,
     123,   124,   758,  3117,   506,  1285,   147,   650,  1288,  1289,
     759,  1828,   284,  1820,  1294,   287,   251,   552,   746,  3108,
     828,    77,  3111,   758,   597,   146,  2301,   194,    84,   759,
     394,   759,   394,   397,    22,   397,   133,   752,   753,   754,
     755,   501,  2240,  2241,  1821,  3029,  2244,   352,   204,   506,
    2325,  2326,   654,   519,   440,   463,   368,  3171,   842,   843,
     844,    13,   297,   847,   394,  2263,   233,   397,  2508,  2344,
    2510,   194,   241,   394,   143,   123,   397,   861,   617,   127,
     654,   289,   866,   164,  1417,  1822,  1366,  1367,   244,   158,
    1157,   935,  1965,   232,   339,   293,   394,  1164,  2140,   397,
     394,   270,   147,   397,   542,   746,    94,   574,   394,   265,
     759,   397,   602,     3,  2843,  2739,   129,   759,   759,   762,
     146,     0,   278,   662,  2336,  2167,    16,   183,  2170,   394,
     297,   576,   397,   440,   190,   625,  2422,  1417,  2424,     0,
     130,   442,   974,   758,  3233,   380,   194,   394,    12,   764,
     397,   203,   625,    32,   461,   237,   236,   484,   104,   597,
      21,   625,   243,  1432,   759,   437,   950,   379,   952,   404,
     630,   631,   654,   203,   297,  2437,   352,   123,   124,   394,
     670,   671,   397,   746,    26,   748,   237,   243,   648,   752,
     753,   754,   755,    77,   146,   759,  2636,   504,  2209,   397,
      79,   509,     0,   342,   604,   762,   362,   346,   513,   514,
    2740,   352,  1497,   380,   353,   123,   124,  1497,   300,  2092,
    2398,   100,  2400,    21,  1504,   759,  1506,  1507,  1508,  2539,
    1563,  2539,   172,   758,  1497,    77,   226,  2279,   127,   764,
     101,   758,    84,   122,   759,  1497,   283,   586,   194,   297,
     589,  1531,  1532,   132,   133,   134,  3124,   380,   559,  1592,
    2458,   200,  1542,  1543,  1544,   154,  2994,  2995,   759,  1549,
    2468,   150,   759,   552,   330,  2286,  1997,  2475,  2289,   572,
     759,   404,   625,  1563,    18,    19,   194,   172,    22,   762,
     371,   764,  1839,  1840,   294,   434,   377,   176,   758,   394,
     552,  1133,   397,   101,   193,   251,   163,   352,   123,   507,
     300,  2509,  1592,  3042,    13,   371,  3045,  3046,  3047,  3048,
    1904,   377,   164,   762,  1619,  2611,  2615,  2616,   484,   695,
     394,  2620,   380,   397,  1918,  1919,   109,   513,   514,  1619,
     706,   183,   394,   204,    43,   397,   759,   695,   190,  1157,
     695,   297,   764,  3334,   436,  1635,  1164,   218,   706,   243,
     499,   706,   223,  1648,   759,   446,  1635,   762,   247,   604,
     585,  3352,   513,   514,   759,  1670,   574,   762,   576,   194,
     109,   579,   758,   244,  3113,  3114,    80,   599,    82,   297,
    1670,  3372,   271,  3122,    33,   759,    95,   759,  1230,   133,
      99,   243,   558,   615,   265,   759,   204,   695,   762,   288,
      48,    13,   610,   292,   166,  3283,  3284,   278,   706,   762,
     218,   764,   283,   199,   622,   223,   123,    18,    19,   759,
    1497,   240,   241,   127,   380,  2532,     7,   604,   759,  2836,
    2837,   746,   123,   748,   173,  2487,   244,   752,   753,   754,
     755,   147,    61,    62,   227,   101,  2331,  1289,   404,   268,
     154,   759,    71,  1743,   764,   759,   572,   265,   513,   514,
     576,   177,   380,   759,  2516,   556,   711,   206,    61,    62,
     278,   604,   297,   759,   611,   283,   762,   371,   330,  3217,
    3218,   252,   123,   377,   759,  1279,   127,   194,  2808,   193,
     556,   362,  2899,  1783,   643,  2226,  2903,  1776,   147,   636,
     123,  1791,   759,   194,   127,    18,    19,   765,  1851,   123,
    1853,  2796,   661,   127,   385,   611,   758,  2538,   609,   371,
     758,   327,   328,   639,   395,   377,   332,   333,  2259,  2260,
     373,   374,  1822,   422,   146,   758,   632,   633,  2590,  2591,
    2592,  2593,   758,  2595,  2596,   123,   604,   758,   204,   758,
     641,   260,   446,   194,   362,   380,  1846,    77,   156,   157,
     746,  1851,   748,  1853,   750,   751,   752,   753,   754,   755,
    1913,   194,  2780,   758,  2782,   641,   147,   385,  1868,  1869,
     194,   582,  1872,  1873,  1874,  1875,   758,   395,   244,  1932,
     297,   759,   112,   759,   762,   746,   485,   748,   758,   750,
     751,   752,   753,   754,   755,   759,   297,   256,   762,   265,
     758,   123,   501,   484,   226,   758,   194,   758,   401,   101,
     509,   758,   278,  1913,  2844,  2845,   515,   516,   411,   758,
     339,   759,  1937,   282,   762,   418,   758,  2511,   509,  1929,
    2514,  2515,  1932,  1933,   164,   758,   352,  1937,   604,   759,
     394,   289,   762,   397,  1944,   758,   297,   758,   185,   548,
    1988,   758,   556,   758,  2960,   758,  2951,   633,  1958,   758,
     636,   758,  2000,   380,   297,   758,   484,   759,  1968,  1497,
     762,  1971,   194,   297,   764,   256,   604,   558,   427,   380,
     203,   746,  1971,   748,   403,   750,   751,   752,   753,   754,
     755,   509,   759,   352,   556,   762,   362,   762,    18,    19,
     759,   759,  2819,   762,   762,   609,   758,    21,   762,   297,
     501,   241,   204,    27,   373,   374,   758,   616,   509,   385,
     619,   759,    71,   759,   762,   624,   762,  1924,  1925,   380,
    3025,   524,   613,   447,   494,   759,   759,   641,   762,   762,
     558,  1045,  1046,  2043,   625,   711,   758,   380,   497,   648,
      64,   758,   244,   895,   896,   759,   380,    71,   762,  2059,
     147,    75,  2879,    77,   663,   646,   758,   648,   758,   604,
     758,   352,   758,   265,   758,   297,    90,    61,    62,   641,
    2842,   759,   764,   758,   762,  2138,   278,    71,   758,   758,
     449,  2091,   380,   758,   758,   613,   758,   513,   514,   329,
      84,   759,  3108,   759,   762,   758,   762,   625,   527,   758,
     758,  2111,  2112,   127,   531,   280,   759,   347,   484,   762,
     101,   759,   759,   759,   762,   762,   762,   576,   646,   622,
     648,   712,   759,   758,  1991,   762,   373,   374,  2138,   630,
     631,   371,   379,   762,   759,   758,   160,   762,   597,   256,
     569,   758,    37,   259,   513,   514,   147,   648,   380,   762,
    2922,    27,   761,  2925,   752,   759,   758,   526,   762,  3175,
     362,   394,   758,   622,   397,  3087,  3182,   758,   759,   759,
     761,   762,   762,   203,  2222,  2200,  2781,   604,   759,   758,
     639,   762,   558,   385,   712,   209,   570,  3227,    64,  3227,
    2200,    32,   714,   604,   759,    71,  2206,   762,  2208,    75,
    2210,    77,  3029,   725,   536,   537,  2216,   539,   540,   541,
    2258,   187,   759,   204,    90,   762,   738,   739,  2266,  3235,
     758,   116,   513,   514,   758,  2273,   558,   758,   123,   124,
     200,   759,   147,   761,   762,     0,   200,  3277,    79,  3277,
     138,   139,   140,   604,   758,  2869,   270,   758,   758,   625,
     758,   127,    21,   244,   758,   352,    21,   758,   758,   100,
    2285,   604,    27,    28,   758,  3305,   762,  3305,    89,   762,
     604,    57,   455,   177,   265,  2285,   765,     7,   112,   111,
     624,   122,   484,  3205,   160,     7,  3326,   278,  3326,   234,
     185,   132,   133,   134,   206,   500,   542,   639,    63,   194,
     147,  1872,  1873,  1874,  1875,   762,   604,   762,    71,   150,
     147,   759,    77,   759,   645,   759,   556,   146,    83,    84,
     746,    10,   748,    88,   750,   751,   752,   753,   754,   755,
     225,   762,   764,   759,   574,   176,   759,   759,   759,   759,
    3112,   759,   759,   759,   759,   759,   510,   112,   758,   373,
     374,   352,   599,  2220,  2221,   379,   558,   282,  2225,   242,
     646,   385,   127,   758,   394,   262,   131,   397,   615,   440,
    3292,   362,   604,   764,   764,   764,  2386,   746,   582,   748,
    3302,   750,   751,   752,   753,   754,   755,   762,  2398,   203,
    2400,  3313,  2402,   759,   270,   625,  2459,  2264,   435,   164,
     764,   425,   297,  2270,  2271,  2272,   247,    60,  2275,   523,
     408,   762,   608,   293,  3186,  3187,   513,   514,   653,  3341,
    3342,   648,  2485,   625,   764,   758,   762,  2437,    13,   759,
     271,   759,   759,   759,  3175,  2445,  2451,   352,   762,   746,
     759,   704,   759,  3067,   759,   582,   762,   288,   762,  2459,
     759,   292,   764,   764,   764,   746,  2481,   748,   758,   750,
     751,   752,   753,   754,   755,   755,    34,    35,   363,   758,
     762,  2481,   237,   654,   759,  2485,   241,   289,   762,   218,
     375,   505,   582,   248,   379,   380,   440,   380,   762,   166,
     167,    77,  3097,   484,    62,   759,   398,   373,   374,   759,
     759,   759,   997,   379,   269,   352,   759,   265,    94,   385,
     265,  2521,   513,   514,   758,   352,   218,   282,  2528,   164,
     582,   582,  2532,   142,   582,   582,   142,  2537,    48,  2539,
     207,   480,   556,  1028,   758,  1030,   752,    10,   759,   161,
    2111,  2112,    15,   220,   759,   113,  1041,   251,   116,   425,
     136,    24,    25,  2578,   251,  3160,  3161,   125,  3163,   759,
     759,   764,   759,   764,   329,   759,   759,   558,  2578,    48,
    2633,   223,   758,   265,   759,    48,   391,   265,    27,    28,
     265,   422,   347,   265,   261,   758,   385,   525,   385,    21,
     614,   395,   385,  3360,  2604,   758,  2606,   274,   513,   514,
     758,   758,    75,    76,   758,  2615,  2616,  3231,    62,   253,
    2620,   253,   759,   759,    63,    48,  3221,    90,  3223,  3224,
    2683,   503,   702,  2633,   301,   702,   762,   759,    77,   505,
     712,   762,   252,   265,    83,    84,   265,   402,   758,    88,
     758,   762,   556,   408,   485,   758,   411,  2934,   759,   746,
     251,   748,   104,   750,   751,   752,   753,   754,   755,   409,
     501,   759,   759,   112,   758,   270,   513,   514,   509,   758,
     270,   758,   625,  2683,   515,   516,   513,   514,   127,   421,
     556,   448,   131,   758,   758,   253,   272,   582,   495,   366,
     525,   586,   759,   762,   589,   283,   720,   153,   463,   267,
     764,   380,   762,   759,   599,   759,   203,   548,   408,   604,
     576,   759,   607,   758,   758,   164,   564,   758,   742,    12,
     759,   742,   758,   758,   758,   490,    35,    35,  3352,   636,
     742,   619,  3351,  2743,   127,   270,   501,  3024,   614,    64,
     209,   270,   380,    35,   759,   746,   762,   748,  3372,   750,
     751,   752,   753,   754,   755,   200,   648,  2767,   759,  3306,
     270,  2771,   759,   762,   350,  2775,   759,   759,    48,   759,
     759,   759,   759,   759,  2784,   616,    21,   762,   619,  2789,
     395,   762,   759,   624,   549,   550,   551,   373,   374,   121,
     376,   556,   241,   361,   759,   121,   364,    48,  2808,   248,
     758,   166,   758,   758,   582,   582,  2821,   648,  1303,   574,
     758,   582,   577,    21,   375,   631,  2826,    15,    21,  2829,
     269,   762,   663,   385,   480,  2888,   155,   764,   619,   380,
      48,   746,   758,   748,   284,   750,   751,   752,   753,   754,
     755,   408,   380,    81,   720,   758,   392,    64,   613,    64,
     491,   746,   438,   748,  3141,   385,   759,   762,   759,   392,
     759,    77,   762,   758,   392,  3152,   742,  3154,   762,   693,
     491,   489,   758,  1368,   630,   706,  1371,  2940,  2888,   706,
     329,   706,   405,   648,   326,   547,  1381,   423,   149,   520,
     500,   542,   542,   542,   542,   542,   136,  2907,   347,   746,
      19,   748,    73,   750,   751,   752,   753,   754,   755,   746,
     234,   748,   759,   758,   751,   752,   753,   754,   755,   233,
     385,   162,   112,   112,  2934,   645,    32,   766,   491,   703,
    2940,   706,    48,   285,   164,   758,   142,   142,   584,   758,
     645,   203,    32,    48,    48,   159,  2963,    48,   237,   563,
     518,   564,   252,   402,   161,  2965,   542,    48,   761,    48,
      48,   380,   411,   758,  3251,     6,   161,   385,   385,   645,
     236,  3258,   737,   126,   761,   509,   299,   766,   758,   619,
     132,  2991,    54,   585,  2994,  2995,  2996,   149,   761,   161,
     585,    54,   762,   758,   221,   761,   761,   161,   762,   200,
     200,   200,   585,   127,   462,   631,   202,    30,   647,  3008,
    3008,    47,  1134,  1891,  3024,   911,  1781,  1896,  1901,   546,
    1508,   589,  1258,  1275,  1785,  1947,  1950,  2210,  3315,  3039,
    2499,  2647,     9,  3050,  2215,  3343,  3323,  3248,  3066,  3144,
    3248,   490,  3329,  3157,  3066,  3218,    84,  3156,  3066,   617,
    3066,    84,  3066,  3066,  3066,    85,  3066,  3066,   648,  3066,
     533,  3066,  3066,  3066,  3066,  2139,   648,  3077,  3355,  3356,
     648,  1639,   545,  1878,  1272,  2209,  3086,  3087,  1647,  3366,
     553,  2113,  1638,  3173,   557,  2762,  2892,  2895,  3240,  3235,
    3238,  1299,  3050,  2488,   567,  2052,  1404,  2742,  2819,  2474,
     549,   550,   551,  3029,   577,  2906,  2899,   556,  3118,  2903,
    2840,  2849,  2216,   826,  2784,  2775,  1497,    18,  1164,    18,
    1686,  1776,  1230,  1542,  1230,   574,  1230,  1230,   577,  3192,
     802,  3141,  3195,  1023,  1230,   997,  1819,  2934,   612,   612,
    2743,  2734,  3152,   905,  3154,  1778,  2539,  2814,  2580,  2141,
    2241,   624,  2275,   626,  2274,  1816,  2503,  3061,  2754,  1214,
     648,   634,   635,   636,   613,  2981,  2521,  2701,   852,   880,
    3372,   644,   645,  1215,  3334,   610,  3175,  1152,  1150,  2544,
     653,   824,  3192,  2091,  2394,  3195,   659,   660,    91,   653,
     975,  1126,  3102,  3167,  3305,  3205,  3326,  2994,  2995,  1228,
     535,   798,    -1,    -1,    -1,    -1,    -1,  3217,  3218,    -1,
    3273,    -1,    -1,    -1,    -1,    -1,    -1,  3227,    -1,    -1,
      -1,  3238,    -1,    -1,    -1,    -1,    -1,  3024,    -1,    -1,
      -1,    -1,   705,    -1,    -1,    -1,    -1,     0,    -1,    -1,
      -1,  3251,    -1,  3253,    -1,    -1,  3256,    -1,  3258,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    21,    -1,
      -1,    -1,    -1,  3273,    27,    28,    -1,  3277,    -1,  3066,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  3292,    -1,    -1,    -1,    -1,   760,   737,  3086,
    3087,    -1,  3302,    -1,    -1,  3305,    -1,    -1,    -1,    -1,
      63,    -1,    -1,  3313,  3314,  3315,  3316,    -1,    -1,    -1,
      -1,    -1,    -1,  3323,    77,    -1,  3326,    -1,    -1,  3329,
      83,    84,    -1,    -1,    -1,    88,    -1,    -1,    -1,    -1,
      -1,  3341,  3342,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   814,  3352,    -1,  3141,  3355,  3356,    -1,    -1,   112,
      -1,    -1,  3351,    -1,    -1,  3152,  3366,  3154,    -1,    -1,
      -1,    -1,  3372,    -1,   127,    -1,    18,    19,   131,   842,
     843,   844,    -1,   846,   847,   848,   849,    -1,    -1,    -1,
     853,    -1,    -1,    -1,    -1,    -1,   859,    -1,   861,    -1,
     863,    -1,    -1,   866,    -1,    -1,  2934,    -1,    -1,    -1,
      -1,   164,    -1,    -1,    -1,    -1,    -1,    -1,  3205,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    3217,  3218,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     903,    -1,   905,   906,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   920,   921,    -1,
      -1,    -1,    -1,    -1,  3251,    -1,  2994,  2995,    -1,    -1,
      -1,  3258,    -1,    -1,    -1,   117,   118,   119,   120,   121,
      -1,    -1,    -1,   946,   237,    -1,   949,   950,   241,   952,
      -1,    -1,    -1,    -1,    -1,   248,  3024,    -1,   961,    -1,
      -1,    -1,    -1,    -1,    -1,  3292,    -1,    -1,    -1,   972,
      -1,   974,   975,    -1,    -1,  3302,   269,   980,   981,   982,
      -1,    -1,    -1,   986,    -1,    -1,  3313,    -1,  3315,   117,
     118,   119,   120,   121,    -1,    -1,  3323,    -1,  3066,    -1,
      -1,    -1,  3329,    -1,    -1,    -1,  1009,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  3341,  3342,    -1,    -1,  3086,  3087,
    1023,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3355,  3356,
      -1,    -1,    -1,    -1,    -1,    -1,   329,    -1,    -1,  3366,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   229,   230,   231,
     232,    -1,    -1,    -1,   347,  1058,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  3141,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  3152,    -1,  3154,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   229,   230,   231,   232,    -1,    -1,    -1,    -1,   402,
      -1,    -1,    -1,  1116,    -1,   408,    -1,  1120,   411,    -1,
      -1,  1124,    -1,  1126,  1127,    -1,    -1,    -1,  1131,    -1,
    1133,  1134,    -1,    -1,    -1,  1138,  1139,  3205,  1141,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3217,
    3218,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     342,   527,   344,   345,   346,    -1,    -1,    -1,    -1,    -1,
     463,   353,    -1,    -1,    -1,    -1,  1179,    -1,    -1,   545,
      -1,  1184,    -1,  3251,    -1,    -1,    -1,    -1,    -1,    -1,
    3258,    -1,    -1,    -1,    -1,    -1,    -1,   490,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   501,    -1,
      -1,    -1,   394,    -1,   342,   397,   344,   345,   346,  1222,
    1223,    -1,    -1,    -1,  3292,   353,    -1,  1230,    -1,    -1,
      -1,    -1,    -1,    -1,  3302,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  3313,    -1,  3315,    -1,    -1,
      -1,    -1,   434,    -1,    -1,  3323,   549,   550,   551,    -1,
      -1,  3329,  1265,   556,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1275,  3341,  3342,  1278,  1279,    -1,    -1,    -1,
      -1,   574,  1285,    -1,   577,  1288,  1289,  3355,  3356,    -1,
      -1,  1294,    -1,    -1,    -1,    -1,    -1,    -1,  3366,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   434,   673,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   498,   499,    -1,    -1,
     613,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   702,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   713,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   648,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1366,  1367,    -1,    -1,    -1,    -1,    -1,
     498,   499,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   758,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     582,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1417,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   737,   811,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   582,    -1,    -1,    -1,    -1,    -1,
      -1,   643,    -1,    -1,   830,   758,    -1,    -1,   761,    -1,
      -1,    -1,   838,    -1,    -1,    -1,    -1,    -1,   660,   661,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1504,    -1,  1506,  1507,  1508,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   643,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1531,  1532,
      -1,    -1,   660,   661,    -1,    -1,    -1,    -1,    -1,  1542,
    1543,  1544,   908,    -1,    -1,    -1,  1549,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1563,    -1,    -1,    -1,    -1,    -1,    34,    35,    -1,    -1,
      -1,    -1,    40,    -1,    42,    -1,    44,    45,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1592,
      -1,    -1,    -1,    -1,    62,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1619,    -1,    -1,    -1,
      -1,   987,    -1,    -1,    -1,    -1,   992,    -1,    -1,    -1,
     996,    -1,  1635,    -1,    -1,    -1,    -1,    -1,  1004,  1005,
      -1,  1007,  1008,    -1,  1010,   113,    -1,    -1,   116,    -1,
      -1,  1017,  1018,  1019,  1020,    -1,  1022,   125,    -1,    -1,
      -1,    -1,    -1,  1029,    -1,  1031,  1032,  1670,    -1,    -1,
    1036,  1037,  1038,  1039,  1040,    -1,    -1,    -1,  1044,    -1,
     148,    -1,  1048,  1049,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1060,    -1,    -1,   165,  1064,  1065,
    1066,  1067,  1068,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1086,  1087,    -1,    34,    35,   193,    -1,   195,    -1,    40,
      -1,    42,    -1,    44,    45,    -1,    -1,    -1,    -1,    -1,
    1743,    -1,    -1,   211,   212,    -1,    -1,    -1,    -1,    -1,
      -1,    62,    -1,  1119,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1134,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1783,    -1,    -1,    -1,    -1,   253,   254,    -1,  1791,    -1,
      -1,    -1,  1158,    -1,    -1,  1161,    -1,    -1,    -1,   267,
      -1,    -1,   113,    -1,    -1,   116,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   125,    -1,    -1,    -1,   286,  1822,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   295,   296,    -1,
     298,    -1,    -1,    -1,    -1,    -1,    -1,   148,    -1,    -1,
      -1,    -1,    -1,  1846,    -1,    -1,    -1,    -1,  1851,    -1,
    1853,    -1,    -1,    -1,   165,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2934,    -1,  1868,    -1,   335,   336,   337,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   193,    -1,   195,    -1,   354,   355,   356,    -1,
      -1,    -1,    -1,   361,    -1,    -1,   364,    -1,    -1,    -1,
     211,   212,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1913,    -1,    -1,    -1,   382,   383,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2994,  2995,    -1,  1929,    -1,    -1,  1932,
    1933,    -1,    -1,    -1,  1937,    -1,    -1,    -1,    -1,  1305,
    1306,  1944,   253,   254,    -1,    -1,    -1,    -1,   416,   417,
    1316,    -1,    -1,  3024,    -1,  1958,   267,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1968,    -1,    -1,  1971,    -1,
      -1,    -1,    -1,    -1,   442,   286,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   295,   296,    -1,   298,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  3066,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  3086,  3087,    -1,    -1,    -1,
      -1,  1387,  1388,  1389,   335,   336,   337,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   505,    -1,    -1,
    2043,   509,    -1,   354,   355,   356,    -1,    -1,    -1,    -1,
     361,    -1,  1418,   364,   522,    -1,  2059,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1432,    -1,    -1,    -1,
    3141,   382,   383,    -1,  1440,    -1,  1442,    -1,    -1,    -1,
      -1,  3152,    -1,  3154,    -1,    -1,    -1,    -1,  2091,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   416,   417,    -1,  1474,    -1,
      -1,    -1,    -1,    -1,    -1,   583,    -1,    -1,   586,    -1,
      -1,   589,   590,   591,   592,    -1,    -1,    -1,    -1,    -1,
      -1,   442,    -1,    -1,  3205,  2138,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1510,    -1,  3217,  3218,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   632,   633,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    3251,    -1,    -1,    -1,    -1,    -1,    -1,  3258,    -1,  1555,
      -1,    -1,    -1,   661,   505,    -1,    -1,  2200,   509,    -1,
      -1,    -1,    -1,  2206,    -1,  2208,    -1,  2210,    -1,    -1,
      -1,   522,    -1,  2216,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  3292,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  3302,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  3313,    -1,  3315,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  3323,    -1,    -1,    -1,    -1,    -1,  3329,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    3341,  3342,   583,    -1,    -1,   586,    -1,    -1,   589,   590,
     591,   592,  2285,    -1,  3355,  3356,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   762,  3366,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1674,    -1,
      -1,    -1,    -1,  1679,  1680,    -1,    -1,    -1,  1684,    -1,
      -1,   632,   633,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1697,  1698,  1699,    -1,    -1,  1702,  1703,  1704,  1705,
    1706,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1715,
     661,  1717,  1718,    -1,    -1,  1721,  1722,  1723,    -1,    -1,
      -1,  1727,  1728,  1729,    -1,  1731,    -1,  1733,    -1,  1735,
      -1,  1737,    -1,    -1,    -1,    35,    36,    -1,    -1,    -1,
      -1,    -1,    -1,  2386,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2398,    -1,  2400,    -1,  2402,
      -1,    61,    62,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1776,    -1,    72,    73,    -1,  1781,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1798,    -1,  2437,    -1,    -1,    -1,    98,    -1,
     100,    -1,  2445,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     110,    -1,    -1,    -1,    -1,    -1,  2459,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2481,    -1,
      -1,    -1,  2485,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   163,   164,    -1,    -1,    -1,    -1,   169,
      -1,    -1,   172,    -1,    -1,    -1,    -1,    -1,  2521,    -1,
      -1,    -1,   182,    -1,    -1,  2528,    -1,    -1,    -1,  2532,
      -1,    -1,    -1,    -1,  2537,    -1,  2539,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   204,    -1,   206,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   215,    -1,   217,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2578,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2604,    -1,  2606,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1977,  2615,  2616,    -1,    -1,  1982,  2620,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   289,
    2633,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2006,  2007,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2026,    -1,    -1,   323,    -1,    -1,    -1,    -1,    -1,    -1,
    2036,    -1,  2038,    -1,  2040,    -1,    -1,    -1,    -1,    -1,
    2683,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2064,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2078,  2079,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2090,    -1,    -1,    -1,   388,    -1,
      -1,    -1,    -1,  2099,    -1,  2101,    -1,    -1,    -1,    -1,
    2743,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   415,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2767,    -1,   426,   427,  2771,   429,
     430,   431,  2775,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2784,    -1,    -1,    -1,    -1,  2789,    -1,    -1,    -1,
      -1,   451,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2808,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2826,    -1,    -1,  2829,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   506,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     520,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2888,    -1,    -1,    -1,    -1,
      -1,    -1,   552,    -1,    -1,    -1,   556,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2907,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   572,    -1,    -1,    -1,   576,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2298,    -1,    -1,    -1,   596,  2940,    -1,  2305,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2330,    -1,    -1,  2333,  2334,    -1,
      -1,    -1,    -1,    -1,   634,    -1,    -1,    -1,    -1,    -1,
    2346,    -1,   642,  2349,    -1,    -1,  2352,  2353,  2991,    -1,
      -1,    -1,    -1,  2996,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2368,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  3039,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2436,    -1,    -1,    -1,  3077,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  3118,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3192,
      -1,    -1,  3195,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2580,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  3227,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    3253,    -1,    -1,  3256,    -1,  2621,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    3273,    -1,    -1,    -1,  3277,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2661,    -1,    -1,    -1,    -1,
      -1,    -1,  3305,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  3314,    -1,  3316,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  3326,    -1,    -1,    -1,    -1,  2694,  2695,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2713,    -1,  3352,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2724,    -1,
      -1,  2727,    -1,    -1,    -1,    -1,    -1,    -1,  2734,  3372,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2814,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2862,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2881,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2944,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2975,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  3063,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  3072,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  3082,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  3149,    -1,    -1,    -1,    -1,    -1,  3155,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3175,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3204,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     5,     6,
      -1,     8,     9,    10,    11,    12,    13,    -1,    15,    -1,
      -1,    -1,    -1,    20,    -1,  3261,    23,    -1,    25,    26,
      27,    28,    29,    30,    -1,    32,    -1,    -1,    35,    36,
      37,    -1,    -1,    40,    -1,    -1,    43,    44,    45,  3285,
      47,    -1,    49,    50,    -1,    -1,    53,    54,    55,    56,
      57,    -1,    59,    60,    61,    62,    63,    -1,    65,    66,
      67,    68,    69,    70,    -1,    72,    73,    -1,    75,    76,
      77,    78,    79,    80,    81,    82,    83,    84,    85,  3325,
      87,    88,    89,    -1,    91,    92,    93,    94,    95,    -1,
      97,    98,    99,    -1,    -1,    -1,   103,   104,   105,  3345,
     107,   108,   109,    -1,   111,   112,   113,   114,   115,   116,
      -1,    -1,    -1,    -1,   121,   122,   123,   124,    -1,    -1,
     127,   128,   129,    -1,   131,    -1,    -1,    -1,    -1,    -1,
     137,    -1,    -1,    -1,   141,   142,   143,   144,   145,    -1,
      -1,    -1,   149,    -1,    -1,   152,   153,   154,    -1,    -1,
      -1,   158,    -1,    -1,   161,   162,   163,   164,   165,    -1,
      -1,   168,   169,    -1,   171,   172,   173,   174,   175,   176,
     177,    -1,   179,   180,   181,   182,   183,   184,   185,   186,
     187,    -1,   189,   190,   191,   192,   193,   194,    -1,   196,
     197,    -1,    -1,    -1,   201,   202,    -1,    -1,    -1,    -1,
      -1,   208,    -1,   210,   211,   212,   213,    -1,   215,    -1,
     217,    -1,   219,    -1,   221,   222,    -1,   224,   225,    -1,
     227,   228,    -1,    -1,    -1,   232,   233,   234,    -1,   236,
      -1,   238,   239,   240,    -1,    -1,   243,    -1,    -1,    -1,
     247,   248,   249,   250,   251,    -1,    -1,    -1,   255,    -1,
      -1,    -1,   259,   260,    -1,   262,   263,    -1,    -1,    -1,
     267,    -1,   269,    -1,    -1,   272,   273,    -1,    -1,   276,
      -1,   278,   279,   280,    -1,    -1,    -1,    -1,    -1,   286,
     287,    -1,   289,    -1,   291,    -1,   293,   294,    -1,    -1,
     297,    -1,    -1,    -1,    -1,   302,    -1,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,    -1,   323,   324,   325,   326,
     327,   328,   329,   330,   331,   332,   333,    -1,    -1,    -1,
      -1,   338,   339,   340,   341,   342,   343,    -1,    -1,   346,
     347,   348,   349,    -1,   351,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,    -1,   363,   364,   365,    -1,
      -1,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,    -1,   379,   380,   381,    -1,   383,   384,   385,   386,
     387,   388,    -1,    -1,   391,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   401,   402,   403,   404,   405,    -1,
     407,    -1,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,   419,   420,    -1,   422,   423,   424,    -1,   426,
      -1,   428,   429,   430,   431,   432,    -1,   434,   435,   436,
      -1,    -1,   439,    -1,    -1,    -1,   443,   444,    -1,   446,
     447,    -1,    -1,   450,   451,   452,   453,   454,    -1,   456,
     457,    -1,   459,   460,   461,    -1,    -1,   464,   465,   466,
     467,   468,   469,   470,   471,    -1,   473,    -1,   475,   476,
      -1,   478,   479,   480,    -1,   482,    -1,   484,   485,   486,
     487,   488,    -1,   490,   491,   492,   493,   494,   495,   496,
      -1,    -1,   499,   500,    -1,    -1,    -1,   504,   505,   506,
     507,    -1,    -1,    -1,   511,    -1,    -1,    -1,    -1,   516,
      -1,   518,   519,   520,   521,    -1,   523,   524,   525,   526,
     527,    -1,    -1,    -1,    -1,    -1,   533,   534,   535,    -1,
     537,    -1,    -1,   540,    -1,    -1,   543,    -1,   545,    -1,
     547,   548,   549,   550,   551,   552,    -1,    -1,   555,   556,
      -1,    -1,   559,   560,   561,   562,   563,   564,   565,   566,
     567,   568,   569,   570,   571,   572,   573,   574,    -1,    -1,
     577,   578,   579,   580,    -1,   582,   583,   584,    -1,   586,
     587,   588,   589,    -1,    -1,    -1,    -1,    -1,   595,   596,
      -1,   598,   599,   600,   601,   602,    -1,   604,   605,   606,
     607,   608,   609,    -1,   611,   612,    -1,    -1,   615,    -1,
      -1,   618,    -1,   620,    -1,   622,   623,    -1,    -1,   626,
     627,   628,   629,   630,   631,    -1,    -1,   634,    -1,    -1,
      -1,   638,   639,    -1,   641,   642,   643,   644,    -1,    -1,
      -1,    -1,    -1,    -1,   651,   652,   653,    -1,   655,   656,
     657,   658,    -1,    -1,   661,    -1,    -1,   664,   665,    -1,
     667,   668,   669,   670,   671,    -1,   673,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   682,   683,   684,   685,   686,
     687,   688,    -1,   690,   691,   692,   693,   694,   695,    -1,
     697,   698,   699,   700,   701,   702,   703,    -1,   705,   706,
     707,   708,   709,   710,   711,    -1,    -1,    -1,   715,   716,
     717,   718,   719,   720,   721,   722,   723,   724,   725,   726,
     727,   728,   729,   730,   731,   732,   733,    -1,   735,   736,
     737,   738,   739,   740,   741,   742,   743,   744,    -1,   746,
      -1,   748,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   756,
      -1,   758,    -1,    -1,    -1,    -1,   763,    -1,   765,     5,
       6,    -1,     8,     9,    10,    11,    12,    -1,    -1,    15,
      -1,    -1,    -1,    -1,    20,    -1,    -1,    23,    -1,    25,
      26,    27,    28,    29,    30,    -1,    32,    -1,    -1,    35,
      36,    37,    -1,    -1,    40,    -1,    -1,    43,    44,    45,
      46,    47,    -1,    49,    50,    -1,    -1,    53,    54,    55,
      56,    57,    -1,    59,    60,    61,    62,    63,    -1,    65,
      66,    67,    68,    69,    70,    -1,    72,    73,    -1,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      -1,    87,    88,    89,    -1,    91,    92,    93,    94,    95,
      -1,    97,    98,    99,    -1,    -1,    -1,   103,   104,   105,
      -1,   107,   108,   109,    -1,   111,   112,   113,   114,   115,
     116,    -1,    -1,    -1,    -1,   121,   122,   123,   124,    -1,
      -1,   127,   128,   129,    -1,   131,    -1,    -1,    -1,    -1,
      -1,   137,    -1,    -1,    -1,   141,   142,   143,   144,   145,
      -1,    -1,    -1,   149,    -1,    -1,   152,   153,   154,    -1,
      -1,    -1,   158,    -1,    -1,   161,   162,   163,   164,   165,
      -1,    -1,   168,   169,    -1,   171,   172,   173,   174,   175,
     176,   177,    -1,   179,   180,   181,   182,   183,   184,   185,
     186,   187,    -1,   189,   190,   191,   192,   193,   194,    -1,
     196,   197,    -1,    -1,    -1,   201,   202,    -1,    -1,    -1,
      -1,    -1,   208,    -1,   210,   211,   212,   213,    -1,   215,
      -1,   217,    -1,   219,    -1,   221,   222,    -1,   224,   225,
      -1,   227,   228,    -1,    -1,    -1,   232,   233,   234,    -1,
     236,    -1,   238,   239,   240,    -1,    -1,   243,    -1,    -1,
      -1,   247,   248,   249,   250,   251,    -1,    -1,    -1,   255,
      -1,    -1,    -1,   259,   260,    -1,   262,   263,    -1,    -1,
      -1,   267,    -1,   269,    -1,    -1,   272,   273,    -1,   275,
     276,    -1,   278,   279,   280,    -1,    -1,    -1,    -1,    -1,
     286,   287,    -1,   289,    -1,   291,    -1,   293,   294,    -1,
      -1,   297,    -1,    -1,    -1,    -1,   302,    -1,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,    -1,   323,   324,   325,
     326,   327,   328,   329,   330,   331,   332,   333,    -1,    -1,
      -1,    -1,   338,   339,   340,   341,   342,   343,    -1,    -1,
     346,   347,   348,   349,    -1,   351,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,    -1,   363,   364,   365,
      -1,    -1,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,    -1,   379,   380,   381,    -1,   383,   384,    -1,
     386,   387,   388,    -1,    -1,   391,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   401,   402,   403,   404,   405,
      -1,   407,    -1,   409,   410,   411,   412,   413,   414,   415,
     416,   417,   418,   419,   420,    -1,   422,   423,   424,    -1,
     426,    -1,   428,   429,   430,   431,   432,    -1,   434,   435,
     436,    -1,    -1,   439,    -1,    -1,    -1,   443,   444,    -1,
     446,   447,    -1,    -1,   450,   451,   452,   453,   454,    -1,
     456,   457,    -1,   459,   460,   461,    -1,    -1,   464,   465,
     466,   467,   468,   469,   470,   471,    -1,   473,    -1,   475,
     476,    -1,   478,   479,   480,    -1,   482,    -1,   484,   485,
     486,   487,   488,    -1,   490,   491,   492,   493,   494,   495,
     496,    -1,    -1,   499,   500,    -1,    -1,    -1,   504,   505,
     506,   507,    -1,    -1,    -1,   511,    -1,    -1,    -1,    -1,
     516,    -1,   518,   519,   520,   521,    -1,   523,   524,   525,
     526,   527,    -1,    -1,    -1,    -1,    -1,   533,   534,   535,
      -1,   537,    -1,    -1,   540,    -1,    -1,   543,    -1,   545,
      -1,   547,   548,   549,   550,   551,   552,    -1,    -1,   555,
     556,    -1,    -1,   559,   560,   561,   562,   563,   564,   565,
     566,   567,   568,   569,   570,   571,   572,   573,   574,    -1,
      -1,   577,   578,   579,   580,    -1,   582,   583,   584,    -1,
     586,   587,   588,   589,    -1,    -1,    -1,    -1,   594,   595,
     596,    -1,   598,   599,   600,   601,   602,    -1,   604,   605,
     606,   607,   608,   609,    -1,   611,   612,    -1,    -1,   615,
      -1,    -1,   618,    -1,   620,    -1,   622,   623,    -1,    -1,
     626,   627,   628,   629,   630,   631,    -1,    -1,   634,    -1,
      -1,    -1,   638,   639,    -1,   641,   642,   643,   644,    -1,
      -1,    -1,    -1,    -1,    -1,   651,   652,   653,    -1,   655,
     656,   657,   658,    -1,    -1,   661,    -1,    -1,   664,   665,
      -1,   667,   668,   669,   670,   671,    -1,   673,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   682,   683,   684,   685,
     686,   687,   688,    -1,   690,   691,   692,   693,   694,   695,
      -1,   697,   698,   699,   700,   701,   702,   703,    -1,   705,
     706,   707,   708,   709,   710,   711,    -1,    -1,    -1,   715,
     716,   717,   718,   719,   720,   721,   722,    -1,   724,   725,
     726,   727,   728,   729,   730,   731,   732,   733,    -1,   735,
     736,   737,   738,   739,   740,   741,   742,   743,   744,    -1,
     746,    -1,   748,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     756,    -1,   758,    -1,    -1,    -1,    -1,   763,    -1,   765,
       5,     6,    -1,     8,     9,    10,    11,    12,    -1,    -1,
      15,    -1,    -1,    -1,    -1,    20,    -1,    -1,    23,    -1,
      25,    26,    27,    28,    29,    30,    -1,    32,    -1,    -1,
      35,    36,    37,    -1,    -1,    40,    -1,    -1,    43,    44,
      45,    -1,    47,    -1,    49,    50,    -1,    -1,    53,    54,
      55,    56,    57,    -1,    59,    60,    61,    62,    63,    -1,
      65,    66,    67,    68,    69,    70,    -1,    72,    73,    -1,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    -1,    87,    88,    89,    -1,    91,    92,    93,    94,
      95,    -1,    97,    98,    99,    -1,    -1,    -1,   103,   104,
     105,    -1,   107,   108,   109,    -1,   111,   112,   113,   114,
     115,   116,    -1,    -1,    -1,    -1,   121,   122,   123,   124,
      -1,    -1,   127,   128,   129,    -1,   131,    -1,    -1,    -1,
      -1,    -1,   137,    -1,    -1,    -1,   141,   142,   143,   144,
     145,    -1,    -1,    -1,   149,    -1,    -1,   152,   153,   154,
      -1,    -1,    -1,   158,    -1,    -1,   161,   162,   163,   164,
     165,    -1,    -1,   168,   169,    -1,   171,   172,   173,   174,
     175,   176,   177,    -1,   179,   180,   181,   182,   183,   184,
     185,   186,   187,    -1,   189,   190,   191,   192,   193,   194,
      -1,   196,   197,    -1,    -1,    -1,   201,   202,    -1,    -1,
      -1,    -1,    -1,   208,    -1,   210,   211,   212,   213,    -1,
     215,    -1,   217,    -1,   219,    -1,   221,   222,    -1,   224,
     225,    -1,   227,   228,    -1,    -1,    -1,   232,   233,   234,
      -1,   236,    -1,   238,   239,   240,    -1,    -1,   243,    -1,
      -1,    -1,   247,   248,   249,   250,   251,    -1,    -1,    -1,
     255,    -1,    -1,    -1,   259,   260,    -1,   262,   263,    -1,
      -1,    -1,   267,    -1,   269,    -1,    -1,   272,   273,    -1,
      -1,   276,    -1,   278,   279,   280,    -1,    -1,    -1,    -1,
      -1,   286,   287,    -1,   289,    -1,   291,    -1,   293,   294,
      -1,    -1,   297,    -1,    -1,    -1,    -1,   302,    -1,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,    -1,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
      -1,    -1,    -1,   338,   339,   340,   341,   342,   343,    -1,
      -1,   346,   347,   348,   349,    -1,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,    -1,   363,   364,
     365,    -1,    -1,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,    -1,   379,   380,   381,    -1,   383,   384,
      -1,   386,   387,   388,    -1,    -1,   391,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   401,   402,   403,   404,
     405,    -1,   407,    -1,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,    -1,   422,   423,   424,
      -1,   426,    -1,   428,   429,   430,   431,   432,    -1,   434,
     435,   436,    -1,    -1,   439,    -1,    -1,    -1,   443,   444,
      -1,   446,   447,    -1,    -1,   450,   451,   452,   453,   454,
      -1,   456,   457,    -1,   459,   460,   461,    -1,    -1,   464,
     465,   466,   467,   468,   469,   470,   471,    -1,   473,    -1,
     475,   476,    -1,   478,   479,   480,    -1,   482,    -1,   484,
     485,   486,   487,   488,    -1,   490,   491,   492,   493,   494,
     495,   496,    -1,    -1,   499,   500,   501,    -1,    -1,   504,
     505,   506,   507,    -1,    -1,    -1,   511,    -1,    -1,    -1,
      -1,   516,    -1,   518,   519,   520,   521,    -1,   523,   524,
     525,   526,   527,    -1,    -1,    -1,    -1,    -1,   533,   534,
     535,    -1,   537,    -1,    -1,   540,    -1,    -1,   543,    -1,
     545,    -1,   547,   548,   549,   550,   551,   552,    -1,    -1,
     555,   556,    -1,    -1,   559,   560,   561,   562,   563,   564,
     565,   566,   567,   568,   569,   570,   571,   572,   573,   574,
      -1,    -1,   577,   578,   579,   580,    -1,   582,   583,   584,
      -1,   586,   587,   588,   589,    -1,    -1,    -1,    -1,    -1,
     595,   596,    -1,   598,   599,   600,   601,   602,    -1,   604,
     605,   606,   607,   608,   609,    -1,   611,   612,    -1,    -1,
     615,    -1,    -1,   618,    -1,   620,    -1,   622,   623,    -1,
      -1,   626,   627,   628,   629,   630,   631,    -1,    -1,   634,
      -1,    -1,    -1,   638,   639,    -1,   641,   642,   643,   644,
      -1,    -1,    -1,   648,    -1,    -1,   651,   652,   653,    -1,
     655,   656,   657,   658,    -1,    -1,   661,    -1,    -1,   664,
     665,    -1,   667,   668,   669,   670,   671,    -1,   673,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   682,   683,   684,
     685,   686,   687,   688,    -1,   690,   691,   692,   693,   694,
     695,    -1,   697,   698,   699,   700,   701,   702,   703,    -1,
     705,   706,   707,   708,   709,   710,   711,    -1,    -1,    -1,
     715,   716,   717,   718,   719,   720,   721,   722,    -1,   724,
     725,   726,   727,   728,   729,   730,   731,   732,   733,    -1,
     735,   736,   737,   738,   739,   740,   741,   742,   743,   744,
      -1,   746,    -1,   748,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   756,    -1,   758,    -1,    -1,    -1,    -1,   763,    -1,
     765,     5,     6,    -1,     8,     9,    10,    11,    12,    -1,
      -1,    15,    -1,    -1,    -1,    -1,    20,    -1,    -1,    23,
      -1,    25,    26,    27,    28,    29,    30,    -1,    32,    -1,
      -1,    35,    36,    37,    -1,    -1,    40,    -1,    -1,    43,
      44,    45,    -1,    47,    -1,    49,    50,    -1,    -1,    53,
      54,    55,    56,    57,    -1,    59,    60,    61,    62,    63,
      -1,    65,    66,    67,    68,    69,    70,    -1,    72,    73,
      -1,    75,    76,    77,    78,    79,    80,    81,    82,    83,
      84,    85,    -1,    87,    88,    89,    -1,    91,    92,    93,
      94,    95,    -1,    97,    98,    99,    -1,    -1,    -1,   103,
     104,   105,    -1,   107,   108,   109,    -1,   111,   112,   113,
     114,   115,   116,    -1,    -1,    -1,    -1,   121,   122,   123,
     124,    -1,    -1,   127,   128,   129,    -1,   131,    -1,    -1,
      -1,    -1,    -1,   137,    -1,    -1,    -1,   141,   142,   143,
     144,   145,    -1,    -1,    -1,   149,    -1,    -1,   152,   153,
     154,    -1,    -1,    -1,   158,    -1,    -1,   161,   162,   163,
     164,   165,    -1,    -1,   168,   169,    -1,   171,   172,   173,
     174,   175,   176,   177,    -1,   179,   180,   181,   182,   183,
     184,   185,   186,   187,    -1,   189,   190,   191,   192,   193,
     194,    -1,   196,   197,    -1,    -1,    -1,   201,   202,    -1,
      -1,    -1,    -1,    -1,   208,    -1,   210,   211,   212,   213,
      -1,   215,    -1,   217,    -1,   219,    -1,   221,   222,    -1,
     224,   225,    -1,   227,   228,    -1,    -1,    -1,   232,   233,
     234,    -1,   236,    -1,   238,   239,   240,    -1,    -1,   243,
      -1,    -1,    -1,   247,   248,   249,   250,   251,    -1,    -1,
      -1,   255,    -1,    -1,    -1,   259,   260,    -1,   262,   263,
      -1,    -1,    -1,   267,    -1,   269,    -1,    -1,   272,   273,
      -1,    -1,   276,    -1,   278,   279,   280,    -1,    -1,    -1,
      -1,    -1,   286,   287,    -1,   289,    -1,   291,    -1,   293,
     294,    -1,    -1,   297,    -1,    -1,    -1,    -1,   302,    -1,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,    -1,   323,
     324,   325,   326,   327,   328,   329,   330,   331,   332,   333,
      -1,    -1,    -1,    -1,   338,   339,   340,   341,   342,   343,
      -1,    -1,   346,   347,   348,   349,    -1,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,    -1,   363,
     364,   365,    -1,    -1,   368,   369,   370,   371,   372,   373,
     374,   375,   376,   377,    -1,   379,   380,   381,    -1,   383,
     384,    -1,   386,   387,   388,    -1,    -1,   391,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   401,   402,   403,
     404,   405,    -1,   407,    -1,   409,   410,   411,   412,   413,
     414,   415,   416,   417,   418,   419,   420,    -1,   422,   423,
     424,    -1,   426,    -1,   428,   429,   430,   431,   432,    -1,
     434,   435,   436,    -1,    -1,   439,    -1,    -1,    -1,   443,
     444,    -1,   446,   447,    -1,    -1,   450,   451,   452,   453,
     454,    -1,   456,   457,    -1,   459,   460,   461,    -1,    -1,
     464,   465,   466,   467,   468,   469,   470,   471,    -1,   473,
      -1,   475,   476,    -1,   478,   479,   480,    -1,   482,    -1,
     484,   485,   486,   487,   488,    -1,   490,   491,   492,   493,
     494,   495,   496,    -1,    -1,   499,   500,   501,    -1,    -1,
     504,   505,   506,   507,    -1,    -1,    -1,   511,    -1,    -1,
      -1,    -1,   516,    -1,   518,   519,   520,   521,    -1,   523,
     524,   525,   526,   527,    -1,    -1,    -1,    -1,    -1,   533,
     534,   535,    -1,   537,    -1,    -1,   540,    -1,    -1,   543,
      -1,   545,    -1,   547,   548,   549,   550,   551,   552,    -1,
      -1,   555,   556,    -1,    -1,   559,   560,   561,   562,   563,
     564,   565,   566,   567,   568,   569,   570,   571,   572,   573,
     574,    -1,    -1,   577,   578,   579,   580,    -1,   582,   583,
     584,    -1,   586,   587,   588,   589,    -1,    -1,    -1,    -1,
      -1,   595,   596,    -1,   598,   599,   600,   601,   602,    -1,
     604,   605,   606,   607,   608,   609,    -1,   611,   612,    -1,
      -1,   615,    -1,    -1,   618,    -1,   620,    -1,   622,   623,
      -1,    -1,   626,   627,   628,   629,   630,   631,    -1,    -1,
     634,    -1,    -1,    -1,   638,   639,    -1,   641,   642,   643,
     644,    -1,    -1,    -1,   648,    -1,    -1,   651,   652,   653,
      -1,   655,   656,   657,   658,    -1,    -1,   661,    -1,    -1,
     664,   665,    -1,   667,   668,   669,   670,   671,    -1,   673,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   682,   683,
     684,   685,   686,   687,   688,    -1,   690,   691,   692,   693,
     694,   695,    -1,   697,   698,   699,   700,   701,   702,   703,
      -1,   705,   706,   707,   708,   709,   710,   711,    -1,    -1,
      -1,   715,   716,   717,   718,   719,   720,   721,   722,    -1,
     724,   725,   726,   727,   728,   729,   730,   731,   732,   733,
      -1,   735,   736,   737,   738,   739,   740,   741,   742,   743,
     744,    -1,   746,    -1,   748,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   756,    -1,   758,    -1,    -1,    -1,    -1,   763,
      -1,   765,     5,     6,    -1,     8,     9,    10,    11,    12,
      -1,    -1,    15,    -1,    -1,    -1,    -1,    20,    -1,    -1,
      23,    -1,    25,    26,    27,    28,    29,    30,    -1,    32,
      -1,    -1,    35,    36,    37,    -1,    -1,    40,    -1,    -1,
      43,    44,    45,    -1,    47,    -1,    49,    50,    -1,    -1,
      53,    54,    55,    56,    57,    -1,    59,    60,    61,    62,
      63,    -1,    65,    66,    67,    68,    69,    70,    -1,    72,
      73,    -1,    75,    76,    77,    78,    79,    80,    81,    82,
      83,    84,    85,    -1,    87,    88,    89,    -1,    91,    92,
      93,    94,    95,    -1,    97,    98,    99,    -1,    -1,    -1,
     103,   104,   105,    -1,   107,   108,   109,    -1,   111,   112,
     113,   114,   115,   116,    -1,    -1,    -1,    -1,   121,   122,
     123,   124,    -1,    -1,   127,   128,   129,    -1,   131,    -1,
      -1,    -1,    -1,    -1,   137,    -1,    -1,    -1,   141,   142,
     143,   144,   145,    -1,    -1,    -1,   149,    -1,    -1,   152,
     153,   154,    -1,    -1,    -1,   158,    -1,    -1,   161,   162,
     163,   164,   165,    -1,    -1,   168,   169,    -1,   171,   172,
     173,   174,   175,   176,   177,    -1,   179,   180,   181,   182,
     183,   184,   185,   186,   187,    -1,   189,   190,   191,   192,
     193,   194,    -1,   196,   197,    -1,    -1,    -1,   201,   202,
      -1,    -1,    -1,    -1,    -1,   208,    -1,   210,   211,   212,
     213,    -1,   215,    -1,   217,    -1,   219,    -1,   221,   222,
      -1,   224,   225,    -1,   227,   228,    -1,    -1,    -1,   232,
     233,   234,    -1,   236,    -1,   238,   239,   240,    -1,    -1,
     243,    -1,    -1,    -1,   247,   248,   249,   250,   251,    -1,
      -1,    -1,   255,    -1,    -1,    -1,   259,   260,    -1,   262,
     263,    -1,    -1,    -1,   267,    -1,   269,    -1,    -1,   272,
     273,    -1,    -1,   276,    -1,   278,   279,   280,    -1,    -1,
      -1,    -1,    -1,   286,   287,    -1,   289,    -1,   291,    -1,
     293,   294,    -1,    -1,   297,    -1,    -1,    -1,    -1,   302,
      -1,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,    -1,
     323,   324,   325,   326,   327,   328,   329,   330,   331,   332,
     333,    -1,    -1,    -1,    -1,   338,   339,   340,   341,   342,
     343,    -1,    -1,   346,   347,   348,   349,    -1,   351,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,    -1,
     363,   364,   365,    -1,    -1,   368,   369,   370,   371,   372,
     373,   374,   375,   376,   377,    -1,   379,   380,   381,    -1,
     383,   384,    -1,   386,   387,   388,    -1,    -1,   391,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   401,   402,
     403,   404,   405,    -1,   407,    -1,   409,   410,   411,   412,
     413,   414,   415,   416,   417,   418,   419,   420,    -1,   422,
     423,   424,    -1,   426,    -1,   428,   429,   430,   431,   432,
      -1,   434,   435,   436,    -1,    -1,   439,    -1,    -1,    -1,
     443,   444,    -1,   446,   447,    -1,    -1,   450,   451,   452,
     453,   454,    -1,   456,   457,    -1,   459,   460,   461,    -1,
      -1,   464,   465,   466,   467,   468,   469,   470,   471,    -1,
     473,    -1,   475,   476,    -1,   478,   479,   480,    -1,   482,
      -1,   484,   485,   486,   487,   488,    -1,   490,   491,   492,
     493,   494,   495,   496,    -1,    -1,   499,   500,    -1,    -1,
      -1,   504,   505,   506,   507,    -1,    -1,    -1,   511,    -1,
      -1,    -1,    -1,   516,    -1,   518,   519,   520,   521,    -1,
     523,   524,   525,   526,   527,    -1,    -1,    -1,    -1,    -1,
     533,   534,   535,    -1,   537,    -1,    -1,   540,    -1,    -1,
     543,    -1,   545,    -1,   547,   548,   549,   550,   551,   552,
      -1,    -1,   555,   556,    -1,    -1,   559,   560,   561,   562,
     563,   564,   565,   566,   567,   568,   569,   570,   571,   572,
     573,   574,    -1,    -1,   577,   578,   579,   580,    -1,   582,
     583,   584,    -1,   586,   587,   588,   589,    -1,    -1,    -1,
      -1,    -1,   595,   596,    -1,   598,   599,   600,   601,   602,
      -1,   604,   605,   606,   607,   608,   609,    -1,   611,   612,
      -1,    -1,   615,    -1,    -1,   618,    -1,   620,    -1,   622,
     623,    -1,    -1,   626,   627,   628,   629,   630,   631,    -1,
      -1,   634,    -1,    -1,    -1,   638,   639,    -1,   641,   642,
     643,   644,    -1,    -1,    -1,    -1,    -1,    -1,   651,   652,
     653,    -1,   655,   656,   657,   658,    -1,    -1,   661,    -1,
      -1,   664,   665,    -1,   667,   668,   669,   670,   671,    -1,
     673,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   682,
     683,   684,   685,   686,   687,   688,    -1,   690,   691,   692,
     693,   694,   695,    -1,   697,   698,   699,   700,   701,   702,
     703,    -1,   705,   706,   707,   708,   709,   710,   711,    -1,
      -1,    -1,   715,   716,   717,   718,   719,   720,   721,   722,
      -1,   724,   725,   726,   727,   728,   729,   730,   731,   732,
     733,    -1,   735,   736,   737,   738,   739,   740,   741,   742,
     743,   744,    -1,   746,    -1,   748,    -1,    -1,    -1,   752,
      -1,    -1,    -1,   756,    -1,   758,    -1,    -1,    -1,    -1,
     763,    -1,   765,     5,     6,    -1,     8,     9,    10,    11,
      12,    -1,    -1,    15,    -1,    -1,    -1,    -1,    20,    -1,
      -1,    23,    -1,    25,    26,    27,    28,    29,    30,    -1,
      32,    -1,    -1,    35,    36,    37,    -1,    -1,    40,    -1,
      -1,    43,    44,    45,    -1,    47,    -1,    49,    50,    -1,
      -1,    53,    54,    55,    56,    57,    -1,    59,    60,    61,
      62,    63,    -1,    65,    66,    67,    68,    69,    70,    -1,
      72,    73,    -1,    75,    76,    77,    78,    79,    80,    81,
      82,    83,    84,    85,    -1,    87,    88,    89,    -1,    91,
      92,    93,    94,    95,    -1,    97,    98,    99,    -1,    -1,
      -1,   103,   104,   105,    -1,   107,   108,   109,    -1,   111,
     112,   113,   114,   115,   116,    -1,    -1,    -1,    -1,   121,
     122,   123,   124,    -1,    -1,   127,   128,   129,    -1,   131,
      -1,    -1,    -1,    -1,    -1,   137,    -1,    -1,    -1,   141,
     142,   143,   144,   145,    -1,    -1,    -1,   149,    -1,    -1,
     152,   153,   154,    -1,    -1,    -1,   158,    -1,    -1,   161,
     162,   163,   164,   165,    -1,    -1,   168,   169,    -1,   171,
     172,   173,   174,   175,   176,   177,    -1,   179,   180,   181,
     182,   183,   184,   185,   186,   187,    -1,   189,   190,   191,
     192,   193,   194,    -1,   196,   197,    -1,    -1,    -1,   201,
     202,    -1,    -1,    -1,    -1,    -1,   208,    -1,   210,   211,
     212,   213,    -1,   215,    -1,   217,    -1,   219,    -1,   221,
     222,    -1,   224,   225,    -1,   227,   228,    -1,    -1,    -1,
     232,   233,   234,    -1,   236,    -1,   238,   239,   240,    -1,
      -1,   243,    -1,    -1,    -1,   247,   248,   249,   250,   251,
      -1,    -1,    -1,   255,    -1,    -1,    -1,   259,   260,    -1,
     262,   263,    -1,    -1,    -1,   267,    -1,   269,    -1,    -1,
     272,   273,    -1,    -1,   276,    -1,   278,   279,   280,    -1,
      -1,    -1,    -1,    -1,   286,   287,    -1,   289,    -1,   291,
      -1,   293,   294,    -1,    -1,   297,    -1,    -1,    -1,    -1,
     302,    -1,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
      -1,   323,   324,   325,   326,   327,   328,   329,   330,   331,
     332,   333,    -1,    -1,    -1,    -1,   338,   339,   340,   341,
     342,   343,    -1,    -1,   346,   347,   348,   349,    -1,   351,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
      -1,   363,   364,   365,    -1,    -1,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,    -1,   379,   380,   381,
      -1,   383,   384,    -1,   386,   387,   388,    -1,    -1,   391,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   401,
     402,   403,   404,   405,    -1,   407,    -1,   409,   410,   411,
     412,   413,   414,   415,   416,   417,   418,   419,   420,    -1,
     422,   423,   424,    -1,   426,    -1,   428,   429,   430,   431,
     432,    -1,   434,   435,   436,    -1,    -1,   439,    -1,    -1,
      -1,   443,   444,    -1,   446,   447,    -1,    -1,   450,   451,
     452,   453,   454,    -1,   456,   457,    -1,   459,   460,   461,
      -1,    -1,   464,   465,   466,   467,   468,   469,   470,   471,
      -1,   473,    -1,   475,   476,    -1,   478,   479,   480,    -1,
     482,    -1,   484,   485,   486,   487,   488,    -1,   490,   491,
     492,   493,   494,   495,   496,    -1,    -1,   499,   500,    -1,
      -1,    -1,   504,   505,   506,   507,    -1,    -1,    -1,   511,
      -1,    -1,    -1,    -1,   516,    -1,   518,   519,   520,   521,
      -1,   523,   524,   525,   526,   527,    -1,    -1,    -1,    -1,
      -1,   533,   534,   535,    -1,   537,    -1,    -1,   540,    -1,
      -1,   543,    -1,   545,    -1,   547,   548,   549,   550,   551,
     552,    -1,    -1,   555,   556,    -1,    -1,   559,   560,   561,
     562,   563,   564,   565,   566,   567,   568,   569,   570,   571,
     572,   573,   574,    -1,    -1,   577,   578,   579,   580,    -1,
     582,   583,   584,    -1,   586,   587,   588,   589,    -1,    -1,
      -1,    -1,    -1,   595,   596,    -1,   598,   599,   600,   601,
     602,    -1,   604,   605,   606,   607,   608,   609,    -1,   611,
     612,    -1,    -1,   615,    -1,    -1,   618,    -1,   620,    -1,
     622,   623,    -1,    -1,   626,   627,   628,   629,   630,   631,
      -1,    -1,   634,    -1,    -1,    -1,   638,   639,    -1,   641,
     642,   643,   644,    -1,    -1,    -1,    -1,    -1,    -1,   651,
     652,   653,    -1,   655,   656,   657,   658,    -1,    -1,   661,
      -1,    -1,   664,   665,    -1,   667,   668,   669,   670,   671,
      -1,   673,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     682,   683,   684,   685,   686,   687,   688,    -1,   690,   691,
     692,   693,   694,   695,    -1,   697,   698,   699,   700,   701,
     702,   703,    -1,   705,   706,   707,   708,   709,   710,   711,
      -1,    -1,    -1,   715,   716,   717,   718,   719,   720,   721,
     722,    -1,   724,   725,   726,   727,   728,   729,   730,   731,
     732,   733,    -1,   735,   736,   737,   738,   739,   740,   741,
     742,   743,   744,    -1,   746,    -1,   748,    -1,    -1,    -1,
     752,    -1,    -1,    -1,   756,    -1,   758,    -1,    -1,    -1,
      -1,   763,    -1,   765,     5,     6,    -1,     8,     9,    10,
      11,    12,    -1,    -1,    15,    -1,    -1,    -1,    -1,    20,
      -1,    -1,    23,    -1,    25,    26,    27,    28,    29,    30,
      -1,    32,    -1,    -1,    35,    36,    37,    -1,    -1,    40,
      -1,    -1,    43,    44,    45,    -1,    47,    -1,    49,    50,
      -1,    -1,    53,    54,    55,    56,    57,    -1,    59,    60,
      61,    62,    63,    -1,    65,    66,    67,    68,    69,    70,
      -1,    72,    73,    -1,    75,    76,    77,    78,    79,    80,
      81,    82,    83,    84,    85,    -1,    87,    88,    89,    -1,
      91,    92,    93,    94,    95,    -1,    97,    98,    99,    -1,
      -1,    -1,   103,   104,   105,    -1,   107,   108,   109,    -1,
     111,   112,   113,   114,   115,   116,    -1,    -1,    -1,    -1,
     121,   122,   123,   124,    -1,    -1,   127,   128,   129,    -1,
     131,    -1,    -1,    -1,    -1,    -1,   137,    -1,    -1,    -1,
     141,   142,   143,   144,   145,    -1,    -1,    -1,   149,    -1,
      -1,   152,   153,   154,    -1,    -1,    -1,   158,    -1,    -1,
     161,   162,   163,   164,   165,    -1,    -1,   168,   169,    -1,
     171,   172,   173,   174,   175,   176,   177,    -1,   179,   180,
     181,   182,   183,   184,   185,   186,   187,    -1,   189,   190,
     191,   192,   193,   194,    -1,   196,   197,    -1,    -1,    -1,
     201,   202,   203,    -1,    -1,    -1,    -1,   208,    -1,   210,
     211,   212,   213,    -1,   215,    -1,   217,    -1,   219,    -1,
     221,   222,    -1,   224,   225,    -1,   227,   228,    -1,    -1,
      -1,   232,   233,   234,    -1,   236,    -1,   238,   239,   240,
      -1,    -1,   243,    -1,    -1,    -1,   247,   248,   249,   250,
     251,    -1,    -1,    -1,   255,    -1,    -1,    -1,   259,   260,
      -1,   262,   263,    -1,    -1,    -1,   267,    -1,   269,    -1,
      -1,   272,   273,    -1,    -1,   276,    -1,   278,   279,   280,
      -1,    -1,    -1,    -1,    -1,   286,   287,    -1,   289,    -1,
     291,    -1,   293,   294,    -1,    -1,   297,    -1,    -1,    -1,
      -1,   302,    -1,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,    -1,   323,   324,   325,   326,   327,   328,   329,   330,
     331,   332,   333,    -1,    -1,    -1,    -1,   338,   339,   340,
     341,   342,   343,    -1,    -1,   346,   347,   348,   349,    -1,
     351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,    -1,   363,   364,   365,    -1,    -1,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,    -1,   379,   380,
     381,    -1,   383,   384,    -1,   386,   387,   388,    -1,    -1,
     391,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     401,   402,   403,   404,   405,    -1,   407,    -1,   409,   410,
     411,   412,   413,   414,   415,   416,   417,   418,   419,   420,
      -1,   422,   423,   424,    -1,   426,    -1,   428,   429,   430,
     431,   432,    -1,   434,   435,   436,    -1,    -1,   439,    -1,
      -1,    -1,   443,   444,    -1,   446,   447,    -1,    -1,   450,
     451,   452,   453,   454,    -1,   456,   457,    -1,   459,   460,
     461,    -1,    -1,   464,   465,   466,   467,   468,   469,   470,
     471,    -1,   473,    -1,   475,   476,    -1,   478,   479,   480,
      -1,   482,    -1,   484,   485,   486,   487,   488,    -1,   490,
     491,   492,   493,   494,   495,   496,    -1,    -1,   499,   500,
      -1,    -1,    -1,   504,   505,   506,   507,    -1,    -1,    -1,
     511,    -1,    -1,    -1,    -1,   516,    -1,   518,   519,   520,
     521,    -1,   523,   524,   525,   526,   527,    -1,    -1,    -1,
      -1,    -1,   533,   534,   535,    -1,   537,    -1,    -1,   540,
      -1,    -1,   543,    -1,   545,    -1,   547,   548,   549,   550,
     551,   552,    -1,    -1,   555,   556,    -1,    -1,   559,   560,
     561,   562,   563,   564,   565,   566,   567,   568,   569,   570,
     571,   572,   573,   574,    -1,    -1,   577,   578,   579,   580,
      -1,   582,   583,   584,    -1,   586,   587,   588,   589,    -1,
      -1,    -1,    -1,    -1,   595,   596,    -1,   598,   599,   600,
     601,   602,    -1,   604,   605,   606,   607,   608,   609,    -1,
     611,   612,    -1,    -1,   615,    -1,    -1,   618,    -1,   620,
      -1,   622,   623,    -1,    -1,   626,   627,   628,   629,   630,
     631,    -1,    -1,   634,    -1,    -1,    -1,   638,   639,    -1,
     641,   642,   643,   644,    -1,    -1,    -1,    -1,    -1,    -1,
     651,   652,   653,    -1,   655,   656,   657,   658,    -1,    -1,
     661,    -1,    -1,   664,   665,    -1,   667,   668,   669,   670,
     671,    -1,   673,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   682,   683,   684,   685,   686,   687,   688,    -1,   690,
     691,   692,   693,   694,   695,    -1,   697,   698,   699,   700,
     701,   702,   703,    -1,   705,   706,   707,   708,   709,   710,
     711,    -1,    -1,    -1,   715,   716,   717,   718,   719,   720,
     721,   722,    -1,   724,   725,   726,   727,   728,   729,   730,
     731,   732,   733,    -1,   735,   736,   737,   738,   739,   740,
     741,   742,   743,   744,    -1,   746,    -1,   748,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   756,    -1,   758,    -1,    -1,
      -1,    -1,   763,    -1,   765,     5,     6,    -1,     8,     9,
      10,    11,    12,    -1,    -1,    15,    -1,    -1,    -1,    -1,
      20,    -1,    -1,    23,    -1,    25,    26,    27,    28,    29,
      30,    -1,    32,    -1,    -1,    35,    36,    37,    -1,    -1,
      40,    -1,    -1,    43,    44,    45,    -1,    47,    -1,    49,
      50,    -1,    -1,    53,    54,    55,    56,    57,    -1,    59,
      60,    61,    62,    63,    -1,    65,    66,    67,    68,    69,
      70,    -1,    72,    73,    -1,    75,    76,    77,    78,    79,
      80,    81,    82,    83,    84,    85,    -1,    87,    88,    89,
      -1,    91,    92,    93,    94,    95,    -1,    97,    98,    99,
      -1,    -1,    -1,   103,   104,   105,    -1,   107,   108,   109,
      -1,   111,   112,   113,   114,   115,   116,    -1,    -1,    -1,
      -1,   121,   122,   123,   124,    -1,    -1,   127,   128,   129,
      -1,   131,    -1,    -1,    -1,    -1,    -1,   137,    -1,    -1,
      -1,   141,   142,   143,   144,   145,    -1,    -1,    -1,   149,
      -1,    -1,   152,   153,   154,    -1,    -1,    -1,   158,    -1,
      -1,   161,   162,   163,   164,   165,    -1,    -1,   168,   169,
      -1,   171,   172,   173,   174,   175,   176,   177,    -1,   179,
     180,   181,   182,   183,   184,   185,   186,   187,    -1,   189,
     190,   191,   192,   193,   194,    -1,   196,   197,    -1,    -1,
      -1,   201,   202,   203,    -1,    -1,    -1,    -1,   208,    -1,
     210,   211,   212,   213,    -1,   215,    -1,   217,    -1,   219,
      -1,   221,   222,    -1,   224,   225,    -1,   227,   228,    -1,
      -1,    -1,   232,   233,   234,    -1,   236,    -1,   238,   239,
     240,    -1,    -1,   243,    -1,    -1,    -1,   247,   248,   249,
     250,   251,    -1,    -1,    -1,   255,    -1,    -1,    -1,   259,
     260,    -1,   262,   263,    -1,    -1,    -1,   267,    -1,   269,
      -1,    -1,   272,   273,    -1,    -1,   276,    -1,   278,   279,
     280,    -1,    -1,    -1,    -1,    -1,   286,   287,    -1,   289,
      -1,   291,    -1,   293,   294,    -1,    -1,   297,    -1,    -1,
      -1,    -1,   302,    -1,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,    -1,   323,   324,   325,   326,   327,   328,   329,
     330,   331,   332,   333,    -1,    -1,    -1,    -1,   338,   339,
     340,   341,   342,   343,    -1,    -1,   346,   347,   348,   349,
      -1,   351,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,    -1,   363,   364,   365,    -1,    -1,   368,   369,
     370,   371,   372,   373,   374,   375,   376,   377,    -1,   379,
     380,   381,    -1,   383,   384,    -1,   386,   387,   388,    -1,
      -1,   391,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   401,   402,   403,   404,   405,    -1,   407,    -1,   409,
     410,   411,   412,   413,   414,   415,   416,   417,   418,   419,
     420,    -1,   422,   423,   424,    -1,   426,    -1,   428,   429,
     430,   431,   432,    -1,   434,   435,   436,    -1,    -1,   439,
      -1,    -1,    -1,   443,   444,    -1,   446,   447,    -1,    -1,
     450,   451,   452,   453,   454,    -1,   456,   457,    -1,   459,
     460,   461,    -1,    -1,   464,   465,   466,   467,   468,   469,
     470,   471,    -1,   473,    -1,   475,   476,    -1,   478,   479,
     480,    -1,   482,    -1,   484,   485,   486,   487,   488,    -1,
     490,   491,   492,   493,   494,   495,   496,    -1,    -1,   499,
     500,    -1,    -1,    -1,   504,   505,   506,   507,    -1,    -1,
      -1,   511,    -1,    -1,    -1,    -1,   516,    -1,   518,   519,
     520,   521,    -1,   523,   524,   525,   526,   527,    -1,    -1,
      -1,    -1,    -1,   533,   534,   535,    -1,   537,    -1,    -1,
     540,    -1,    -1,   543,    -1,   545,    -1,   547,   548,   549,
     550,   551,   552,    -1,    -1,   555,   556,    -1,    -1,   559,
     560,   561,   562,   563,   564,   565,   566,   567,   568,   569,
     570,   571,   572,   573,   574,    -1,    -1,   577,   578,   579,
     580,    -1,   582,   583,   584,    -1,   586,   587,   588,   589,
      -1,    -1,    -1,    -1,    -1,   595,   596,    -1,   598,   599,
     600,   601,   602,    -1,   604,   605,   606,   607,   608,   609,
      -1,   611,   612,    -1,    -1,   615,    -1,    -1,   618,    -1,
     620,    -1,   622,   623,    -1,    -1,   626,   627,   628,   629,
     630,   631,    -1,    -1,   634,    -1,    -1,    -1,   638,   639,
      -1,   641,   642,   643,   644,    -1,    -1,    -1,    -1,    -1,
      -1,   651,   652,   653,    -1,   655,   656,   657,   658,    -1,
      -1,   661,    -1,    -1,   664,   665,    -1,   667,   668,   669,
     670,   671,    -1,   673,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   682,   683,   684,   685,   686,   687,   688,    -1,
     690,   691,   692,   693,   694,   695,    -1,   697,   698,   699,
     700,   701,   702,   703,    -1,   705,   706,   707,   708,   709,
     710,   711,    -1,    -1,    -1,   715,   716,   717,   718,   719,
     720,   721,   722,    -1,   724,   725,   726,   727,   728,   729,
     730,   731,   732,   733,    -1,   735,   736,   737,   738,   739,
     740,   741,   742,   743,   744,    -1,   746,    -1,   748,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   756,    -1,   758,    -1,
      -1,    -1,    -1,   763,    -1,   765,     5,     6,    -1,     8,
       9,    10,    11,    12,    -1,    -1,    15,    -1,    -1,    -1,
      -1,    20,    -1,    -1,    23,    -1,    25,    26,    27,    28,
      29,    30,    -1,    32,    -1,    -1,    35,    36,    37,    -1,
      -1,    40,    -1,    -1,    43,    44,    45,    -1,    47,    -1,
      49,    50,    -1,    -1,    53,    54,    55,    56,    57,    -1,
      59,    60,    61,    62,    63,    -1,    65,    66,    67,    68,
      69,    70,    -1,    72,    73,    -1,    75,    76,    77,    78,
      79,    80,    81,    82,    83,    84,    85,    -1,    87,    88,
      89,    -1,    91,    92,    93,    94,    95,    -1,    97,    98,
      99,    -1,    -1,    -1,   103,   104,   105,    -1,   107,   108,
     109,    -1,   111,   112,   113,   114,   115,   116,    -1,    -1,
      -1,    -1,   121,   122,   123,   124,    -1,    -1,   127,   128,
     129,    -1,   131,    -1,    -1,    -1,    -1,    -1,   137,    -1,
      -1,    -1,   141,   142,   143,   144,   145,    -1,    -1,    -1,
     149,    -1,    -1,   152,   153,   154,    -1,    -1,    -1,   158,
      -1,    -1,   161,   162,   163,   164,   165,    -1,    -1,   168,
     169,    -1,   171,   172,   173,   174,   175,   176,   177,    -1,
     179,   180,   181,   182,   183,   184,   185,   186,   187,    -1,
     189,   190,   191,   192,   193,   194,    -1,   196,   197,    -1,
      -1,    -1,   201,   202,   203,    -1,    -1,    -1,    -1,   208,
      -1,   210,   211,   212,   213,    -1,   215,    -1,   217,    -1,
     219,    -1,   221,   222,    -1,   224,   225,    -1,   227,   228,
      -1,    -1,    -1,   232,   233,   234,    -1,   236,    -1,   238,
     239,   240,    -1,    -1,   243,    -1,    -1,    -1,   247,   248,
     249,   250,   251,    -1,    -1,    -1,   255,    -1,    -1,    -1,
     259,   260,    -1,   262,   263,    -1,    -1,    -1,   267,    -1,
     269,    -1,    -1,   272,   273,    -1,    -1,   276,    -1,   278,
     279,   280,    -1,    -1,    -1,    -1,    -1,   286,   287,    -1,
     289,    -1,   291,    -1,   293,   294,    -1,    -1,   297,    -1,
      -1,    -1,    -1,   302,    -1,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,    -1,   323,   324,   325,   326,   327,   328,
     329,   330,   331,   332,   333,    -1,    -1,    -1,    -1,   338,
     339,   340,   341,   342,   343,    -1,    -1,   346,   347,   348,
     349,    -1,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,    -1,   363,   364,   365,    -1,    -1,   368,
     369,   370,   371,   372,   373,   374,   375,   376,   377,    -1,
     379,   380,   381,    -1,   383,   384,    -1,   386,   387,   388,
      -1,    -1,   391,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   401,   402,   403,   404,   405,    -1,   407,    -1,
     409,   410,   411,   412,   413,   414,   415,   416,   417,   418,
     419,   420,    -1,   422,   423,   424,    -1,   426,    -1,   428,
     429,   430,   431,   432,    -1,   434,   435,   436,    -1,    -1,
     439,    -1,    -1,    -1,   443,   444,    -1,   446,   447,    -1,
      -1,   450,   451,   452,   453,   454,    -1,   456,   457,    -1,
     459,   460,   461,    -1,    -1,   464,   465,   466,   467,   468,
     469,   470,   471,    -1,   473,    -1,   475,   476,    -1,   478,
     479,   480,    -1,   482,    -1,   484,   485,   486,   487,   488,
      -1,   490,   491,   492,   493,   494,   495,   496,    -1,    -1,
     499,   500,    -1,    -1,    -1,   504,   505,   506,   507,    -1,
      -1,    -1,   511,    -1,    -1,    -1,    -1,   516,    -1,   518,
     519,   520,   521,    -1,   523,   524,   525,   526,   527,    -1,
      -1,    -1,    -1,    -1,   533,   534,   535,    -1,   537,    -1,
      -1,   540,    -1,    -1,   543,    -1,   545,    -1,   547,   548,
     549,   550,   551,   552,    -1,    -1,   555,   556,    -1,    -1,
     559,   560,   561,   562,   563,   564,   565,   566,   567,   568,
     569,   570,   571,   572,   573,   574,    -1,    -1,   577,   578,
     579,   580,    -1,   582,   583,   584,    -1,   586,   587,   588,
     589,    -1,    -1,    -1,    -1,    -1,   595,   596,    -1,   598,
     599,   600,   601,   602,    -1,   604,   605,   606,   607,   608,
     609,    -1,   611,   612,    -1,    -1,   615,    -1,    -1,   618,
      -1,   620,    -1,   622,   623,    -1,    -1,   626,   627,   628,
     629,   630,   631,    -1,    -1,   634,    -1,    -1,    -1,   638,
     639,    -1,   641,   642,   643,   644,    -1,    -1,    -1,    -1,
      -1,    -1,   651,   652,   653,    -1,   655,   656,   657,   658,
      -1,    -1,   661,    -1,    -1,   664,   665,    -1,   667,   668,
     669,   670,   671,    -1,   673,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   682,   683,   684,   685,   686,   687,   688,
      -1,   690,   691,   692,   693,   694,   695,    -1,   697,   698,
     699,   700,   701,   702,   703,    -1,   705,   706,   707,   708,
     709,   710,   711,    -1,    -1,    -1,   715,   716,   717,   718,
     719,   720,   721,   722,    -1,   724,   725,   726,   727,   728,
     729,   730,   731,   732,   733,    -1,   735,   736,   737,   738,
     739,   740,   741,   742,   743,   744,    -1,   746,    -1,   748,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   756,    -1,   758,
      -1,    -1,    -1,    -1,   763,    -1,   765,     5,     6,    -1,
       8,     9,    10,    11,    12,    -1,    -1,    15,    -1,    -1,
      -1,    -1,    20,    -1,    -1,    23,    -1,    25,    26,    27,
      28,    29,    30,    -1,    32,    -1,    -1,    35,    36,    37,
      -1,    -1,    40,    -1,    -1,    43,    44,    45,    -1,    47,
      -1,    49,    50,    -1,    -1,    53,    54,    55,    56,    57,
      -1,    59,    60,    61,    62,    63,    -1,    65,    66,    67,
      68,    69,    70,    -1,    72,    73,    -1,    75,    76,    77,
      78,    79,    80,    81,    82,    83,    84,    85,    -1,    87,
      88,    89,    -1,    91,    92,    93,    94,    95,    -1,    97,
      98,    99,    -1,    -1,    -1,   103,   104,   105,    -1,   107,
     108,   109,    -1,   111,   112,   113,   114,   115,   116,    -1,
      -1,    -1,    -1,   121,   122,   123,   124,    -1,    -1,   127,
     128,   129,    -1,   131,    -1,    -1,    -1,    -1,    -1,   137,
      -1,    -1,    -1,   141,   142,   143,   144,   145,    -1,    -1,
      -1,   149,    -1,    -1,   152,   153,   154,    -1,    -1,    -1,
     158,    -1,    -1,   161,   162,   163,   164,   165,    -1,    -1,
     168,   169,    -1,   171,   172,   173,   174,   175,   176,   177,
      -1,   179,   180,   181,   182,   183,   184,   185,   186,   187,
      -1,   189,   190,   191,   192,   193,   194,    -1,   196,   197,
      -1,    -1,    -1,   201,   202,    -1,    -1,    -1,    -1,    -1,
     208,    -1,   210,   211,   212,   213,    -1,   215,    -1,   217,
      -1,   219,    -1,   221,   222,    -1,   224,   225,    -1,   227,
     228,    -1,    -1,    -1,   232,   233,   234,    -1,   236,    -1,
     238,   239,   240,    -1,    -1,   243,    -1,    -1,    -1,   247,
     248,   249,   250,   251,    -1,    -1,    -1,   255,    -1,    -1,
      -1,   259,   260,    -1,   262,   263,    -1,    -1,    -1,   267,
      -1,   269,    -1,    -1,   272,   273,    -1,    -1,   276,    -1,
     278,   279,   280,    -1,    -1,    -1,    -1,    -1,   286,   287,
      -1,   289,    -1,   291,    -1,   293,   294,    -1,    -1,   297,
      -1,    -1,    -1,    -1,   302,    -1,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,    -1,   323,   324,   325,   326,   327,
     328,   329,   330,   331,   332,   333,    -1,    -1,    -1,    -1,
     338,   339,   340,   341,   342,   343,    -1,    -1,   346,   347,
     348,   349,    -1,   351,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,    -1,   363,   364,   365,    -1,    -1,
     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
      -1,   379,   380,   381,    -1,   383,   384,    -1,   386,   387,
     388,    -1,    -1,   391,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   401,   402,   403,   404,   405,    -1,   407,
      -1,   409,   410,   411,   412,   413,   414,   415,   416,   417,
     418,   419,   420,    -1,   422,   423,   424,    -1,   426,    -1,
     428,   429,   430,   431,   432,    -1,   434,   435,   436,    -1,
      -1,   439,    -1,    -1,    -1,   443,   444,    -1,   446,   447,
      -1,    -1,   450,   451,   452,   453,   454,    -1,   456,   457,
      -1,   459,   460,   461,    -1,    -1,   464,   465,   466,   467,
     468,   469,   470,   471,    -1,   473,    -1,   475,   476,    -1,
     478,   479,   480,    -1,   482,    -1,   484,   485,   486,   487,
     488,    -1,   490,   491,   492,   493,   494,   495,   496,    -1,
      -1,   499,   500,    -1,    -1,    -1,   504,   505,   506,   507,
      -1,    -1,    -1,   511,    -1,    -1,    -1,    -1,   516,    -1,
     518,   519,   520,   521,    -1,   523,   524,   525,   526,   527,
      -1,    -1,    -1,    -1,    -1,   533,   534,   535,    -1,   537,
      -1,    -1,   540,    -1,    -1,   543,    -1,   545,    -1,   547,
     548,   549,   550,   551,   552,    -1,    -1,   555,   556,    -1,
      -1,   559,   560,   561,   562,   563,   564,   565,   566,   567,
     568,   569,   570,   571,   572,   573,   574,    -1,    -1,   577,
     578,   579,   580,    -1,   582,   583,   584,    -1,   586,   587,
     588,   589,    -1,    -1,    -1,    -1,    -1,   595,   596,    -1,
     598,   599,   600,   601,   602,    -1,   604,   605,   606,   607,
     608,   609,    -1,   611,   612,    -1,    -1,   615,    -1,    -1,
     618,    -1,   620,    -1,   622,   623,    -1,    -1,   626,   627,
     628,   629,   630,   631,    -1,    -1,   634,    -1,    -1,    -1,
     638,   639,    -1,   641,   642,   643,   644,    -1,    -1,    -1,
      -1,    -1,    -1,   651,   652,   653,    -1,   655,   656,   657,
     658,    -1,    -1,   661,    -1,    -1,   664,   665,    -1,   667,
     668,   669,   670,   671,    -1,   673,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   682,   683,   684,   685,   686,   687,
     688,    -1,   690,   691,   692,   693,   694,   695,    -1,   697,
     698,   699,   700,   701,   702,   703,    -1,   705,   706,   707,
     708,   709,   710,   711,    -1,    -1,    -1,   715,   716,   717,
     718,   719,   720,   721,   722,    -1,   724,   725,   726,   727,
     728,   729,   730,   731,   732,   733,    -1,   735,   736,   737,
     738,   739,   740,   741,   742,   743,   744,    -1,   746,    -1,
     748,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   756,    -1,
     758,    -1,    -1,    -1,    -1,   763,    -1,   765,     5,     6,
      -1,     8,     9,    10,    11,    12,    -1,    -1,    15,    -1,
      -1,    -1,    -1,    20,    -1,    -1,    23,    -1,    25,    26,
      27,    28,    29,    30,    -1,    32,    -1,    -1,    35,    36,
      37,    -1,    -1,    40,    -1,    -1,    43,    44,    45,    -1,
      47,    -1,    49,    50,    -1,    -1,    53,    54,    55,    56,
      57,    -1,    59,    60,    61,    62,    63,    -1,    65,    66,
      67,    68,    69,    70,    -1,    72,    73,    -1,    75,    76,
      77,    78,    79,    80,    81,    82,    83,    84,    85,    -1,
      87,    88,    89,    -1,    91,    92,    93,    94,    95,    -1,
      97,    98,    99,    -1,    -1,    -1,   103,   104,   105,    -1,
     107,   108,   109,    -1,   111,   112,   113,   114,   115,   116,
      -1,    -1,    -1,    -1,   121,   122,   123,   124,    -1,    -1,
     127,   128,   129,    -1,   131,    -1,    -1,    -1,    -1,    -1,
     137,    -1,    -1,    -1,   141,   142,   143,   144,   145,    -1,
      -1,    -1,   149,    -1,    -1,   152,   153,   154,    -1,    -1,
      -1,   158,    -1,    -1,   161,   162,   163,   164,   165,    -1,
      -1,   168,   169,    -1,   171,   172,   173,   174,   175,   176,
     177,    -1,   179,   180,   181,   182,   183,   184,   185,   186,
     187,    -1,   189,   190,   191,   192,   193,   194,    -1,   196,
     197,    -1,    -1,    -1,   201,   202,    -1,    -1,    -1,    -1,
      -1,   208,    -1,   210,   211,   212,   213,    -1,   215,    -1,
     217,    -1,   219,    -1,   221,   222,    -1,   224,   225,    -1,
     227,   228,    -1,    -1,    -1,   232,   233,   234,    -1,   236,
      -1,   238,   239,   240,    -1,    -1,   243,    -1,    -1,    -1,
     247,   248,   249,   250,   251,    -1,    -1,    -1,   255,    -1,
      -1,    -1,   259,   260,    -1,   262,   263,    -1,    -1,    -1,
     267,    -1,   269,    -1,    -1,   272,   273,    -1,    -1,   276,
      -1,   278,   279,   280,    -1,    -1,    -1,    -1,    -1,   286,
     287,    -1,   289,    -1,   291,    -1,   293,   294,    -1,    -1,
     297,    -1,    -1,    -1,    -1,   302,    -1,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,    -1,   323,   324,   325,   326,
     327,   328,   329,   330,   331,   332,   333,    -1,    -1,    -1,
      -1,   338,   339,   340,   341,   342,   343,    -1,    -1,   346,
     347,   348,   349,    -1,   351,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,    -1,   363,   364,   365,    -1,
      -1,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,    -1,   379,   380,   381,    -1,   383,   384,    -1,   386,
     387,   388,    -1,    -1,   391,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   401,   402,   403,   404,   405,    -1,
     407,    -1,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,   419,   420,    -1,   422,   423,   424,    -1,   426,
      -1,   428,   429,   430,   431,   432,    -1,   434,   435,   436,
      -1,    -1,   439,    -1,    -1,    -1,   443,   444,    -1,   446,
     447,    -1,    -1,   450,   451,   452,   453,   454,    -1,   456,
     457,    -1,   459,   460,   461,    -1,    -1,   464,   465,   466,
     467,   468,   469,   470,   471,    -1,   473,    -1,   475,   476,
      -1,   478,   479,   480,    -1,   482,    -1,   484,   485,   486,
     487,   488,    -1,   490,   491,   492,   493,   494,   495,   496,
      -1,    -1,   499,   500,    -1,    -1,    -1,   504,   505,   506,
     507,    -1,    -1,    -1,   511,    -1,    -1,    -1,    -1,   516,
      -1,   518,   519,   520,   521,    -1,   523,   524,   525,   526,
     527,    -1,    -1,    -1,    -1,    -1,   533,   534,   535,    -1,
     537,    -1,    -1,   540,    -1,    -1,   543,    -1,   545,    -1,
     547,   548,   549,   550,   551,   552,    -1,    -1,   555,   556,
      -1,    -1,   559,   560,   561,   562,   563,   564,   565,   566,
     567,   568,   569,   570,   571,   572,   573,   574,    -1,    -1,
     577,   578,   579,   580,    -1,   582,   583,   584,    -1,   586,
     587,   588,   589,    -1,    -1,    -1,    -1,    -1,   595,   596,
      -1,   598,   599,   600,   601,   602,    -1,   604,   605,   606,
     607,   608,   609,    -1,   611,   612,    -1,    -1,   615,    -1,
      -1,   618,    -1,   620,    -1,   622,   623,    -1,    -1,   626,
     627,   628,   629,   630,   631,    -1,    -1,   634,    -1,    -1,
      -1,   638,   639,    -1,   641,   642,   643,   644,    -1,    -1,
      -1,    -1,    -1,    -1,   651,   652,   653,    -1,   655,   656,
     657,   658,    -1,    -1,   661,    -1,    -1,   664,   665,    -1,
     667,   668,   669,   670,   671,    -1,   673,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   682,   683,   684,   685,   686,
     687,   688,    -1,   690,   691,   692,   693,   694,   695,    -1,
     697,   698,   699,   700,   701,   702,   703,    -1,   705,   706,
     707,   708,   709,   710,   711,    -1,    -1,    -1,   715,   716,
     717,   718,   719,   720,   721,   722,    -1,   724,   725,   726,
     727,   728,   729,   730,   731,   732,   733,    -1,   735,   736,
     737,   738,   739,   740,   741,   742,   743,   744,    -1,   746,
      -1,   748,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   756,
      -1,   758,    -1,    -1,    -1,    -1,   763,    -1,   765,     5,
       6,    -1,     8,     9,    10,    11,    12,    13,    -1,    15,
      -1,    -1,    -1,    -1,    20,    -1,    -1,    23,    -1,    25,
      26,    27,    28,    29,    30,    -1,    32,    -1,    -1,    35,
      36,    37,    -1,    -1,    40,    -1,    -1,    43,    44,    45,
      -1,    47,    -1,    49,    50,    -1,    -1,    53,    54,    55,
      56,    57,    -1,    59,    60,    61,    62,    63,    -1,    65,
      66,    67,    68,    69,    70,    -1,    72,    73,    -1,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      -1,    87,    88,    89,    -1,    91,    92,    93,    94,    95,
      -1,    97,    98,    99,    -1,    -1,    -1,   103,   104,   105,
      -1,   107,   108,   109,    -1,   111,   112,   113,   114,   115,
     116,    -1,    -1,    -1,    -1,   121,   122,   123,   124,    -1,
      -1,   127,   128,   129,    -1,   131,    -1,    -1,    -1,    -1,
      -1,   137,    -1,    -1,    -1,   141,   142,   143,   144,   145,
      -1,    -1,    -1,   149,    -1,    -1,   152,   153,   154,    -1,
      -1,    -1,   158,    -1,    -1,   161,   162,   163,   164,   165,
      -1,    -1,   168,   169,    -1,   171,   172,   173,   174,   175,
     176,   177,    -1,   179,   180,   181,   182,   183,   184,   185,
     186,   187,    -1,   189,   190,   191,   192,   193,   194,    -1,
     196,   197,    -1,    -1,    -1,   201,   202,    -1,    -1,    -1,
      -1,    -1,   208,    -1,   210,   211,   212,   213,    -1,   215,
      -1,   217,    -1,   219,    -1,   221,   222,    -1,   224,   225,
      -1,   227,   228,    -1,    -1,    -1,   232,   233,   234,    -1,
     236,    -1,   238,   239,   240,    -1,    -1,   243,    -1,    -1,
      -1,   247,   248,   249,   250,   251,    -1,    -1,    -1,   255,
      -1,    -1,    -1,   259,   260,    -1,   262,   263,    -1,    -1,
      -1,   267,    -1,   269,    -1,    -1,   272,   273,    -1,    -1,
     276,    -1,   278,   279,   280,    -1,    -1,    -1,    -1,    -1,
     286,   287,    -1,   289,    -1,   291,    -1,   293,   294,    -1,
      -1,   297,    -1,    -1,    -1,    -1,   302,    -1,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,    -1,   323,   324,   325,
     326,   327,   328,   329,   330,   331,   332,   333,    -1,    -1,
      -1,    -1,   338,   339,   340,   341,   342,   343,    -1,    -1,
     346,   347,   348,   349,    -1,   351,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,    -1,   363,   364,   365,
      -1,    -1,   368,   369,   370,   371,   372,   373,    -1,   375,
     376,   377,    -1,   379,   380,   381,    -1,   383,   384,    -1,
     386,   387,   388,    -1,    -1,   391,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   401,   402,   403,   404,   405,
      -1,   407,    -1,   409,   410,   411,   412,   413,   414,   415,
     416,   417,   418,   419,   420,    -1,   422,   423,   424,    -1,
     426,    -1,   428,   429,   430,   431,   432,    -1,   434,   435,
     436,    -1,    -1,   439,    -1,    -1,    -1,   443,   444,    -1,
     446,   447,    -1,    -1,   450,   451,   452,   453,   454,    -1,
     456,   457,    -1,   459,   460,   461,    -1,    -1,   464,   465,
     466,   467,   468,   469,   470,   471,    -1,   473,    -1,   475,
     476,    -1,   478,   479,   480,    -1,   482,    -1,   484,   485,
     486,   487,   488,    -1,   490,   491,   492,   493,   494,   495,
     496,    -1,    -1,   499,   500,    -1,    -1,    -1,   504,   505,
     506,   507,    -1,    -1,    -1,   511,    -1,    -1,    -1,    -1,
     516,    -1,   518,   519,   520,   521,    -1,   523,   524,   525,
     526,   527,    -1,    -1,    -1,    -1,    -1,   533,   534,   535,
      -1,   537,    -1,    -1,   540,    -1,    -1,   543,    -1,   545,
      -1,   547,   548,   549,   550,   551,   552,    -1,    -1,   555,
     556,    -1,    -1,   559,   560,   561,   562,   563,   564,   565,
     566,   567,   568,   569,   570,   571,   572,   573,   574,    -1,
      -1,   577,   578,   579,   580,    -1,   582,   583,   584,    -1,
     586,   587,   588,   589,    -1,    -1,    -1,    -1,    -1,   595,
     596,    -1,   598,   599,   600,   601,   602,    -1,   604,   605,
     606,   607,   608,   609,    -1,   611,   612,    -1,    -1,   615,
      -1,    -1,   618,    -1,   620,    -1,   622,   623,    -1,    -1,
     626,   627,   628,   629,   630,   631,    -1,    -1,   634,    -1,
      -1,    -1,   638,   639,    -1,   641,   642,   643,   644,    -1,
      -1,    -1,    -1,    -1,    -1,   651,   652,   653,    -1,   655,
     656,   657,   658,    -1,    -1,   661,    -1,    -1,   664,   665,
      -1,   667,   668,   669,   670,   671,    -1,   673,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   682,   683,   684,   685,
     686,   687,   688,    -1,   690,   691,   692,   693,   694,   695,
      -1,   697,   698,   699,   700,   701,   702,   703,    -1,   705,
     706,   707,   708,   709,   710,   711,    -1,    -1,    -1,   715,
     716,   717,   718,   719,   720,   721,   722,    -1,   724,   725,
     726,   727,   728,   729,   730,   731,   732,   733,    -1,   735,
     736,   737,   738,   739,   740,   741,   742,   743,   744,    -1,
     746,    -1,   748,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     756,    -1,   758,    -1,    -1,    -1,    -1,   763,    -1,   765,
       5,     6,    -1,     8,     9,    10,    11,    12,    -1,    -1,
      15,    -1,    -1,    -1,    -1,    20,    -1,    -1,    23,    -1,
      25,    26,    27,    28,    29,    30,    -1,    32,    -1,    -1,
      35,    36,    37,    -1,    -1,    40,    -1,    -1,    43,    44,
      45,    -1,    47,    -1,    49,    50,    -1,    -1,    53,    54,
      55,    56,    57,    -1,    59,    60,    61,    62,    63,    -1,
      65,    66,    67,    68,    69,    70,    -1,    72,    73,    -1,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    -1,    87,    88,    89,    -1,    91,    92,    93,    94,
      95,    -1,    97,    98,    99,    -1,    -1,    -1,   103,   104,
     105,    -1,   107,   108,   109,    -1,   111,   112,   113,   114,
     115,   116,    -1,    -1,    -1,    -1,   121,   122,   123,   124,
      -1,    -1,   127,   128,   129,    -1,   131,    -1,    -1,    -1,
      -1,    -1,   137,    -1,    -1,    -1,   141,   142,   143,   144,
     145,    -1,    -1,    -1,   149,    -1,    -1,   152,   153,   154,
      -1,    -1,    -1,   158,    -1,    -1,   161,   162,   163,   164,
     165,    -1,    -1,   168,   169,    -1,   171,   172,   173,   174,
     175,   176,   177,    -1,   179,   180,   181,   182,   183,   184,
     185,   186,   187,    -1,   189,   190,   191,   192,   193,   194,
      -1,   196,   197,    -1,    -1,    -1,   201,   202,    -1,    -1,
      -1,    -1,    -1,   208,    -1,   210,   211,   212,   213,    -1,
     215,    -1,   217,    -1,   219,    -1,   221,   222,    -1,   224,
     225,    -1,   227,   228,    -1,    -1,    -1,   232,   233,   234,
      -1,   236,    -1,   238,   239,   240,    -1,    -1,   243,    -1,
      -1,    -1,   247,   248,   249,   250,   251,    -1,    -1,    -1,
     255,    -1,    -1,    -1,   259,   260,    -1,   262,   263,    -1,
      -1,    -1,   267,    -1,   269,    -1,    -1,   272,   273,    -1,
      -1,   276,    -1,   278,   279,   280,    -1,    -1,    -1,    -1,
      -1,   286,   287,    -1,   289,    -1,   291,    -1,   293,   294,
      -1,    -1,   297,    -1,    -1,    -1,    -1,   302,    -1,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,    -1,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,    -1,
      -1,    -1,    -1,   338,   339,   340,   341,   342,   343,    -1,
      -1,   346,   347,   348,   349,    -1,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,    -1,   363,   364,
     365,    -1,    -1,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,    -1,   379,   380,   381,    -1,   383,   384,
      -1,   386,   387,   388,    -1,    -1,   391,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   401,   402,   403,   404,
     405,    -1,   407,    -1,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,    -1,   422,   423,   424,
      -1,   426,    -1,   428,   429,   430,   431,   432,    -1,   434,
     435,   436,    -1,    -1,   439,    -1,    -1,    -1,   443,   444,
      -1,   446,   447,    -1,    -1,   450,   451,   452,   453,   454,
      -1,   456,   457,    -1,   459,   460,   461,    -1,    -1,   464,
     465,   466,   467,   468,   469,   470,   471,    -1,   473,    -1,
     475,   476,    -1,   478,   479,   480,    -1,   482,    -1,   484,
     485,   486,   487,   488,    -1,   490,   491,   492,   493,   494,
     495,   496,    -1,    -1,   499,   500,    -1,    -1,    -1,   504,
     505,   506,   507,    -1,    -1,    -1,   511,    -1,    -1,    -1,
      -1,   516,    -1,   518,   519,   520,   521,    -1,   523,   524,
     525,   526,   527,    -1,    -1,    -1,    -1,    -1,   533,   534,
     535,    -1,   537,    -1,    -1,   540,    -1,    -1,   543,    -1,
     545,    -1,   547,   548,   549,   550,   551,   552,    -1,    -1,
     555,   556,    -1,    -1,   559,   560,   561,   562,   563,   564,
     565,   566,   567,   568,   569,   570,   571,   572,   573,   574,
      -1,    -1,   577,   578,   579,   580,    -1,   582,   583,   584,
      -1,   586,   587,   588,   589,    -1,    -1,    -1,    -1,    -1,
     595,   596,    -1,   598,   599,   600,   601,   602,    -1,   604,
     605,   606,   607,   608,   609,    -1,   611,   612,    -1,    -1,
     615,    -1,    -1,   618,    -1,   620,    -1,   622,   623,    -1,
      -1,   626,   627,   628,   629,   630,   631,    -1,    -1,   634,
      -1,    -1,    -1,   638,   639,    -1,   641,   642,   643,   644,
      -1,    -1,    -1,    -1,    -1,    -1,   651,   652,   653,    -1,
     655,   656,   657,   658,    -1,    -1,   661,    -1,    -1,   664,
     665,    -1,   667,   668,   669,   670,   671,    -1,   673,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   682,   683,   684,
     685,   686,   687,   688,    -1,   690,   691,   692,   693,   694,
     695,    -1,   697,   698,   699,   700,   701,   702,   703,    -1,
     705,   706,   707,   708,   709,   710,   711,    -1,    -1,    -1,
     715,   716,   717,   718,   719,   720,   721,   722,    -1,   724,
     725,   726,   727,   728,   729,   730,   731,   732,   733,    -1,
     735,   736,   737,   738,   739,   740,   741,   742,   743,   744,
      -1,   746,    -1,   748,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   756,    -1,   758,    -1,    -1,    -1,    -1,   763,    -1,
     765,     5,     6,    -1,     8,     9,    10,    11,    12,    -1,
      -1,    15,    -1,    -1,    -1,    -1,    20,    -1,    -1,    23,
      -1,    25,    26,    27,    28,    29,    30,    -1,    32,    -1,
      -1,    35,    36,    37,    -1,    -1,    40,    -1,    -1,    43,
      44,    45,    -1,    47,    -1,    49,    50,    -1,    -1,    53,
      54,    55,    56,    57,    -1,    59,    60,    61,    62,    63,
      -1,    65,    66,    67,    68,    69,    70,    -1,    72,    73,
      -1,    75,    76,    77,    78,    79,    80,    81,    82,    83,
      84,    85,    -1,    87,    88,    89,    -1,    91,    92,    93,
      94,    95,    -1,    97,    98,    99,    -1,    -1,    -1,   103,
     104,   105,    -1,   107,   108,   109,    -1,   111,   112,   113,
     114,   115,   116,    -1,    -1,    -1,    -1,   121,   122,   123,
     124,    -1,    -1,   127,   128,   129,    -1,   131,    -1,    -1,
      -1,    -1,    -1,   137,    -1,    -1,    -1,   141,   142,   143,
     144,   145,    -1,    -1,    -1,   149,    -1,    -1,   152,   153,
     154,    -1,    -1,    -1,   158,    -1,    -1,   161,   162,   163,
     164,   165,    -1,    -1,   168,   169,    -1,   171,   172,   173,
     174,   175,   176,   177,    -1,   179,   180,   181,   182,   183,
     184,   185,   186,   187,    -1,   189,   190,   191,   192,   193,
     194,    -1,   196,   197,    -1,    -1,    -1,   201,   202,    -1,
      -1,    -1,    -1,    -1,   208,    -1,   210,   211,   212,   213,
      -1,   215,    -1,   217,    -1,   219,    -1,   221,   222,    -1,
     224,   225,    -1,   227,   228,    -1,    -1,    -1,   232,   233,
     234,    -1,   236,    -1,   238,   239,   240,    -1,    -1,   243,
      -1,    -1,    -1,   247,   248,   249,   250,   251,    -1,    -1,
      -1,   255,    -1,    -1,    -1,   259,   260,    -1,   262,   263,
      -1,    -1,    -1,   267,    -1,   269,    -1,    -1,   272,   273,
      -1,    -1,   276,    -1,   278,   279,   280,    -1,    -1,    -1,
      -1,    -1,   286,   287,    -1,   289,    -1,   291,    -1,   293,
     294,    -1,    -1,   297,    -1,    -1,    -1,    -1,   302,    -1,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,    -1,   323,
     324,   325,   326,   327,   328,   329,   330,   331,   332,   333,
      -1,    -1,    -1,    -1,   338,   339,   340,   341,   342,   343,
      -1,    -1,   346,   347,   348,   349,    -1,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,    -1,   363,
     364,   365,    -1,    -1,   368,   369,   370,   371,   372,   373,
     374,   375,   376,   377,    -1,   379,   380,   381,    -1,   383,
     384,    -1,   386,   387,   388,    -1,    -1,   391,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   401,   402,   403,
     404,   405,    -1,   407,    -1,   409,   410,   411,   412,   413,
     414,   415,   416,   417,   418,   419,   420,    -1,   422,   423,
     424,    -1,   426,    -1,   428,   429,   430,   431,   432,    -1,
     434,   435,   436,    -1,    -1,   439,    -1,    -1,    -1,   443,
     444,    -1,   446,   447,    -1,    -1,   450,   451,   452,   453,
     454,    -1,   456,   457,    -1,   459,   460,   461,    -1,    -1,
     464,   465,   466,   467,   468,   469,   470,   471,    -1,   473,
      -1,   475,   476,    -1,   478,   479,   480,    -1,   482,    -1,
     484,   485,   486,   487,   488,    -1,   490,   491,   492,   493,
     494,   495,   496,    -1,    -1,   499,   500,    -1,    -1,    -1,
     504,   505,   506,   507,    -1,    -1,    -1,   511,    -1,    -1,
      -1,    -1,   516,    -1,   518,   519,   520,   521,    -1,   523,
     524,   525,   526,   527,    -1,    -1,    -1,    -1,    -1,   533,
     534,   535,    -1,   537,    -1,    -1,   540,    -1,    -1,   543,
      -1,   545,    -1,   547,   548,   549,   550,   551,   552,    -1,
      -1,   555,   556,    -1,    -1,   559,   560,   561,   562,   563,
     564,   565,   566,   567,   568,   569,   570,   571,   572,   573,
     574,    -1,    -1,   577,   578,   579,   580,    -1,   582,   583,
     584,    -1,   586,   587,   588,   589,    -1,    -1,    -1,    -1,
      -1,   595,   596,    -1,   598,   599,   600,   601,   602,    -1,
     604,   605,   606,   607,   608,   609,    -1,   611,   612,    -1,
      -1,   615,    -1,    -1,   618,    -1,   620,    -1,   622,   623,
      -1,    -1,   626,   627,   628,   629,   630,   631,    -1,    -1,
     634,    -1,    -1,    -1,   638,   639,    -1,   641,   642,   643,
     644,    -1,    -1,    -1,    -1,    -1,    -1,   651,   652,   653,
      -1,   655,   656,   657,   658,    -1,    -1,   661,    -1,    -1,
     664,   665,    -1,   667,   668,   669,   670,   671,    -1,   673,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   682,   683,
     684,   685,   686,   687,   688,    -1,   690,   691,   692,   693,
     694,   695,    -1,   697,   698,   699,   700,   701,   702,   703,
      -1,   705,   706,   707,   708,   709,   710,   711,    -1,    -1,
      -1,   715,   716,   717,   718,   719,   720,   721,   722,    -1,
     724,   725,   726,   727,   728,   729,   730,   731,   732,   733,
      -1,   735,   736,   737,   738,   739,   740,   741,   742,   743,
     744,    -1,   746,    -1,   748,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   756,    -1,   758,    -1,    -1,    -1,    -1,   763,
      -1,   765,     5,     6,    -1,     8,     9,    10,    11,    12,
      -1,    -1,    15,    -1,    -1,    -1,    -1,    20,    -1,    -1,
      23,    -1,    25,    26,    27,    28,    29,    30,    -1,    32,
      -1,    -1,    35,    36,    37,    -1,    -1,    40,    -1,    -1,
      43,    44,    45,    -1,    47,    -1,    49,    50,    -1,    -1,
      53,    54,    55,    56,    57,    -1,    59,    60,    61,    62,
      63,    -1,    65,    66,    67,    68,    69,    70,    -1,    72,
      73,    -1,    75,    76,    77,    78,    79,    80,    81,    82,
      83,    84,    85,    -1,    87,    88,    89,    -1,    91,    92,
      93,    94,    95,    -1,    97,    98,    99,    -1,    -1,    -1,
     103,   104,   105,    -1,   107,   108,   109,    -1,   111,   112,
     113,   114,   115,   116,    -1,    -1,    -1,    -1,   121,   122,
     123,   124,    -1,    -1,   127,   128,   129,    -1,   131,    -1,
      -1,    -1,    -1,    -1,   137,    -1,    -1,    -1,   141,   142,
     143,   144,   145,    -1,    -1,    -1,   149,    -1,    -1,   152,
     153,   154,    -1,    -1,    -1,   158,    -1,    -1,   161,   162,
     163,   164,   165,    -1,    -1,   168,   169,    -1,   171,   172,
     173,   174,   175,   176,   177,    -1,   179,   180,   181,   182,
     183,   184,   185,   186,   187,    -1,   189,   190,   191,   192,
     193,   194,    -1,   196,   197,    -1,    -1,    -1,   201,   202,
      -1,    -1,    -1,    -1,    -1,   208,    -1,   210,   211,   212,
     213,    -1,   215,    -1,   217,    -1,   219,    -1,   221,   222,
      -1,   224,   225,    -1,   227,   228,    -1,    -1,    -1,   232,
     233,   234,    -1,   236,    -1,   238,   239,   240,    -1,    -1,
     243,    -1,    -1,    -1,   247,   248,   249,   250,   251,    -1,
      -1,    -1,   255,    -1,    -1,    -1,   259,   260,    -1,   262,
     263,    -1,    -1,    -1,   267,    -1,   269,    -1,    -1,   272,
     273,    -1,    -1,   276,    -1,   278,   279,   280,    -1,    -1,
      -1,    -1,    -1,   286,   287,    -1,   289,    -1,   291,    -1,
     293,   294,    -1,    -1,   297,    -1,    -1,    -1,    -1,   302,
      -1,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,    -1,
     323,   324,   325,   326,   327,   328,   329,   330,   331,   332,
     333,    -1,    -1,    -1,    -1,   338,   339,   340,   341,   342,
     343,    -1,    -1,   346,   347,   348,   349,    -1,   351,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,    -1,
     363,   364,   365,    -1,    -1,   368,   369,   370,   371,   372,
     373,   374,   375,   376,   377,    -1,   379,   380,   381,    -1,
     383,   384,    -1,   386,   387,   388,    -1,    -1,   391,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   401,   402,
     403,   404,   405,    -1,   407,    -1,   409,   410,   411,   412,
     413,   414,   415,   416,   417,   418,   419,   420,    -1,   422,
     423,   424,    -1,   426,    -1,   428,   429,   430,   431,   432,
      -1,   434,   435,   436,    -1,    -1,   439,    -1,    -1,    -1,
     443,   444,    -1,   446,   447,    -1,    -1,   450,   451,   452,
     453,   454,    -1,   456,   457,    -1,   459,   460,   461,    -1,
      -1,   464,   465,   466,   467,   468,   469,   470,   471,    -1,
     473,    -1,   475,   476,    -1,   478,   479,   480,    -1,   482,
      -1,   484,   485,   486,   487,   488,    -1,   490,   491,   492,
     493,   494,   495,   496,    -1,    -1,   499,   500,    -1,    -1,
      -1,   504,   505,   506,   507,    -1,    -1,    -1,   511,    -1,
      -1,    -1,    -1,   516,    -1,   518,   519,   520,   521,    -1,
     523,   524,   525,   526,   527,    -1,    -1,    -1,    -1,    -1,
     533,   534,   535,    -1,   537,    -1,    -1,   540,    -1,    -1,
     543,    -1,   545,    -1,   547,   548,   549,   550,   551,   552,
      -1,    -1,   555,   556,    -1,    -1,   559,   560,   561,   562,
     563,   564,   565,   566,   567,   568,   569,   570,   571,   572,
     573,   574,    -1,    -1,   577,   578,   579,   580,    -1,   582,
     583,   584,    -1,   586,   587,   588,   589,    -1,    -1,    -1,
      -1,    -1,   595,   596,    -1,   598,   599,   600,   601,   602,
      -1,   604,   605,   606,   607,   608,   609,    -1,   611,   612,
      -1,    -1,   615,    -1,    -1,   618,    -1,   620,    -1,   622,
     623,    -1,    -1,   626,   627,   628,   629,   630,   631,    -1,
      -1,   634,    -1,    -1,    -1,   638,   639,    -1,   641,   642,
     643,   644,    -1,    -1,    -1,    -1,    -1,    -1,   651,   652,
     653,    -1,   655,   656,   657,   658,    -1,    -1,   661,    -1,
      -1,   664,   665,    -1,   667,   668,   669,   670,   671,    -1,
     673,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   682,
     683,   684,   685,   686,   687,   688,    -1,   690,   691,   692,
     693,   694,   695,    -1,   697,   698,   699,   700,   701,   702,
     703,    -1,   705,   706,   707,   708,   709,   710,   711,    -1,
      -1,    -1,   715,   716,   717,   718,   719,   720,   721,   722,
      -1,   724,   725,   726,   727,   728,   729,   730,   731,   732,
     733,    -1,   735,   736,   737,   738,   739,   740,   741,   742,
     743,   744,    -1,   746,    -1,   748,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   756,    -1,   758,    -1,    -1,    -1,    -1,
     763,    -1,   765,     5,     6,    -1,     8,     9,    10,    11,
      12,    -1,    -1,    15,    -1,    -1,    -1,    -1,    20,    -1,
      -1,    23,    -1,    25,    26,    27,    28,    29,    30,    -1,
      32,    -1,    -1,    35,    36,    37,    -1,    -1,    40,    -1,
      -1,    43,    44,    45,    -1,    47,    -1,    49,    50,    -1,
      -1,    53,    54,    55,    56,    57,    -1,    59,    60,    61,
      62,    63,    -1,    65,    66,    67,    68,    69,    70,    -1,
      72,    73,    -1,    75,    76,    77,    78,    79,    80,    81,
      82,    83,    84,    85,    -1,    87,    88,    89,    -1,    91,
      92,    93,    94,    95,    -1,    97,    98,    99,    -1,    -1,
      -1,   103,   104,   105,    -1,   107,   108,   109,    -1,   111,
     112,   113,   114,   115,   116,    -1,    -1,    -1,    -1,   121,
     122,   123,   124,    -1,    -1,   127,   128,   129,    -1,   131,
      -1,    -1,    -1,    -1,    -1,   137,    -1,    -1,    -1,   141,
     142,   143,   144,   145,    -1,    -1,    -1,   149,    -1,    -1,
     152,   153,   154,    -1,    -1,    -1,   158,    -1,    -1,   161,
     162,   163,   164,   165,    -1,    -1,   168,   169,    -1,   171,
     172,   173,   174,   175,   176,   177,    -1,   179,   180,   181,
     182,   183,   184,   185,   186,   187,    -1,   189,   190,   191,
     192,   193,   194,    -1,   196,   197,    -1,    -1,    -1,   201,
     202,    -1,    -1,    -1,    -1,    -1,   208,    -1,   210,   211,
     212,   213,    -1,   215,    -1,   217,    -1,   219,    -1,   221,
     222,    -1,   224,   225,    -1,   227,   228,    -1,    -1,    -1,
     232,   233,   234,    -1,   236,    -1,   238,   239,   240,    -1,
      -1,   243,    -1,    -1,    -1,   247,   248,   249,   250,   251,
      -1,    -1,    -1,   255,    -1,    -1,    -1,   259,   260,    -1,
     262,   263,    -1,    -1,    -1,   267,    -1,   269,    -1,    -1,
     272,   273,    -1,    -1,   276,    -1,   278,   279,   280,    -1,
      -1,    -1,    -1,    -1,   286,   287,    -1,   289,    -1,   291,
      -1,   293,   294,    -1,    -1,   297,    -1,    -1,    -1,    -1,
     302,    -1,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
      -1,   323,   324,   325,   326,   327,   328,   329,   330,   331,
     332,   333,   334,    -1,    -1,    -1,   338,   339,   340,   341,
     342,   343,    -1,    -1,   346,   347,   348,   349,    -1,   351,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
      -1,   363,   364,   365,    -1,    -1,   368,   369,   370,   371,
     372,   373,    -1,   375,   376,   377,    -1,   379,   380,   381,
      -1,   383,   384,    -1,   386,   387,   388,    -1,    -1,   391,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   401,
     402,   403,   404,   405,    -1,   407,    -1,   409,   410,   411,
     412,   413,   414,   415,   416,   417,   418,   419,   420,    -1,
     422,   423,   424,    -1,   426,    -1,   428,   429,   430,   431,
     432,    -1,   434,   435,   436,    -1,    -1,   439,    -1,    -1,
      -1,   443,   444,    -1,   446,   447,    -1,    -1,   450,   451,
     452,   453,   454,    -1,   456,   457,    -1,   459,   460,   461,
      -1,    -1,   464,   465,   466,   467,   468,   469,   470,   471,
      -1,   473,    -1,   475,   476,    -1,   478,   479,   480,    -1,
     482,    -1,   484,   485,   486,   487,   488,    -1,   490,   491,
     492,   493,   494,   495,   496,    -1,    -1,   499,   500,    -1,
      -1,    -1,   504,   505,   506,   507,    -1,    -1,    -1,   511,
      -1,    -1,    -1,    -1,   516,    -1,   518,   519,   520,   521,
      -1,   523,   524,   525,   526,   527,    -1,    -1,    -1,    -1,
      -1,   533,   534,   535,    -1,   537,    -1,    -1,   540,    -1,
      -1,   543,    -1,   545,    -1,   547,   548,   549,   550,   551,
     552,    -1,    -1,   555,   556,    -1,    -1,   559,   560,   561,
     562,   563,   564,   565,   566,   567,   568,   569,   570,   571,
     572,   573,   574,    -1,    -1,   577,   578,   579,   580,    -1,
     582,   583,   584,    -1,   586,   587,   588,   589,    -1,    -1,
      -1,    -1,    -1,   595,   596,    -1,   598,   599,   600,   601,
     602,    -1,   604,   605,   606,   607,   608,   609,    -1,   611,
     612,    -1,    -1,   615,    -1,    -1,   618,    -1,   620,    -1,
     622,   623,    -1,    -1,   626,   627,   628,   629,   630,   631,
      -1,    -1,   634,    -1,    -1,    -1,   638,   639,    -1,   641,
     642,   643,   644,    -1,    -1,    -1,    -1,    -1,    -1,   651,
     652,   653,    -1,   655,   656,   657,   658,    -1,    -1,   661,
      -1,    -1,   664,   665,    -1,   667,   668,   669,   670,   671,
      -1,   673,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     682,   683,   684,   685,   686,   687,   688,    -1,   690,   691,
     692,   693,   694,   695,    -1,   697,   698,   699,   700,   701,
     702,   703,    -1,   705,   706,   707,   708,   709,   710,   711,
      -1,    -1,    -1,   715,   716,   717,   718,   719,   720,   721,
     722,    -1,   724,   725,   726,   727,   728,   729,   730,   731,
     732,   733,    -1,   735,   736,   737,   738,   739,   740,   741,
     742,   743,   744,    -1,   746,    -1,   748,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   756,    -1,   758,    -1,    -1,    -1,
      -1,   763,    -1,   765,     5,     6,    -1,     8,     9,    10,
      11,    12,    -1,    -1,    15,    -1,    -1,    -1,    -1,    20,
      -1,    -1,    23,    -1,    25,    26,    27,    28,    29,    30,
      -1,    32,    -1,    -1,    35,    36,    37,    -1,    -1,    40,
      -1,    -1,    43,    44,    45,    -1,    47,    -1,    49,    50,
      -1,    -1,    53,    54,    55,    56,    57,    -1,    59,    60,
      61,    62,    63,    -1,    65,    66,    67,    68,    69,    70,
      -1,    72,    73,    -1,    75,    76,    77,    78,    79,    80,
      81,    82,    83,    84,    85,    -1,    87,    88,    89,    -1,
      91,    92,    93,    94,    95,    -1,    97,    98,    99,    -1,
      -1,    -1,   103,   104,   105,    -1,   107,   108,   109,    -1,
     111,   112,   113,   114,   115,   116,    -1,    -1,    -1,    -1,
     121,   122,   123,   124,    -1,    -1,   127,   128,   129,    -1,
     131,    -1,    -1,    -1,    -1,    -1,   137,    -1,    -1,    -1,
     141,   142,   143,   144,   145,    -1,    -1,    -1,   149,    -1,
      -1,   152,   153,   154,    -1,    -1,    -1,   158,    -1,    -1,
     161,   162,   163,   164,   165,    -1,    -1,   168,   169,    -1,
     171,   172,   173,   174,   175,   176,   177,    -1,   179,   180,
     181,   182,   183,   184,   185,   186,   187,    -1,   189,   190,
     191,   192,   193,   194,    -1,   196,   197,    -1,    -1,    -1,
     201,   202,    -1,    -1,    -1,    -1,    -1,   208,    -1,   210,
     211,   212,   213,    -1,   215,    -1,   217,    -1,   219,    -1,
     221,   222,    -1,   224,   225,    -1,   227,   228,    -1,    -1,
      -1,   232,   233,   234,    -1,   236,    -1,   238,   239,   240,
      -1,    -1,   243,    -1,    -1,    -1,   247,   248,   249,   250,
     251,    -1,    -1,    -1,   255,    -1,    -1,    -1,   259,   260,
      -1,   262,   263,    -1,    -1,    -1,   267,    -1,   269,    -1,
      -1,   272,   273,    -1,    -1,   276,    -1,   278,   279,   280,
      -1,    -1,    -1,    -1,    -1,   286,   287,    -1,   289,    -1,
     291,    -1,   293,   294,    -1,    -1,   297,    -1,    -1,    -1,
      -1,   302,    -1,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,    -1,   323,   324,   325,   326,   327,   328,   329,   330,
     331,   332,   333,   334,    -1,    -1,    -1,   338,   339,   340,
     341,   342,   343,    -1,    -1,   346,   347,   348,   349,    -1,
     351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,    -1,   363,   364,   365,    -1,    -1,   368,   369,   370,
     371,   372,   373,    -1,   375,   376,   377,    -1,   379,   380,
     381,    -1,   383,   384,    -1,   386,   387,   388,    -1,    -1,
     391,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     401,   402,   403,   404,   405,    -1,   407,    -1,   409,   410,
     411,   412,   413,   414,   415,   416,   417,   418,   419,   420,
      -1,   422,   423,   424,    -1,   426,    -1,   428,   429,   430,
     431,   432,    -1,   434,   435,   436,    -1,    -1,   439,    -1,
      -1,    -1,   443,   444,    -1,   446,   447,    -1,    -1,   450,
     451,   452,   453,   454,    -1,   456,   457,    -1,   459,   460,
     461,    -1,    -1,   464,   465,   466,   467,   468,   469,   470,
     471,    -1,   473,    -1,   475,   476,    -1,   478,   479,   480,
      -1,   482,    -1,   484,   485,   486,   487,   488,    -1,   490,
     491,   492,   493,   494,   495,   496,    -1,    -1,   499,   500,
      -1,    -1,    -1,   504,   505,   506,   507,    -1,    -1,    -1,
     511,    -1,    -1,    -1,    -1,   516,    -1,   518,   519,   520,
     521,    -1,   523,   524,   525,   526,   527,    -1,    -1,    -1,
      -1,    -1,   533,   534,   535,    -1,   537,    -1,    -1,   540,
      -1,    -1,   543,    -1,   545,    -1,   547,   548,   549,   550,
     551,   552,    -1,    -1,   555,   556,    -1,    -1,   559,   560,
     561,   562,   563,   564,   565,   566,   567,   568,   569,   570,
     571,   572,   573,   574,    -1,    -1,   577,   578,   579,   580,
      -1,   582,   583,   584,    -1,   586,   587,   588,   589,    -1,
      -1,    -1,    -1,    -1,   595,   596,    -1,   598,   599,   600,
     601,   602,    -1,   604,   605,   606,   607,   608,   609,    -1,
     611,   612,    -1,    -1,   615,    -1,    -1,   618,    -1,   620,
      -1,   622,   623,    -1,    -1,   626,   627,   628,   629,   630,
     631,    -1,    -1,   634,    -1,    -1,    -1,   638,   639,    -1,
     641,   642,   643,   644,    -1,    -1,    -1,    -1,    -1,    -1,
     651,   652,   653,    -1,   655,   656,   657,   658,    -1,    -1,
     661,    -1,    -1,   664,   665,    -1,   667,   668,   669,   670,
     671,    -1,   673,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   682,   683,   684,   685,   686,   687,   688,    -1,   690,
     691,   692,   693,   694,   695,    -1,   697,   698,   699,   700,
     701,   702,   703,    -1,   705,   706,   707,   708,   709,   710,
     711,    -1,    -1,    -1,   715,   716,   717,   718,   719,   720,
     721,   722,    -1,   724,   725,   726,   727,   728,   729,   730,
     731,   732,   733,    -1,   735,   736,   737,   738,   739,   740,
     741,   742,   743,   744,    -1,   746,    -1,   748,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   756,    -1,   758,    -1,    -1,
      -1,    -1,   763,    -1,   765,     5,     6,    -1,     8,     9,
      10,    11,    12,    -1,    -1,    15,    -1,    -1,    -1,    -1,
      20,    -1,    -1,    23,    -1,    25,    26,    27,    28,    29,
      30,    -1,    32,    -1,    -1,    35,    36,    37,    -1,    -1,
      40,    -1,    -1,    43,    44,    45,    -1,    47,    -1,    49,
      50,    -1,    -1,    53,    54,    55,    56,    57,    -1,    59,
      60,    61,    62,    63,    -1,    65,    66,    67,    68,    69,
      70,    -1,    72,    73,    -1,    75,    76,    77,    78,    79,
      80,    81,    82,    83,    84,    85,    -1,    87,    88,    89,
      -1,    91,    92,    93,    94,    95,    -1,    97,    98,    99,
      -1,    -1,    -1,   103,   104,   105,    -1,   107,   108,   109,
      -1,   111,   112,   113,   114,   115,   116,    -1,    -1,    -1,
      -1,   121,   122,   123,   124,    -1,    -1,   127,   128,   129,
      -1,   131,    -1,    -1,    -1,    -1,    -1,   137,    -1,    -1,
      -1,   141,   142,   143,   144,   145,    -1,    -1,    -1,   149,
      -1,    -1,   152,   153,   154,    -1,    -1,    -1,   158,    -1,
      -1,   161,   162,   163,   164,   165,    -1,    -1,   168,   169,
      -1,   171,   172,   173,   174,   175,   176,   177,    -1,   179,
     180,   181,   182,   183,   184,   185,   186,   187,    -1,   189,
     190,   191,   192,   193,   194,    -1,   196,   197,    -1,    -1,
      -1,   201,   202,    -1,    -1,    -1,    -1,    -1,   208,    -1,
     210,   211,   212,   213,    -1,   215,    -1,   217,    -1,   219,
      -1,   221,   222,    -1,   224,   225,    -1,   227,   228,    -1,
      -1,    -1,   232,   233,   234,    -1,   236,    -1,   238,   239,
     240,    -1,    -1,   243,    -1,    -1,    -1,   247,   248,   249,
     250,   251,    -1,    -1,    -1,   255,    -1,    -1,    -1,   259,
     260,    -1,   262,   263,    -1,    -1,    -1,   267,    -1,   269,
      -1,    -1,   272,   273,    -1,    -1,   276,    -1,   278,   279,
     280,    -1,    -1,    -1,    -1,    -1,   286,   287,    -1,   289,
      -1,   291,    -1,   293,   294,    -1,    -1,   297,    -1,    -1,
      -1,    -1,   302,    -1,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,    -1,   323,   324,   325,   326,   327,   328,   329,
     330,   331,   332,   333,    -1,    -1,    -1,    -1,   338,   339,
     340,   341,   342,   343,    -1,    -1,   346,   347,   348,   349,
      -1,   351,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,    -1,   363,   364,   365,    -1,    -1,   368,   369,
     370,   371,   372,   373,    -1,   375,   376,   377,    -1,   379,
     380,   381,    -1,   383,   384,    -1,   386,   387,   388,    -1,
      -1,   391,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   401,   402,   403,   404,   405,    -1,   407,    -1,   409,
     410,   411,   412,   413,   414,   415,   416,   417,   418,   419,
     420,    -1,   422,   423,   424,    -1,   426,    -1,   428,   429,
     430,   431,   432,    -1,   434,   435,   436,    -1,    -1,   439,
      -1,    -1,    -1,   443,   444,    -1,   446,   447,    -1,    -1,
     450,   451,   452,   453,   454,    -1,   456,   457,    -1,   459,
     460,   461,    -1,    -1,   464,   465,   466,   467,   468,   469,
     470,   471,    -1,   473,    -1,   475,   476,    -1,   478,   479,
     480,    -1,   482,    -1,   484,   485,   486,   487,   488,    -1,
     490,   491,   492,   493,   494,   495,   496,    -1,    -1,   499,
     500,    -1,    -1,    -1,   504,   505,   506,   507,    -1,    -1,
      -1,   511,    -1,    -1,    -1,    -1,   516,    -1,   518,   519,
     520,   521,    -1,   523,   524,   525,   526,   527,    -1,    -1,
      -1,    -1,    -1,   533,   534,   535,    -1,   537,    -1,    -1,
     540,    -1,    -1,   543,    -1,   545,    -1,   547,   548,   549,
     550,   551,   552,    -1,    -1,   555,   556,    -1,    -1,   559,
     560,   561,   562,   563,   564,   565,   566,   567,   568,   569,
     570,   571,   572,   573,   574,    -1,    -1,   577,   578,   579,
     580,    -1,   582,   583,   584,    -1,   586,   587,   588,   589,
      -1,    -1,    -1,    -1,    -1,   595,   596,    -1,   598,   599,
     600,   601,   602,    -1,   604,   605,   606,   607,   608,   609,
      -1,   611,   612,    -1,    -1,   615,    -1,    -1,   618,    -1,
     620,    -1,   622,   623,    -1,    -1,   626,   627,   628,   629,
     630,   631,    -1,    -1,   634,    -1,    -1,    -1,   638,   639,
      -1,   641,   642,   643,   644,    -1,    -1,    -1,    -1,    -1,
      -1,   651,   652,   653,    -1,   655,   656,   657,   658,    -1,
      -1,   661,    -1,    -1,   664,   665,    -1,   667,   668,   669,
     670,   671,    -1,   673,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   682,   683,   684,   685,   686,   687,   688,    -1,
     690,   691,   692,   693,   694,   695,    -1,   697,   698,   699,
     700,   701,   702,   703,    -1,   705,   706,   707,   708,   709,
     710,   711,    -1,    -1,    -1,   715,   716,   717,   718,   719,
     720,   721,   722,    -1,   724,   725,   726,   727,   728,   729,
     730,   731,   732,   733,    -1,   735,   736,   737,   738,   739,
     740,   741,   742,   743,   744,    -1,   746,    -1,   748,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   756,    -1,   758,    -1,
      -1,    -1,    -1,   763,    -1,   765,     5,     6,    -1,     8,
       9,    10,    11,    12,    -1,    -1,    15,    -1,    -1,    -1,
      -1,    20,    -1,    -1,    23,    -1,    25,    26,    27,    28,
      29,    30,    -1,    32,    -1,    -1,    35,    36,    37,    -1,
      -1,    40,    -1,    -1,    43,    44,    45,    -1,    47,    -1,
      49,    50,    -1,    -1,    53,    54,    55,    56,    57,    -1,
      59,    60,    61,    62,    63,    -1,    65,    66,    67,    68,
      69,    70,    -1,    72,    73,    -1,    75,    76,    77,    78,
      79,    80,    81,    82,    83,    84,    85,    -1,    87,    88,
      89,    -1,    91,    92,    93,    94,    95,    -1,    97,    98,
      99,    -1,    -1,    -1,   103,   104,   105,    -1,   107,   108,
     109,    -1,   111,   112,   113,   114,   115,   116,    -1,    -1,
      -1,    -1,   121,   122,   123,   124,    -1,    -1,   127,   128,
     129,    -1,   131,    -1,    -1,    -1,    -1,    -1,   137,    -1,
      -1,    -1,   141,   142,   143,   144,   145,    -1,    -1,    -1,
     149,    -1,    -1,   152,   153,   154,    -1,    -1,    -1,   158,
      -1,    -1,   161,   162,   163,   164,   165,    -1,    -1,   168,
     169,    -1,   171,   172,   173,   174,   175,   176,   177,    -1,
     179,   180,   181,   182,   183,   184,   185,   186,   187,    -1,
     189,   190,   191,   192,   193,   194,    -1,   196,   197,    -1,
      -1,    -1,   201,   202,    -1,    -1,    -1,    -1,    -1,   208,
      -1,   210,   211,   212,   213,    -1,   215,    -1,   217,    -1,
     219,    -1,   221,   222,    -1,   224,   225,    -1,   227,   228,
      -1,    -1,    -1,   232,   233,   234,    -1,   236,    -1,   238,
     239,   240,    -1,    -1,   243,    -1,    -1,    -1,   247,   248,
     249,   250,   251,    -1,    -1,    -1,   255,    -1,    -1,    -1,
     259,   260,    -1,   262,   263,    -1,    -1,    -1,   267,    -1,
     269,    -1,    -1,   272,   273,    -1,    -1,   276,    -1,   278,
     279,   280,    -1,    -1,    -1,    -1,    -1,   286,   287,    -1,
     289,    -1,   291,    -1,   293,   294,    -1,    -1,   297,    -1,
      -1,    -1,    -1,   302,    -1,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,    -1,   323,   324,   325,   326,   327,   328,
     329,   330,   331,   332,   333,    -1,    -1,    -1,    -1,   338,
     339,   340,   341,   342,   343,    -1,    -1,   346,   347,   348,
     349,    -1,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,    -1,   363,   364,   365,    -1,    -1,   368,
     369,   370,   371,   372,   373,    -1,   375,   376,   377,    -1,
     379,   380,   381,    -1,   383,   384,    -1,   386,   387,   388,
      -1,    -1,   391,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   401,   402,   403,   404,   405,    -1,   407,    -1,
     409,   410,   411,   412,   413,   414,   415,   416,   417,   418,
     419,   420,    -1,   422,   423,   424,    -1,   426,    -1,   428,
     429,   430,   431,   432,    -1,   434,   435,   436,    -1,    -1,
     439,    -1,    -1,    -1,   443,   444,    -1,   446,   447,    -1,
      -1,   450,   451,   452,   453,   454,    -1,   456,   457,    -1,
     459,   460,   461,    -1,    -1,   464,   465,   466,   467,   468,
     469,   470,   471,    -1,   473,    -1,   475,   476,    -1,   478,
     479,   480,    -1,   482,    -1,   484,   485,   486,   487,   488,
      -1,   490,   491,   492,   493,   494,   495,   496,    -1,    -1,
     499,   500,    -1,    -1,    -1,   504,   505,   506,   507,    -1,
      -1,    -1,   511,    -1,    -1,    -1,    -1,   516,    -1,   518,
     519,   520,   521,    -1,   523,   524,   525,   526,   527,    -1,
      -1,    -1,    -1,    -1,   533,   534,   535,    -1,   537,    -1,
      -1,   540,    -1,    -1,   543,    -1,   545,    -1,   547,   548,
     549,   550,   551,   552,    -1,    -1,   555,   556,    -1,    -1,
     559,   560,   561,   562,   563,   564,   565,   566,   567,   568,
     569,   570,   571,   572,   573,   574,    -1,    -1,   577,   578,
     579,   580,    -1,   582,   583,   584,    -1,   586,   587,   588,
     589,    -1,    -1,    -1,    -1,    -1,   595,   596,    -1,   598,
     599,   600,   601,   602,    -1,   604,   605,   606,   607,   608,
     609,    -1,   611,   612,    -1,    -1,   615,    -1,    -1,   618,
      -1,   620,    -1,   622,   623,    -1,    -1,   626,   627,   628,
     629,   630,   631,    -1,    -1,   634,    -1,    -1,    -1,   638,
     639,    -1,   641,   642,   643,   644,    -1,    -1,    -1,    -1,
      -1,    -1,   651,   652,   653,    -1,   655,   656,   657,   658,
      -1,    -1,   661,    -1,    -1,   664,   665,    -1,   667,   668,
     669,   670,   671,    -1,   673,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   682,   683,   684,   685,   686,   687,   688,
      -1,   690,   691,   692,   693,   694,   695,    -1,   697,   698,
     699,   700,   701,   702,   703,    -1,   705,   706,   707,   708,
     709,   710,   711,    -1,    -1,    -1,   715,   716,   717,   718,
     719,   720,   721,   722,    -1,   724,   725,   726,   727,   728,
     729,   730,   731,   732,   733,    -1,   735,   736,   737,   738,
     739,   740,   741,   742,   743,   744,    -1,   746,    -1,   748,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   756,    -1,   758,
      -1,    -1,    -1,    -1,   763,    -1,   765,     5,     6,    -1,
       8,     9,    10,    11,    12,    -1,    -1,    15,    -1,    -1,
      -1,    -1,    20,    -1,    -1,    23,    -1,    25,    26,    27,
      28,    29,    30,    -1,    32,    -1,    -1,    35,    36,    37,
      -1,    -1,    40,    -1,    -1,    43,    44,    45,    -1,    47,
      -1,    49,    50,    -1,    -1,    53,    54,    55,    56,    57,
      -1,    59,    60,    61,    62,    63,    -1,    65,    66,    67,
      68,    69,    70,    -1,    72,    73,    -1,    75,    76,    77,
      78,    79,    80,    81,    82,    83,    84,    85,    -1,    87,
      88,    89,    -1,    91,    92,    93,    94,    95,    -1,    97,
      98,    99,    -1,    -1,    -1,   103,   104,   105,    -1,   107,
     108,   109,    -1,   111,   112,   113,   114,   115,   116,    -1,
      -1,    -1,    -1,   121,   122,   123,   124,    -1,    -1,   127,
     128,   129,    -1,   131,    -1,    -1,    -1,    -1,    -1,   137,
      -1,    -1,    -1,   141,   142,   143,   144,   145,    -1,    -1,
      -1,   149,    -1,    -1,   152,   153,   154,    -1,    -1,    -1,
     158,    -1,    -1,   161,   162,   163,   164,   165,    -1,    -1,
     168,   169,    -1,   171,   172,   173,   174,   175,   176,   177,
      -1,   179,   180,   181,   182,   183,   184,   185,   186,   187,
      -1,   189,   190,   191,   192,   193,   194,    -1,   196,   197,
      -1,    -1,    -1,   201,   202,    -1,    -1,    -1,    -1,    -1,
     208,    -1,   210,   211,   212,   213,    -1,   215,    -1,   217,
      -1,   219,    -1,   221,   222,    -1,   224,   225,    -1,   227,
     228,    -1,    -1,    -1,   232,   233,   234,    -1,   236,    -1,
     238,   239,   240,    -1,    -1,   243,    -1,    -1,    -1,   247,
     248,   249,   250,   251,    -1,    -1,    -1,   255,    -1,    -1,
      -1,   259,   260,    -1,   262,   263,    -1,    -1,    -1,   267,
      -1,   269,    -1,    -1,   272,   273,    -1,    -1,   276,    -1,
     278,   279,   280,    -1,    -1,    -1,    -1,    -1,   286,   287,
      -1,   289,    -1,   291,    -1,   293,   294,    -1,    -1,   297,
      -1,    -1,    -1,    -1,   302,    -1,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,    -1,   323,   324,   325,   326,   327,
     328,   329,   330,   331,   332,   333,    -1,    -1,    -1,    -1,
     338,   339,   340,   341,   342,   343,    -1,    -1,   346,   347,
     348,   349,    -1,   351,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,    -1,   363,   364,   365,    -1,    -1,
     368,   369,   370,   371,   372,   373,    -1,   375,   376,   377,
      -1,   379,   380,   381,    -1,   383,   384,    -1,   386,   387,
     388,    -1,    -1,   391,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   401,   402,   403,   404,   405,    -1,   407,
      -1,   409,   410,   411,   412,   413,   414,   415,   416,   417,
     418,   419,   420,    -1,   422,   423,   424,    -1,   426,    -1,
     428,   429,   430,   431,   432,    -1,   434,   435,   436,    -1,
      -1,   439,    -1,    -1,    -1,   443,   444,    -1,   446,   447,
      -1,    -1,   450,   451,   452,   453,   454,    -1,   456,   457,
      -1,   459,   460,   461,    -1,    -1,   464,   465,   466,   467,
     468,   469,   470,   471,    -1,   473,    -1,   475,   476,    -1,
     478,   479,   480,    -1,   482,    -1,   484,   485,   486,   487,
     488,    -1,   490,   491,   492,   493,   494,   495,   496,    -1,
      -1,   499,   500,    -1,    -1,    -1,   504,   505,   506,   507,
      -1,    -1,    -1,   511,    -1,    -1,    -1,    -1,   516,    -1,
     518,   519,   520,   521,    -1,   523,   524,   525,   526,   527,
      -1,    -1,    -1,    -1,    -1,   533,   534,   535,    -1,   537,
      -1,    -1,   540,    -1,    -1,   543,    -1,   545,    -1,   547,
     548,   549,   550,   551,   552,    -1,    -1,   555,   556,    -1,
      -1,   559,   560,   561,   562,   563,   564,   565,   566,   567,
     568,   569,   570,   571,   572,   573,   574,    -1,    -1,   577,
     578,   579,   580,    -1,   582,   583,   584,    -1,   586,   587,
     588,   589,    -1,    -1,    -1,    -1,    -1,   595,   596,    -1,
     598,   599,   600,   601,   602,    -1,   604,   605,   606,   607,
     608,   609,    -1,   611,   612,    -1,    -1,   615,    -1,    -1,
     618,    -1,   620,    -1,   622,   623,    -1,    -1,   626,   627,
     628,   629,   630,   631,    -1,    -1,   634,    -1,    -1,    -1,
     638,   639,    -1,   641,   642,   643,   644,    -1,    -1,    -1,
      -1,    -1,    -1,   651,   652,   653,    -1,   655,   656,   657,
     658,    -1,    -1,   661,    -1,    -1,   664,   665,    -1,   667,
     668,   669,   670,   671,    -1,   673,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   682,   683,   684,   685,   686,   687,
     688,    -1,   690,   691,   692,   693,   694,   695,    -1,   697,
     698,   699,   700,   701,   702,   703,    -1,   705,   706,   707,
     708,   709,   710,   711,    -1,    -1,    -1,   715,   716,   717,
     718,   719,   720,   721,   722,    -1,   724,   725,   726,   727,
     728,   729,   730,   731,   732,   733,    -1,   735,   736,   737,
     738,   739,   740,   741,   742,   743,   744,    -1,   746,    -1,
     748,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   756,    -1,
     758,    -1,    -1,    -1,    -1,   763,    -1,   765,     5,     6,
      -1,     8,     9,    10,    11,    12,    -1,    -1,    15,    -1,
      -1,    -1,    -1,    20,    -1,    -1,    23,    -1,    25,    26,
      27,    28,    29,    30,    -1,    32,    -1,    -1,    -1,    36,
      -1,    -1,    -1,    40,    -1,    -1,    43,    44,    45,    -1,
      47,    -1,    49,    50,    -1,    -1,    53,    -1,    -1,    56,
      57,    -1,    59,    60,    61,    -1,    63,    -1,    65,    66,
      67,    68,    69,    70,    -1,    72,    73,    -1,    75,    76,
      77,    78,    79,    80,    81,    82,    83,    84,    85,    -1,
      -1,    88,    89,    -1,    91,    92,    93,    94,    95,    -1,
      -1,    -1,    99,    -1,    -1,    -1,    -1,   104,    -1,    -1,
     107,    -1,    -1,    -1,   111,   112,   113,    -1,    -1,   116,
      -1,    -1,    -1,    -1,   121,   122,    -1,    -1,    -1,    -1,
      -1,   128,   129,    -1,   131,    -1,    -1,    -1,    -1,    -1,
     137,    -1,    -1,    -1,    -1,   142,   143,   144,   145,    -1,
      -1,    -1,   149,    -1,    -1,   152,   153,   154,    -1,    -1,
      -1,   158,    -1,    -1,   161,   162,   163,   164,   165,    -1,
      -1,   168,   169,    -1,   171,   172,   173,   174,   175,   176,
      -1,    -1,   179,   180,   181,   182,   183,    -1,    -1,   186,
     187,    -1,   189,   190,   191,   192,   193,    -1,    -1,   196,
     197,    -1,    -1,    -1,   201,   202,    -1,    -1,    -1,    -1,
      -1,   208,    -1,   210,   211,   212,   213,    -1,   215,    -1,
     217,    -1,    -1,    -1,   221,   222,    -1,   224,    -1,    -1,
     227,   228,    -1,    -1,    -1,   232,   233,   234,    -1,    -1,
      -1,   238,   239,   240,    -1,    -1,   243,    -1,    -1,    -1,
      -1,   248,   249,   250,    -1,    -1,    -1,    -1,   255,    -1,
      -1,    -1,   259,   260,    -1,   262,   263,    -1,    -1,    -1,
     267,    -1,   269,    -1,    -1,   272,   273,    -1,    -1,   276,
      -1,    -1,   279,   280,   281,    -1,    -1,    -1,    -1,   286,
     287,    -1,   289,    -1,   291,    -1,   293,   294,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   302,    -1,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,    -1,   323,   324,   325,    -1,
     327,   328,   329,   330,    -1,   332,   333,    -1,    -1,    -1,
      -1,   338,   339,   340,   341,   342,   343,    -1,    -1,   346,
     347,    -1,   349,    -1,   351,    -1,   353,   354,   355,   356,
     357,   358,   359,   360,   361,    -1,    -1,   364,   365,    -1,
      -1,   368,   369,   370,   371,   372,    -1,    -1,    -1,   376,
     377,    -1,    -1,    -1,   381,    -1,   383,   384,    -1,   386,
     387,   388,    -1,    -1,   391,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   401,   402,   403,    -1,   405,    -1,
     407,    -1,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,    -1,   420,    -1,   422,   423,   424,    -1,   426,
      -1,   428,   429,   430,   431,   432,    -1,   434,   435,   436,
      -1,    -1,   439,    -1,    -1,    -1,   443,   444,    -1,   446,
     447,    -1,    -1,   450,   451,   452,   453,   454,    -1,   456,
     457,    -1,   459,   460,   461,    -1,    -1,   464,   465,   466,
     467,   468,   469,   470,   471,    -1,   473,    -1,   475,   476,
      -1,   478,   479,   480,    -1,   482,    -1,    -1,   485,   486,
     487,   488,    -1,   490,    -1,   492,   493,   494,   495,   496,
      -1,    -1,   499,   500,    -1,    -1,    -1,   504,   505,   506,
     507,    -1,    -1,    -1,   511,    -1,    -1,    -1,    -1,   516,
      -1,   518,   519,   520,   521,    -1,   523,   524,   525,   526,
     527,    -1,    -1,    -1,    -1,    -1,   533,   534,   535,    -1,
     537,    -1,    -1,   540,    -1,    -1,   543,    -1,   545,    -1,
     547,   548,   549,   550,   551,   552,    -1,    -1,   555,   556,
      -1,    -1,   559,   560,   561,   562,   563,   564,    -1,    -1,
     567,   568,   569,   570,    -1,   572,   573,   574,    -1,    -1,
     577,   578,   579,   580,    -1,   582,   583,   584,    -1,   586,
     587,   588,   589,    -1,    -1,    -1,    -1,    -1,   595,   596,
      -1,    -1,    -1,   600,   601,   602,    -1,    -1,   605,   606,
      -1,   608,   609,    -1,   611,   612,    -1,    -1,   615,    -1,
      -1,   618,    -1,   620,    -1,   622,   623,    -1,    -1,    -1,
      -1,    -1,   629,    -1,   631,    -1,    -1,   634,    -1,    -1,
      -1,    -1,   639,    -1,   641,   642,   643,   644,    -1,    -1,
      -1,    -1,    -1,    -1,   651,   652,   653,    -1,   655,   656,
     657,   658,    -1,    -1,   661,    -1,    -1,   664,   665,    -1,
     667,   668,   669,   670,   671,    -1,   673,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   682,   683,   684,    -1,   686,
     687,   688,    -1,   690,    -1,    -1,   693,    -1,   695,    -1,
      -1,    -1,    -1,    -1,    -1,   702,   703,    -1,    -1,   706,
      -1,   708,    -1,   710,   711,    -1,    -1,    -1,   715,   716,
     717,   718,   719,   720,   721,   722,    -1,   724,   725,   726,
     727,   728,   729,   730,   731,   732,   733,    -1,   735,   736,
     737,   738,   739,   740,   741,   742,   743,   744,    -1,     5,
       6,    -1,     8,     9,    10,    11,    12,    -1,    -1,    15,
      -1,    -1,    -1,    -1,    20,    -1,    -1,    23,   765,    25,
      26,    27,    28,    29,    30,    -1,    32,    -1,    -1,    -1,
      36,    -1,    -1,    -1,    40,    -1,    -1,    43,    44,    45,
      -1,    47,    -1,    49,    50,    -1,    -1,    53,    -1,    -1,
      56,    57,    -1,    59,    60,    61,    -1,    63,    -1,    65,
      66,    67,    68,    69,    70,    -1,    72,    73,    -1,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      -1,    -1,    88,    89,    -1,    91,    92,    93,    94,    95,
      -1,    -1,    -1,    99,    -1,    -1,    -1,    -1,   104,    -1,
      -1,   107,    -1,    -1,    -1,   111,   112,   113,    -1,    -1,
     116,    -1,    -1,    -1,    -1,   121,   122,    -1,    -1,    -1,
      -1,    -1,   128,   129,    -1,   131,    -1,    -1,    -1,    -1,
      -1,   137,    -1,    -1,    -1,    -1,   142,   143,   144,   145,
      -1,    -1,    -1,   149,    -1,    -1,   152,   153,   154,    -1,
      -1,    -1,   158,    -1,    -1,   161,   162,   163,   164,   165,
      -1,    -1,   168,   169,    -1,   171,   172,   173,   174,   175,
     176,    -1,    -1,   179,   180,   181,   182,   183,    -1,    -1,
     186,   187,    -1,   189,   190,   191,   192,   193,    -1,    -1,
     196,   197,    -1,    -1,    -1,   201,   202,    -1,    -1,    -1,
      -1,    -1,   208,    -1,   210,   211,   212,   213,    -1,   215,
      -1,   217,    -1,    -1,    -1,   221,   222,    -1,   224,    -1,
      -1,   227,   228,    -1,    -1,    -1,   232,   233,   234,    -1,
      -1,    -1,   238,   239,   240,    -1,    -1,   243,    -1,    -1,
      -1,    -1,   248,   249,   250,    -1,    -1,    -1,    -1,   255,
      -1,    -1,    -1,   259,   260,    -1,   262,   263,    -1,    -1,
      -1,   267,    -1,   269,    -1,    -1,   272,   273,    -1,    -1,
     276,    -1,    -1,   279,   280,   281,    -1,    -1,    -1,    -1,
     286,   287,    -1,   289,    -1,   291,    -1,   293,   294,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   302,    -1,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,    -1,   323,   324,   325,
      -1,   327,   328,   329,   330,    -1,   332,   333,    -1,    -1,
      -1,    -1,   338,   339,   340,   341,   342,   343,    -1,    -1,
     346,   347,    -1,   349,    -1,   351,    -1,   353,   354,   355,
     356,   357,   358,   359,   360,   361,    -1,    -1,   364,   365,
      -1,    -1,   368,   369,   370,   371,   372,    -1,    -1,    -1,
     376,   377,    -1,    -1,    -1,   381,    -1,   383,   384,    -1,
     386,   387,   388,    -1,    -1,   391,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   401,   402,   403,    -1,   405,
      -1,   407,    -1,   409,   410,   411,   412,   413,   414,   415,
     416,   417,   418,    -1,   420,    -1,   422,   423,   424,    -1,
     426,    -1,   428,   429,   430,   431,   432,    -1,   434,   435,
     436,    -1,    -1,   439,    -1,    -1,    -1,   443,   444,    -1,
     446,   447,    -1,    -1,   450,   451,   452,   453,   454,    -1,
     456,   457,    -1,   459,   460,   461,    -1,    -1,   464,   465,
     466,   467,   468,   469,   470,   471,    -1,   473,    -1,   475,
     476,    -1,   478,   479,   480,    -1,   482,    -1,    -1,   485,
     486,   487,   488,    -1,   490,    -1,   492,   493,   494,   495,
     496,    -1,    -1,   499,   500,    -1,    -1,    -1,   504,   505,
     506,   507,    -1,    -1,    -1,   511,    -1,    -1,    -1,    -1,
     516,    -1,   518,   519,   520,   521,    -1,   523,   524,   525,
     526,   527,    -1,    -1,    -1,    -1,    -1,   533,   534,   535,
      -1,   537,    -1,    -1,   540,    -1,    -1,   543,    -1,   545,
      -1,   547,   548,   549,   550,   551,   552,    -1,    -1,   555,
     556,    -1,    -1,   559,   560,   561,   562,   563,   564,    -1,
      -1,   567,   568,   569,   570,    -1,   572,   573,   574,    -1,
      -1,   577,   578,   579,   580,    -1,   582,   583,   584,    -1,
     586,   587,   588,   589,    -1,    -1,    -1,    -1,    -1,   595,
     596,    -1,    -1,    -1,   600,   601,   602,    -1,    -1,   605,
     606,    -1,   608,   609,    -1,   611,   612,    -1,    -1,   615,
      -1,    -1,   618,    -1,   620,    -1,   622,   623,    -1,    -1,
      -1,    -1,    -1,   629,    -1,   631,    -1,    -1,   634,    -1,
      -1,    -1,    -1,   639,    -1,   641,   642,   643,   644,    -1,
      -1,    -1,    -1,    -1,    -1,   651,   652,   653,    -1,   655,
     656,   657,   658,    -1,    -1,   661,    -1,    -1,   664,   665,
      -1,   667,   668,   669,   670,   671,    -1,   673,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   682,   683,   684,    -1,
     686,   687,   688,    -1,   690,    -1,    -1,   693,    -1,   695,
      -1,    -1,    -1,    -1,    -1,    -1,   702,   703,    -1,    -1,
     706,    -1,   708,    -1,   710,   711,    -1,    -1,    -1,   715,
     716,   717,   718,   719,   720,   721,   722,    -1,   724,   725,
     726,   727,   728,   729,   730,   731,   732,   733,    -1,   735,
     736,   737,   738,   739,   740,   741,   742,   743,   744,    -1,
       5,     6,    -1,     8,     9,    10,    11,    12,    -1,    -1,
      15,    -1,    -1,    -1,    -1,    20,    -1,    -1,    23,   765,
      25,    26,    27,    28,    29,    30,    -1,    32,    -1,    -1,
      -1,    36,    -1,    -1,    -1,    40,    -1,    -1,    43,    44,
      45,    -1,    47,    -1,    49,    50,    -1,    -1,    53,    -1,
      -1,    56,    57,    -1,    59,    60,    61,    -1,    63,    -1,
      65,    66,    67,    68,    69,    70,    -1,    72,    73,    -1,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    -1,    -1,    88,    89,    -1,    91,    92,    93,    94,
      95,    -1,    -1,    -1,    99,    -1,    -1,    -1,    -1,   104,
      -1,    -1,   107,    -1,    -1,    -1,   111,   112,   113,    -1,
      -1,   116,    -1,    -1,    -1,    -1,   121,   122,    -1,    -1,
      -1,    -1,    -1,   128,   129,    -1,   131,    -1,    -1,    -1,
      -1,    -1,   137,    -1,    -1,    -1,    -1,   142,   143,   144,
     145,    -1,    -1,    -1,   149,    -1,    -1,   152,   153,   154,
      -1,    -1,    -1,   158,    -1,    -1,   161,   162,   163,   164,
     165,    -1,    -1,   168,   169,    -1,   171,   172,   173,   174,
     175,   176,    -1,    -1,   179,   180,   181,   182,   183,    -1,
      -1,   186,   187,    -1,   189,   190,   191,   192,   193,    -1,
      -1,   196,   197,    -1,    -1,    -1,   201,   202,    -1,    -1,
      -1,    -1,    -1,   208,    -1,   210,   211,   212,   213,    -1,
     215,    -1,   217,    -1,    -1,    -1,   221,   222,    -1,   224,
      -1,    -1,   227,   228,    -1,    -1,    -1,   232,   233,   234,
      -1,    -1,    -1,   238,   239,   240,    -1,    -1,   243,    -1,
      -1,    -1,    -1,   248,   249,   250,    -1,    -1,    -1,    -1,
     255,    -1,    -1,    -1,   259,   260,    -1,   262,   263,    -1,
      -1,    -1,   267,    -1,   269,    -1,    -1,   272,   273,    -1,
      -1,   276,    -1,    -1,   279,   280,    -1,    -1,    -1,    -1,
      -1,   286,   287,    -1,   289,    -1,   291,    -1,   293,   294,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   302,    -1,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,    -1,   323,   324,
     325,    -1,   327,   328,   329,   330,    -1,   332,   333,    -1,
      -1,    -1,    -1,   338,   339,   340,   341,   342,   343,    -1,
      -1,   346,   347,    -1,   349,    -1,   351,    -1,   353,   354,
     355,   356,   357,   358,   359,   360,   361,    -1,    -1,   364,
     365,    -1,    -1,   368,   369,   370,   371,   372,    -1,    -1,
      -1,   376,   377,    -1,    -1,    -1,   381,    -1,   383,   384,
      -1,   386,   387,   388,    -1,    -1,   391,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   401,   402,   403,    -1,
     405,    -1,   407,    -1,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,    -1,   420,    -1,   422,   423,   424,
      -1,   426,    -1,   428,   429,   430,   431,   432,    -1,   434,
     435,   436,    -1,    -1,   439,    -1,    -1,    -1,   443,   444,
      -1,   446,   447,    -1,    -1,   450,   451,   452,   453,   454,
      -1,   456,   457,    -1,   459,   460,   461,    -1,    -1,   464,
     465,   466,   467,   468,   469,   470,   471,    -1,   473,    -1,
     475,   476,    -1,   478,   479,   480,    -1,   482,    -1,    -1,
     485,   486,   487,   488,    -1,   490,    -1,   492,   493,   494,
     495,   496,    -1,    -1,   499,   500,    -1,    -1,    -1,   504,
     505,   506,   507,    -1,    -1,    -1,   511,    -1,    -1,    -1,
      -1,   516,    -1,   518,   519,   520,   521,    -1,   523,   524,
     525,   526,   527,    -1,    -1,    -1,    -1,    -1,   533,   534,
     535,    -1,   537,    -1,    -1,   540,    -1,    -1,   543,    -1,
     545,    -1,   547,   548,   549,   550,   551,   552,    -1,    -1,
     555,   556,    -1,    -1,   559,   560,   561,   562,   563,   564,
      -1,    -1,   567,   568,   569,   570,    -1,   572,   573,   574,
      -1,    -1,   577,   578,   579,   580,    -1,    -1,   583,   584,
      -1,   586,   587,   588,   589,    -1,    -1,    -1,    -1,    -1,
     595,   596,    -1,    -1,    -1,   600,   601,   602,    -1,    -1,
     605,   606,    -1,   608,   609,    -1,   611,   612,    -1,    -1,
     615,    -1,    -1,   618,    -1,   620,    -1,   622,   623,    -1,
      -1,    -1,    -1,    -1,   629,    -1,   631,    -1,    -1,   634,
      -1,    -1,    -1,    -1,   639,    -1,   641,   642,   643,   644,
      -1,    -1,    -1,    -1,    -1,    -1,   651,   652,   653,    -1,
     655,   656,   657,   658,    -1,    -1,   661,    -1,    -1,   664,
     665,    -1,   667,   668,   669,   670,   671,    -1,   673,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   682,   683,   684,
      -1,   686,   687,   688,    -1,   690,    -1,    -1,   693,    -1,
     695,    -1,    -1,    -1,    -1,    -1,    -1,   702,   703,    -1,
      -1,   706,    -1,   708,    -1,   710,   711,    -1,    -1,    -1,
     715,   716,   717,   718,   719,   720,   721,   722,    -1,   724,
     725,   726,   727,   728,   729,   730,   731,   732,   733,    -1,
     735,   736,   737,   738,   739,   740,   741,   742,   743,   744,
      -1,     5,     6,    -1,     8,     9,    10,    11,    12,    -1,
      -1,    15,    -1,    -1,   759,    -1,    20,    -1,    -1,    23,
     765,    25,    26,    27,    28,    29,    30,    -1,    32,    -1,
      -1,    -1,    36,    -1,    -1,    -1,    40,    -1,    -1,    43,
      44,    45,    -1,    47,    -1,    49,    50,    -1,    -1,    53,
      -1,    -1,    56,    57,    -1,    59,    60,    61,    -1,    63,
      -1,    65,    66,    67,    68,    69,    70,    -1,    72,    73,
      -1,    75,    76,    77,    78,    79,    80,    81,    82,    83,
      84,    85,    -1,    -1,    88,    89,    -1,    91,    92,    93,
      94,    95,    -1,    -1,    -1,    99,    -1,    -1,    -1,    -1,
     104,    -1,    -1,   107,    -1,    -1,    -1,   111,   112,   113,
      -1,    -1,   116,    -1,    -1,    -1,    -1,   121,   122,    -1,
      -1,    -1,    -1,    -1,   128,   129,    -1,   131,    -1,    -1,
      -1,    -1,    -1,   137,    -1,    -1,    -1,    -1,   142,   143,
     144,   145,    -1,    -1,    -1,   149,    -1,    -1,   152,   153,
     154,    -1,    -1,    -1,   158,    -1,    -1,   161,   162,   163,
     164,   165,    -1,    -1,   168,   169,    -1,   171,   172,   173,
     174,   175,   176,    -1,    -1,   179,   180,   181,   182,   183,
      -1,    -1,   186,   187,    -1,   189,   190,   191,   192,   193,
      -1,    -1,   196,   197,    -1,    -1,    -1,   201,   202,    -1,
      -1,    -1,    -1,    -1,   208,    -1,   210,   211,   212,   213,
      -1,   215,    -1,   217,    -1,    -1,    -1,   221,   222,    -1,
     224,    -1,    -1,   227,   228,    -1,    -1,    -1,   232,   233,
     234,    -1,    -1,    -1,   238,   239,   240,    -1,    -1,   243,
      -1,    -1,    -1,    -1,   248,   249,   250,    -1,    -1,    -1,
      -1,   255,    -1,    -1,    -1,   259,   260,    -1,   262,   263,
      -1,    -1,    -1,   267,    -1,   269,    -1,    -1,   272,   273,
      -1,    -1,   276,    -1,    -1,   279,   280,    -1,    -1,    -1,
      -1,    -1,   286,   287,    -1,   289,    -1,   291,    -1,   293,
     294,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   302,    -1,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,    -1,   323,
     324,   325,    -1,   327,   328,   329,   330,    -1,   332,   333,
      -1,    -1,    -1,    -1,   338,   339,   340,   341,   342,   343,
      -1,    -1,   346,   347,    -1,   349,    -1,   351,    -1,   353,
     354,   355,   356,   357,   358,   359,   360,   361,    -1,    -1,
     364,   365,    -1,    -1,   368,   369,   370,   371,   372,    -1,
      -1,    -1,   376,   377,    -1,    -1,    -1,   381,    -1,   383,
     384,    -1,   386,   387,   388,    -1,    -1,   391,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   401,   402,   403,
      -1,   405,    -1,   407,    -1,   409,   410,   411,   412,   413,
     414,   415,   416,   417,   418,    -1,   420,    -1,   422,   423,
     424,    -1,   426,    -1,   428,   429,   430,   431,   432,    -1,
     434,   435,   436,    -1,    -1,   439,    -1,    -1,    -1,   443,
     444,    -1,   446,   447,    -1,    -1,   450,   451,   452,   453,
     454,    -1,   456,   457,    -1,   459,   460,   461,    -1,    -1,
     464,   465,   466,   467,   468,   469,   470,   471,    -1,   473,
      -1,   475,   476,    -1,   478,   479,   480,    -1,   482,    -1,
      -1,   485,   486,   487,   488,    -1,   490,    -1,   492,   493,
     494,   495,   496,    -1,    -1,   499,   500,    -1,    -1,    -1,
     504,   505,   506,   507,    -1,    -1,    -1,   511,    -1,    -1,
      -1,    -1,   516,    -1,   518,   519,   520,   521,    -1,   523,
     524,   525,   526,   527,    -1,    -1,    -1,    -1,    -1,   533,
     534,   535,    -1,   537,    -1,    -1,   540,    -1,    -1,   543,
      -1,   545,    -1,   547,   548,   549,   550,   551,   552,    -1,
      -1,   555,   556,    -1,    -1,   559,   560,   561,   562,   563,
     564,    -1,    -1,   567,   568,   569,   570,    -1,   572,   573,
     574,    -1,    -1,   577,   578,   579,   580,    -1,    -1,   583,
     584,    -1,   586,   587,   588,   589,    -1,    -1,    -1,    -1,
      -1,   595,   596,    -1,    -1,    -1,   600,   601,   602,    -1,
      -1,   605,   606,    -1,   608,   609,    -1,   611,   612,    -1,
      -1,   615,    -1,    -1,   618,    -1,   620,    -1,   622,   623,
      -1,    -1,    -1,    -1,    -1,   629,    -1,   631,    -1,    -1,
     634,    -1,    -1,    -1,    -1,   639,    -1,   641,   642,   643,
     644,    -1,    -1,    -1,    -1,    -1,    -1,   651,   652,   653,
      -1,   655,   656,   657,   658,    -1,    -1,   661,    -1,    -1,
     664,   665,    -1,   667,   668,   669,   670,   671,    -1,   673,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   682,   683,
     684,    -1,   686,   687,   688,    -1,   690,    -1,    -1,   693,
      -1,   695,    -1,    -1,    -1,    -1,    -1,    -1,   702,   703,
      -1,    -1,   706,    -1,   708,    -1,   710,   711,    -1,    -1,
      -1,   715,   716,   717,   718,   719,   720,   721,   722,    -1,
     724,   725,   726,   727,   728,   729,   730,   731,   732,   733,
      -1,   735,   736,   737,   738,   739,   740,   741,   742,   743,
     744,    -1,     5,     6,    -1,     8,     9,    10,    11,    12,
      -1,    -1,    15,    -1,    -1,    -1,    -1,    20,    -1,    -1,
      23,   765,    25,    26,    27,    28,    29,    30,    -1,    32,
      -1,    -1,    -1,    36,    -1,    -1,    -1,    40,    -1,    -1,
      43,    44,    45,    -1,    47,    -1,    49,    50,    -1,    -1,
      53,    -1,    -1,    56,    57,    -1,    59,    60,    61,    62,
      63,    -1,    65,    66,    67,    68,    69,    70,    -1,    72,
      73,    -1,    75,    76,    77,    78,    79,    80,    81,    82,
      83,    84,    85,    -1,    -1,    88,    89,    -1,    91,    92,
      93,    94,    95,    -1,    -1,    -1,    99,    -1,    -1,    -1,
      -1,   104,    -1,    -1,   107,    -1,    -1,    -1,   111,   112,
     113,    -1,    -1,   116,    -1,    -1,    -1,    -1,   121,   122,
      -1,    -1,    -1,    -1,    -1,   128,   129,    -1,   131,    -1,
      -1,    -1,    -1,    -1,   137,    -1,    -1,    -1,    -1,   142,
     143,   144,   145,    -1,    -1,    -1,   149,    -1,    -1,   152,
     153,   154,    -1,    -1,    -1,   158,    -1,    -1,   161,   162,
     163,   164,   165,    -1,    -1,   168,   169,    -1,   171,   172,
     173,   174,   175,   176,    -1,    -1,   179,   180,   181,   182,
     183,    -1,    -1,   186,   187,    -1,   189,   190,   191,   192,
     193,    -1,    -1,   196,   197,    -1,    -1,    -1,   201,   202,
      -1,    -1,    -1,    -1,    -1,   208,    -1,   210,   211,   212,
     213,    -1,   215,    -1,   217,    -1,    -1,    -1,   221,   222,
      -1,   224,    -1,    -1,   227,   228,    -1,    -1,    -1,   232,
     233,   234,    -1,    -1,    -1,   238,   239,   240,    -1,    -1,
     243,    -1,    -1,    -1,    -1,   248,   249,   250,    -1,    -1,
      -1,    -1,   255,    -1,    -1,    -1,   259,   260,    -1,   262,
     263,    -1,    -1,    -1,   267,    -1,   269,    -1,    -1,   272,
     273,    -1,    -1,   276,    -1,    -1,   279,   280,    -1,    -1,
      -1,    -1,    -1,   286,   287,    -1,   289,    -1,   291,    -1,
     293,   294,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   302,
      -1,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,    -1,
     323,   324,   325,    -1,   327,   328,   329,   330,    -1,   332,
     333,    -1,    -1,    -1,    -1,   338,   339,   340,   341,   342,
     343,    -1,    -1,   346,   347,    -1,   349,    -1,   351,    -1,
     353,   354,   355,   356,   357,   358,   359,   360,   361,    -1,
      -1,   364,   365,    -1,    -1,   368,   369,   370,   371,   372,
      -1,    -1,    -1,   376,   377,    -1,    -1,    -1,   381,    -1,
     383,   384,    -1,   386,   387,   388,    -1,    -1,   391,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   401,   402,
     403,    -1,   405,    -1,   407,    -1,   409,   410,   411,   412,
     413,   414,   415,   416,   417,   418,    -1,   420,    -1,   422,
     423,   424,    -1,   426,    -1,   428,   429,   430,   431,   432,
      -1,   434,   435,   436,    -1,    -1,   439,    -1,    -1,    -1,
     443,   444,    -1,   446,   447,    -1,    -1,   450,   451,   452,
     453,   454,    -1,   456,   457,    -1,   459,   460,   461,    -1,
      -1,   464,   465,   466,   467,   468,   469,   470,   471,    -1,
     473,    -1,   475,   476,    -1,   478,   479,   480,    -1,   482,
      -1,    -1,   485,   486,   487,   488,    -1,   490,    -1,   492,
     493,   494,   495,   496,    -1,    -1,   499,   500,    -1,    -1,
      -1,   504,   505,   506,   507,    -1,    -1,    -1,   511,    -1,
      -1,    -1,    -1,   516,    -1,   518,   519,   520,   521,    -1,
     523,   524,   525,   526,   527,    -1,    -1,    -1,    -1,    -1,
     533,   534,   535,    -1,   537,    -1,    -1,   540,    -1,    -1,
     543,    -1,   545,    -1,   547,   548,   549,   550,   551,   552,
      -1,    -1,   555,   556,    -1,    -1,   559,   560,   561,   562,
     563,   564,    -1,    -1,   567,   568,   569,   570,    -1,   572,
     573,   574,    -1,    -1,   577,   578,   579,   580,    -1,    -1,
     583,   584,    -1,   586,   587,   588,   589,    -1,    -1,    -1,
      -1,    -1,   595,   596,    -1,    -1,    -1,   600,   601,   602,
      -1,    -1,   605,   606,    -1,   608,   609,    -1,   611,   612,
      -1,    -1,   615,    -1,    -1,   618,    -1,   620,    -1,   622,
     623,    -1,    -1,    -1,    -1,    -1,   629,    -1,   631,    -1,
      -1,   634,    -1,    -1,    -1,    -1,   639,    -1,   641,   642,
     643,   644,    -1,    -1,    -1,    -1,    -1,    -1,   651,   652,
     653,    -1,   655,   656,   657,   658,    -1,    -1,   661,    -1,
      -1,   664,   665,    -1,    -1,   668,   669,   670,   671,    -1,
     673,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   682,
     683,   684,    -1,    -1,   687,   688,    -1,   690,    -1,    -1,
     693,    -1,   695,    -1,    -1,    -1,    -1,    -1,    -1,   702,
     703,    -1,    -1,   706,    -1,   708,    -1,   710,   711,    -1,
      -1,    -1,   715,   716,   717,   718,   719,   720,   721,   722,
      -1,   724,   725,   726,   727,   728,   729,   730,   731,   732,
     733,    -1,   735,   736,   737,   738,   739,   740,   741,   742,
     743,   744,    -1,     5,     6,    -1,     8,     9,    10,    11,
      12,    -1,    -1,    15,    -1,    -1,    -1,    -1,    20,    -1,
      -1,    23,   765,    25,    26,    27,    28,    29,    30,    -1,
      32,    -1,    -1,    -1,    36,    -1,    -1,    -1,    40,    -1,
      -1,    43,    44,    45,    -1,    47,    -1,    49,    50,    -1,
      -1,    53,    -1,    -1,    56,    57,    -1,    59,    60,    61,
      62,    63,    -1,    65,    66,    67,    68,    69,    70,    -1,
      72,    73,    -1,    75,    76,    77,    78,    79,    80,    81,
      82,    83,    84,    85,    -1,    -1,    88,    89,    -1,    91,
      92,    93,    94,    95,    -1,    -1,    -1,    99,    -1,    -1,
      -1,    -1,   104,    -1,    -1,   107,    -1,    -1,    -1,   111,
     112,   113,    -1,    -1,   116,    -1,    -1,    -1,    -1,   121,
     122,    -1,    -1,    -1,    -1,    -1,   128,   129,    -1,   131,
      -1,    -1,    -1,    -1,    -1,   137,    -1,    -1,    -1,    -1,
     142,   143,   144,   145,    -1,    -1,    -1,   149,    -1,    -1,
     152,   153,   154,    -1,    -1,    -1,   158,    -1,    -1,   161,
     162,   163,   164,   165,    -1,    -1,   168,   169,    -1,   171,
     172,   173,   174,   175,   176,    -1,    -1,   179,   180,   181,
     182,   183,    -1,    -1,   186,   187,    -1,   189,   190,   191,
     192,   193,    -1,    -1,   196,   197,    -1,    -1,    -1,   201,
     202,    -1,    -1,    -1,    -1,    -1,   208,    -1,   210,   211,
     212,   213,    -1,   215,    -1,   217,    -1,    -1,    -1,   221,
     222,    -1,   224,    -1,    -1,   227,   228,    -1,    -1,    -1,
     232,   233,   234,    -1,    -1,    -1,   238,   239,   240,    -1,
      -1,   243,    -1,    -1,    -1,    -1,   248,   249,   250,    -1,
      -1,    -1,    -1,   255,    -1,    -1,    -1,   259,   260,    -1,
     262,   263,    -1,    -1,    -1,   267,    -1,   269,    -1,    -1,
     272,   273,    -1,    -1,   276,    -1,    -1,   279,   280,    -1,
      -1,    -1,    -1,    -1,   286,   287,    -1,   289,    -1,   291,
      -1,   293,   294,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     302,    -1,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
      -1,   323,   324,   325,    -1,   327,   328,   329,   330,    -1,
     332,   333,    -1,    -1,    -1,    -1,   338,   339,   340,   341,
     342,   343,    -1,    -1,   346,   347,    -1,   349,    -1,   351,
      -1,   353,   354,   355,   356,   357,   358,   359,   360,   361,
      -1,    -1,   364,   365,    -1,    -1,   368,   369,   370,   371,
     372,    -1,    -1,    -1,   376,   377,    -1,    -1,    -1,   381,
      -1,   383,   384,    -1,   386,   387,   388,    -1,    -1,   391,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   401,
     402,   403,    -1,   405,    -1,   407,    -1,   409,   410,   411,
     412,   413,   414,   415,   416,   417,   418,    -1,   420,    -1,
     422,   423,   424,    -1,   426,    -1,   428,   429,   430,   431,
     432,    -1,   434,   435,   436,    -1,    -1,   439,    -1,    -1,
      -1,   443,   444,    -1,   446,   447,    -1,    -1,   450,   451,
     452,   453,   454,    -1,   456,   457,    -1,   459,   460,   461,
      -1,    -1,   464,   465,   466,   467,   468,   469,   470,   471,
      -1,   473,    -1,   475,   476,    -1,   478,   479,   480,    -1,
     482,    -1,    -1,   485,   486,   487,   488,    -1,   490,    -1,
     492,   493,   494,   495,   496,    -1,    -1,   499,   500,    -1,
      -1,    -1,   504,   505,   506,   507,    -1,    -1,    -1,   511,
      -1,    -1,    -1,    -1,   516,    -1,   518,   519,   520,   521,
      -1,   523,   524,   525,   526,   527,    -1,    -1,    -1,    -1,
      -1,   533,   534,   535,    -1,   537,    -1,    -1,   540,    -1,
      -1,   543,    -1,   545,    -1,   547,   548,   549,   550,   551,
     552,    -1,    -1,   555,   556,    -1,    -1,   559,   560,   561,
     562,   563,   564,    -1,    -1,   567,   568,   569,   570,    -1,
     572,   573,   574,    -1,    -1,   577,   578,   579,   580,    -1,
      -1,   583,   584,    -1,   586,   587,   588,   589,    -1,    -1,
      -1,    -1,    -1,   595,   596,    -1,    -1,    -1,   600,   601,
     602,    -1,    -1,   605,   606,    -1,   608,   609,    -1,   611,
     612,    -1,    -1,   615,    -1,    -1,   618,    -1,   620,    -1,
     622,   623,    -1,    -1,    -1,    -1,    -1,   629,    -1,   631,
      -1,    -1,   634,    -1,    -1,    -1,    -1,   639,    -1,   641,
     642,   643,   644,    -1,    -1,    -1,    -1,    -1,    -1,   651,
     652,   653,    -1,   655,   656,   657,   658,    -1,    -1,   661,
      -1,    -1,   664,   665,    -1,    -1,   668,   669,   670,   671,
      -1,   673,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     682,   683,   684,    -1,    -1,   687,   688,    -1,   690,    -1,
      -1,   693,    -1,   695,    -1,    -1,    -1,    -1,    -1,    -1,
     702,   703,    -1,    -1,   706,    -1,   708,    -1,   710,   711,
      -1,    -1,    -1,   715,   716,   717,   718,   719,   720,   721,
     722,    -1,   724,   725,   726,   727,   728,   729,   730,   731,
     732,   733,    -1,   735,   736,   737,   738,   739,   740,   741,
     742,   743,   744,    -1,     5,     6,    -1,     8,     9,    10,
      11,    12,    -1,    -1,    15,    -1,    -1,    -1,    -1,    20,
      -1,    -1,    -1,   765,    25,    26,    27,    28,    29,    30,
      -1,    32,    -1,    -1,    -1,    36,    -1,    -1,    -1,    40,
      -1,    -1,    43,    44,    45,    -1,    47,    -1,    -1,    -1,
      -1,    -1,    53,    54,    -1,    56,    57,    -1,    59,    60,
      -1,    -1,    -1,    -1,    65,    66,    67,    68,    69,    70,
      -1,    72,    73,    -1,    75,    76,    -1,    78,    -1,    80,
      81,    82,    83,    84,    85,    -1,    -1,    88,    89,    -1,
      91,    92,    93,    -1,    95,    -1,    -1,    -1,    99,    -1,
      -1,    -1,    -1,   104,    -1,    -1,   107,    -1,    -1,    -1,
     111,   112,   113,    -1,    -1,   116,    -1,    -1,    -1,    -1,
     121,    -1,    -1,    -1,    -1,    -1,    -1,   128,   129,    -1,
     131,    -1,    -1,    -1,    -1,    -1,   137,    -1,    -1,    -1,
      -1,   142,   143,   144,   145,    -1,    -1,    -1,    -1,    -1,
      -1,   152,   153,   154,    -1,    -1,    -1,   158,    -1,    -1,
      -1,   162,   163,   164,   165,    -1,    -1,   168,   169,    -1,
     171,   172,   173,   174,   175,    -1,    -1,    -1,   179,   180,
     181,   182,   183,    -1,    -1,   186,   187,   188,   189,   190,
     191,   192,   193,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     201,   202,    -1,    -1,    -1,    -1,    -1,   208,    -1,   210,
     211,   212,   213,    -1,   215,    -1,   217,    -1,    -1,    -1,
      -1,   222,    -1,    -1,    -1,    -1,   227,   228,    -1,    -1,
      -1,   232,   233,   234,    -1,   236,    -1,   238,    -1,   240,
      -1,    -1,   243,    -1,    -1,    -1,    -1,   248,   249,    -1,
      -1,    -1,    -1,    -1,   255,    -1,    -1,    -1,   259,   260,
      -1,   262,   263,   264,    -1,    -1,   267,    -1,   269,    -1,
      -1,    -1,   273,    -1,    -1,   276,   277,    -1,   279,   280,
      -1,    -1,    -1,    -1,    -1,   286,   287,    -1,   289,    -1,
     291,    -1,   293,   294,    -1,    -1,    -1,    -1,   299,    -1,
      -1,   302,    -1,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,    -1,   323,   324,   325,    -1,   327,   328,   329,   330,
      -1,   332,   333,    -1,    -1,    -1,    -1,   338,   339,   340,
     341,   342,   343,    -1,    -1,   346,   347,    -1,   349,    -1,
     351,    -1,   353,   354,   355,   356,   357,   358,   359,   360,
     361,    -1,    -1,   364,   365,    -1,    -1,   368,   369,   370,
     371,   372,    -1,    -1,    -1,    -1,   377,    -1,    -1,    -1,
     381,    -1,   383,   384,    -1,   386,   387,   388,    -1,    -1,
     391,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     401,   402,   403,    -1,   405,    -1,   407,    -1,   409,   410,
     411,   412,   413,   414,   415,   416,   417,   418,    -1,    -1,
      -1,    -1,   423,   424,    -1,   426,    -1,   428,   429,   430,
     431,   432,    -1,   434,   435,   436,    -1,    -1,   439,    -1,
      -1,    -1,   443,   444,    -1,   446,   447,    -1,    -1,   450,
     451,   452,   453,   454,    -1,   456,   457,    -1,   459,    -1,
     461,   462,    -1,   464,   465,   466,   467,   468,   469,   470,
     471,    -1,    -1,    -1,   475,   476,    -1,   478,   479,   480,
     481,   482,    -1,    -1,    -1,   486,   487,   488,    -1,   490,
      -1,   492,   493,    -1,   495,   496,    -1,    -1,   499,   500,
      -1,    -1,    -1,   504,   505,   506,   507,    -1,    -1,    -1,
     511,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   519,    -1,
     521,    -1,   523,   524,   525,   526,   527,    -1,    -1,    -1,
      -1,    -1,   533,   534,   535,    -1,   537,    -1,    -1,   540,
      -1,    -1,   543,    -1,   545,    -1,   547,    -1,   549,   550,
     551,   552,    -1,    -1,    -1,   556,    -1,    -1,   559,   560,
     561,   562,   563,   564,    -1,    -1,   567,   568,   569,   570,
      -1,   572,   573,   574,    -1,    -1,   577,   578,   579,   580,
      -1,    -1,   583,   584,    -1,   586,   587,   588,   589,    -1,
      -1,    -1,    -1,    -1,   595,   596,    -1,    -1,    -1,    -1,
     601,   602,    -1,    -1,   605,   606,    -1,   608,   609,    -1,
      -1,    -1,    -1,    -1,   615,    -1,    -1,   618,    -1,   620,
      -1,   622,   623,    -1,    -1,    -1,    -1,    -1,   629,    -1,
     631,    -1,    -1,   634,    -1,    -1,    -1,    -1,   639,    -1,
     641,   642,   643,   644,    -1,    -1,   647,    -1,    -1,    -1,
     651,   652,   653,    -1,   655,    -1,   657,   658,    -1,    -1,
     661,    -1,    -1,   664,   665,    -1,   667,   668,   669,   670,
     671,    -1,   673,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   682,   683,   684,    -1,   686,   687,   688,    -1,    -1,
      -1,    -1,   693,    -1,   695,    -1,    -1,    -1,    -1,    -1,
      -1,   702,   703,    -1,    -1,   706,    -1,   708,    -1,   710,
     711,    -1,    -1,    -1,   715,   716,   717,   718,   719,   720,
     721,   722,    -1,   724,   725,   726,    -1,   728,   729,   730,
     731,   732,   733,    -1,   735,   736,   737,   738,   739,   740,
     741,   742,   743,   744,     5,     6,    -1,     8,     9,    10,
      11,    12,    -1,    -1,    15,    -1,    -1,    -1,    -1,    20,
      -1,   762,    23,    -1,    25,    26,    27,    28,    29,    30,
      -1,    32,    -1,    -1,    -1,    36,    -1,    -1,    -1,    40,
      -1,    -1,    43,    44,    45,    -1,    47,    -1,    49,    50,
      -1,    -1,    53,    -1,    -1,    56,    57,    -1,    59,    60,
      61,    -1,    63,    -1,    65,    66,    67,    68,    69,    70,
      -1,    72,    73,    -1,    75,    76,    77,    78,    79,    80,
      81,    82,    83,    84,    85,    -1,    -1,    88,    89,    -1,
      91,    92,    93,    94,    95,    -1,    -1,    -1,    99,    -1,
      -1,    -1,    -1,   104,    -1,    -1,   107,    -1,    -1,    -1,
     111,   112,   113,    -1,    -1,   116,    -1,    -1,    -1,    -1,
     121,   122,    -1,    -1,    -1,    -1,    -1,   128,   129,    -1,
     131,    -1,    -1,    -1,    -1,    -1,   137,    -1,    -1,    -1,
      -1,   142,   143,   144,   145,    -1,    -1,    -1,   149,    -1,
      -1,   152,   153,   154,    -1,    -1,    -1,   158,    -1,    -1,
     161,   162,   163,   164,   165,    -1,    -1,   168,   169,    -1,
     171,   172,   173,   174,   175,   176,    -1,    -1,   179,   180,
     181,   182,   183,    -1,    -1,   186,   187,    -1,   189,   190,
     191,   192,   193,    -1,    -1,   196,   197,    -1,    -1,    -1,
     201,   202,    -1,    -1,    -1,    -1,    -1,   208,    -1,   210,
     211,   212,   213,    -1,   215,    -1,   217,    -1,    -1,    -1,
     221,   222,    -1,   224,    -1,    -1,   227,   228,    -1,    -1,
      -1,   232,   233,   234,    -1,    -1,    -1,   238,   239,   240,
      -1,    -1,   243,    -1,    -1,    -1,    -1,   248,   249,   250,
      -1,    -1,    -1,    -1,   255,    -1,    -1,    -1,   259,   260,
      -1,   262,   263,    -1,    -1,    -1,   267,    -1,   269,    -1,
      -1,   272,   273,    -1,    -1,   276,    -1,    -1,   279,   280,
      -1,    -1,    -1,    -1,    -1,   286,   287,    -1,   289,    -1,
     291,    -1,   293,   294,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   302,    -1,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,    -1,   323,   324,   325,    -1,   327,   328,   329,   330,
      -1,   332,   333,    -1,    -1,    -1,    -1,   338,   339,   340,
     341,   342,   343,    -1,    -1,   346,   347,    -1,   349,    -1,
     351,    -1,   353,   354,   355,   356,   357,   358,   359,   360,
     361,    -1,    -1,   364,   365,    -1,    -1,   368,   369,   370,
     371,   372,    -1,    -1,    -1,   376,   377,    -1,    -1,    -1,
     381,    -1,   383,   384,    -1,   386,   387,   388,    -1,    -1,
     391,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     401,   402,   403,    -1,   405,    -1,   407,    -1,   409,   410,
     411,   412,   413,   414,   415,   416,   417,   418,    -1,   420,
      -1,   422,   423,   424,    -1,   426,    -1,   428,   429,   430,
     431,   432,    -1,   434,   435,   436,    -1,    -1,   439,    -1,
      -1,    -1,   443,   444,    -1,   446,   447,    -1,    -1,   450,
     451,   452,   453,   454,    -1,   456,   457,    -1,   459,   460,
     461,    -1,    -1,   464,   465,   466,   467,   468,   469,   470,
     471,    -1,   473,    -1,   475,   476,    -1,   478,   479,   480,
      -1,   482,    -1,    -1,   485,   486,   487,   488,    -1,   490,
      -1,   492,   493,   494,   495,   496,    -1,    -1,   499,   500,
     501,    -1,    -1,   504,   505,   506,   507,    -1,    -1,    -1,
     511,    -1,    -1,    -1,    -1,   516,    -1,   518,   519,   520,
     521,    -1,   523,   524,   525,   526,   527,    -1,    -1,    -1,
      -1,    -1,   533,   534,   535,    -1,   537,    -1,    -1,   540,
      -1,    -1,   543,    -1,   545,    -1,   547,   548,   549,   550,
     551,   552,    -1,    -1,   555,   556,    -1,    -1,   559,   560,
     561,   562,   563,   564,    -1,    -1,   567,   568,   569,   570,
      -1,   572,   573,   574,    -1,    -1,   577,   578,   579,   580,
      -1,    -1,   583,   584,    -1,   586,   587,   588,   589,    -1,
      -1,    -1,    -1,    -1,   595,   596,    -1,    -1,    -1,   600,
     601,   602,    -1,    -1,   605,   606,    -1,   608,   609,    -1,
     611,   612,    -1,    -1,   615,    -1,    -1,   618,    -1,   620,
      -1,   622,   623,    -1,    -1,    -1,    -1,    -1,   629,    -1,
     631,    -1,    -1,   634,    -1,    -1,    -1,    -1,   639,    -1,
     641,   642,   643,   644,    -1,    -1,    -1,   648,    -1,    -1,
     651,   652,   653,    -1,   655,   656,   657,   658,    -1,    -1,
     661,    -1,    -1,   664,   665,    -1,   667,   668,   669,   670,
     671,    -1,   673,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   682,   683,   684,    -1,   686,   687,   688,    -1,   690,
      -1,    -1,   693,    -1,   695,    -1,    -1,    -1,    -1,    -1,
      -1,   702,   703,    -1,    -1,   706,    -1,   708,    -1,   710,
     711,    -1,    -1,    -1,   715,   716,   717,   718,   719,   720,
     721,   722,    -1,   724,   725,   726,   727,   728,   729,   730,
     731,   732,   733,    -1,   735,   736,   737,   738,   739,   740,
     741,   742,   743,   744,     5,     6,    -1,     8,     9,    10,
      11,    12,    -1,    -1,    15,    -1,    -1,   758,   759,    20,
      -1,    -1,    23,    -1,    25,    26,    27,    28,    29,    30,
      -1,    32,    -1,    -1,    -1,    36,    -1,    -1,    -1,    40,
      -1,    -1,    43,    44,    45,    -1,    47,    -1,    49,    50,
      -1,    -1,    53,    -1,    -1,    56,    57,    -1,    59,    60,
      61,    -1,    63,    -1,    65,    66,    67,    68,    69,    70,
      -1,    72,    73,    -1,    75,    76,    77,    78,    79,    80,
      81,    82,    83,    84,    85,    -1,    -1,    88,    89,    90,
      91,    92,    93,    94,    95,    -1,    -1,    -1,    99,    -1,
      -1,    -1,    -1,   104,    -1,    -1,   107,    -1,    -1,    -1,
     111,   112,   113,    -1,    -1,   116,    -1,    -1,    -1,    -1,
     121,   122,    -1,    -1,    -1,    -1,    -1,   128,   129,    -1,
     131,    -1,    -1,    -1,    -1,    -1,   137,    -1,    -1,    -1,
      -1,   142,   143,   144,   145,    -1,    -1,    -1,   149,    -1,
      -1,   152,   153,   154,    -1,    -1,    -1,   158,    -1,    -1,
     161,   162,   163,   164,   165,    -1,    -1,   168,   169,    -1,
     171,   172,   173,   174,   175,   176,    -1,    -1,   179,   180,
     181,   182,   183,    -1,    -1,   186,   187,    -1,   189,   190,
     191,   192,   193,    -1,    -1,   196,   197,    -1,    -1,    -1,
     201,   202,    -1,    -1,   205,    -1,    -1,   208,    -1,   210,
     211,   212,   213,    -1,   215,    -1,   217,    -1,    -1,    -1,
     221,   222,    -1,   224,    -1,    -1,   227,   228,    -1,    -1,
      -1,   232,   233,   234,    -1,    -1,    -1,   238,   239,   240,
     241,    -1,   243,    -1,    -1,    -1,    -1,   248,   249,   250,
      -1,    -1,    -1,    -1,   255,    -1,    -1,    -1,   259,   260,
      -1,   262,   263,    -1,    -1,    -1,   267,    -1,   269,   270,
      -1,   272,   273,    -1,    -1,   276,    -1,    -1,   279,   280,
      -1,   282,    -1,    -1,    -1,   286,   287,    -1,   289,    -1,
     291,    -1,   293,   294,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   302,    -1,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,    -1,   323,   324,   325,    -1,   327,   328,   329,   330,
      -1,   332,   333,    -1,    -1,    -1,    -1,   338,   339,   340,
     341,   342,   343,    -1,    -1,   346,   347,    -1,   349,    -1,
     351,    -1,   353,   354,   355,   356,   357,   358,   359,   360,
     361,    -1,    -1,   364,   365,    -1,    -1,   368,   369,   370,
     371,   372,    -1,    -1,    -1,   376,   377,    -1,    -1,    -1,
     381,    -1,   383,   384,    -1,   386,   387,   388,    -1,    -1,
     391,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     401,   402,   403,    -1,   405,    -1,   407,    -1,   409,   410,
     411,   412,   413,   414,   415,   416,   417,   418,    -1,   420,
      -1,   422,   423,   424,    -1,   426,    -1,   428,   429,   430,
     431,   432,    -1,   434,   435,   436,    -1,    -1,   439,    -1,
      -1,    -1,   443,   444,    -1,   446,   447,    -1,    -1,   450,
     451,   452,   453,   454,    -1,   456,   457,    -1,   459,   460,
     461,    -1,    -1,   464,   465,   466,   467,   468,   469,   470,
     471,    -1,   473,    -1,   475,   476,    -1,   478,   479,   480,
      -1,   482,    -1,    -1,   485,   486,   487,   488,    -1,   490,
      -1,   492,   493,   494,   495,   496,    -1,    -1,   499,   500,
     501,    -1,    -1,   504,   505,   506,   507,    -1,    -1,    -1,
     511,    -1,    -1,    -1,    -1,   516,    -1,   518,   519,   520,
     521,    -1,   523,   524,   525,   526,   527,   528,    -1,    -1,
      -1,    -1,   533,   534,   535,    -1,   537,    -1,    -1,   540,
      -1,    -1,   543,    -1,   545,    -1,   547,   548,   549,   550,
     551,   552,    -1,    -1,   555,   556,    -1,    -1,   559,   560,
     561,   562,   563,   564,    -1,    -1,   567,   568,   569,   570,
      -1,   572,   573,   574,    -1,    -1,   577,   578,   579,   580,
      -1,    -1,   583,   584,    -1,   586,   587,   588,   589,    -1,
      -1,    -1,    -1,    -1,   595,   596,    -1,    -1,    -1,   600,
     601,   602,    -1,    -1,   605,   606,    -1,   608,   609,    -1,
     611,   612,    -1,    -1,   615,    -1,    -1,   618,    -1,   620,
      -1,   622,   623,    -1,    -1,    -1,    -1,    -1,   629,    -1,
     631,    -1,    -1,   634,    -1,    -1,    -1,    -1,   639,    -1,
     641,   642,   643,   644,    -1,    -1,    -1,   648,    -1,    -1,
     651,   652,   653,    -1,   655,   656,   657,   658,    -1,    -1,
     661,    -1,    -1,   664,   665,    -1,   667,   668,   669,   670,
     671,    -1,   673,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   682,   683,   684,    -1,   686,   687,   688,    -1,   690,
      -1,    -1,   693,    -1,   695,    -1,    -1,    -1,    -1,    -1,
      -1,   702,   703,    -1,    -1,   706,    -1,   708,    -1,   710,
     711,    -1,    -1,    -1,   715,   716,   717,   718,   719,   720,
     721,   722,    -1,   724,   725,   726,   727,   728,   729,   730,
     731,   732,   733,    -1,   735,   736,   737,   738,   739,   740,
     741,   742,   743,   744,     5,     6,    -1,     8,     9,    10,
      11,    12,    -1,    -1,    15,    -1,    -1,   758,    -1,    20,
      -1,    -1,    23,    -1,    25,    26,    27,    28,    29,    30,
      -1,    32,    -1,    -1,    -1,    36,    -1,    -1,    -1,    40,
      -1,    -1,    43,    44,    45,    -1,    47,    -1,    49,    50,
      -1,    -1,    53,    -1,    -1,    56,    57,    -1,    59,    60,
      61,    -1,    63,    -1,    65,    66,    67,    68,    69,    70,
      -1,    72,    73,    -1,    75,    76,    77,    78,    79,    80,
      81,    82,    83,    84,    85,    -1,    -1,    88,    89,    -1,
      91,    92,    93,    94,    95,    -1,    -1,    -1,    99,    -1,
      -1,    -1,    -1,   104,    -1,    -1,   107,    -1,    -1,    -1,
     111,   112,   113,    -1,    -1,   116,    -1,    -1,    -1,    -1,
     121,   122,    -1,    -1,    -1,    -1,    -1,   128,   129,    -1,
     131,    -1,    -1,    -1,    -1,    -1,   137,    -1,    -1,    -1,
      -1,   142,   143,   144,   145,    -1,    -1,    -1,   149,    -1,
      -1,   152,   153,   154,    -1,    -1,    -1,   158,    -1,    -1,
     161,   162,   163,   164,   165,    -1,    -1,   168,   169,    -1,
     171,   172,   173,   174,   175,   176,    -1,    -1,   179,   180,
     181,   182,   183,    -1,    -1,   186,   187,    -1,   189,   190,
     191,   192,   193,    -1,    -1,   196,   197,    -1,    -1,    -1,
     201,   202,    -1,    -1,    -1,    -1,    -1,   208,    -1,   210,
     211,   212,   213,    -1,   215,    -1,   217,    -1,    -1,    -1,
     221,   222,    -1,   224,    -1,    -1,   227,   228,    -1,    -1,
      -1,   232,   233,   234,    -1,    -1,    -1,   238,   239,   240,
      -1,    -1,   243,    -1,    -1,    -1,    -1,   248,   249,   250,
      -1,    -1,    -1,    -1,   255,    -1,    -1,    -1,   259,   260,
      -1,   262,   263,    -1,    -1,    -1,   267,    -1,   269,    -1,
      -1,   272,   273,    -1,    -1,   276,    -1,    -1,   279,   280,
      -1,    -1,    -1,    -1,    -1,   286,   287,    -1,   289,    -1,
     291,    -1,   293,   294,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   302,    -1,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,    -1,   323,   324,   325,    -1,   327,   328,   329,   330,
      -1,   332,   333,    -1,    -1,    -1,    -1,   338,   339,   340,
     341,   342,   343,    -1,    -1,   346,   347,    -1,   349,    -1,
     351,    -1,   353,   354,   355,   356,   357,   358,   359,   360,
     361,    -1,    -1,   364,   365,    -1,    -1,   368,   369,   370,
     371,   372,    -1,    -1,    -1,   376,   377,    -1,    -1,    -1,
     381,    -1,   383,   384,    -1,   386,   387,   388,    -1,    -1,
     391,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     401,   402,   403,    -1,   405,    -1,   407,    -1,   409,   410,
     411,   412,   413,   414,   415,   416,   417,   418,    -1,   420,
      -1,   422,   423,   424,    -1,   426,    -1,   428,   429,   430,
     431,   432,    -1,   434,   435,   436,    -1,    -1,   439,    -1,
      -1,    -1,   443,   444,    -1,   446,   447,    -1,    -1,   450,
     451,   452,   453,   454,    -1,   456,   457,    -1,   459,   460,
     461,    -1,    -1,   464,   465,   466,   467,   468,   469,   470,
     471,    -1,   473,    -1,   475,   476,    -1,   478,   479,   480,
      -1,   482,    -1,    -1,   485,   486,   487,   488,    -1,   490,
      -1,   492,   493,   494,   495,   496,    -1,    -1,   499,   500,
     501,    -1,    -1,   504,   505,   506,   507,    -1,    -1,    -1,
     511,    -1,    -1,    -1,    -1,   516,    -1,   518,   519,   520,
     521,    -1,   523,   524,   525,   526,   527,    -1,    -1,    -1,
      -1,    -1,   533,   534,   535,    -1,   537,    -1,    -1,   540,
      -1,    -1,   543,    -1,   545,    -1,   547,   548,   549,   550,
     551,   552,    -1,    -1,   555,   556,    -1,    -1,   559,   560,
     561,   562,   563,   564,    -1,    -1,   567,   568,   569,   570,
      -1,   572,   573,   574,    -1,    -1,   577,   578,   579,   580,
      -1,    -1,   583,   584,    -1,   586,   587,   588,   589,    -1,
      -1,    -1,    -1,    -1,   595,   596,    -1,    -1,    -1,   600,
     601,   602,    -1,    -1,   605,   606,    -1,   608,   609,    -1,
     611,   612,    -1,    -1,   615,    -1,    -1,   618,    -1,   620,
      -1,   622,   623,    -1,    -1,    -1,    -1,    -1,   629,    -1,
     631,    -1,    -1,   634,    -1,    -1,    -1,    -1,   639,    -1,
     641,   642,   643,   644,    -1,    -1,    -1,   648,    -1,    -1,
     651,   652,   653,    -1,   655,   656,   657,   658,    -1,    -1,
     661,    -1,    -1,   664,   665,    -1,   667,   668,   669,   670,
     671,    -1,   673,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   682,   683,   684,    -1,   686,   687,   688,    -1,   690,
      -1,    -1,   693,    -1,   695,    -1,    -1,    -1,    -1,    -1,
      -1,   702,   703,    -1,    -1,   706,    -1,   708,    -1,   710,
     711,    -1,    -1,    -1,   715,   716,   717,   718,   719,   720,
     721,   722,    -1,   724,   725,   726,   727,   728,   729,   730,
     731,   732,   733,   734,   735,   736,   737,   738,   739,   740,
     741,   742,   743,   744,     5,     6,    -1,     8,     9,    10,
      11,    12,    -1,    -1,    15,    -1,    -1,   758,    -1,    20,
      -1,    -1,    23,    -1,    25,    26,    27,    28,    29,    30,
      -1,    32,    -1,    -1,    -1,    36,    -1,    -1,    -1,    40,
      -1,    -1,    43,    44,    45,    -1,    47,    -1,    49,    50,
      -1,    -1,    53,    -1,    -1,    56,    57,    -1,    59,    60,
      61,    -1,    63,    -1,    65,    66,    67,    68,    69,    70,
      -1,    72,    73,    -1,    75,    76,    77,    78,    79,    80,
      81,    82,    83,    84,    85,    -1,    -1,    88,    89,    -1,
      91,    92,    93,    94,    95,    -1,    -1,    -1,    99,    -1,
      -1,    -1,    -1,   104,    -1,    -1,   107,    -1,    -1,    -1,
     111,   112,   113,    -1,    -1,   116,    -1,    -1,    -1,    -1,
     121,   122,    -1,    -1,    -1,    -1,    -1,   128,   129,    -1,
     131,    -1,    -1,    -1,    -1,    -1,   137,    -1,    -1,    -1,
      -1,   142,   143,   144,   145,    -1,    -1,    -1,   149,    -1,
     151,   152,   153,   154,    -1,    -1,    -1,   158,    -1,    -1,
     161,   162,   163,   164,   165,    -1,    -1,   168,   169,    -1,
     171,   172,   173,   174,   175,   176,    -1,    -1,   179,   180,
     181,   182,   183,    -1,    -1,   186,   187,    -1,   189,   190,
     191,   192,   193,    -1,    -1,   196,   197,    -1,    -1,    -1,
     201,   202,    -1,    -1,    -1,    -1,    -1,   208,    -1,   210,
     211,   212,   213,    -1,   215,    -1,   217,    -1,    -1,    -1,
     221,   222,    -1,   224,    -1,    -1,   227,   228,    -1,    -1,
      -1,   232,   233,   234,    -1,    -1,    -1,   238,   239,   240,
      -1,    -1,   243,    -1,    -1,    -1,    -1,   248,   249,   250,
      -1,    -1,    -1,    -1,   255,    -1,    -1,    -1,   259,   260,
      -1,   262,   263,    -1,    -1,    -1,   267,    -1,   269,    -1,
      -1,   272,   273,    -1,    -1,   276,    -1,    -1,   279,   280,
      -1,    -1,    -1,    -1,    -1,   286,   287,    -1,   289,    -1,
     291,    -1,   293,   294,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   302,    -1,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,    -1,   323,   324,   325,    -1,   327,   328,   329,   330,
      -1,   332,   333,    -1,    -1,    -1,    -1,   338,   339,   340,
     341,   342,   343,    -1,    -1,   346,   347,    -1,   349,    -1,
     351,    -1,   353,   354,   355,   356,   357,   358,   359,   360,
     361,    -1,    -1,   364,   365,    -1,    -1,   368,   369,   370,
     371,   372,    -1,    -1,    -1,   376,   377,    -1,    -1,    -1,
     381,    -1,   383,   384,    -1,   386,   387,   388,    -1,    -1,
     391,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     401,   402,   403,    -1,   405,    -1,   407,    -1,   409,   410,
     411,   412,   413,   414,   415,   416,   417,   418,    -1,   420,
      -1,   422,   423,   424,    -1,   426,    -1,   428,   429,   430,
     431,   432,    -1,   434,   435,   436,    -1,    -1,   439,    -1,
      -1,    -1,   443,   444,    -1,   446,   447,    -1,    -1,   450,
     451,   452,   453,   454,    -1,   456,   457,    -1,   459,   460,
     461,    -1,    -1,   464,   465,   466,   467,   468,   469,   470,
     471,    -1,   473,    -1,   475,   476,    -1,   478,   479,   480,
      -1,   482,    -1,    -1,   485,   486,   487,   488,    -1,   490,
      -1,   492,   493,   494,   495,   496,    -1,    -1,   499,   500,
      -1,    -1,    -1,   504,   505,   506,   507,    -1,    -1,    -1,
     511,    -1,    -1,    -1,    -1,   516,    -1,   518,   519,   520,
     521,    -1,   523,   524,   525,   526,   527,    -1,    -1,    -1,
      -1,    -1,   533,   534,   535,    -1,   537,    -1,    -1,   540,
      -1,    -1,   543,    -1,   545,    -1,   547,   548,   549,   550,
     551,   552,    -1,    -1,   555,   556,    -1,    -1,   559,   560,
     561,   562,   563,   564,    -1,    -1,   567,   568,   569,   570,
      -1,   572,   573,   574,    -1,    -1,   577,   578,   579,   580,
      -1,    -1,   583,   584,    -1,   586,   587,   588,   589,    -1,
      -1,    -1,    -1,    -1,   595,   596,    -1,    -1,    -1,   600,
     601,   602,    -1,    -1,   605,   606,    -1,   608,   609,    -1,
     611,   612,    -1,    -1,   615,    -1,    -1,   618,    -1,   620,
      -1,   622,   623,    -1,    -1,    -1,    -1,    -1,   629,    -1,
     631,    -1,    -1,   634,    -1,    -1,    -1,    -1,   639,    -1,
     641,   642,   643,   644,    -1,    -1,    -1,    -1,    -1,    -1,
     651,   652,   653,    -1,   655,   656,   657,   658,    -1,    -1,
     661,    -1,    -1,   664,   665,    -1,   667,   668,   669,   670,
     671,    -1,   673,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   682,   683,   684,    -1,   686,   687,   688,    -1,   690,
      -1,    -1,   693,    -1,   695,    -1,    -1,    -1,    -1,    -1,
      -1,   702,   703,    -1,    -1,   706,    -1,   708,    -1,   710,
     711,    -1,    -1,    -1,   715,   716,   717,   718,   719,   720,
     721,   722,    -1,   724,   725,   726,   727,   728,   729,   730,
     731,   732,   733,   734,   735,   736,   737,   738,   739,   740,
     741,   742,   743,   744,     5,     6,    -1,     8,     9,    10,
      11,    12,    -1,    -1,    15,    -1,    -1,   758,    -1,    20,
      -1,    -1,    23,    -1,    25,    26,    27,    28,    29,    30,
      -1,    32,    -1,    -1,    -1,    36,    -1,    -1,    -1,    40,
      -1,    -1,    43,    44,    45,    -1,    47,    -1,    49,    50,
      -1,    -1,    53,    -1,    -1,    56,    57,    -1,    59,    60,
      61,    -1,    63,    -1,    65,    66,    67,    68,    69,    70,
      -1,    72,    73,    -1,    75,    76,    77,    78,    79,    80,
      81,    82,    83,    84,    85,    -1,    -1,    88,    89,    -1,
      91,    92,    93,    94,    95,    -1,    -1,    -1,    99,    -1,
      -1,    -1,    -1,   104,    -1,    -1,   107,    -1,    -1,    -1,
     111,   112,   113,    -1,    -1,   116,    -1,    -1,    -1,    -1,
     121,   122,    -1,    -1,    -1,    -1,    -1,   128,   129,    -1,
     131,    -1,    -1,    -1,    -1,    -1,   137,    -1,    -1,    -1,
      -1,   142,   143,   144,   145,    -1,    -1,    -1,   149,    -1,
      -1,   152,   153,   154,    -1,    -1,    -1,   158,    -1,    -1,
     161,   162,   163,   164,   165,    -1,    -1,   168,   169,    -1,
     171,   172,   173,   174,   175,   176,    -1,    -1,   179,   180,
     181,   182,   183,    -1,    -1,   186,   187,    -1,   189,   190,
     191,   192,   193,    -1,    -1,   196,   197,    -1,    -1,    -1,
     201,   202,    -1,    -1,    -1,    -1,    -1,   208,    -1,   210,
     211,   212,   213,    -1,   215,    -1,   217,    -1,    -1,    -1,
     221,   222,    -1,   224,    -1,    -1,   227,   228,    -1,    -1,
      -1,   232,   233,   234,    -1,    -1,    -1,   238,   239,   240,
      -1,    -1,   243,    -1,    -1,    -1,    -1,   248,   249,   250,
      -1,    -1,    -1,    -1,   255,    -1,    -1,    -1,   259,   260,
      -1,   262,   263,    -1,    -1,    -1,   267,    -1,   269,    -1,
      -1,   272,   273,    -1,    -1,   276,    -1,    -1,   279,   280,
      -1,    -1,    -1,    -1,    -1,   286,   287,    -1,   289,    -1,
     291,    -1,   293,   294,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   302,    -1,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,    -1,   323,   324,   325,    -1,   327,   328,   329,   330,
      -1,   332,   333,    -1,    -1,    -1,    -1,   338,   339,   340,
     341,   342,   343,    -1,    -1,   346,   347,    -1,   349,    -1,
     351,    -1,   353,   354,   355,   356,   357,   358,   359,   360,
     361,    -1,    -1,   364,   365,    -1,    -1,   368,   369,   370,
     371,   372,    -1,    -1,    -1,   376,   377,    -1,    -1,    -1,
     381,    -1,   383,   384,    -1,   386,   387,   388,    -1,    -1,
     391,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     401,   402,   403,    -1,   405,    -1,   407,    -1,   409,   410,
     411,   412,   413,   414,   415,   416,   417,   418,    -1,   420,
      -1,   422,   423,   424,    -1,   426,    -1,   428,   429,   430,
     431,   432,    -1,   434,   435,   436,    -1,    -1,   439,    -1,
      -1,    -1,   443,   444,    -1,   446,   447,    -1,    -1,   450,
     451,   452,   453,   454,    -1,   456,   457,    -1,   459,   460,
     461,    -1,    -1,   464,   465,   466,   467,   468,   469,   470,
     471,    -1,   473,    -1,   475,   476,    -1,   478,   479,   480,
      -1,   482,    -1,    -1,   485,   486,   487,   488,    -1,   490,
      -1,   492,   493,   494,   495,   496,    -1,    -1,   499,   500,
      -1,    -1,    -1,   504,   505,   506,   507,    -1,    -1,    -1,
     511,    -1,    -1,    -1,    -1,   516,    -1,   518,   519,   520,
     521,    -1,   523,   524,   525,   526,   527,    -1,    -1,    -1,
      -1,    -1,   533,   534,   535,    -1,   537,    -1,    -1,   540,
      -1,    -1,   543,    -1,   545,    -1,   547,   548,   549,   550,
     551,   552,    -1,    -1,   555,   556,    -1,    -1,   559,   560,
     561,   562,   563,   564,    -1,    -1,   567,   568,   569,   570,
      -1,   572,   573,   574,    -1,    -1,   577,   578,   579,   580,
      -1,    -1,   583,   584,    -1,   586,   587,   588,   589,    -1,
      -1,    -1,    -1,    -1,   595,   596,    -1,    -1,    -1,   600,
     601,   602,    -1,    -1,   605,   606,    -1,   608,   609,    -1,
     611,   612,    -1,    -1,   615,    -1,    -1,   618,    -1,   620,
      -1,   622,   623,    -1,    -1,    -1,    -1,    -1,   629,    -1,
     631,    -1,    -1,   634,    -1,    -1,    -1,    -1,   639,    -1,
     641,   642,   643,   644,    -1,    -1,    -1,    -1,    -1,    -1,
     651,   652,   653,    -1,   655,   656,   657,   658,    -1,    -1,
     661,    -1,    -1,   664,   665,    -1,   667,   668,   669,   670,
     671,    -1,   673,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   682,   683,   684,    -1,   686,   687,   688,    -1,   690,
      -1,    -1,   693,    -1,   695,    -1,    -1,    -1,    -1,    -1,
      -1,   702,   703,    -1,    -1,   706,    -1,   708,    -1,   710,
     711,    -1,    -1,    -1,   715,   716,   717,   718,   719,   720,
     721,   722,    -1,   724,   725,   726,   727,   728,   729,   730,
     731,   732,   733,   734,   735,   736,   737,   738,   739,   740,
     741,   742,   743,   744,     5,     6,    -1,     8,     9,    10,
      11,    12,    -1,    -1,    15,    -1,    -1,   758,    -1,    20,
      -1,    -1,    23,    -1,    25,    26,    27,    28,    29,    30,
      -1,    32,    -1,    -1,    -1,    36,    -1,    -1,    -1,    40,
      -1,    -1,    43,    44,    45,    -1,    47,    -1,    49,    50,
      -1,    -1,    53,    -1,    -1,    56,    57,    -1,    59,    60,
      61,    -1,    63,    -1,    65,    66,    67,    68,    69,    70,
      -1,    72,    73,    -1,    75,    76,    77,    78,    79,    80,
      81,    82,    83,    84,    85,    -1,    -1,    88,    89,    -1,
      91,    92,    93,    94,    95,    -1,    -1,    -1,    99,    -1,
      -1,    -1,    -1,   104,    -1,    -1,   107,    -1,    -1,    -1,
     111,   112,   113,    -1,    -1,   116,    -1,    -1,    -1,    -1,
     121,   122,    -1,    -1,    -1,    -1,    -1,   128,   129,    -1,
     131,    -1,    -1,    -1,    -1,    -1,   137,    -1,    -1,    -1,
      -1,   142,   143,   144,   145,    -1,    -1,    -1,   149,    -1,
      -1,   152,   153,   154,    -1,    -1,    -1,   158,    -1,    -1,
     161,   162,   163,   164,   165,    -1,    -1,   168,   169,    -1,
     171,   172,   173,   174,   175,   176,    -1,    -1,   179,   180,
     181,   182,   183,    -1,    -1,   186,   187,    -1,   189,   190,
     191,   192,   193,    -1,    -1,   196,   197,    -1,    -1,    -1,
     201,   202,    -1,    -1,    -1,    -1,    -1,   208,    -1,   210,
     211,   212,   213,    -1,   215,    -1,   217,    -1,    -1,    -1,
     221,   222,    -1,   224,    -1,    -1,   227,   228,    -1,    -1,
      -1,   232,   233,   234,    -1,    -1,    -1,   238,   239,   240,
      -1,    -1,   243,    -1,    -1,    -1,    -1,   248,   249,   250,
      -1,    -1,    -1,    -1,   255,    -1,    -1,    -1,   259,   260,
      -1,   262,   263,    -1,    -1,    -1,   267,    -1,   269,    -1,
      -1,   272,   273,    -1,    -1,   276,    -1,    -1,   279,   280,
      -1,    -1,    -1,    -1,    -1,   286,   287,    -1,   289,    -1,
     291,    -1,   293,   294,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   302,    -1,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,    -1,   323,   324,   325,    -1,   327,   328,   329,   330,
      -1,   332,   333,    -1,    -1,    -1,    -1,   338,   339,   340,
     341,   342,   343,    -1,    -1,   346,   347,    -1,   349,    -1,
     351,    -1,   353,   354,   355,   356,   357,   358,   359,   360,
     361,    -1,    -1,   364,   365,    -1,    -1,   368,   369,   370,
     371,   372,    -1,    -1,    -1,   376,   377,    -1,    -1,    -1,
     381,    -1,   383,   384,    -1,   386,   387,   388,    -1,    -1,
     391,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     401,   402,   403,    -1,   405,    -1,   407,    -1,   409,   410,
     411,   412,   413,   414,   415,   416,   417,   418,    -1,   420,
      -1,   422,   423,   424,    -1,   426,    -1,   428,   429,   430,
     431,   432,    -1,   434,   435,   436,    -1,    -1,   439,    -1,
      -1,    -1,   443,   444,    -1,   446,   447,    -1,    -1,   450,
     451,   452,   453,   454,    -1,   456,   457,    -1,   459,   460,
     461,    -1,    -1,   464,   465,   466,   467,   468,   469,   470,
     471,    -1,   473,    -1,   475,   476,    -1,   478,   479,   480,
      -1,   482,    -1,    -1,   485,   486,   487,   488,    -1,   490,
      -1,   492,   493,   494,   495,   496,    -1,    -1,   499,   500,
      -1,    -1,    -1,   504,   505,   506,   507,    -1,    -1,    -1,
     511,    -1,    -1,    -1,    -1,   516,    -1,   518,   519,   520,
     521,    -1,   523,   524,   525,   526,   527,    -1,    -1,    -1,
      -1,    -1,   533,   534,   535,    -1,   537,    -1,    -1,   540,
      -1,    -1,   543,    -1,   545,    -1,   547,   548,   549,   550,
     551,   552,    -1,    -1,   555,   556,    -1,    -1,   559,   560,
     561,   562,   563,   564,    -1,    -1,   567,   568,   569,   570,
      -1,   572,   573,   574,    -1,    -1,   577,   578,   579,   580,
      -1,    -1,   583,   584,    -1,   586,   587,   588,   589,    -1,
      -1,    -1,    -1,    -1,   595,   596,    -1,    -1,    -1,   600,
     601,   602,    -1,    -1,   605,   606,    -1,   608,   609,    -1,
     611,   612,    -1,    -1,   615,    -1,    -1,   618,    -1,   620,
      -1,   622,   623,    -1,    -1,    -1,    -1,    -1,   629,    -1,
     631,    -1,    -1,   634,    -1,    -1,    -1,    -1,   639,    -1,
     641,   642,   643,   644,    -1,    -1,    -1,    -1,    -1,    -1,
     651,   652,   653,    -1,   655,   656,   657,   658,    -1,    -1,
     661,    -1,    -1,   664,   665,    -1,   667,   668,   669,   670,
     671,    -1,   673,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   682,   683,   684,    -1,   686,   687,   688,    -1,   690,
      -1,    -1,   693,    -1,   695,    -1,    -1,    -1,    -1,    -1,
      -1,   702,   703,    -1,    -1,   706,    -1,   708,    -1,   710,
     711,    -1,    -1,    -1,   715,   716,   717,   718,   719,   720,
     721,   722,    -1,   724,   725,   726,   727,   728,   729,   730,
     731,   732,   733,    -1,   735,   736,   737,   738,   739,   740,
     741,   742,   743,   744,     5,     6,    -1,     8,     9,    10,
      11,    12,    -1,    -1,    15,    -1,    -1,   758,    -1,    20,
      -1,    -1,    23,    -1,    25,    26,    27,    28,    29,    30,
      -1,    32,    -1,    -1,    -1,    36,    -1,    -1,    -1,    40,
      -1,    -1,    43,    44,    45,    -1,    47,    -1,    49,    50,
      -1,    -1,    53,    -1,    -1,    56,    57,    -1,    59,    60,
      61,    -1,    63,    -1,    65,    66,    67,    68,    69,    70,
      -1,    72,    73,    -1,    75,    76,    77,    78,    79,    80,
      81,    82,    83,    84,    85,    -1,    -1,    88,    89,    -1,
      91,    92,    93,    94,    95,    -1,    -1,    -1,    99,    -1,
      -1,    -1,    -1,   104,    -1,    -1,   107,    -1,    -1,    -1,
     111,   112,   113,    -1,    -1,   116,    -1,    -1,    -1,    -1,
     121,   122,    -1,    -1,    -1,    -1,    -1,   128,   129,    -1,
     131,    -1,    -1,    -1,    -1,    -1,   137,    -1,    -1,    -1,
      -1,   142,   143,   144,   145,    -1,    -1,    -1,   149,    -1,
      -1,   152,   153,   154,    -1,    -1,    -1,   158,    -1,    -1,
     161,   162,   163,   164,   165,    -1,    -1,   168,   169,    -1,
     171,   172,   173,   174,   175,   176,    -1,    -1,   179,   180,
     181,   182,   183,    -1,    -1,   186,   187,    -1,   189,   190,
     191,   192,   193,    -1,    -1,   196,   197,    -1,    -1,    -1,
     201,   202,    -1,    -1,    -1,    -1,    -1,   208,    -1,   210,
     211,   212,   213,    -1,   215,    -1,   217,    -1,    -1,    -1,
     221,   222,    -1,   224,    -1,    -1,   227,   228,    -1,    -1,
      -1,   232,   233,   234,    -1,    -1,    -1,   238,   239,   240,
      -1,    -1,   243,    -1,    -1,    -1,    -1,   248,   249,   250,
      -1,    -1,    -1,    -1,   255,    -1,    -1,    -1,   259,   260,
      -1,   262,   263,    -1,    -1,    -1,   267,    -1,   269,    -1,
      -1,   272,   273,    -1,    -1,   276,    -1,    -1,   279,   280,
      -1,    -1,    -1,    -1,    -1,   286,   287,    -1,   289,    -1,
     291,    -1,   293,   294,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   302,    -1,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,    -1,   323,   324,   325,    -1,   327,   328,   329,   330,
      -1,   332,   333,    -1,    -1,    -1,    -1,   338,   339,   340,
     341,   342,   343,    -1,    -1,   346,   347,    -1,   349,    -1,
     351,    -1,   353,   354,   355,   356,   357,   358,   359,   360,
     361,    -1,    -1,   364,   365,    -1,    -1,   368,   369,   370,
     371,   372,    -1,    -1,    -1,   376,   377,    -1,    -1,    -1,
     381,    -1,   383,   384,    -1,   386,   387,   388,    -1,    -1,
     391,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     401,   402,   403,    -1,   405,    -1,   407,    -1,   409,   410,
     411,   412,   413,   414,   415,   416,   417,   418,    -1,   420,
      -1,   422,   423,   424,    -1,   426,    -1,   428,   429,   430,
     431,   432,    -1,   434,   435,   436,    -1,    -1,   439,    -1,
      -1,    -1,   443,   444,    -1,   446,   447,    -1,    -1,   450,
     451,   452,   453,   454,    -1,   456,   457,    -1,   459,   460,
     461,    -1,    -1,   464,   465,   466,   467,   468,   469,   470,
     471,    -1,   473,    -1,   475,   476,    -1,   478,   479,   480,
      -1,   482,    -1,    -1,   485,   486,   487,   488,    -1,   490,
      -1,   492,   493,   494,   495,   496,    -1,    -1,   499,   500,
      -1,    -1,    -1,   504,   505,   506,   507,    -1,    -1,    -1,
     511,    -1,    -1,    -1,    -1,   516,    -1,   518,   519,   520,
     521,    -1,   523,   524,   525,   526,   527,    -1,    -1,    -1,
      -1,    -1,   533,   534,   535,    -1,   537,    -1,    -1,   540,
      -1,    -1,   543,    -1,   545,    -1,   547,   548,   549,   550,
     551,   552,    -1,    -1,   555,   556,    -1,    -1,   559,   560,
     561,   562,   563,   564,    -1,    -1,   567,   568,   569,   570,
      -1,   572,   573,   574,    -1,    -1,   577,   578,   579,   580,
      -1,    -1,   583,   584,    -1,   586,   587,   588,   589,    -1,
      -1,    -1,    -1,    -1,   595,   596,    -1,    -1,    -1,   600,
     601,   602,    -1,    -1,   605,   606,    -1,   608,   609,    -1,
     611,   612,    -1,    -1,   615,    -1,    -1,   618,    -1,   620,
      -1,   622,   623,    -1,    -1,    -1,    -1,    -1,   629,    -1,
     631,    -1,    -1,   634,    -1,    -1,    -1,    -1,   639,    -1,
     641,   642,   643,   644,    -1,    -1,    -1,    -1,    -1,    -1,
     651,   652,   653,    -1,   655,   656,   657,   658,    -1,    -1,
     661,    -1,    -1,   664,   665,    -1,   667,   668,   669,   670,
     671,    -1,   673,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   682,   683,   684,    -1,   686,   687,   688,    -1,   690,
      -1,    -1,   693,    -1,   695,    -1,    -1,    -1,    -1,    -1,
      -1,   702,   703,    -1,    -1,   706,    -1,   708,    -1,   710,
     711,    -1,    -1,    -1,   715,   716,   717,   718,   719,   720,
     721,   722,    -1,   724,   725,   726,   727,   728,   729,   730,
     731,   732,   733,    -1,   735,   736,   737,   738,   739,   740,
     741,   742,   743,   744,     5,     6,    -1,     8,     9,    10,
      11,    12,    -1,    -1,    15,    -1,    -1,   758,    -1,    20,
      -1,    -1,    23,    -1,    25,    26,    27,    28,    29,    30,
      -1,    32,    -1,    -1,    -1,    36,    -1,    -1,    -1,    40,
      -1,    -1,    43,    44,    45,    -1,    47,    -1,    49,    50,
      -1,    -1,    53,    -1,    -1,    56,    57,    -1,    59,    60,
      61,    -1,    63,    -1,    65,    66,    67,    68,    69,    70,
      -1,    72,    73,    -1,    75,    76,    77,    78,    79,    80,
      81,    82,    83,    84,    85,    -1,    -1,    88,    89,    -1,
      91,    92,    93,    94,    95,    -1,    -1,    -1,    99,    -1,
      -1,    -1,    -1,   104,    -1,    -1,   107,    -1,    -1,    -1,
     111,   112,   113,    -1,    -1,   116,    -1,    -1,    -1,    -1,
     121,   122,    -1,    -1,    -1,    -1,    -1,   128,   129,    -1,
     131,    -1,    -1,    -1,    -1,    -1,   137,    -1,    -1,    -1,
      -1,   142,   143,   144,   145,    -1,    -1,    -1,   149,    -1,
      -1,   152,   153,   154,    -1,    -1,    -1,   158,    -1,    -1,
     161,   162,   163,   164,   165,    -1,    -1,   168,   169,    -1,
     171,   172,   173,   174,   175,   176,    -1,    -1,   179,   180,
     181,   182,   183,    -1,    -1,   186,   187,    -1,   189,   190,
     191,   192,   193,    -1,    -1,   196,   197,    -1,    -1,    -1,
     201,   202,    -1,    -1,    -1,    -1,    -1,   208,    -1,   210,
     211,   212,   213,    -1,   215,    -1,   217,    -1,    -1,    -1,
     221,   222,    -1,   224,    -1,    -1,   227,   228,    -1,    -1,
      -1,   232,   233,   234,    -1,    -1,    -1,   238,   239,   240,
      -1,    -1,   243,    -1,    -1,    -1,    -1,   248,   249,   250,
      -1,    -1,    -1,    -1,   255,    -1,    -1,    -1,   259,   260,
      -1,   262,   263,    -1,    -1,    -1,   267,    -1,   269,    -1,
      -1,   272,   273,    -1,    -1,   276,    -1,    -1,   279,   280,
      -1,    -1,    -1,    -1,    -1,   286,   287,    -1,   289,    -1,
     291,    -1,   293,   294,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   302,    -1,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,    -1,   323,   324,   325,    -1,   327,   328,   329,   330,
      -1,   332,   333,    -1,    -1,    -1,    -1,   338,   339,   340,
     341,   342,   343,    -1,    -1,   346,   347,    -1,   349,    -1,
     351,    -1,   353,   354,   355,   356,   357,   358,   359,   360,
     361,    -1,    -1,   364,   365,    -1,    -1,   368,   369,   370,
     371,   372,    -1,    -1,    -1,   376,   377,    -1,    -1,    -1,
     381,    -1,   383,   384,    -1,   386,   387,   388,    -1,    -1,
     391,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     401,   402,   403,    -1,   405,    -1,   407,    -1,   409,   410,
     411,   412,   413,   414,   415,   416,   417,   418,    -1,   420,
      -1,   422,   423,   424,    -1,   426,    -1,   428,   429,   430,
     431,   432,    -1,   434,   435,   436,    -1,    -1,   439,    -1,
      -1,    -1,   443,   444,    -1,   446,   447,    -1,    -1,   450,
     451,   452,   453,   454,    -1,   456,   457,    -1,   459,   460,
     461,    -1,    -1,   464,   465,   466,   467,   468,   469,   470,
     471,    -1,   473,    -1,   475,   476,    -1,   478,   479,   480,
      -1,   482,    -1,    -1,   485,   486,   487,   488,    -1,   490,
      -1,   492,   493,   494,   495,   496,    -1,    -1,   499,   500,
      -1,    -1,    -1,   504,   505,   506,   507,    -1,    -1,    -1,
     511,    -1,    -1,    -1,    -1,   516,    -1,   518,   519,   520,
     521,    -1,   523,   524,   525,   526,   527,    -1,    -1,    -1,
      -1,    -1,   533,   534,   535,    -1,   537,    -1,    -1,   540,
      -1,    -1,   543,    -1,   545,    -1,   547,   548,   549,   550,
     551,   552,    -1,    -1,   555,   556,    -1,    -1,   559,   560,
     561,   562,   563,   564,    -1,    -1,   567,   568,   569,   570,
      -1,   572,   573,   574,    -1,    -1,   577,   578,   579,   580,
      -1,    -1,   583,   584,    -1,   586,   587,   588,   589,    -1,
      -1,    -1,    -1,    -1,   595,   596,    -1,    -1,    -1,   600,
     601,   602,    -1,    -1,   605,   606,    -1,   608,   609,    -1,
     611,   612,    -1,    -1,   615,    -1,    -1,   618,    -1,   620,
      -1,   622,   623,    -1,    -1,    -1,    -1,    -1,   629,    -1,
     631,    -1,    -1,   634,    -1,    -1,    -1,    -1,   639,    -1,
     641,   642,   643,   644,    -1,    -1,    -1,    -1,    -1,    -1,
     651,   652,   653,    -1,   655,   656,   657,   658,    -1,    -1,
     661,    -1,    -1,   664,   665,    -1,   667,   668,   669,   670,
     671,    -1,   673,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   682,   683,   684,    -1,   686,   687,   688,    -1,   690,
      -1,    -1,   693,    -1,   695,    -1,    -1,    -1,    -1,    -1,
      -1,   702,   703,    -1,    -1,   706,    -1,   708,    -1,   710,
     711,    -1,    -1,    -1,   715,   716,   717,   718,   719,   720,
     721,   722,    -1,   724,   725,   726,   727,   728,   729,   730,
     731,   732,   733,    -1,   735,   736,   737,   738,   739,   740,
     741,   742,   743,   744,     5,     6,    -1,     8,     9,    10,
      11,    12,    -1,    -1,    15,    -1,    -1,   758,    -1,    20,
      -1,    -1,    23,    -1,    25,    26,    27,    28,    29,    30,
      -1,    32,    -1,    -1,    -1,    36,    -1,    -1,    -1,    40,
      -1,    -1,    43,    44,    45,    -1,    47,    -1,    49,    50,
      -1,    -1,    53,    -1,    -1,    56,    57,    -1,    59,    60,
      61,    -1,    63,    -1,    65,    66,    67,    68,    69,    70,
      -1,    72,    73,    -1,    75,    76,    77,    78,    79,    80,
      81,    82,    83,    84,    85,    -1,    -1,    88,    89,    -1,
      91,    92,    93,    94,    95,    -1,    -1,    -1,    99,    -1,
      -1,    -1,    -1,   104,    -1,    -1,   107,    -1,    -1,    -1,
     111,   112,   113,    -1,    -1,   116,    -1,    -1,    -1,    -1,
     121,   122,    -1,    -1,    -1,    -1,    -1,   128,   129,    -1,
     131,    -1,    -1,    -1,    -1,    -1,   137,    -1,    -1,    -1,
      -1,   142,   143,   144,   145,    -1,    -1,    -1,   149,    -1,
      -1,   152,   153,   154,    -1,    -1,    -1,   158,    -1,    -1,
     161,   162,   163,   164,   165,    -1,    -1,   168,   169,    -1,
     171,   172,   173,   174,   175,   176,    -1,    -1,   179,   180,
     181,   182,   183,    -1,    -1,   186,   187,    -1,   189,   190,
     191,   192,   193,    -1,    -1,   196,   197,    -1,    -1,    -1,
     201,   202,    -1,    -1,    -1,    -1,    -1,   208,    -1,   210,
     211,   212,   213,    -1,   215,    -1,   217,    -1,    -1,    -1,
     221,   222,    -1,   224,    -1,    -1,   227,   228,    -1,    -1,
      -1,   232,   233,   234,    -1,    -1,    -1,   238,   239,   240,
      -1,    -1,   243,    -1,    -1,    -1,    -1,   248,   249,   250,
      -1,    -1,    -1,    -1,   255,    -1,    -1,    -1,   259,   260,
      -1,   262,   263,    -1,    -1,    -1,   267,    -1,   269,    -1,
      -1,   272,   273,    -1,    -1,   276,    -1,    -1,   279,   280,
      -1,    -1,    -1,    -1,    -1,   286,   287,    -1,   289,    -1,
     291,    -1,   293,   294,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   302,    -1,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,    -1,   323,   324,   325,    -1,   327,   328,   329,   330,
      -1,   332,   333,    -1,    -1,    -1,    -1,   338,   339,   340,
     341,   342,   343,    -1,    -1,   346,   347,    -1,   349,    -1,
     351,    -1,   353,   354,   355,   356,   357,   358,   359,   360,
     361,    -1,    -1,   364,   365,    -1,    -1,   368,   369,   370,
     371,   372,    -1,    -1,    -1,   376,   377,    -1,    -1,    -1,
     381,    -1,   383,   384,    -1,   386,   387,   388,    -1,    -1,
     391,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     401,   402,   403,    -1,   405,    -1,   407,    -1,   409,   410,
     411,   412,   413,   414,   415,   416,   417,   418,    -1,   420,
      -1,   422,   423,   424,    -1,   426,    -1,   428,   429,   430,
     431,   432,    -1,   434,   435,   436,    -1,    -1,   439,    -1,
      -1,    -1,   443,   444,    -1,   446,   447,    -1,    -1,   450,
     451,   452,   453,   454,    -1,   456,   457,    -1,   459,   460,
     461,    -1,    -1,   464,   465,   466,   467,   468,   469,   470,
     471,    -1,   473,    -1,   475,   476,    -1,   478,   479,   480,
      -1,   482,    -1,    -1,   485,   486,   487,   488,    -1,   490,
      -1,   492,   493,   494,   495,   496,    -1,    -1,   499,   500,
      -1,    -1,    -1,   504,   505,   506,   507,    -1,    -1,    -1,
     511,    -1,    -1,    -1,    -1,   516,    -1,   518,   519,   520,
     521,    -1,   523,   524,   525,   526,   527,    -1,    -1,    -1,
      -1,    -1,   533,   534,   535,    -1,   537,    -1,    -1,   540,
      -1,    -1,   543,    -1,   545,    -1,   547,   548,   549,   550,
     551,   552,    -1,    -1,   555,   556,    -1,    -1,   559,   560,
     561,   562,   563,   564,    -1,    -1,   567,   568,   569,   570,
      -1,   572,   573,   574,    -1,    -1,   577,   578,   579,   580,
      -1,    -1,   583,   584,    -1,   586,   587,   588,   589,    -1,
      -1,    -1,    -1,    -1,   595,   596,    -1,    -1,    -1,   600,
     601,   602,    -1,    -1,   605,   606,    -1,   608,   609,    -1,
     611,   612,    -1,    -1,   615,    -1,    -1,   618,    -1,   620,
      -1,   622,   623,    -1,    -1,    -1,    -1,    -1,   629,    -1,
     631,    -1,    -1,   634,    -1,    -1,    -1,    -1,   639,    -1,
     641,   642,   643,   644,    -1,    -1,    -1,    -1,    -1,    -1,
     651,   652,   653,    -1,   655,   656,   657,   658,    -1,    -1,
     661,    -1,    -1,   664,   665,    -1,   667,   668,   669,   670,
     671,    -1,   673,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   682,   683,   684,    -1,   686,   687,   688,    -1,   690,
      -1,    -1,   693,    -1,   695,    -1,    -1,    -1,    -1,    -1,
      -1,   702,   703,    -1,    -1,   706,    -1,   708,    -1,   710,
     711,    -1,    -1,    -1,   715,   716,   717,   718,   719,   720,
     721,   722,    -1,   724,   725,   726,   727,   728,   729,   730,
     731,   732,   733,    -1,   735,   736,   737,   738,   739,   740,
     741,   742,   743,   744,    -1,    -1,    -1,    -1,    -1,     5,
       6,   752,     8,     9,    10,    11,    12,    -1,    -1,    15,
      -1,    -1,    -1,    -1,    20,    -1,    -1,    23,    -1,    25,
      26,    27,    28,    29,    30,    -1,    32,    -1,    -1,    -1,
      36,    -1,    -1,    -1,    40,    -1,    -1,    43,    44,    45,
      -1,    47,    -1,    49,    50,    -1,    -1,    53,    -1,    -1,
      56,    57,    -1,    59,    60,    61,    -1,    63,    -1,    65,
      66,    67,    68,    69,    70,    -1,    72,    73,    -1,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      -1,    -1,    88,    89,    -1,    91,    92,    93,    94,    95,
      -1,    -1,    -1,    99,    -1,    -1,    -1,    -1,   104,    -1,
      -1,   107,    -1,    -1,    -1,   111,   112,   113,    -1,    -1,
     116,    -1,    -1,    -1,    -1,   121,   122,    -1,    -1,    -1,
      -1,    -1,   128,   129,    -1,   131,    -1,    -1,    -1,    -1,
      -1,   137,    -1,    -1,    -1,    -1,   142,   143,   144,   145,
      -1,    -1,    -1,   149,    -1,    -1,   152,   153,   154,    -1,
      -1,    -1,   158,    -1,    -1,   161,   162,   163,   164,   165,
      -1,    -1,   168,   169,    -1,   171,   172,   173,   174,   175,
     176,    -1,    -1,   179,   180,   181,   182,   183,    -1,    -1,
     186,   187,    -1,   189,   190,   191,   192,   193,    -1,    -1,
     196,   197,    -1,    -1,    -1,   201,   202,    -1,    -1,    -1,
      -1,    -1,   208,    -1,   210,   211,   212,   213,    -1,   215,
      -1,   217,    -1,    -1,    -1,   221,   222,    -1,   224,    -1,
      -1,   227,   228,    -1,    -1,    -1,   232,   233,   234,    -1,
      -1,    -1,   238,   239,   240,    -1,    -1,   243,    -1,    -1,
      -1,    -1,   248,   249,   250,    -1,    -1,    -1,    -1,   255,
      -1,    -1,    -1,   259,   260,    -1,   262,   263,    -1,    -1,
      -1,   267,    -1,   269,    -1,    -1,   272,   273,    -1,    -1,
     276,    -1,    -1,   279,   280,    -1,    -1,    -1,    -1,    -1,
     286,   287,    -1,   289,    -1,   291,    -1,   293,   294,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   302,    -1,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,    -1,   323,   324,   325,
      -1,   327,   328,   329,   330,    -1,   332,   333,    -1,    -1,
      -1,    -1,   338,   339,   340,   341,   342,   343,    -1,    -1,
     346,   347,    -1,   349,    -1,   351,    -1,   353,   354,   355,
     356,   357,   358,   359,   360,   361,    -1,    -1,   364,   365,
      -1,    -1,   368,   369,   370,   371,   372,    -1,    -1,    -1,
     376,   377,    -1,    -1,    -1,   381,    -1,   383,   384,    -1,
     386,   387,   388,    -1,    -1,   391,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   401,   402,   403,    -1,   405,
      -1,   407,    -1,   409,   410,   411,   412,   413,   414,   415,
     416,   417,   418,    -1,   420,    -1,   422,   423,   424,    -1,
     426,    -1,   428,   429,   430,   431,   432,    -1,   434,   435,
     436,    -1,    -1,   439,    -1,    -1,    -1,   443,   444,    -1,
     446,   447,    -1,    -1,   450,   451,   452,   453,   454,    -1,
     456,   457,    -1,   459,   460,   461,    -1,    -1,   464,   465,
     466,   467,   468,   469,   470,   471,    -1,   473,    -1,   475,
     476,    -1,   478,   479,   480,    -1,   482,    -1,    -1,   485,
     486,   487,   488,    -1,   490,    -1,   492,   493,   494,   495,
     496,    -1,    -1,   499,   500,    -1,    -1,    -1,   504,   505,
     506,   507,    -1,    -1,    -1,   511,    -1,    -1,    -1,    -1,
     516,    -1,   518,   519,   520,   521,    -1,   523,   524,   525,
     526,   527,    -1,    -1,    -1,    -1,    -1,   533,   534,   535,
      -1,   537,    -1,    -1,   540,    -1,    -1,   543,    -1,   545,
      -1,   547,   548,   549,   550,   551,   552,    -1,    -1,   555,
     556,    -1,    -1,   559,   560,   561,   562,   563,   564,    -1,
      -1,   567,   568,   569,   570,    -1,   572,   573,   574,    -1,
      -1,   577,   578,   579,   580,    -1,    -1,   583,   584,    -1,
     586,   587,   588,   589,    -1,    -1,    -1,    -1,    -1,   595,
     596,    -1,    -1,    -1,   600,   601,   602,    -1,    -1,   605,
     606,    -1,   608,   609,    -1,   611,   612,    -1,    -1,   615,
      -1,    -1,   618,    -1,   620,    -1,   622,   623,    -1,    -1,
      -1,    -1,    -1,   629,    -1,   631,    -1,    -1,   634,    -1,
      -1,    -1,    -1,   639,    -1,   641,   642,   643,   644,    -1,
      -1,    -1,    -1,    -1,    -1,   651,   652,   653,    -1,   655,
     656,   657,   658,    -1,    -1,   661,    -1,    -1,   664,   665,
      -1,   667,   668,   669,   670,   671,    -1,   673,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   682,   683,   684,    -1,
     686,   687,   688,    -1,   690,    -1,    -1,   693,    -1,   695,
      -1,    -1,    -1,    -1,    -1,    -1,   702,   703,    -1,    -1,
     706,    -1,   708,    -1,   710,   711,    -1,    -1,    -1,   715,
     716,   717,   718,   719,   720,   721,   722,    -1,   724,   725,
     726,   727,   728,   729,   730,   731,   732,   733,    -1,   735,
     736,   737,   738,   739,   740,   741,   742,   743,   744,    -1,
      -1,    -1,    -1,    -1,     5,     6,   752,     8,     9,    10,
      11,    12,    -1,    -1,    15,    -1,    -1,    -1,    -1,    20,
      -1,    -1,    23,    -1,    25,    26,    27,    28,    29,    30,
      -1,    32,    -1,    -1,    -1,    36,    -1,    -1,    -1,    40,
      -1,    -1,    43,    44,    45,    -1,    47,    -1,    49,    50,
      -1,    -1,    53,    -1,    -1,    56,    57,    -1,    59,    60,
      61,    -1,    63,    -1,    65,    66,    67,    68,    69,    70,
      -1,    72,    73,    -1,    75,    76,    77,    78,    79,    80,
      81,    82,    83,    84,    85,    -1,    -1,    88,    89,    -1,
      91,    92,    93,    94,    95,    -1,    -1,    -1,    99,    -1,
      -1,    -1,    -1,   104,    -1,    -1,   107,    -1,    -1,    -1,
     111,   112,   113,    -1,    -1,   116,    -1,    -1,    -1,    -1,
     121,   122,    -1,    -1,    -1,    -1,    -1,   128,   129,    -1,
     131,    -1,    -1,    -1,    -1,    -1,   137,    -1,    -1,    -1,
      -1,   142,   143,   144,   145,    -1,    -1,    -1,   149,    -1,
      -1,   152,   153,   154,    -1,    -1,    -1,   158,    -1,    -1,
     161,   162,   163,   164,   165,    -1,    -1,   168,   169,    -1,
     171,   172,   173,   174,   175,   176,    -1,    -1,   179,   180,
     181,   182,   183,    -1,    -1,   186,   187,    -1,   189,   190,
     191,   192,   193,    -1,    -1,   196,   197,    -1,    -1,    -1,
     201,   202,    -1,    -1,    -1,    -1,    -1,   208,    -1,   210,
     211,   212,   213,    -1,   215,    -1,   217,    -1,    -1,    -1,
     221,   222,    -1,   224,    -1,    -1,   227,   228,    -1,    -1,
      -1,   232,   233,   234,    -1,    -1,    -1,   238,   239,   240,
      -1,    -1,   243,    -1,    -1,    -1,    -1,   248,   249,   250,
      -1,    -1,    -1,    -1,   255,    -1,    -1,    -1,   259,   260,
      -1,   262,   263,    -1,    -1,    -1,   267,    -1,   269,    -1,
      -1,   272,   273,    -1,    -1,   276,    -1,    -1,   279,   280,
      -1,    -1,    -1,    -1,    -1,   286,   287,    -1,   289,    -1,
     291,    -1,   293,   294,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   302,    -1,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,    -1,   323,   324,   325,    -1,   327,   328,   329,   330,
      -1,   332,   333,    -1,    -1,    -1,    -1,   338,   339,   340,
     341,   342,   343,    -1,    -1,   346,   347,    -1,   349,    -1,
     351,    -1,   353,   354,   355,   356,   357,   358,   359,   360,
     361,    -1,    -1,   364,   365,    -1,    -1,   368,   369,   370,
     371,   372,    -1,    -1,    -1,   376,   377,    -1,    -1,    -1,
     381,    -1,   383,   384,    -1,   386,   387,   388,    -1,    -1,
     391,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     401,   402,   403,    -1,   405,    -1,   407,    -1,   409,   410,
     411,   412,   413,   414,   415,   416,   417,   418,    -1,   420,
      -1,   422,   423,   424,    -1,   426,    -1,   428,   429,   430,
     431,   432,    -1,   434,   435,   436,    -1,    -1,   439,    -1,
      -1,    -1,   443,   444,    -1,   446,   447,    -1,    -1,   450,
     451,   452,   453,   454,    -1,   456,   457,    -1,   459,   460,
     461,    -1,    -1,   464,   465,   466,   467,   468,   469,   470,
     471,    -1,   473,    -1,   475,   476,    -1,   478,   479,   480,
      -1,   482,    -1,    -1,   485,   486,   487,   488,    -1,   490,
      -1,   492,   493,   494,   495,   496,    -1,    -1,   499,   500,
      -1,    -1,    -1,   504,   505,   506,   507,    -1,    -1,    -1,
     511,    -1,    -1,    -1,    -1,   516,    -1,   518,   519,   520,
     521,    -1,   523,   524,   525,   526,   527,    -1,    -1,    -1,
      -1,    -1,   533,   534,   535,    -1,   537,    -1,    -1,   540,
      -1,    -1,   543,    -1,   545,    -1,   547,   548,   549,   550,
     551,   552,    -1,    -1,   555,   556,    -1,    -1,   559,   560,
     561,   562,   563,   564,    -1,    -1,   567,   568,   569,   570,
      -1,   572,   573,   574,    -1,    -1,   577,   578,   579,   580,
      -1,    -1,   583,   584,    -1,   586,   587,   588,   589,    -1,
      -1,    -1,    -1,    -1,   595,   596,    -1,    -1,    -1,   600,
     601,   602,    -1,    -1,   605,   606,    -1,   608,   609,    -1,
     611,   612,    -1,    -1,   615,    -1,    -1,   618,    -1,   620,
      -1,   622,   623,    -1,    -1,    -1,    -1,    -1,   629,    -1,
     631,    -1,    -1,   634,    -1,    -1,    -1,    -1,   639,    -1,
     641,   642,   643,   644,    -1,    -1,    -1,    -1,    -1,    -1,
     651,   652,   653,    -1,   655,   656,   657,   658,    -1,    -1,
     661,    -1,    -1,   664,   665,    -1,   667,   668,   669,   670,
     671,    -1,   673,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   682,   683,   684,    -1,   686,   687,   688,    -1,   690,
      -1,    -1,   693,    -1,   695,    -1,    -1,    -1,    -1,    -1,
      -1,   702,   703,    -1,    -1,   706,    -1,   708,    -1,   710,
     711,    -1,    -1,    -1,   715,   716,   717,   718,   719,   720,
     721,   722,    -1,   724,   725,   726,   727,   728,   729,   730,
     731,   732,   733,    -1,   735,   736,   737,   738,   739,   740,
     741,   742,   743,   744,    -1,    -1,    -1,    -1,    -1,     5,
       6,   752,     8,     9,    10,    11,    12,    -1,    -1,    15,
      -1,    -1,    -1,    -1,    20,    -1,    -1,    23,    -1,    25,
      26,    27,    28,    29,    30,    -1,    32,    -1,    -1,    -1,
      36,    -1,    -1,    -1,    40,    -1,    -1,    43,    44,    45,
      -1,    47,    -1,    49,    50,    -1,    -1,    53,    -1,    -1,
      56,    57,    -1,    59,    60,    61,    -1,    63,    -1,    65,
      66,    67,    68,    69,    70,    -1,    72,    73,    -1,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      -1,    -1,    88,    89,    -1,    91,    92,    93,    94,    95,
      -1,    -1,    -1,    99,    -1,    -1,    -1,    -1,   104,    -1,
      -1,   107,    -1,    -1,    -1,   111,   112,   113,    -1,    -1,
     116,    -1,    -1,    -1,    -1,   121,   122,   123,    -1,    -1,
      -1,    -1,   128,   129,    -1,   131,    -1,    -1,    -1,    -1,
      -1,   137,    -1,    -1,    -1,    -1,   142,   143,   144,   145,
      -1,    -1,    -1,   149,    -1,    -1,   152,   153,   154,    -1,
      -1,    -1,   158,    -1,    -1,   161,   162,   163,   164,   165,
      -1,    -1,   168,   169,    -1,   171,   172,   173,   174,   175,
     176,    -1,    -1,   179,   180,   181,   182,   183,    -1,    -1,
     186,   187,    -1,   189,   190,   191,   192,   193,   194,    -1,
     196,   197,    -1,    -1,    -1,   201,   202,    -1,    -1,    -1,
      -1,    -1,   208,    -1,   210,   211,   212,   213,    -1,   215,
      -1,   217,    -1,    -1,    -1,   221,   222,    -1,   224,    -1,
      -1,   227,   228,    -1,    -1,    -1,   232,   233,   234,    -1,
      -1,    -1,   238,   239,   240,    -1,    -1,   243,    -1,    -1,
      -1,    -1,   248,   249,   250,    -1,    -1,    -1,    -1,   255,
      -1,    -1,    -1,   259,   260,    -1,   262,   263,    -1,    -1,
      -1,   267,    -1,   269,    -1,    -1,   272,   273,    -1,    -1,
     276,    -1,    -1,   279,   280,    -1,    -1,    -1,    -1,    -1,
     286,   287,    -1,   289,    -1,   291,    -1,   293,   294,    -1,
      -1,   297,    -1,    -1,    -1,    -1,   302,    -1,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,    -1,   323,   324,   325,
      -1,   327,   328,   329,   330,    -1,   332,   333,    -1,    -1,
      -1,    -1,   338,   339,   340,   341,   342,   343,    -1,    -1,
     346,   347,    -1,   349,    -1,   351,    -1,   353,   354,   355,
     356,   357,   358,   359,   360,   361,    -1,    -1,   364,   365,
      -1,    -1,   368,   369,   370,   371,   372,   373,   374,    -1,
     376,   377,    -1,    -1,   380,   381,    -1,   383,   384,    -1,
     386,   387,   388,    -1,    -1,   391,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   401,   402,   403,    -1,   405,
      -1,   407,    -1,   409,   410,   411,   412,   413,   414,   415,
     416,   417,   418,    -1,   420,    -1,   422,   423,   424,    -1,
     426,    -1,   428,   429,   430,   431,   432,    -1,   434,   435,
     436,    -1,    -1,   439,    -1,    -1,    -1,   443,   444,    -1,
     446,   447,    -1,    -1,   450,   451,   452,   453,   454,    -1,
     456,   457,    -1,   459,   460,   461,    -1,    -1,   464,   465,
     466,   467,   468,   469,   470,   471,    -1,   473,    -1,   475,
     476,    -1,   478,   479,   480,    -1,   482,    -1,    -1,   485,
     486,   487,   488,    -1,   490,    -1,   492,   493,   494,   495,
     496,    -1,    -1,   499,   500,    -1,    -1,    -1,   504,   505,
     506,   507,    -1,    -1,    -1,   511,    -1,    -1,    -1,    -1,
     516,    -1,   518,   519,   520,   521,    -1,   523,   524,   525,
     526,   527,    -1,    -1,   530,   531,   532,   533,   534,   535,
      -1,   537,    -1,    -1,   540,    -1,    -1,   543,    -1,   545,
      -1,   547,   548,   549,   550,   551,   552,    -1,    -1,   555,
     556,    -1,    -1,   559,   560,   561,   562,   563,   564,    -1,
      -1,   567,   568,   569,   570,    -1,   572,   573,   574,    -1,
      -1,   577,   578,   579,   580,    -1,    -1,   583,   584,    -1,
     586,   587,   588,   589,    -1,    -1,    -1,    -1,    -1,   595,
     596,    -1,    -1,    -1,   600,   601,   602,    -1,   604,   605,
     606,    -1,   608,   609,    -1,   611,   612,    -1,    -1,   615,
      -1,    -1,   618,    -1,   620,    -1,   622,   623,    -1,    -1,
      -1,    -1,    -1,   629,    -1,   631,    -1,    -1,   634,    -1,
      -1,    -1,    -1,   639,    -1,   641,   642,   643,   644,    -1,
      -1,    -1,    -1,    -1,    -1,   651,   652,   653,    -1,   655,
     656,   657,   658,    -1,    -1,   661,    -1,    -1,   664,   665,
      -1,   667,   668,   669,   670,   671,    -1,   673,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   682,   683,   684,    -1,
     686,   687,   688,    -1,   690,    -1,    -1,   693,    -1,   695,
      -1,    -1,    -1,    -1,    -1,    -1,   702,   703,    -1,    -1,
     706,    -1,   708,    -1,   710,   711,    -1,    -1,    -1,   715,
     716,   717,   718,   719,   720,   721,   722,    -1,   724,   725,
     726,   727,   728,   729,   730,   731,   732,   733,    -1,   735,
     736,   737,   738,   739,   740,   741,   742,   743,   744,     5,
       6,    -1,     8,     9,    10,    11,    12,    -1,    -1,    15,
      -1,    -1,    -1,    -1,    20,    -1,    -1,    23,    -1,    25,
      26,    27,    28,    29,    30,    -1,    32,    -1,    -1,    35,
      36,    -1,    -1,    -1,    40,    -1,    -1,    43,    44,    45,
      -1,    47,    -1,    49,    50,    -1,    -1,    53,    -1,    -1,
      56,    57,    -1,    59,    60,    61,    -1,    63,    -1,    65,
      66,    67,    68,    69,    70,    -1,    72,    73,    -1,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      -1,    -1,    88,    89,    -1,    91,    92,    93,    94,    95,
      -1,    -1,    -1,    99,    -1,    -1,    -1,    -1,   104,    -1,
      -1,   107,    -1,    -1,    -1,   111,   112,   113,    -1,    -1,
     116,    -1,    -1,    -1,    -1,   121,   122,    -1,    -1,    -1,
      -1,   127,   128,   129,    -1,   131,    -1,    -1,    -1,    -1,
      -1,   137,    -1,    -1,    -1,    -1,   142,   143,   144,   145,
      -1,    -1,    -1,   149,    -1,    -1,   152,   153,   154,    -1,
      -1,    -1,   158,    -1,    -1,   161,   162,   163,   164,   165,
     166,    -1,   168,   169,    -1,   171,   172,   173,   174,   175,
     176,    -1,    -1,   179,   180,   181,   182,   183,    -1,    -1,
     186,   187,    -1,   189,   190,   191,   192,   193,    -1,    -1,
     196,   197,    -1,    -1,    -1,   201,   202,    -1,    -1,    -1,
      -1,    -1,   208,    -1,   210,   211,   212,   213,    -1,   215,
      -1,   217,    -1,    -1,    -1,   221,   222,    -1,   224,    -1,
      -1,   227,   228,    -1,    -1,    -1,   232,   233,   234,    -1,
      -1,    -1,   238,   239,   240,    -1,    -1,   243,    -1,    -1,
      -1,    -1,   248,   249,   250,    -1,    -1,    -1,    -1,   255,
      -1,    -1,    -1,   259,   260,    -1,   262,   263,    -1,    -1,
      -1,   267,    -1,   269,    -1,    -1,   272,   273,    -1,    -1,
     276,    -1,    -1,   279,   280,   281,    -1,    -1,    -1,    -1,
     286,   287,    -1,   289,    -1,   291,    -1,   293,   294,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   302,    -1,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,    -1,   323,   324,   325,
      -1,   327,   328,   329,   330,    -1,   332,   333,    -1,    -1,
      -1,    -1,   338,   339,   340,   341,   342,   343,    -1,    -1,
     346,   347,    -1,   349,    -1,   351,    -1,   353,   354,   355,
     356,   357,   358,   359,   360,   361,    -1,    -1,   364,   365,
      -1,    -1,   368,   369,   370,   371,   372,    -1,    -1,    -1,
     376,   377,    -1,    -1,    -1,   381,    -1,   383,   384,    -1,
     386,   387,   388,    -1,    -1,   391,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   401,   402,   403,    -1,   405,
      -1,   407,    -1,   409,   410,   411,   412,   413,   414,   415,
     416,   417,   418,    -1,   420,    -1,   422,   423,   424,    -1,
     426,    -1,   428,   429,   430,   431,   432,    -1,   434,   435,
     436,    -1,    -1,   439,    -1,    -1,    -1,   443,   444,    -1,
     446,   447,    -1,    -1,   450,   451,   452,   453,   454,    -1,
     456,   457,    -1,   459,   460,   461,    -1,    -1,   464,   465,
     466,   467,   468,   469,   470,   471,    -1,   473,    -1,   475,
     476,    -1,   478,   479,   480,    -1,   482,    -1,    -1,   485,
     486,   487,   488,    -1,   490,    -1,   492,   493,   494,   495,
     496,    -1,    -1,   499,   500,    -1,    -1,    -1,   504,   505,
     506,   507,    -1,    -1,   510,   511,    -1,    -1,    -1,    -1,
     516,    -1,   518,   519,   520,   521,    -1,   523,   524,   525,
     526,   527,    -1,    -1,    -1,    -1,    -1,   533,   534,   535,
      -1,   537,    -1,    -1,   540,    -1,    -1,   543,    -1,   545,
      -1,   547,   548,   549,   550,   551,   552,    -1,    -1,   555,
     556,    -1,    -1,   559,   560,   561,   562,   563,   564,    -1,
      -1,   567,   568,   569,   570,    -1,   572,   573,   574,    -1,
      -1,   577,   578,   579,   580,    -1,   582,   583,   584,    -1,
     586,   587,   588,   589,    -1,    -1,    -1,    -1,    -1,   595,
     596,    -1,    -1,    -1,   600,   601,   602,    -1,    -1,   605,
     606,    -1,   608,   609,    -1,   611,   612,    -1,    -1,   615,
      -1,    -1,   618,    -1,   620,    -1,   622,   623,    -1,    -1,
      -1,    -1,    -1,   629,    -1,   631,    -1,    -1,   634,    -1,
      -1,    -1,    -1,   639,    -1,   641,   642,   643,   644,    -1,
      -1,    -1,    -1,    -1,    -1,   651,   652,   653,    -1,   655,
     656,   657,   658,    -1,    -1,   661,    -1,    -1,   664,   665,
      -1,   667,   668,   669,   670,   671,    -1,   673,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   682,   683,   684,    -1,
     686,   687,   688,    -1,   690,    -1,    -1,   693,    -1,   695,
      -1,    -1,    -1,    -1,    -1,    -1,   702,   703,    -1,    -1,
     706,    -1,   708,    -1,   710,   711,    -1,    -1,    -1,   715,
     716,   717,   718,   719,   720,   721,   722,    -1,   724,   725,
     726,   727,   728,   729,   730,   731,   732,   733,    -1,   735,
     736,   737,   738,   739,   740,   741,   742,   743,   744,     5,
       6,    -1,     8,     9,    10,    11,    12,    -1,    -1,    15,
      -1,    -1,    -1,    -1,    20,    -1,    -1,    23,    -1,    25,
      26,    27,    28,    29,    30,    -1,    32,    -1,    -1,    -1,
      36,    -1,    -1,    -1,    40,    -1,    -1,    43,    44,    45,
      -1,    47,    -1,    49,    50,    -1,    -1,    53,    -1,    -1,
      56,    57,    -1,    59,    60,    61,    -1,    63,    -1,    65,
      66,    67,    68,    69,    70,    -1,    72,    73,    -1,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      -1,    -1,    88,    89,    90,    91,    92,    93,    94,    95,
      -1,    -1,    -1,    99,    -1,    -1,    -1,    -1,   104,    -1,
      -1,   107,    -1,    -1,    -1,   111,   112,   113,    -1,    -1,
     116,    -1,    -1,    -1,    -1,   121,   122,    -1,    -1,    -1,
      -1,    -1,   128,   129,    -1,   131,    -1,    -1,    -1,    -1,
      -1,   137,    -1,    -1,    -1,    -1,   142,   143,   144,   145,
      -1,    -1,    -1,   149,    -1,    -1,   152,   153,   154,    -1,
      -1,    -1,   158,    -1,    -1,   161,   162,   163,   164,   165,
      -1,    -1,   168,   169,    -1,   171,   172,   173,   174,   175,
     176,    -1,    -1,   179,   180,   181,   182,   183,    -1,    -1,
     186,   187,    -1,   189,   190,   191,   192,   193,    -1,    -1,
     196,   197,    -1,    -1,    -1,   201,   202,    -1,    -1,   205,
      -1,    -1,   208,    -1,   210,   211,   212,   213,    -1,   215,
      -1,   217,    -1,    -1,    -1,   221,   222,    -1,   224,    -1,
      -1,   227,   228,    -1,    -1,    -1,   232,   233,   234,    -1,
      -1,    -1,   238,   239,   240,   241,    -1,   243,    -1,    -1,
      -1,    -1,   248,   249,   250,    -1,    -1,    -1,    -1,   255,
      -1,    -1,    -1,   259,   260,    -1,   262,   263,    -1,    -1,
      -1,   267,    -1,   269,   270,    -1,   272,   273,    -1,    -1,
     276,    -1,    -1,   279,   280,    -1,    -1,    -1,    -1,    -1,
     286,   287,    -1,   289,    -1,   291,    -1,   293,   294,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   302,    -1,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,    -1,   323,   324,   325,
      -1,   327,   328,   329,   330,    -1,   332,   333,    -1,    -1,
      -1,    -1,   338,   339,   340,   341,   342,   343,    -1,    -1,
     346,   347,    -1,   349,    -1,   351,    -1,   353,   354,   355,
     356,   357,   358,   359,   360,   361,    -1,    -1,   364,   365,
      -1,    -1,   368,   369,   370,   371,   372,    -1,    -1,    -1,
     376,   377,    -1,    -1,    -1,   381,    -1,   383,   384,    -1,
     386,   387,   388,    -1,    -1,   391,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   401,   402,   403,    -1,   405,
      -1,   407,    -1,   409,   410,   411,   412,   413,   414,   415,
     416,   417,   418,    -1,   420,    -1,   422,   423,   424,    -1,
     426,    -1,   428,   429,   430,   431,   432,    -1,   434,   435,
     436,    -1,    -1,   439,    -1,    -1,    -1,   443,   444,    -1,
     446,   447,    -1,    -1,   450,   451,   452,   453,   454,    -1,
     456,   457,    -1,   459,   460,   461,    -1,    -1,   464,   465,
     466,   467,   468,   469,   470,   471,    -1,   473,    -1,   475,
     476,    -1,   478,   479,   480,    -1,   482,    -1,    -1,   485,
     486,   487,   488,    -1,   490,    -1,   492,   493,   494,   495,
     496,    -1,    -1,   499,   500,    -1,    -1,    -1,   504,   505,
     506,   507,    -1,    -1,    -1,   511,    -1,    -1,    -1,    -1,
     516,    -1,   518,   519,   520,   521,    -1,   523,   524,   525,
     526,   527,   528,    -1,    -1,    -1,    -1,   533,   534,   535,
      -1,   537,    -1,    -1,   540,    -1,    -1,   543,    -1,   545,
      -1,   547,   548,   549,   550,   551,   552,    -1,    -1,   555,
     556,    -1,    -1,   559,   560,   561,   562,   563,   564,    -1,
      -1,   567,   568,   569,   570,    -1,   572,   573,   574,    -1,
      -1,   577,   578,   579,   580,    -1,    -1,   583,   584,    -1,
     586,   587,   588,   589,    -1,    -1,    -1,    -1,    -1,   595,
     596,    -1,    -1,    -1,   600,   601,   602,    -1,    -1,   605,
     606,    -1,   608,   609,    -1,   611,   612,    -1,    -1,   615,
      -1,    -1,   618,    -1,   620,    -1,   622,   623,    -1,    -1,
      -1,    -1,    -1,   629,    -1,   631,    -1,    -1,   634,    -1,
      -1,    -1,    -1,   639,    -1,   641,   642,   643,   644,    -1,
      -1,    -1,    -1,    -1,    -1,   651,   652,   653,    -1,   655,
     656,   657,   658,    -1,    -1,   661,    -1,    -1,   664,   665,
      -1,   667,   668,   669,   670,   671,    -1,   673,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   682,   683,   684,    -1,
     686,   687,   688,    -1,   690,    -1,    -1,   693,    -1,   695,
      -1,    -1,    -1,    -1,    -1,    -1,   702,   703,    -1,    -1,
     706,    -1,   708,    -1,   710,   711,    -1,    -1,    -1,   715,
     716,   717,   718,   719,   720,   721,   722,    -1,   724,   725,
     726,   727,   728,   729,   730,   731,   732,   733,    -1,   735,
     736,   737,   738,   739,   740,   741,   742,   743,   744,     5,
       6,    -1,     8,     9,    10,    11,    12,    -1,    -1,    15,
      -1,    -1,    -1,    -1,    20,    -1,    -1,    23,    -1,    25,
      26,    27,    28,    29,    30,    -1,    32,    -1,    -1,    35,
      36,    -1,    -1,    -1,    40,    -1,    -1,    43,    44,    45,
      -1,    47,    -1,    49,    50,    -1,    -1,    53,    -1,    -1,
      56,    57,    -1,    59,    60,    61,    -1,    63,    -1,    65,
      66,    67,    68,    69,    70,    -1,    72,    73,    -1,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      -1,    -1,    88,    89,    -1,    91,    92,    93,    94,    95,
      -1,    -1,    -1,    99,    -1,    -1,    -1,    -1,   104,    -1,
      -1,   107,    -1,    -1,    -1,   111,   112,   113,    -1,    -1,
     116,    -1,    -1,    -1,    -1,   121,   122,    -1,    -1,    -1,
      -1,   127,   128,   129,    -1,   131,    -1,    -1,    -1,    -1,
      -1,   137,    -1,    -1,    -1,    -1,   142,   143,   144,   145,
      -1,    -1,    -1,   149,    -1,    -1,   152,   153,   154,    -1,
      -1,    -1,   158,    -1,    -1,   161,   162,   163,   164,   165,
      -1,    -1,   168,   169,    -1,   171,   172,   173,   174,   175,
     176,    -1,    -1,   179,   180,   181,   182,   183,    -1,    -1,
     186,   187,    -1,   189,   190,   191,   192,   193,    -1,    -1,
     196,   197,    -1,    -1,    -1,   201,   202,    -1,    -1,    -1,
      -1,    -1,   208,    -1,   210,   211,   212,   213,    -1,   215,
      -1,   217,    -1,    -1,    -1,   221,   222,    -1,   224,    -1,
      -1,   227,   228,    -1,    -1,    -1,   232,   233,   234,    -1,
      -1,    -1,   238,   239,   240,    -1,    -1,   243,    -1,    -1,
      -1,    -1,   248,   249,   250,    -1,    -1,    -1,    -1,   255,
      -1,    -1,    -1,   259,   260,    -1,   262,   263,    -1,    -1,
      -1,   267,    -1,   269,    -1,    -1,   272,   273,    -1,    -1,
     276,    -1,    -1,   279,   280,   281,    -1,    -1,    -1,    -1,
     286,   287,    -1,   289,    -1,   291,    -1,   293,   294,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   302,    -1,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,    -1,   323,   324,   325,
      -1,   327,   328,   329,   330,    -1,   332,   333,    -1,    -1,
      -1,    -1,   338,   339,   340,   341,   342,   343,    -1,    -1,
     346,   347,    -1,   349,    -1,   351,    -1,   353,   354,   355,
     356,   357,   358,   359,   360,   361,    -1,    -1,   364,   365,
      -1,    -1,   368,   369,   370,   371,   372,    -1,    -1,    -1,
     376,   377,    -1,    -1,    -1,   381,    -1,   383,   384,    -1,
     386,   387,   388,    -1,    -1,   391,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   401,   402,   403,    -1,   405,
      -1,   407,    -1,   409,   410,   411,   412,   413,   414,   415,
     416,   417,   418,    -1,   420,    -1,   422,   423,   424,    -1,
     426,    -1,   428,   429,   430,   431,   432,    -1,   434,   435,
     436,    -1,    -1,   439,    -1,    -1,    -1,   443,   444,    -1,
     446,   447,    -1,    -1,   450,   451,   452,   453,   454,    -1,
     456,   457,    -1,   459,   460,   461,    -1,    -1,   464,   465,
     466,   467,   468,   469,   470,   471,    -1,   473,    -1,   475,
     476,    -1,   478,   479,   480,    -1,   482,    -1,    -1,   485,
     486,   487,   488,    -1,   490,    -1,   492,   493,   494,   495,
     496,    -1,    -1,   499,   500,    -1,    -1,    -1,   504,   505,
     506,   507,    -1,    -1,    -1,   511,    -1,    -1,    -1,    -1,
     516,    -1,   518,   519,   520,   521,    -1,   523,   524,   525,
     526,   527,    -1,    -1,    -1,    -1,    -1,   533,   534,   535,
      -1,   537,    -1,    -1,   540,    -1,    -1,   543,    -1,   545,
      -1,   547,   548,   549,   550,   551,   552,    -1,    -1,   555,
     556,    -1,    -1,   559,   560,   561,   562,   563,   564,    -1,
      -1,   567,   568,   569,   570,    -1,   572,   573,   574,    -1,
      -1,   577,   578,   579,   580,    -1,   582,   583,   584,    -1,
     586,   587,   588,   589,    -1,    -1,    -1,    -1,    -1,   595,
     596,    -1,    -1,    -1,   600,   601,   602,    -1,    -1,   605,
     606,    -1,   608,   609,    -1,   611,   612,    -1,    -1,   615,
      -1,    -1,   618,    -1,   620,    -1,   622,   623,    -1,    -1,
      -1,    -1,    -1,   629,    -1,   631,    -1,    -1,   634,    -1,
      -1,    -1,    -1,   639,    -1,   641,   642,   643,   644,    -1,
      -1,    -1,    -1,    -1,    -1,   651,   652,   653,    -1,   655,
     656,   657,   658,    -1,    -1,   661,    -1,    -1,   664,   665,
      -1,   667,   668,   669,   670,   671,    -1,   673,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   682,   683,   684,    -1,
     686,   687,   688,    -1,   690,    -1,    -1,   693,    -1,   695,
      -1,    -1,    -1,    -1,    -1,    -1,   702,   703,    -1,    -1,
     706,    -1,   708,    -1,   710,   711,    -1,    -1,    -1,   715,
     716,   717,   718,   719,   720,   721,   722,    -1,   724,   725,
     726,   727,   728,   729,   730,   731,   732,   733,    -1,   735,
     736,   737,   738,   739,   740,   741,   742,   743,   744,     5,
       6,    -1,     8,     9,    10,    11,    12,    -1,    -1,    15,
      -1,    -1,    -1,    -1,    20,    -1,    -1,    23,    -1,    25,
      26,    27,    28,    29,    30,    -1,    32,    -1,    -1,    -1,
      36,    -1,    -1,    -1,    40,    -1,    -1,    43,    44,    45,
      -1,    47,    -1,    49,    50,    -1,    -1,    53,    -1,    -1,
      56,    57,    -1,    59,    60,    61,    -1,    63,    -1,    65,
      66,    67,    68,    69,    70,    -1,    72,    73,    -1,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      -1,    -1,    88,    89,    -1,    91,    92,    93,    94,    95,
      -1,    -1,    -1,    99,    -1,    -1,    -1,    -1,   104,    -1,
      -1,   107,    -1,    -1,    -1,   111,   112,   113,    -1,    -1,
     116,    -1,    -1,    -1,    -1,   121,   122,    -1,    -1,    -1,
      -1,    -1,   128,   129,    -1,   131,    -1,    -1,    -1,    -1,
      -1,   137,    -1,    -1,    -1,    -1,   142,   143,   144,   145,
      -1,    -1,    -1,   149,    -1,    -1,   152,   153,   154,    -1,
      -1,    -1,   158,    -1,    -1,   161,   162,   163,   164,   165,
      -1,    -1,   168,   169,    -1,   171,   172,   173,   174,   175,
     176,    -1,    -1,   179,   180,   181,   182,   183,    -1,    -1,
     186,   187,    -1,   189,   190,   191,   192,   193,    -1,    -1,
     196,   197,    -1,    -1,    -1,   201,   202,    -1,    -1,    -1,
      -1,    -1,   208,    -1,   210,   211,   212,   213,    -1,   215,
      -1,   217,    -1,    -1,    -1,   221,   222,    -1,   224,    -1,
      -1,   227,   228,    -1,    -1,    -1,   232,   233,   234,    -1,
      -1,    -1,   238,   239,   240,    -1,    -1,   243,    -1,    -1,
      -1,    -1,   248,   249,   250,    -1,    -1,    -1,    -1,   255,
      -1,    -1,    -1,   259,   260,    -1,   262,   263,    -1,    -1,
      -1,   267,    -1,   269,    -1,    -1,   272,   273,    -1,    -1,
     276,    -1,    -1,   279,   280,    -1,    -1,    -1,    -1,    -1,
     286,   287,    -1,   289,    -1,   291,    -1,   293,   294,    -1,
      -1,   297,    -1,    -1,    -1,    -1,   302,    -1,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,    -1,   323,   324,   325,
      -1,   327,   328,   329,   330,    -1,   332,   333,    -1,    -1,
      -1,    -1,   338,   339,   340,   341,   342,   343,    -1,    -1,
     346,   347,    -1,   349,    -1,   351,    -1,   353,   354,   355,
     356,   357,   358,   359,   360,   361,    -1,    -1,   364,   365,
      -1,    -1,   368,   369,   370,   371,   372,    -1,    -1,    -1,
     376,   377,    -1,    -1,   380,   381,    -1,   383,   384,    -1,
     386,   387,   388,    -1,    -1,   391,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   401,   402,   403,   404,   405,
      -1,   407,    -1,   409,   410,   411,   412,   413,   414,   415,
     416,   417,   418,    -1,   420,    -1,   422,   423,   424,    -1,
     426,    -1,   428,   429,   430,   431,   432,    -1,   434,   435,
     436,    -1,    -1,   439,    -1,    -1,    -1,   443,   444,    -1,
     446,   447,    -1,    -1,   450,   451,   452,   453,   454,    -1,
     456,   457,    -1,   459,   460,   461,    -1,    -1,   464,   465,
     466,   467,   468,   469,   470,   471,    -1,   473,    -1,   475,
     476,    -1,   478,   479,   480,    -1,   482,    -1,    -1,   485,
     486,   487,   488,    -1,   490,    -1,   492,   493,   494,   495,
     496,    -1,    -1,   499,   500,    -1,    -1,    -1,   504,   505,
     506,   507,    -1,    -1,    -1,   511,    -1,    -1,    -1,    -1,
     516,    -1,   518,   519,   520,   521,    -1,   523,   524,   525,
     526,   527,    -1,    -1,    -1,    -1,    -1,   533,   534,   535,
      -1,   537,    -1,    -1,   540,    -1,    -1,   543,    -1,   545,
      -1,   547,   548,   549,   550,   551,   552,    -1,    -1,   555,
     556,    -1,    -1,   559,   560,   561,   562,   563,   564,    -1,
      -1,   567,   568,   569,   570,    -1,   572,   573,   574,    -1,
      -1,   577,   578,   579,   580,    -1,    -1,   583,   584,    -1,
     586,   587,   588,   589,    -1,    -1,    -1,    -1,    -1,   595,
     596,    -1,    -1,    -1,   600,   601,   602,    -1,   604,   605,
     606,    -1,   608,   609,    -1,   611,   612,    -1,    -1,   615,
      -1,    -1,   618,    -1,   620,    -1,   622,   623,    -1,    -1,
      -1,    -1,    -1,   629,    -1,   631,    -1,    -1,   634,    -1,
      -1,    -1,    -1,   639,    -1,   641,   642,   643,   644,    -1,
      -1,    -1,    -1,    -1,    -1,   651,   652,   653,    -1,   655,
     656,   657,   658,    -1,    -1,   661,    -1,    -1,   664,   665,
      -1,   667,   668,   669,   670,   671,    -1,   673,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   682,   683,   684,    -1,
     686,   687,   688,    -1,   690,    -1,    -1,   693,    -1,   695,
      -1,    -1,    -1,    -1,    -1,    -1,   702,   703,    -1,    -1,
     706,    -1,   708,    -1,   710,   711,    -1,    -1,    -1,   715,
     716,   717,   718,   719,   720,   721,   722,    -1,   724,   725,
     726,   727,   728,   729,   730,   731,   732,   733,    -1,   735,
     736,   737,   738,   739,   740,   741,   742,   743,   744,     5,
       6,    -1,     8,     9,    10,    11,    12,    13,    -1,    15,
      -1,    -1,    -1,    -1,    20,    -1,    -1,    23,    -1,    25,
      26,    27,    28,    29,    30,    -1,    32,    -1,    -1,    -1,
      36,    -1,    -1,    -1,    40,    -1,    -1,    43,    44,    45,
      -1,    47,    -1,    49,    50,    -1,    -1,    53,    -1,    -1,
      56,    57,    -1,    59,    60,    61,    -1,    63,    -1,    65,
      66,    67,    68,    69,    70,    -1,    72,    73,    -1,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      -1,    -1,    88,    89,    -1,    91,    92,    93,    94,    95,
      -1,    -1,    -1,    99,    -1,    -1,    -1,    -1,   104,    -1,
      -1,   107,    -1,    -1,    -1,   111,   112,   113,    -1,    -1,
     116,    -1,    -1,    -1,    -1,   121,   122,    -1,    -1,    -1,
      -1,    -1,   128,   129,    -1,   131,    -1,    -1,    -1,    -1,
      -1,   137,    -1,    -1,    -1,    -1,   142,   143,   144,   145,
      -1,    -1,    -1,   149,    -1,    -1,   152,   153,   154,    -1,
      -1,    -1,   158,    -1,    -1,   161,   162,   163,   164,   165,
      -1,    -1,   168,   169,    -1,   171,   172,   173,   174,   175,
     176,    -1,    -1,   179,   180,   181,   182,   183,    -1,    -1,
     186,   187,    -1,   189,   190,   191,   192,   193,    -1,    -1,
     196,   197,    -1,    -1,    -1,   201,   202,    -1,    -1,    -1,
      -1,    -1,   208,    -1,   210,   211,   212,   213,    -1,   215,
      -1,   217,    -1,    -1,    -1,   221,   222,    -1,   224,    -1,
      -1,   227,   228,    -1,    -1,    -1,   232,   233,   234,    -1,
      -1,    -1,   238,   239,   240,    -1,    -1,   243,    -1,    -1,
      -1,    -1,   248,   249,   250,    -1,    -1,    -1,    -1,   255,
      -1,    -1,    -1,   259,   260,    -1,   262,   263,    -1,    -1,
      -1,   267,    -1,   269,    -1,    -1,   272,   273,    -1,    -1,
     276,    -1,    -1,   279,   280,   281,    -1,    -1,    -1,    -1,
     286,   287,    -1,   289,    -1,   291,    -1,   293,   294,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   302,    -1,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,    -1,   323,   324,   325,
      -1,   327,   328,   329,   330,    -1,   332,   333,    -1,    -1,
      -1,    -1,   338,   339,   340,   341,   342,   343,    -1,    -1,
     346,   347,    -1,   349,    -1,   351,    -1,   353,   354,   355,
     356,   357,   358,   359,   360,   361,    -1,    -1,   364,   365,
      -1,    -1,   368,   369,   370,   371,   372,    -1,    -1,    -1,
     376,   377,    -1,    -1,    -1,   381,    -1,   383,   384,    -1,
     386,   387,   388,    -1,    -1,   391,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   401,   402,   403,    -1,   405,
      -1,   407,    -1,   409,   410,   411,   412,   413,   414,   415,
     416,   417,   418,    -1,   420,    -1,   422,   423,   424,    -1,
     426,    -1,   428,   429,   430,   431,   432,    -1,   434,   435,
     436,    -1,    -1,   439,    -1,    -1,    -1,   443,   444,    -1,
     446,   447,    -1,    -1,   450,   451,   452,   453,   454,    -1,
     456,   457,    -1,   459,   460,   461,    -1,    -1,   464,   465,
     466,   467,   468,   469,   470,   471,    -1,   473,    -1,   475,
     476,    -1,   478,   479,   480,    -1,   482,    -1,    -1,   485,
     486,   487,   488,    -1,   490,    -1,   492,   493,   494,   495,
     496,    -1,    -1,   499,   500,    -1,    -1,    -1,   504,   505,
     506,   507,    -1,    -1,    -1,   511,    -1,    -1,    -1,    -1,
     516,    -1,   518,   519,   520,   521,    -1,   523,   524,   525,
     526,   527,    -1,    -1,    -1,    -1,    -1,   533,   534,   535,
      -1,   537,    -1,    -1,   540,    -1,    -1,   543,    -1,   545,
      -1,   547,   548,   549,   550,   551,   552,    -1,    -1,   555,
     556,    -1,    -1,   559,   560,   561,   562,   563,   564,    -1,
      -1,   567,   568,   569,   570,    -1,   572,   573,   574,    -1,
      -1,   577,   578,   579,   580,    -1,   582,   583,   584,    -1,
     586,   587,   588,   589,    -1,    -1,    -1,    -1,    -1,   595,
     596,    -1,    -1,    -1,   600,   601,   602,    -1,    -1,   605,
     606,    -1,   608,   609,    -1,   611,   612,    -1,    -1,   615,
      -1,    -1,   618,    -1,   620,    -1,   622,   623,    -1,    -1,
      -1,    -1,    -1,   629,    -1,   631,    -1,    -1,   634,    -1,
      -1,    -1,    -1,   639,    -1,   641,   642,   643,   644,    -1,
      -1,    -1,    -1,    -1,    -1,   651,   652,   653,    -1,   655,
     656,   657,   658,    -1,    -1,   661,    -1,    -1,   664,   665,
      -1,   667,   668,   669,   670,   671,    -1,   673,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   682,   683,   684,    -1,
     686,   687,   688,    -1,   690,    -1,    -1,   693,    -1,   695,
      -1,    -1,    -1,    -1,    -1,    -1,   702,   703,    -1,    -1,
     706,    -1,   708,    -1,   710,   711,    -1,    -1,    -1,   715,
     716,   717,   718,   719,   720,   721,   722,    -1,   724,   725,
     726,   727,   728,   729,   730,   731,   732,   733,    -1,   735,
     736,   737,   738,   739,   740,   741,   742,   743,   744,     5,
       6,    -1,     8,     9,    10,    11,    12,    -1,    -1,    15,
      -1,    -1,    -1,    -1,    20,    -1,    -1,    23,    -1,    25,
      26,    27,    28,    29,    30,    -1,    32,    -1,    -1,    -1,
      36,    -1,    -1,    -1,    40,    -1,    -1,    43,    44,    45,
      -1,    47,    -1,    49,    50,    -1,    -1,    53,    -1,    -1,
      56,    57,    -1,    59,    60,    61,    -1,    63,    -1,    65,
      66,    67,    68,    69,    70,    -1,    72,    73,    -1,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      -1,    -1,    88,    89,    -1,    91,    92,    93,    94,    95,
      -1,    -1,    -1,    99,    -1,    -1,    -1,    -1,   104,   105,
      -1,   107,    -1,    -1,    -1,   111,   112,   113,    -1,    -1,
     116,    -1,    -1,    -1,    -1,   121,   122,    -1,    -1,    -1,
      -1,    -1,   128,   129,    -1,   131,    -1,    -1,    -1,    -1,
      -1,   137,    -1,    -1,    -1,    -1,   142,   143,   144,   145,
      -1,    -1,    -1,   149,    -1,    -1,   152,   153,   154,    -1,
      -1,    -1,   158,    -1,    -1,   161,   162,   163,   164,   165,
      -1,    -1,   168,   169,    -1,   171,   172,   173,   174,   175,
     176,    -1,    -1,   179,   180,   181,   182,   183,    -1,    -1,
     186,   187,    -1,   189,   190,   191,   192,   193,    -1,    -1,
     196,   197,    -1,    -1,    -1,   201,   202,    -1,    -1,    -1,
      -1,    -1,   208,    -1,   210,   211,   212,   213,    -1,   215,
      -1,   217,    -1,    -1,    -1,   221,   222,    -1,   224,    -1,
      -1,   227,   228,    -1,    -1,    -1,   232,   233,   234,    -1,
      -1,    -1,   238,   239,   240,    -1,    -1,   243,    -1,    -1,
      -1,    -1,   248,   249,   250,    -1,    -1,    -1,    -1,   255,
      -1,    -1,    -1,   259,   260,    -1,   262,   263,    -1,    -1,
      -1,   267,    -1,   269,    -1,    -1,   272,   273,    -1,    -1,
     276,    -1,    -1,   279,   280,   281,    -1,    -1,    -1,    -1,
     286,   287,    -1,   289,    -1,   291,    -1,   293,   294,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   302,    -1,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,    -1,   323,   324,   325,
      -1,   327,   328,   329,   330,    -1,   332,   333,    -1,    -1,
      -1,    -1,   338,   339,   340,   341,   342,   343,    -1,    -1,
     346,   347,    -1,   349,    -1,   351,    -1,   353,   354,   355,
     356,   357,   358,   359,   360,   361,    -1,    -1,   364,   365,
      -1,    -1,   368,   369,   370,   371,   372,    -1,    -1,    -1,
     376,   377,    -1,    -1,    -1,   381,    -1,   383,   384,    -1,
     386,   387,   388,    -1,    -1,   391,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   401,   402,   403,    -1,   405,
      -1,   407,    -1,   409,   410,   411,   412,   413,   414,   415,
     416,   417,   418,    -1,   420,    -1,   422,   423,   424,    -1,
     426,    -1,   428,   429,   430,   431,   432,    -1,   434,   435,
     436,    -1,    -1,   439,    -1,    -1,    -1,   443,   444,    -1,
     446,   447,    -1,    -1,   450,   451,   452,   453,   454,    -1,
     456,   457,    -1,   459,   460,   461,    -1,    -1,   464,   465,
     466,   467,   468,   469,   470,   471,    -1,   473,    -1,   475,
     476,    -1,   478,   479,   480,    -1,   482,    -1,    -1,   485,
     486,   487,   488,    -1,   490,    -1,   492,   493,   494,   495,
     496,    -1,    -1,   499,   500,    -1,    -1,    -1,   504,   505,
     506,   507,    -1,    -1,    -1,   511,    -1,    -1,    -1,    -1,
     516,    -1,   518,   519,   520,   521,    -1,   523,   524,   525,
     526,   527,    -1,    -1,    -1,    -1,    -1,   533,   534,   535,
      -1,   537,    -1,    -1,   540,    -1,    -1,   543,    -1,   545,
      -1,   547,   548,   549,   550,   551,   552,    -1,    -1,   555,
     556,    -1,    -1,   559,   560,   561,   562,   563,   564,    -1,
      -1,   567,   568,   569,   570,    -1,   572,   573,   574,    -1,
      -1,   577,   578,   579,   580,    -1,   582,   583,   584,    -1,
     586,   587,   588,   589,    -1,    -1,    -1,    -1,    -1,   595,
     596,    -1,    -1,    -1,   600,   601,   602,    -1,    -1,   605,
     606,    -1,   608,   609,    -1,   611,   612,    -1,    -1,   615,
      -1,    -1,   618,    -1,   620,    -1,   622,   623,    -1,    -1,
      -1,    -1,    -1,   629,    -1,   631,    -1,    -1,   634,    -1,
      -1,    -1,    -1,   639,    -1,   641,   642,   643,   644,    -1,
      -1,    -1,    -1,    -1,    -1,   651,   652,   653,    -1,   655,
     656,   657,   658,    -1,    -1,   661,    -1,    -1,   664,   665,
      -1,   667,   668,   669,   670,   671,    -1,   673,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   682,   683,   684,    -1,
     686,   687,   688,    -1,   690,    -1,    -1,   693,    -1,   695,
      -1,    -1,    -1,    -1,    -1,    -1,   702,   703,    -1,    -1,
     706,    -1,   708,    -1,   710,   711,    -1,    -1,    -1,   715,
     716,   717,   718,   719,   720,   721,   722,    -1,   724,   725,
     726,   727,   728,   729,   730,   731,   732,   733,    -1,   735,
     736,   737,   738,   739,   740,   741,   742,   743,   744,     5,
       6,    -1,     8,     9,    10,    11,    12,    -1,    -1,    15,
      -1,    -1,    -1,    -1,    20,    -1,    -1,    23,    -1,    25,
      26,    27,    28,    29,    30,    -1,    32,    -1,    -1,    35,
      36,    -1,    -1,    -1,    40,    -1,    -1,    43,    44,    45,
      -1,    47,    -1,    49,    50,    -1,    -1,    53,    -1,    -1,
      56,    57,    -1,    59,    60,    61,    -1,    63,    -1,    65,
      66,    67,    68,    69,    70,    -1,    72,    73,    -1,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      -1,    -1,    88,    89,    -1,    91,    92,    93,    94,    95,
      -1,    -1,    -1,    99,    -1,    -1,    -1,    -1,   104,    -1,
      -1,   107,    -1,    -1,    -1,   111,   112,   113,    -1,    -1,
     116,    -1,    -1,    -1,    -1,   121,   122,    -1,    -1,    -1,
      -1,    -1,   128,   129,    -1,   131,    -1,    -1,    -1,    -1,
      -1,   137,    -1,    -1,    -1,    -1,   142,   143,   144,   145,
      -1,    -1,    -1,   149,    -1,    -1,   152,   153,   154,    -1,
      -1,    -1,   158,    -1,    -1,   161,   162,   163,   164,   165,
      -1,    -1,   168,   169,    -1,   171,   172,   173,   174,   175,
     176,    -1,    -1,   179,   180,   181,   182,   183,    -1,    -1,
     186,   187,    -1,   189,   190,   191,   192,   193,    -1,    -1,
     196,   197,    -1,    -1,    -1,   201,   202,    -1,    -1,    -1,
      -1,    -1,   208,    -1,   210,   211,   212,   213,    -1,   215,
      -1,   217,    -1,    -1,    -1,   221,   222,    -1,   224,    -1,
      -1,   227,   228,    -1,    -1,    -1,   232,   233,   234,    -1,
      -1,    -1,   238,   239,   240,    -1,    -1,   243,    -1,    -1,
      -1,    -1,   248,   249,   250,    -1,    -1,    -1,    -1,   255,
      -1,    -1,    -1,   259,   260,    -1,   262,   263,    -1,    -1,
      -1,   267,    -1,   269,    -1,    -1,   272,   273,    -1,    -1,
     276,    -1,    -1,   279,   280,   281,    -1,    -1,    -1,    -1,
     286,   287,    -1,   289,    -1,   291,    -1,   293,   294,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   302,    -1,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,    -1,   323,   324,   325,
      -1,   327,   328,   329,   330,    -1,   332,   333,    -1,    -1,
      -1,    -1,   338,   339,   340,   341,   342,   343,    -1,    -1,
     346,   347,    -1,   349,    -1,   351,    -1,   353,   354,   355,
     356,   357,   358,   359,   360,   361,    -1,    -1,   364,   365,
      -1,    -1,   368,   369,   370,   371,   372,    -1,    -1,    -1,
     376,   377,    -1,    -1,    -1,   381,    -1,   383,   384,    -1,
     386,   387,   388,    -1,    -1,   391,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   401,   402,   403,    -1,   405,
      -1,   407,    -1,   409,   410,   411,   412,   413,   414,   415,
     416,   417,   418,    -1,   420,    -1,   422,   423,   424,    -1,
     426,    -1,   428,   429,   430,   431,   432,    -1,   434,   435,
     436,    -1,    -1,   439,    -1,    -1,    -1,   443,   444,    -1,
     446,   447,    -1,    -1,   450,   451,   452,   453,   454,    -1,
     456,   457,    -1,   459,   460,   461,    -1,    -1,   464,   465,
     466,   467,   468,   469,   470,   471,    -1,   473,    -1,   475,
     476,    -1,   478,   479,   480,    -1,   482,    -1,    -1,   485,
     486,   487,   488,    -1,   490,    -1,   492,   493,   494,   495,
     496,    -1,    -1,   499,   500,    -1,    -1,    -1,   504,   505,
     506,   507,    -1,    -1,    -1,   511,    -1,    -1,    -1,    -1,
     516,    -1,   518,   519,   520,   521,    -1,   523,   524,   525,
     526,   527,    -1,    -1,    -1,    -1,    -1,   533,   534,   535,
      -1,   537,    -1,    -1,   540,    -1,    -1,   543,    -1,   545,
      -1,   547,   548,   549,   550,   551,   552,    -1,    -1,   555,
     556,    -1,    -1,   559,   560,   561,   562,   563,   564,    -1,
      -1,   567,   568,   569,   570,    -1,   572,   573,   574,    -1,
      -1,   577,   578,   579,   580,    -1,   582,   583,   584,    -1,
     586,   587,   588,   589,    -1,    -1,    -1,    -1,    -1,   595,
     596,    -1,    -1,    -1,   600,   601,   602,    -1,    -1,   605,
     606,    -1,   608,   609,    -1,   611,   612,    -1,    -1,   615,
      -1,    -1,   618,    -1,   620,    -1,   622,   623,    -1,    -1,
      -1,    -1,    -1,   629,    -1,   631,    -1,    -1,   634,    -1,
      -1,    -1,    -1,   639,    -1,   641,   642,   643,   644,    -1,
      -1,    -1,    -1,    -1,    -1,   651,   652,   653,    -1,   655,
     656,   657,   658,    -1,    -1,   661,    -1,    -1,   664,   665,
      -1,   667,   668,   669,   670,   671,    -1,   673,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   682,   683,   684,    -1,
     686,   687,   688,    -1,   690,    -1,    -1,   693,    -1,   695,
      -1,    -1,    -1,    -1,    -1,    -1,   702,   703,    -1,    -1,
     706,    -1,   708,    -1,   710,   711,    -1,    -1,    -1,   715,
     716,   717,   718,   719,   720,   721,   722,    -1,   724,   725,
     726,   727,   728,   729,   730,   731,   732,   733,    -1,   735,
     736,   737,   738,   739,   740,   741,   742,   743,   744,     5,
       6,    -1,     8,     9,    10,    11,    12,    -1,    -1,    15,
      -1,    -1,    -1,    -1,    20,    -1,    -1,    23,    -1,    25,
      26,    27,    28,    29,    30,    -1,    32,    -1,    -1,    -1,
      36,    -1,    -1,    -1,    40,    -1,    -1,    43,    44,    45,
      -1,    47,    -1,    49,    50,    -1,    -1,    53,    -1,    -1,
      56,    57,    -1,    59,    60,    61,    -1,    63,    -1,    65,
      66,    67,    68,    69,    70,    -1,    72,    73,    -1,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      -1,    -1,    88,    89,    -1,    91,    92,    93,    94,    95,
      -1,    -1,    -1,    99,    -1,    -1,    -1,    -1,   104,    -1,
      -1,   107,    -1,    -1,    -1,   111,   112,   113,    -1,    -1,
     116,    -1,    -1,    -1,    -1,   121,   122,    -1,    -1,    -1,
      -1,    -1,   128,   129,    -1,   131,    -1,    -1,    -1,    -1,
      -1,   137,    -1,    -1,    -1,    -1,   142,   143,   144,   145,
      -1,    -1,    -1,   149,    -1,    -1,   152,   153,   154,    -1,
      -1,    -1,   158,    -1,    -1,   161,   162,   163,   164,   165,
      -1,    -1,   168,   169,    -1,   171,   172,   173,   174,   175,
     176,    -1,    -1,   179,   180,   181,   182,   183,    -1,    -1,
     186,   187,    -1,   189,   190,   191,   192,   193,    -1,    -1,
     196,   197,    -1,    -1,    -1,   201,   202,    -1,    -1,    -1,
      -1,    -1,   208,    -1,   210,   211,   212,   213,    -1,   215,
      -1,   217,    -1,    -1,    -1,   221,   222,    -1,   224,    -1,
      -1,   227,   228,    -1,    -1,    -1,   232,   233,   234,    -1,
      -1,    -1,   238,   239,   240,    -1,    -1,   243,    -1,    -1,
      -1,    -1,   248,   249,   250,    -1,    -1,    -1,    -1,   255,
      -1,    -1,    -1,   259,   260,    -1,   262,   263,    -1,    -1,
      -1,   267,    -1,   269,    -1,    -1,   272,   273,    -1,    -1,
     276,    -1,    -1,   279,   280,   281,    -1,    -1,    -1,    -1,
     286,   287,    -1,   289,    -1,   291,    -1,   293,   294,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   302,    -1,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,    -1,   323,   324,   325,
      -1,   327,   328,   329,   330,    -1,   332,   333,    -1,    -1,
      -1,    -1,   338,   339,   340,   341,   342,   343,    -1,    -1,
     346,   347,    -1,   349,    -1,   351,    -1,   353,   354,   355,
     356,   357,   358,   359,   360,   361,    -1,    -1,   364,   365,
      -1,    -1,   368,   369,   370,   371,   372,    -1,    -1,    -1,
     376,   377,    -1,   379,    -1,   381,    -1,   383,   384,    -1,
     386,   387,   388,    -1,    -1,   391,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   401,   402,   403,    -1,   405,
      -1,   407,    -1,   409,   410,   411,   412,   413,   414,   415,
     416,   417,   418,    -1,   420,    -1,   422,   423,   424,    -1,
     426,    -1,   428,   429,   430,   431,   432,    -1,   434,   435,
     436,    -1,    -1,   439,    -1,    -1,    -1,   443,   444,    -1,
     446,   447,    -1,    -1,   450,   451,   452,   453,   454,    -1,
     456,   457,    -1,   459,   460,   461,    -1,    -1,   464,   465,
     466,   467,   468,   469,   470,   471,    -1,   473,    -1,   475,
     476,    -1,   478,   479,   480,    -1,   482,    -1,    -1,   485,
     486,   487,   488,    -1,   490,    -1,   492,   493,   494,   495,
     496,    -1,    -1,   499,   500,    -1,    -1,    -1,   504,   505,
     506,   507,    -1,    -1,    -1,   511,    -1,    -1,    -1,    -1,
     516,    -1,   518,   519,   520,   521,    -1,   523,   524,   525,
     526,   527,    -1,    -1,    -1,    -1,    -1,   533,   534,   535,
      -1,   537,    -1,    -1,   540,    -1,    -1,   543,    -1,   545,
      -1,   547,   548,   549,   550,   551,   552,    -1,    -1,   555,
     556,    -1,    -1,   559,   560,   561,   562,   563,   564,    -1,
      -1,   567,   568,   569,   570,    -1,   572,   573,   574,    -1,
      -1,   577,   578,   579,   580,    -1,   582,   583,   584,    -1,
     586,   587,   588,   589,    -1,    -1,    -1,    -1,    -1,   595,
     596,    -1,    -1,    -1,   600,   601,   602,    -1,    -1,   605,
     606,    -1,   608,   609,    -1,   611,   612,    -1,    -1,   615,
      -1,    -1,   618,    -1,   620,    -1,   622,   623,    -1,    -1,
      -1,    -1,    -1,   629,    -1,   631,    -1,    -1,   634,    -1,
      -1,    -1,    -1,   639,    -1,   641,   642,   643,   644,    -1,
      -1,    -1,    -1,    -1,    -1,   651,   652,   653,    -1,   655,
     656,   657,   658,    -1,    -1,   661,    -1,    -1,   664,   665,
      -1,   667,   668,   669,   670,   671,    -1,   673,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   682,   683,   684,    -1,
     686,   687,   688,    -1,   690,    -1,    -1,   693,    -1,   695,
      -1,    -1,    -1,    -1,    -1,    -1,   702,   703,    -1,    -1,
     706,    -1,   708,    -1,   710,   711,    -1,    -1,    -1,   715,
     716,   717,   718,   719,   720,   721,   722,    -1,   724,   725,
     726,   727,   728,   729,   730,   731,   732,   733,    -1,   735,
     736,   737,   738,   739,   740,   741,   742,   743,   744,     5,
       6,    -1,     8,     9,    10,    11,    12,    -1,    -1,    15,
      -1,    -1,    -1,    -1,    20,    -1,    -1,    23,    -1,    25,
      26,    27,    28,    29,    30,    -1,    32,    -1,    -1,    -1,
      36,    -1,    -1,    -1,    40,    -1,    -1,    43,    44,    45,
      -1,    47,    -1,    49,    50,    -1,    -1,    53,    -1,    -1,
      56,    57,    -1,    59,    60,    61,    -1,    63,    -1,    65,
      66,    67,    68,    69,    70,    -1,    72,    73,    -1,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      -1,    -1,    88,    89,    -1,    91,    92,    93,    94,    95,
      -1,    -1,    -1,    99,    -1,    -1,    -1,    -1,   104,    -1,
      -1,   107,    -1,    -1,    -1,   111,   112,   113,    -1,    -1,
     116,    -1,    -1,    -1,    -1,   121,   122,    -1,    -1,    -1,
      -1,    -1,   128,   129,    -1,   131,    -1,    -1,    -1,    -1,
      -1,   137,    -1,    -1,    -1,    -1,   142,   143,   144,   145,
      -1,    -1,    -1,   149,    -1,    -1,   152,   153,   154,    -1,
      -1,    -1,   158,    -1,    -1,   161,   162,   163,   164,   165,
      -1,    -1,   168,   169,    -1,   171,   172,   173,   174,   175,
     176,    -1,    -1,   179,   180,   181,   182,   183,    -1,    -1,
     186,   187,    -1,   189,   190,   191,   192,   193,    -1,    -1,
     196,   197,    -1,    -1,    -1,   201,   202,    -1,    -1,    -1,
      -1,    -1,   208,    -1,   210,   211,   212,   213,    -1,   215,
      -1,   217,    -1,    -1,    -1,   221,   222,    -1,   224,    -1,
      -1,   227,   228,    -1,    -1,    -1,   232,   233,   234,    -1,
      -1,    -1,   238,   239,   240,    -1,    -1,   243,    -1,    -1,
      -1,    -1,   248,   249,   250,    -1,    -1,    -1,    -1,   255,
      -1,    -1,    -1,   259,   260,    -1,   262,   263,    -1,    -1,
      -1,   267,    -1,   269,    -1,    -1,   272,   273,    -1,    -1,
     276,    -1,    -1,   279,   280,   281,    -1,    -1,    -1,    -1,
     286,   287,    -1,   289,    -1,   291,    -1,   293,   294,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   302,    -1,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,    -1,   323,   324,   325,
      -1,   327,   328,   329,   330,    -1,   332,   333,    -1,    -1,
      -1,    -1,   338,   339,   340,   341,   342,   343,    -1,    -1,
     346,   347,    -1,   349,    -1,   351,    -1,   353,   354,   355,
     356,   357,   358,   359,   360,   361,    -1,    -1,   364,   365,
      -1,    -1,   368,   369,   370,   371,   372,    -1,    -1,    -1,
     376,   377,    -1,    -1,    -1,   381,    -1,   383,   384,    -1,
     386,   387,   388,    -1,    -1,   391,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   401,   402,   403,    -1,   405,
      -1,   407,    -1,   409,   410,   411,   412,   413,   414,   415,
     416,   417,   418,    -1,   420,    -1,   422,   423,   424,    -1,
     426,    -1,   428,   429,   430,   431,   432,    -1,   434,   435,
     436,    -1,    -1,   439,    -1,    -1,    -1,   443,   444,    -1,
     446,   447,    -1,    -1,   450,   451,   452,   453,   454,    -1,
     456,   457,    -1,   459,   460,   461,    -1,    -1,   464,   465,
     466,   467,   468,   469,   470,   471,    -1,   473,    -1,   475,
     476,    -1,   478,   479,   480,    -1,   482,    -1,    -1,   485,
     486,   487,   488,    -1,   490,    -1,   492,   493,   494,   495,
     496,    -1,    -1,   499,   500,    -1,    -1,    -1,   504,   505,
     506,   507,    -1,    -1,    -1,   511,    -1,    -1,    -1,    -1,
     516,    -1,   518,   519,   520,   521,    -1,   523,   524,   525,
     526,   527,    -1,    -1,    -1,    -1,    -1,   533,   534,   535,
      -1,   537,    -1,    -1,   540,    -1,    -1,   543,    -1,   545,
      -1,   547,   548,   549,   550,   551,   552,    -1,    -1,   555,
     556,    -1,    -1,   559,   560,   561,   562,   563,   564,    -1,
      -1,   567,   568,   569,   570,    -1,   572,   573,   574,    -1,
      -1,   577,   578,   579,   580,    -1,   582,   583,   584,    -1,
     586,   587,   588,   589,    -1,    -1,    -1,    -1,    -1,   595,
     596,    -1,    -1,    -1,   600,   601,   602,    -1,    -1,   605,
     606,    -1,   608,   609,    -1,   611,   612,    -1,    -1,   615,
      -1,    -1,   618,    -1,   620,    -1,   622,   623,    -1,    -1,
      -1,    -1,    -1,   629,    -1,   631,    -1,    -1,   634,    -1,
      -1,    -1,    -1,   639,    -1,   641,   642,   643,   644,    -1,
      -1,    -1,    -1,    -1,    -1,   651,   652,   653,    -1,   655,
     656,   657,   658,    -1,    -1,   661,    -1,    -1,   664,   665,
      -1,   667,   668,   669,   670,   671,    -1,   673,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   682,   683,   684,    -1,
     686,   687,   688,    -1,   690,    -1,    -1,   693,    -1,   695,
      -1,    -1,    -1,    -1,    -1,    -1,   702,   703,    -1,    -1,
     706,    -1,   708,    -1,   710,   711,    -1,    -1,    -1,   715,
     716,   717,   718,   719,   720,   721,   722,    -1,   724,   725,
     726,   727,   728,   729,   730,   731,   732,   733,    -1,   735,
     736,   737,   738,   739,   740,   741,   742,   743,   744,     5,
       6,    -1,     8,     9,    10,    11,    12,    -1,    -1,    15,
      -1,    -1,    -1,    -1,    20,    -1,    -1,    23,    -1,    25,
      26,    27,    28,    29,    30,    -1,    32,    -1,    -1,    -1,
      36,    -1,    -1,    -1,    40,    -1,    -1,    43,    44,    45,
      -1,    47,    -1,    49,    50,    -1,    -1,    53,    -1,    -1,
      56,    57,    -1,    59,    60,    61,    -1,    63,    -1,    65,
      66,    67,    68,    69,    70,    -1,    72,    73,    -1,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      -1,    -1,    88,    89,    -1,    91,    92,    93,    94,    95,
      96,    -1,    -1,    99,    -1,    -1,    -1,    -1,   104,    -1,
      -1,   107,    -1,    -1,    -1,   111,   112,   113,    -1,    -1,
     116,    -1,    -1,    -1,    -1,   121,   122,    -1,    -1,    -1,
      -1,    -1,   128,   129,    -1,   131,    -1,    -1,    -1,    -1,
      -1,   137,    -1,    -1,    -1,    -1,   142,   143,   144,   145,
      -1,    -1,    -1,   149,    -1,    -1,   152,   153,   154,    -1,
      -1,    -1,   158,    -1,    -1,   161,   162,   163,   164,   165,
      -1,    -1,   168,   169,    -1,   171,   172,   173,   174,   175,
     176,    -1,   178,   179,   180,   181,   182,   183,    -1,    -1,
     186,   187,    -1,   189,   190,   191,   192,   193,    -1,    -1,
     196,   197,    -1,    -1,    -1,   201,   202,    -1,    -1,    -1,
      -1,    -1,   208,    -1,   210,   211,   212,   213,    -1,   215,
      -1,   217,    -1,    -1,    -1,   221,   222,    -1,   224,    -1,
      -1,   227,   228,    -1,    -1,    -1,   232,   233,   234,    -1,
      -1,    -1,   238,   239,   240,    -1,    -1,   243,    -1,    -1,
      -1,    -1,   248,   249,   250,    -1,    -1,    -1,    -1,   255,
      -1,    -1,    -1,   259,   260,    -1,   262,   263,    -1,    -1,
      -1,   267,    -1,   269,    -1,    -1,   272,   273,    -1,    -1,
     276,    -1,    -1,   279,   280,    -1,    -1,    -1,    -1,    -1,
     286,   287,    -1,   289,    -1,   291,    -1,   293,   294,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   302,    -1,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,    -1,   323,   324,   325,
      -1,   327,   328,   329,   330,    -1,   332,   333,    -1,    -1,
      -1,    -1,   338,   339,   340,   341,   342,   343,    -1,    -1,
     346,   347,    -1,   349,    -1,   351,    -1,   353,   354,   355,
     356,   357,   358,   359,   360,   361,    -1,    -1,   364,   365,
      -1,    -1,   368,   369,   370,   371,   372,    -1,    -1,    -1,
     376,   377,    -1,    -1,    -1,   381,    -1,   383,   384,    -1,
     386,   387,   388,    -1,    -1,   391,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   401,   402,   403,    -1,   405,
      -1,   407,    -1,   409,   410,   411,   412,   413,   414,   415,
     416,   417,   418,    -1,   420,    -1,   422,   423,   424,    -1,
     426,    -1,   428,   429,   430,   431,   432,    -1,   434,   435,
     436,    -1,    -1,   439,    -1,    -1,    -1,   443,   444,    -1,
     446,   447,    -1,    -1,   450,   451,   452,   453,   454,    -1,
     456,   457,    -1,   459,   460,   461,    -1,    -1,   464,   465,
     466,   467,   468,   469,   470,   471,    -1,   473,    -1,   475,
     476,    -1,   478,   479,   480,    -1,   482,    -1,    -1,   485,
     486,   487,   488,    -1,   490,    -1,   492,   493,   494,   495,
     496,    -1,    -1,   499,   500,    -1,    -1,    -1,   504,   505,
     506,   507,    -1,    -1,    -1,   511,    -1,    -1,    -1,    -1,
     516,    -1,   518,   519,   520,   521,    -1,   523,   524,   525,
     526,   527,    -1,    -1,    -1,    -1,    -1,   533,   534,   535,
      -1,   537,    -1,    -1,   540,    -1,    -1,   543,    -1,   545,
      -1,   547,   548,   549,   550,   551,   552,    -1,    -1,   555,
     556,    -1,    -1,   559,   560,   561,   562,   563,   564,    -1,
      -1,   567,   568,   569,   570,    -1,   572,   573,   574,    -1,
      -1,   577,   578,   579,   580,    -1,    -1,   583,   584,    -1,
     586,   587,   588,   589,    -1,    -1,    -1,    -1,    -1,   595,
     596,    -1,    -1,    -1,   600,   601,   602,    -1,    -1,   605,
     606,    -1,   608,   609,    -1,   611,   612,    -1,    -1,   615,
      -1,    -1,   618,    -1,   620,    -1,   622,   623,    -1,    -1,
      -1,    -1,    -1,   629,    -1,   631,    -1,    -1,   634,    -1,
      -1,    -1,    -1,   639,    -1,   641,   642,   643,   644,    -1,
      -1,    -1,    -1,    -1,    -1,   651,   652,   653,    -1,   655,
     656,   657,   658,    -1,    -1,   661,    -1,    -1,   664,   665,
      -1,   667,   668,   669,   670,   671,    -1,   673,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   682,   683,   684,    -1,
     686,   687,   688,    -1,   690,    -1,    -1,   693,    -1,   695,
      -1,    -1,    -1,    -1,    -1,    -1,   702,   703,    -1,    -1,
     706,    -1,   708,    -1,   710,   711,    -1,    -1,    -1,   715,
     716,   717,   718,   719,   720,   721,   722,    -1,   724,   725,
     726,   727,   728,   729,   730,   731,   732,   733,    -1,   735,
     736,   737,   738,   739,   740,   741,   742,   743,   744,     5,
       6,    -1,     8,     9,    10,    11,    12,    -1,    -1,    15,
      -1,    -1,    -1,    -1,    20,    -1,    -1,    23,    -1,    25,
      26,    27,    28,    29,    30,    -1,    32,    -1,    -1,    -1,
      36,    -1,    -1,    -1,    40,    -1,    -1,    43,    44,    45,
      -1,    47,    -1,    49,    50,    -1,    -1,    53,    -1,    -1,
      56,    57,    -1,    59,    60,    61,    -1,    63,    -1,    65,
      66,    67,    68,    69,    70,    -1,    72,    73,    -1,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      -1,    -1,    88,    89,    -1,    91,    92,    93,    94,    95,
      -1,    -1,    -1,    99,    -1,    -1,    -1,    -1,   104,    -1,
      -1,   107,    -1,    -1,    -1,   111,   112,   113,    -1,    -1,
     116,    -1,    -1,    -1,    -1,   121,   122,    -1,    -1,    -1,
      -1,    -1,   128,   129,    -1,   131,    -1,    -1,    -1,    -1,
      -1,   137,    -1,    -1,    -1,    -1,   142,   143,   144,   145,
      -1,    -1,    -1,   149,    -1,    -1,   152,   153,   154,    -1,
      -1,    -1,   158,    -1,    -1,   161,   162,   163,   164,   165,
      -1,    -1,   168,   169,    -1,   171,   172,   173,   174,   175,
     176,    -1,    -1,   179,   180,   181,   182,   183,    -1,    -1,
     186,   187,    -1,   189,   190,   191,   192,   193,    -1,    -1,
     196,   197,    -1,    -1,    -1,   201,   202,    -1,    -1,    -1,
      -1,    -1,   208,    -1,   210,   211,   212,   213,    -1,   215,
      -1,   217,    -1,    -1,    -1,   221,   222,    -1,   224,    -1,
      -1,   227,   228,    -1,    -1,    -1,   232,   233,   234,    -1,
      -1,    -1,   238,   239,   240,    -1,    -1,   243,    -1,    -1,
      -1,    -1,   248,   249,   250,    -1,    -1,    -1,    -1,   255,
      -1,    -1,    -1,   259,   260,    -1,   262,   263,    -1,    -1,
      -1,   267,    -1,   269,    -1,    -1,   272,   273,    -1,    -1,
     276,    -1,    -1,   279,   280,    -1,    -1,    -1,    -1,    -1,
     286,   287,    -1,   289,    -1,   291,    -1,   293,   294,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   302,    -1,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,    -1,   323,   324,   325,
      -1,   327,   328,   329,   330,    -1,   332,   333,    -1,    -1,
      -1,    -1,   338,   339,   340,   341,   342,   343,    -1,    -1,
     346,   347,    -1,   349,    -1,   351,    -1,   353,   354,   355,
     356,   357,   358,   359,   360,   361,    -1,    -1,   364,   365,
      -1,    -1,   368,   369,   370,   371,   372,    -1,    -1,    -1,
     376,   377,    -1,    -1,    -1,   381,    -1,   383,   384,    -1,
     386,   387,   388,    -1,    -1,   391,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   401,   402,   403,    -1,   405,
      -1,   407,    -1,   409,   410,   411,   412,   413,   414,   415,
     416,   417,   418,    -1,   420,    -1,   422,   423,   424,    -1,
     426,    -1,   428,   429,   430,   431,   432,    -1,   434,   435,
     436,    -1,    -1,   439,    -1,    -1,    -1,   443,   444,    -1,
     446,   447,    -1,    -1,   450,   451,   452,   453,   454,    -1,
     456,   457,    -1,   459,   460,   461,    -1,    -1,   464,   465,
     466,   467,   468,   469,   470,   471,    -1,   473,    -1,   475,
     476,    -1,   478,   479,   480,    -1,   482,    -1,    -1,   485,
     486,   487,   488,    -1,   490,    -1,   492,   493,   494,   495,
     496,    -1,    -1,   499,   500,    -1,    -1,    -1,   504,   505,
     506,   507,    -1,    -1,    -1,   511,    -1,    -1,    -1,    -1,
     516,    -1,   518,   519,   520,   521,    -1,   523,   524,   525,
     526,   527,    -1,    -1,    -1,    -1,    -1,   533,   534,   535,
      -1,   537,    -1,    -1,   540,    -1,    -1,   543,    -1,   545,
      -1,   547,   548,   549,   550,   551,   552,    -1,    -1,   555,
     556,    -1,    -1,   559,   560,   561,   562,   563,   564,    -1,
      -1,   567,   568,   569,   570,    -1,   572,   573,   574,    -1,
      -1,   577,   578,   579,   580,    -1,    -1,   583,   584,    -1,
     586,   587,   588,   589,    -1,    -1,    -1,    -1,    -1,   595,
     596,    -1,    -1,    -1,   600,   601,   602,    -1,    -1,   605,
     606,    -1,   608,   609,    -1,   611,   612,    -1,    -1,   615,
      -1,    -1,   618,    -1,   620,    -1,   622,   623,    -1,    -1,
      -1,    -1,    -1,   629,    -1,   631,    -1,    -1,   634,    -1,
      -1,    -1,    -1,   639,    -1,   641,   642,   643,   644,    -1,
      -1,    -1,    -1,    -1,    -1,   651,   652,   653,    -1,   655,
     656,   657,   658,    -1,    -1,   661,    -1,    -1,   664,   665,
      -1,   667,   668,   669,   670,   671,    -1,   673,   674,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   682,   683,   684,    -1,
     686,   687,   688,    -1,   690,    -1,    -1,   693,    -1,   695,
      -1,    -1,    -1,    -1,    -1,    -1,   702,   703,    -1,    -1,
     706,    -1,   708,    -1,   710,   711,    -1,    -1,    -1,   715,
     716,   717,   718,   719,   720,   721,   722,    -1,   724,   725,
     726,   727,   728,   729,   730,   731,   732,   733,    -1,   735,
     736,   737,   738,   739,   740,   741,   742,   743,   744,     5,
       6,    -1,     8,     9,    10,    11,    12,    -1,    -1,    15,
      -1,    -1,    -1,    -1,    20,    -1,    -1,    23,    -1,    25,
      26,    27,    28,    29,    30,    -1,    32,    -1,    -1,    -1,
      36,    -1,    -1,    -1,    40,    -1,    -1,    43,    44,    45,
      -1,    47,    -1,    49,    50,    -1,    -1,    53,    -1,    -1,
      56,    57,    -1,    59,    60,    61,    -1,    63,    -1,    65,
      66,    67,    68,    69,    70,    -1,    72,    73,    -1,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      -1,    -1,    88,    89,    -1,    91,    92,    93,    94,    95,
      -1,    -1,    -1,    99,    -1,    -1,    -1,    -1,   104,    -1,
      -1,   107,    -1,    -1,    -1,   111,   112,   113,    -1,    -1,
     116,    -1,    -1,    -1,    -1,   121,   122,    -1,    -1,    -1,
      -1,    -1,   128,   129,    -1,   131,    -1,    -1,    -1,    -1,
      -1,   137,    -1,    -1,    -1,    -1,   142,   143,   144,   145,
      -1,    -1,    -1,   149,    -1,    -1,   152,   153,   154,    -1,
      -1,    -1,   158,    -1,    -1,   161,   162,   163,   164,   165,
      -1,    -1,   168,   169,    -1,   171,   172,   173,   174,   175,
     176,    -1,    -1,   179,   180,   181,   182,   183,    -1,    -1,
     186,   187,    -1,   189,   190,   191,   192,   193,    -1,    -1,
     196,   197,    -1,    -1,    -1,   201,   202,   203,    -1,    -1,
      -1,    -1,   208,    -1,   210,   211,   212,   213,    -1,   215,
      -1,   217,    -1,    -1,    -1,   221,   222,    -1,   224,    -1,
      -1,   227,   228,    -1,    -1,    -1,   232,   233,   234,    -1,
      -1,    -1,   238,   239,   240,    -1,    -1,   243,    -1,    -1,
      -1,    -1,   248,   249,   250,    -1,    -1,    -1,    -1,   255,
      -1,    -1,    -1,   259,   260,    -1,   262,   263,    -1,    -1,
      -1,   267,    -1,   269,    -1,    -1,   272,   273,    -1,    -1,
     276,    -1,    -1,   279,   280,    -1,    -1,    -1,    -1,    -1,
     286,   287,    -1,   289,    -1,   291,    -1,   293,   294,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   302,    -1,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,    -1,   323,   324,   325,
      -1,   327,   328,   329,   330,    -1,   332,   333,    -1,    -1,
      -1,    -1,   338,   339,   340,   341,   342,   343,    -1,    -1,
     346,   347,    -1,   349,    -1,   351,    -1,   353,   354,   355,
     356,   357,   358,   359,   360,   361,    -1,    -1,   364,   365,
      -1,    -1,   368,   369,   370,   371,   372,    -1,    -1,    -1,
     376,   377,    -1,    -1,    -1,   381,    -1,   383,   384,    -1,
     386,   387,   388,    -1,    -1,   391,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   401,   402,   403,    -1,   405,
      -1,   407,    -1,   409,   410,   411,   412,   413,   414,   415,
     416,   417,   418,    -1,   420,    -1,   422,   423,   424,    -1,
     426,    -1,   428,   429,   430,   431,   432,    -1,   434,   435,
     436,    -1,    -1,   439,    -1,    -1,    -1,   443,   444,    -1,
     446,   447,    -1,    -1,   450,   451,   452,   453,   454,    -1,
     456,   457,    -1,   459,   460,   461,    -1,    -1,   464,   465,
     466,   467,   468,   469,   470,   471,    -1,   473,    -1,   475,
     476,    -1,   478,   479,   480,    -1,   482,    -1,    -1,   485,
     486,   487,   488,    -1,   490,    -1,   492,   493,   494,   495,
     496,    -1,    -1,   499,   500,    -1,    -1,    -1,   504,   505,
     506,   507,    -1,    -1,    -1,   511,    -1,    -1,    -1,    -1,
     516,    -1,   518,   519,   520,   521,    -1,   523,   524,   525,
     526,   527,    -1,    -1,    -1,    -1,    -1,   533,   534,   535,
      -1,   537,    -1,    -1,   540,    -1,    -1,   543,    -1,   545,
      -1,   547,   548,   549,   550,   551,   552,    -1,    -1,   555,
     556,    -1,    -1,   559,   560,   561,   562,   563,   564,    -1,
      -1,   567,   568,   569,   570,    -1,   572,   573,   574,    -1,
      -1,   577,   578,   579,   580,    -1,    -1,   583,   584,    -1,
     586,   587,   588,   589,    -1,    -1,    -1,    -1,    -1,   595,
     596,    -1,    -1,    -1,   600,   601,   602,    -1,    -1,   605,
     606,    -1,   608,   609,    -1,   611,   612,    -1,    -1,   615,
      -1,    -1,   618,    -1,   620,    -1,   622,   623,    -1,    -1,
      -1,    -1,    -1,   629,    -1,   631,    -1,    -1,   634,    -1,
      -1,    -1,    -1,   639,    -1,   641,   642,   643,   644,    -1,
      -1,    -1,    -1,    -1,    -1,   651,   652,   653,    -1,   655,
     656,   657,   658,    -1,    -1,   661,    -1,    -1,   664,   665,
      -1,   667,   668,   669,   670,   671,    -1,   673,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   682,   683,   684,    -1,
     686,   687,   688,    -1,   690,    -1,    -1,   693,    -1,   695,
      -1,    -1,    -1,    -1,    -1,    -1,   702,   703,    -1,    -1,
     706,    -1,   708,    -1,   710,   711,    -1,    -1,    -1,   715,
     716,   717,   718,   719,   720,   721,   722,    -1,   724,   725,
     726,   727,   728,   729,   730,   731,   732,   733,    -1,   735,
     736,   737,   738,   739,   740,   741,   742,   743,   744,     5,
       6,    -1,     8,     9,    10,    11,    12,    -1,    -1,    15,
      -1,    -1,    -1,    -1,    20,    -1,    -1,    23,    -1,    25,
      26,    27,    28,    29,    30,    -1,    32,    -1,    -1,    -1,
      36,    -1,    -1,    -1,    40,    -1,    -1,    43,    44,    45,
      -1,    47,    -1,    49,    50,    -1,    -1,    53,    -1,    -1,
      56,    57,    -1,    59,    60,    61,    -1,    63,    -1,    65,
      66,    67,    68,    69,    70,    -1,    72,    73,    -1,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      -1,    -1,    88,    89,    -1,    91,    92,    93,    94,    95,
      -1,    -1,    -1,    99,    -1,    -1,    -1,    -1,   104,    -1,
      -1,   107,    -1,    -1,    -1,   111,   112,   113,    -1,    -1,
     116,    -1,    -1,    -1,    -1,   121,   122,    -1,    -1,    -1,
      -1,    -1,   128,   129,    -1,   131,    -1,    -1,    -1,    -1,
      -1,   137,    -1,    -1,    -1,    -1,   142,   143,   144,   145,
      -1,    -1,    -1,   149,    -1,    -1,   152,   153,   154,    -1,
      -1,    -1,   158,    -1,    -1,   161,   162,   163,   164,   165,
      -1,    -1,   168,   169,    -1,   171,   172,   173,   174,   175,
     176,    -1,    -1,   179,   180,   181,   182,   183,    -1,    -1,
     186,   187,    -1,   189,   190,   191,   192,   193,    -1,    -1,
     196,   197,    -1,    -1,    -1,   201,   202,    -1,    -1,    -1,
      -1,    -1,   208,    -1,   210,   211,   212,   213,    -1,   215,
      -1,   217,    -1,    -1,    -1,   221,   222,    -1,   224,    -1,
      -1,   227,   228,    -1,    -1,    -1,   232,   233,   234,    -1,
      -1,    -1,   238,   239,   240,    -1,    -1,   243,    -1,    -1,
      -1,    -1,   248,   249,   250,    -1,    -1,    -1,    -1,   255,
      -1,    -1,    -1,   259,   260,    -1,   262,   263,    -1,    -1,
      -1,   267,    -1,   269,    -1,    -1,   272,   273,    -1,    -1,
     276,    -1,    -1,   279,   280,    -1,    -1,    -1,    -1,    -1,
     286,   287,    -1,   289,    -1,   291,    -1,   293,   294,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   302,    -1,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,    -1,   323,   324,   325,
      -1,   327,   328,   329,   330,    -1,   332,   333,    -1,    -1,
      -1,    -1,   338,   339,   340,   341,   342,   343,    -1,    -1,
     346,   347,    -1,   349,    -1,   351,    -1,   353,   354,   355,
     356,   357,   358,   359,   360,   361,    -1,    -1,   364,   365,
      -1,    -1,   368,   369,   370,   371,   372,    -1,    -1,    -1,
     376,   377,    -1,    -1,    -1,   381,    -1,   383,   384,    -1,
     386,   387,   388,    -1,    -1,   391,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   401,   402,   403,    -1,   405,
      -1,   407,    -1,   409,   410,   411,   412,   413,   414,   415,
     416,   417,   418,    -1,   420,    -1,   422,   423,   424,    -1,
     426,    -1,   428,   429,   430,   431,   432,    -1,   434,   435,
     436,    -1,    -1,   439,    -1,    -1,    -1,   443,   444,    -1,
     446,   447,    -1,    -1,   450,   451,   452,   453,   454,    -1,
     456,   457,    -1,   459,   460,   461,    -1,    -1,   464,   465,
     466,   467,   468,   469,   470,   471,    -1,   473,    -1,   475,
     476,    -1,   478,   479,   480,    -1,   482,    -1,    -1,   485,
     486,   487,   488,    -1,   490,    -1,   492,   493,   494,   495,
     496,    -1,    -1,   499,   500,    -1,    -1,    -1,   504,   505,
     506,   507,    -1,    -1,    -1,   511,    -1,    -1,    -1,    -1,
     516,    -1,   518,   519,   520,   521,    -1,   523,   524,   525,
     526,   527,    -1,    -1,    -1,    -1,    -1,   533,   534,   535,
      -1,   537,    -1,    -1,   540,    -1,    -1,   543,    -1,   545,
      -1,   547,   548,   549,   550,   551,   552,    -1,    -1,   555,
     556,    -1,    -1,   559,   560,   561,   562,   563,   564,    -1,
      -1,   567,   568,   569,   570,    -1,   572,   573,   574,    -1,
      -1,   577,   578,   579,   580,    -1,   582,   583,   584,    -1,
     586,   587,   588,   589,    -1,    -1,    -1,    -1,    -1,   595,
     596,    -1,    -1,    -1,   600,   601,   602,    -1,    -1,   605,
     606,    -1,   608,   609,    -1,   611,   612,    -1,    -1,   615,
      -1,    -1,   618,    -1,   620,    -1,   622,   623,    -1,    -1,
      -1,    -1,    -1,   629,    -1,   631,    -1,    -1,   634,    -1,
      -1,    -1,    -1,   639,    -1,   641,   642,   643,   644,    -1,
      -1,    -1,    -1,    -1,    -1,   651,   652,   653,    -1,   655,
     656,   657,   658,    -1,    -1,   661,    -1,    -1,   664,   665,
      -1,   667,   668,   669,   670,   671,    -1,   673,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   682,   683,   684,    -1,
     686,   687,   688,    -1,   690,    -1,    -1,   693,    -1,   695,
      -1,    -1,    -1,    -1,    -1,    -1,   702,   703,    -1,    -1,
     706,    -1,   708,    -1,   710,   711,    -1,    -1,    -1,   715,
     716,   717,   718,   719,   720,   721,   722,    -1,   724,   725,
     726,   727,   728,   729,   730,   731,   732,   733,    -1,   735,
     736,   737,   738,   739,   740,   741,   742,   743,   744,     5,
       6,    -1,     8,     9,    10,    11,    12,    -1,    -1,    15,
      -1,    -1,    -1,    -1,    20,    -1,    -1,    23,    -1,    25,
      26,    27,    28,    29,    30,    -1,    32,    -1,    -1,    -1,
      36,    -1,    -1,    -1,    40,    -1,    -1,    43,    44,    45,
      -1,    47,    -1,    49,    50,    -1,    -1,    53,    -1,    -1,
      56,    57,    -1,    59,    60,    61,    -1,    63,    -1,    65,
      66,    67,    68,    69,    70,    -1,    72,    73,    -1,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      -1,    -1,    88,    89,    -1,    91,    92,    93,    94,    95,
      -1,    -1,    -1,    99,    -1,    -1,    -1,    -1,   104,    -1,
      -1,   107,    -1,    -1,    -1,   111,   112,   113,    -1,    -1,
     116,    -1,    -1,    -1,    -1,   121,   122,    -1,    -1,    -1,
      -1,    -1,   128,   129,    -1,   131,    -1,    -1,    -1,    -1,
      -1,   137,    -1,    -1,    -1,    -1,   142,   143,   144,   145,
      -1,    -1,    -1,   149,    -1,    -1,   152,   153,   154,    -1,
      -1,    -1,   158,    -1,    -1,   161,   162,   163,   164,   165,
      -1,    -1,   168,   169,    -1,   171,   172,   173,   174,   175,
     176,    -1,    -1,   179,   180,   181,   182,   183,    -1,    -1,
     186,   187,    -1,   189,   190,   191,   192,   193,    -1,    -1,
     196,   197,    -1,    -1,    -1,   201,   202,    -1,    -1,    -1,
      -1,    -1,   208,    -1,   210,   211,   212,   213,    -1,   215,
      -1,   217,    -1,    -1,    -1,   221,   222,    -1,   224,    -1,
      -1,   227,   228,    -1,    -1,    -1,   232,   233,   234,    -1,
      -1,    -1,   238,   239,   240,    -1,    -1,   243,    -1,    -1,
      -1,    -1,   248,   249,   250,    -1,    -1,    -1,    -1,   255,
      -1,    -1,    -1,   259,   260,    -1,   262,   263,    -1,    -1,
      -1,   267,    -1,   269,    -1,    -1,   272,   273,    -1,    -1,
     276,    -1,    -1,   279,   280,    -1,    -1,    -1,    -1,    -1,
     286,   287,    -1,   289,    -1,   291,    -1,   293,   294,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   302,    -1,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,    -1,   323,   324,   325,
      -1,   327,   328,   329,   330,    -1,   332,   333,    -1,    -1,
      -1,    -1,   338,   339,   340,   341,   342,   343,    -1,    -1,
     346,   347,    -1,   349,    -1,   351,    -1,   353,   354,   355,
     356,   357,   358,   359,   360,   361,    -1,    -1,   364,   365,
      -1,    -1,   368,   369,   370,   371,   372,    -1,    -1,    -1,
     376,   377,    -1,    -1,    -1,   381,    -1,   383,   384,    -1,
     386,   387,   388,    -1,    -1,   391,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   401,   402,   403,    -1,   405,
      -1,   407,    -1,   409,   410,   411,   412,   413,   414,   415,
     416,   417,   418,    -1,   420,    -1,   422,   423,   424,    -1,
     426,    -1,   428,   429,   430,   431,   432,    -1,   434,   435,
     436,    -1,    -1,   439,    -1,    -1,    -1,   443,   444,    -1,
     446,   447,    -1,    -1,   450,   451,   452,   453,   454,    -1,
     456,   457,    -1,   459,   460,   461,    -1,    -1,   464,   465,
     466,   467,   468,   469,   470,   471,    -1,   473,    -1,   475,
     476,    -1,   478,   479,   480,    -1,   482,    -1,    -1,   485,
     486,   487,   488,    -1,   490,    -1,   492,   493,   494,   495,
     496,    -1,    -1,   499,   500,    -1,    -1,    -1,   504,   505,
     506,   507,    -1,    -1,    -1,   511,    -1,    -1,    -1,    -1,
     516,    -1,   518,   519,   520,   521,    -1,   523,   524,   525,
     526,   527,    -1,    -1,    -1,    -1,    -1,   533,   534,   535,
      -1,   537,    -1,    -1,   540,    -1,    -1,   543,    -1,   545,
      -1,   547,   548,   549,   550,   551,   552,    -1,    -1,   555,
     556,    -1,    -1,   559,   560,   561,   562,   563,   564,    -1,
      -1,   567,   568,   569,   570,    -1,   572,   573,   574,    -1,
      -1,   577,   578,   579,   580,    -1,   582,   583,   584,    -1,
     586,   587,   588,   589,    -1,    -1,    -1,    -1,    -1,   595,
     596,    -1,    -1,    -1,   600,   601,   602,    -1,    -1,   605,
     606,    -1,   608,   609,    -1,   611,   612,    -1,    -1,   615,
      -1,    -1,   618,    -1,   620,    -1,   622,   623,    -1,    -1,
      -1,    -1,    -1,   629,    -1,   631,    -1,    -1,   634,    -1,
      -1,    -1,    -1,   639,    -1,   641,   642,   643,   644,    -1,
      -1,    -1,    -1,    -1,    -1,   651,   652,   653,    -1,   655,
     656,   657,   658,    -1,    -1,   661,    -1,    -1,   664,   665,
      -1,   667,   668,   669,   670,   671,    -1,   673,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   682,   683,   684,    -1,
     686,   687,   688,    -1,   690,    -1,    -1,   693,    -1,   695,
      -1,    -1,    -1,    -1,    -1,    -1,   702,   703,    -1,    -1,
     706,    -1,   708,    -1,   710,   711,    -1,    -1,    -1,   715,
     716,   717,   718,   719,   720,   721,   722,    -1,   724,   725,
     726,   727,   728,   729,   730,   731,   732,   733,    -1,   735,
     736,   737,   738,   739,   740,   741,   742,   743,   744,     5,
       6,    -1,     8,     9,    10,    11,    12,    -1,    -1,    15,
      -1,    -1,    -1,    -1,    20,    -1,    -1,    23,    -1,    25,
      26,    27,    28,    29,    30,    -1,    32,    -1,    -1,    -1,
      36,    -1,    -1,    -1,    40,    -1,    -1,    43,    44,    45,
      -1,    47,    -1,    49,    50,    -1,    -1,    53,    -1,    -1,
      56,    57,    -1,    59,    60,    61,    -1,    63,    -1,    65,
      66,    67,    68,    69,    70,    -1,    72,    73,    -1,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      -1,    -1,    88,    89,    -1,    91,    92,    93,    94,    95,
      -1,    -1,    -1,    99,    -1,    -1,    -1,    -1,   104,    -1,
      -1,   107,    -1,    -1,    -1,   111,   112,   113,    -1,    -1,
     116,    -1,    -1,    -1,    -1,   121,   122,    -1,    -1,    -1,
      -1,    -1,   128,   129,    -1,   131,    -1,    -1,    -1,    -1,
      -1,   137,    -1,    -1,    -1,    -1,   142,   143,   144,   145,
      -1,    -1,    -1,   149,    -1,    -1,   152,   153,   154,    -1,
      -1,    -1,   158,    -1,    -1,   161,   162,   163,   164,   165,
      -1,    -1,   168,   169,    -1,   171,   172,   173,   174,   175,
     176,    -1,    -1,   179,   180,   181,   182,   183,    -1,    -1,
     186,   187,    -1,   189,   190,   191,   192,   193,    -1,    -1,
     196,   197,    -1,    -1,    -1,   201,   202,    -1,    -1,    -1,
      -1,    -1,   208,    -1,   210,   211,   212,   213,    -1,   215,
      -1,   217,    -1,    -1,    -1,   221,   222,    -1,   224,    -1,
      -1,   227,   228,    -1,    -1,    -1,   232,   233,   234,    -1,
      -1,    -1,   238,   239,   240,    -1,    -1,   243,    -1,    -1,
      -1,    -1,   248,   249,   250,    -1,    -1,    -1,    -1,   255,
      -1,    -1,    -1,   259,   260,    -1,   262,   263,    -1,    -1,
      -1,   267,    -1,   269,    -1,    -1,   272,   273,    -1,    -1,
     276,    -1,    -1,   279,   280,    -1,    -1,    -1,    -1,    -1,
     286,   287,    -1,   289,    -1,   291,    -1,   293,   294,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   302,    -1,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,    -1,   323,   324,   325,
      -1,   327,   328,   329,   330,    -1,   332,   333,    -1,    -1,
      -1,    -1,   338,   339,   340,   341,   342,   343,    -1,    -1,
     346,   347,    -1,   349,    -1,   351,    -1,   353,   354,   355,
     356,   357,   358,   359,   360,   361,    -1,    -1,   364,   365,
      -1,    -1,   368,   369,   370,   371,   372,    -1,    -1,    -1,
     376,   377,    -1,    -1,    -1,   381,    -1,   383,   384,    -1,
     386,   387,   388,    -1,    -1,   391,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   401,   402,   403,    -1,   405,
      -1,   407,    -1,   409,   410,   411,   412,   413,   414,   415,
     416,   417,   418,    -1,   420,    -1,   422,   423,   424,    -1,
     426,    -1,   428,   429,   430,   431,   432,    -1,   434,   435,
     436,    -1,    -1,   439,    -1,    -1,    -1,   443,   444,    -1,
     446,   447,    -1,    -1,   450,   451,   452,   453,   454,    -1,
     456,   457,    -1,   459,   460,   461,    -1,    -1,   464,   465,
     466,   467,   468,   469,   470,   471,    -1,   473,    -1,   475,
     476,    -1,   478,   479,   480,    -1,   482,    -1,    -1,   485,
     486,   487,   488,    -1,   490,    -1,   492,   493,   494,   495,
     496,    -1,    -1,   499,   500,    -1,    -1,    -1,   504,   505,
     506,   507,    -1,    -1,    -1,   511,    -1,    -1,    -1,    -1,
     516,    -1,   518,   519,   520,   521,    -1,   523,   524,   525,
     526,   527,    -1,    -1,    -1,    -1,    -1,   533,   534,   535,
      -1,   537,    -1,    -1,   540,    -1,    -1,   543,    -1,   545,
      -1,   547,   548,   549,   550,   551,   552,    -1,    -1,   555,
     556,    -1,    -1,   559,   560,   561,   562,   563,   564,    -1,
      -1,   567,   568,   569,   570,    -1,   572,   573,   574,    -1,
      -1,   577,   578,   579,   580,    -1,    -1,   583,   584,    -1,
     586,   587,   588,   589,    -1,    -1,    -1,    -1,    -1,   595,
     596,    -1,    -1,    -1,   600,   601,   602,    -1,    -1,   605,
     606,    -1,   608,   609,    -1,   611,   612,    -1,    -1,   615,
      -1,    -1,   618,    -1,   620,    -1,   622,   623,    -1,    -1,
      -1,    -1,    -1,   629,    -1,   631,    -1,    -1,   634,    -1,
      -1,    -1,    -1,   639,    -1,   641,   642,   643,   644,    -1,
      -1,    -1,    -1,    -1,    -1,   651,   652,   653,    -1,   655,
     656,   657,   658,    -1,    -1,   661,    -1,    -1,   664,   665,
      -1,   667,   668,   669,   670,   671,    -1,   673,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   682,   683,   684,    -1,
     686,   687,   688,    -1,   690,    -1,    -1,   693,    -1,   695,
      -1,    -1,    -1,    -1,    -1,    -1,   702,   703,    -1,    -1,
     706,    -1,   708,    -1,   710,   711,    -1,    -1,    -1,   715,
     716,   717,   718,   719,   720,   721,   722,    -1,   724,   725,
     726,   727,   728,   729,   730,   731,   732,   733,    -1,   735,
     736,   737,   738,   739,   740,   741,   742,   743,   744,     5,
       6,    -1,     8,     9,    10,    11,    12,    -1,    -1,    15,
      -1,    -1,    -1,    -1,    20,    -1,    -1,    23,    -1,    25,
      26,    27,    28,    29,    30,    -1,    32,    -1,    -1,    -1,
      36,    -1,    -1,    -1,    40,    -1,    -1,    43,    44,    45,
      -1,    47,    -1,    49,    50,    -1,    -1,    53,    -1,    -1,
      56,    57,    -1,    59,    60,    61,    -1,    63,    -1,    65,
      66,    67,    68,    69,    70,    -1,    72,    73,    -1,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      -1,    -1,    88,    89,    -1,    91,    92,    93,    94,    95,
      -1,    -1,    -1,    99,    -1,    -1,    -1,    -1,   104,    -1,
      -1,   107,    -1,    -1,    -1,   111,   112,   113,    -1,    -1,
     116,    -1,    -1,    -1,    -1,   121,   122,    -1,    -1,    -1,
      -1,    -1,   128,   129,    -1,   131,    -1,    -1,    -1,    -1,
      -1,   137,    -1,    -1,    -1,    -1,   142,   143,   144,   145,
      -1,    -1,    -1,   149,    -1,    -1,   152,   153,   154,    -1,
      -1,    -1,   158,    -1,    -1,   161,   162,   163,   164,   165,
      -1,    -1,   168,   169,    -1,   171,   172,   173,   174,   175,
     176,    -1,    -1,   179,   180,   181,   182,   183,    -1,    -1,
     186,   187,    -1,   189,   190,   191,   192,   193,    -1,    -1,
     196,   197,    -1,    -1,    -1,   201,   202,    -1,    -1,    -1,
      -1,    -1,   208,    -1,   210,   211,   212,   213,    -1,    -1,
      -1,   217,    -1,    -1,    -1,   221,   222,    -1,   224,    -1,
      -1,   227,   228,    -1,    -1,    -1,   232,   233,   234,    -1,
      -1,    -1,   238,   239,   240,    -1,    -1,   243,    -1,    -1,
      -1,    -1,   248,   249,   250,    -1,    -1,    -1,    -1,   255,
      -1,    -1,    -1,   259,   260,    -1,   262,   263,    -1,    -1,
      -1,   267,    -1,   269,    -1,    -1,   272,   273,    -1,    -1,
     276,    -1,    -1,   279,   280,    -1,    -1,    -1,    -1,    -1,
     286,   287,    -1,    -1,    -1,   291,    -1,   293,   294,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   302,    -1,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,    -1,   323,   324,   325,
      -1,   327,   328,   329,   330,    -1,   332,   333,    -1,    -1,
      -1,    -1,   338,   339,   340,   341,   342,   343,    -1,    -1,
     346,   347,    -1,   349,    -1,   351,    -1,   353,   354,   355,
     356,   357,   358,   359,   360,   361,    -1,    -1,   364,   365,
      -1,    -1,   368,   369,   370,   371,   372,    -1,    -1,    -1,
     376,   377,    -1,    -1,    -1,   381,    -1,   383,   384,    -1,
     386,   387,   388,    -1,    -1,   391,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   401,   402,   403,    -1,   405,
      -1,   407,    -1,   409,   410,   411,   412,   413,   414,   415,
     416,   417,   418,    -1,   420,    -1,   422,   423,   424,    -1,
     426,    -1,   428,   429,   430,   431,   432,    -1,   434,   435,
     436,    -1,    -1,   439,    -1,    -1,    -1,   443,   444,    -1,
     446,   447,    -1,    -1,   450,   451,   452,   453,   454,    -1,
     456,   457,    -1,   459,   460,   461,    -1,    -1,   464,   465,
     466,   467,   468,   469,   470,   471,    -1,   473,    -1,   475,
     476,    -1,   478,   479,   480,    -1,   482,    -1,    -1,   485,
     486,   487,   488,    -1,   490,    -1,   492,   493,   494,   495,
     496,    -1,    -1,   499,   500,    -1,    -1,    -1,   504,   505,
      -1,   507,    -1,    -1,    -1,   511,    -1,    -1,    -1,    -1,
     516,    -1,   518,   519,   520,   521,    -1,   523,   524,   525,
     526,   527,    -1,    -1,    -1,    -1,    -1,   533,   534,   535,
      -1,   537,    -1,    -1,   540,    -1,    -1,   543,    -1,   545,
      -1,   547,   548,   549,   550,   551,   552,    -1,    -1,   555,
     556,    -1,    -1,   559,   560,   561,   562,   563,   564,    -1,
      -1,   567,   568,   569,   570,    -1,   572,   573,   574,    -1,
      -1,   577,   578,   579,   580,    -1,    -1,   583,   584,    -1,
     586,   587,   588,   589,    -1,    -1,    -1,    -1,    -1,   595,
     596,    -1,    -1,    -1,   600,   601,   602,    -1,    -1,   605,
     606,    -1,   608,   609,    -1,   611,   612,    -1,    -1,   615,
      -1,    -1,   618,    -1,   620,    -1,   622,   623,    -1,    -1,
      -1,    -1,    -1,   629,    -1,   631,    -1,    -1,   634,    -1,
      -1,    -1,    -1,   639,    -1,   641,   642,   643,   644,    -1,
      -1,    -1,    -1,    -1,    -1,   651,   652,   653,    -1,   655,
     656,   657,   658,    -1,    -1,   661,    -1,    -1,   664,   665,
      -1,    -1,   668,   669,   670,   671,    -1,   673,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   682,   683,   684,    -1,
      -1,   687,   688,    -1,   690,    -1,    -1,   693,    -1,   695,
      -1,    -1,    -1,    -1,    -1,    -1,   702,   703,    -1,    -1,
     706,    -1,   708,    -1,   710,   711,    -1,    -1,    -1,   715,
     716,   717,   718,   719,   720,   721,   722,    -1,   724,   725,
     726,   727,   728,   729,   730,   731,   732,   733,    -1,   735,
     736,   737,   738,   739,   740,   741,   742,   743,   744,     5,
       6,    -1,     8,     9,    10,    11,    12,    -1,    -1,    15,
      -1,    -1,    -1,    -1,    20,    -1,    -1,    23,    -1,    25,
      26,    27,    28,    29,    30,    -1,    32,    -1,    -1,    -1,
      36,    -1,    -1,    -1,    40,    -1,    -1,    43,    44,    45,
      -1,    47,    -1,    49,    50,    -1,    -1,    53,    -1,    -1,
      56,    57,    -1,    59,    60,    61,    -1,    63,    -1,    65,
      66,    67,    68,    69,    70,    -1,    72,    73,    -1,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      -1,    -1,    88,    89,    -1,    91,    92,    93,    94,    95,
      -1,    -1,    -1,    99,    -1,    -1,    -1,    -1,   104,    -1,
      -1,   107,    -1,    -1,    -1,   111,   112,   113,    -1,    -1,
     116,    -1,    -1,    -1,    -1,   121,   122,    -1,    -1,    -1,
      -1,    -1,   128,   129,    -1,   131,    -1,    -1,    -1,    -1,
      -1,   137,    -1,    -1,    -1,    -1,   142,   143,   144,   145,
      -1,    -1,    -1,   149,    -1,    -1,   152,   153,   154,    -1,
      -1,    -1,   158,    -1,    -1,   161,   162,   163,   164,   165,
      -1,    -1,   168,   169,    -1,   171,   172,   173,   174,   175,
     176,    -1,    -1,   179,   180,   181,   182,   183,    -1,    -1,
     186,   187,    -1,   189,   190,   191,   192,   193,    -1,    -1,
     196,   197,    -1,    -1,    -1,   201,   202,    -1,    -1,    -1,
      -1,    -1,   208,    -1,   210,   211,   212,   213,    -1,    -1,
      -1,   217,    -1,    -1,    -1,   221,   222,    -1,   224,    -1,
      -1,   227,   228,    -1,    -1,    -1,   232,   233,   234,    -1,
      -1,    -1,   238,   239,   240,    -1,    -1,   243,    -1,    -1,
      -1,    -1,   248,   249,   250,    -1,    -1,    -1,    -1,   255,
      -1,    -1,    -1,   259,   260,    -1,   262,   263,    -1,    -1,
      -1,   267,    -1,   269,    -1,    -1,   272,   273,    -1,    -1,
     276,    -1,    -1,   279,   280,    -1,    -1,    -1,    -1,    -1,
     286,   287,    -1,    -1,    -1,   291,    -1,   293,   294,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   302,    -1,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,    -1,   323,   324,   325,
      -1,   327,   328,   329,   330,    -1,   332,   333,    -1,    -1,
      -1,    -1,   338,   339,   340,   341,   342,   343,    -1,    -1,
     346,   347,    -1,   349,    -1,   351,    -1,   353,   354,   355,
     356,   357,   358,   359,   360,   361,    -1,    -1,   364,   365,
      -1,    -1,   368,   369,   370,   371,   372,    -1,    -1,    -1,
     376,   377,    -1,    -1,    -1,   381,    -1,   383,   384,    -1,
     386,   387,   388,    -1,    -1,   391,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   401,   402,   403,    -1,   405,
      -1,   407,    -1,   409,   410,   411,   412,   413,   414,   415,
     416,   417,   418,    -1,   420,    -1,   422,   423,   424,    -1,
     426,    -1,   428,   429,   430,   431,   432,    -1,   434,   435,
     436,    -1,    -1,   439,    -1,    -1,    -1,   443,   444,    -1,
     446,   447,    -1,    -1,   450,   451,   452,   453,   454,    -1,
     456,   457,    -1,   459,   460,   461,    -1,    -1,   464,   465,
     466,   467,   468,   469,   470,   471,    -1,   473,    -1,   475,
     476,    -1,   478,   479,   480,    -1,   482,    -1,    -1,   485,
     486,   487,   488,    -1,   490,    -1,   492,   493,   494,   495,
     496,    -1,    -1,   499,   500,    -1,    -1,    -1,   504,   505,
      -1,   507,    -1,    -1,    -1,   511,    -1,    -1,    -1,    -1,
     516,    -1,   518,   519,   520,   521,    -1,   523,   524,   525,
     526,   527,    -1,    -1,    -1,    -1,    -1,   533,   534,   535,
      -1,   537,    -1,    -1,   540,    -1,    -1,   543,    -1,   545,
      -1,   547,   548,   549,   550,   551,   552,    -1,    -1,   555,
     556,    -1,    -1,   559,   560,   561,   562,   563,   564,    -1,
      -1,   567,   568,   569,   570,    -1,   572,   573,   574,    -1,
      -1,   577,   578,   579,   580,    -1,    -1,   583,   584,    -1,
     586,   587,   588,   589,    -1,    -1,    -1,    -1,    -1,   595,
     596,    -1,    -1,    -1,   600,   601,   602,    -1,    -1,   605,
     606,    -1,   608,   609,    -1,   611,   612,    -1,    -1,   615,
      -1,    -1,   618,    -1,   620,    -1,   622,   623,    -1,    -1,
      -1,    -1,    -1,   629,    -1,   631,    -1,    -1,   634,    -1,
      -1,    -1,    -1,   639,    -1,   641,   642,   643,   644,    -1,
      -1,    -1,    -1,    -1,    -1,   651,   652,   653,    -1,   655,
     656,   657,   658,    -1,    -1,   661,    -1,    -1,   664,   665,
      -1,    -1,   668,   669,   670,   671,    -1,   673,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   682,   683,   684,    -1,
      -1,   687,   688,    -1,   690,    -1,    -1,   693,    -1,   695,
      -1,    -1,    -1,    -1,    -1,    -1,   702,   703,    -1,    -1,
     706,    -1,   708,    -1,   710,   711,    -1,    -1,    -1,   715,
     716,   717,   718,   719,   720,   721,   722,    -1,   724,   725,
     726,   727,   728,   729,   730,   731,   732,   733,    -1,   735,
     736,   737,   738,   739,   740,   741,   742,   743,   744,     5,
       6,    -1,     8,     9,    10,    11,    12,    -1,    -1,    15,
      -1,    -1,    -1,    -1,    20,    -1,    -1,    -1,    -1,    25,
      26,    27,    28,    29,    30,    -1,    32,    -1,    -1,    -1,
      36,    -1,    -1,    -1,    40,    -1,    -1,    43,    44,    45,
      -1,    47,    -1,    -1,    -1,    -1,    -1,    53,    54,    -1,
      56,    57,    -1,    59,    60,    -1,    -1,    -1,    -1,    65,
      66,    67,    68,    69,    70,    -1,    72,    73,    -1,    75,
      76,    -1,    78,    -1,    80,    81,    82,    83,    84,    85,
      -1,    -1,    88,    89,    -1,    91,    92,    93,    -1,    95,
      -1,    -1,    -1,    99,    -1,    -1,    -1,    -1,   104,    -1,
      -1,   107,    -1,    -1,    -1,   111,   112,   113,    -1,    -1,
     116,    -1,    -1,    -1,    -1,   121,    -1,    -1,    -1,    -1,
      -1,    -1,   128,   129,    -1,   131,    -1,    -1,    -1,    -1,
      -1,   137,    -1,    -1,    -1,    -1,   142,   143,   144,   145,
      -1,    -1,    -1,    -1,    -1,    -1,   152,   153,   154,    -1,
     156,   157,   158,    -1,    -1,   161,   162,   163,   164,   165,
      -1,    -1,   168,   169,    -1,   171,   172,   173,   174,   175,
      -1,    -1,    -1,   179,   180,   181,   182,   183,    -1,    -1,
     186,   187,   188,   189,   190,   191,   192,   193,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   201,   202,    -1,    -1,    -1,
      -1,    -1,   208,    -1,   210,   211,   212,   213,    -1,   215,
      -1,   217,    -1,    -1,    -1,    -1,   222,    -1,    -1,    -1,
      -1,   227,   228,    -1,    -1,    -1,   232,   233,   234,    -1,
     236,    -1,   238,    -1,   240,    -1,    -1,   243,    -1,    -1,
      -1,    -1,   248,   249,    -1,    -1,    -1,    -1,    -1,   255,
      -1,    -1,    -1,   259,   260,    -1,   262,   263,   264,    -1,
      -1,   267,    -1,   269,    -1,    -1,    -1,   273,    -1,    -1,
     276,   277,    -1,   279,   280,    -1,    -1,    -1,    -1,    -1,
     286,   287,    -1,   289,    -1,   291,    -1,   293,   294,    -1,
      -1,    -1,    -1,   299,    -1,    -1,   302,    -1,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,    -1,   323,   324,   325,
      -1,   327,   328,   329,   330,    -1,   332,   333,    -1,    -1,
      -1,    -1,   338,   339,   340,   341,   342,   343,    -1,    -1,
     346,   347,    -1,   349,    -1,   351,    -1,   353,   354,   355,
     356,   357,   358,   359,   360,   361,    -1,    -1,   364,   365,
      -1,    -1,   368,   369,   370,   371,   372,    -1,    -1,    -1,
      -1,   377,    -1,    -1,    -1,   381,    -1,   383,   384,    -1,
     386,   387,   388,    -1,    -1,   391,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   401,   402,   403,    -1,   405,
      -1,   407,    -1,   409,   410,   411,   412,   413,   414,   415,
     416,   417,   418,    -1,    -1,    -1,    -1,   423,   424,    -1,
     426,    -1,   428,   429,   430,   431,   432,    -1,   434,   435,
     436,    -1,    -1,   439,    -1,    -1,    -1,   443,   444,    -1,
     446,   447,    -1,    -1,   450,   451,   452,   453,   454,    -1,
     456,   457,    -1,   459,    -1,   461,   462,    -1,   464,   465,
     466,   467,   468,   469,   470,   471,    -1,    -1,    -1,   475,
     476,    -1,   478,   479,   480,   481,   482,    -1,    -1,    -1,
     486,   487,   488,    -1,   490,    -1,   492,   493,    -1,   495,
     496,    -1,    -1,   499,   500,    -1,    -1,    -1,   504,   505,
     506,   507,    -1,    -1,    -1,   511,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   519,    -1,   521,    -1,   523,   524,   525,
     526,   527,    -1,    -1,    -1,    -1,    -1,   533,   534,   535,
      -1,   537,    -1,    -1,   540,    -1,    -1,   543,    -1,   545,
      -1,   547,    -1,   549,   550,   551,   552,    -1,    -1,    -1,
     556,    -1,    -1,   559,   560,   561,   562,   563,   564,    -1,
      -1,   567,   568,   569,   570,    -1,   572,   573,   574,    -1,
      -1,   577,   578,   579,   580,    -1,    -1,   583,   584,    -1,
     586,   587,   588,   589,    -1,    -1,    -1,    -1,    -1,   595,
     596,    -1,    -1,    -1,    -1,   601,   602,    -1,    -1,   605,
     606,    -1,   608,   609,    -1,    -1,    -1,    -1,    -1,   615,
      -1,    -1,   618,    -1,   620,    -1,   622,   623,    -1,    -1,
      -1,    -1,    -1,   629,    -1,   631,    -1,    -1,   634,    -1,
      -1,    -1,    -1,   639,    -1,   641,   642,   643,   644,    -1,
      -1,   647,    -1,    -1,    -1,   651,   652,   653,    -1,   655,
      -1,   657,   658,    -1,    -1,   661,    -1,    -1,   664,   665,
      -1,   667,   668,   669,   670,   671,    -1,   673,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   682,   683,   684,    -1,
     686,   687,   688,    -1,    -1,    -1,    -1,   693,    -1,   695,
      -1,    -1,    -1,    -1,    -1,    -1,   702,   703,    -1,    -1,
     706,    -1,   708,    -1,   710,   711,    -1,    -1,    -1,   715,
     716,   717,   718,   719,   720,   721,   722,    -1,   724,   725,
     726,    -1,   728,   729,   730,   731,   732,   733,    -1,   735,
     736,   737,   738,   739,   740,   741,   742,   743,   744,     5,
       6,    -1,     8,     9,    10,    11,    12,    -1,    -1,    15,
      -1,    -1,    -1,    -1,    20,    -1,    -1,    -1,    -1,    25,
      26,    27,    28,    29,    30,    -1,    32,    -1,    -1,    -1,
      36,    -1,    -1,    -1,    40,    -1,    -1,    43,    44,    45,
      -1,    47,    -1,    -1,    -1,    -1,    -1,    53,    54,    -1,
      56,    57,    -1,    59,    60,    -1,    -1,    -1,    -1,    65,
      66,    67,    68,    69,    70,    -1,    72,    73,    -1,    75,
      76,    -1,    78,    -1,    80,    81,    82,    83,    84,    85,
      -1,    -1,    88,    89,    -1,    91,    92,    93,    -1,    95,
      -1,    -1,    -1,    99,    -1,    -1,    -1,    -1,   104,    -1,
      -1,   107,    -1,    -1,    -1,   111,   112,   113,    -1,    -1,
     116,    -1,    -1,    -1,    -1,   121,    -1,    -1,    -1,    -1,
      -1,    -1,   128,   129,    -1,   131,    -1,    -1,    -1,    -1,
      -1,   137,    -1,    -1,    -1,    -1,   142,   143,   144,   145,
      -1,    -1,    -1,    -1,    -1,    -1,   152,   153,   154,    -1,
     156,    -1,   158,    -1,    -1,   161,   162,   163,   164,   165,
      -1,    -1,   168,   169,    -1,   171,   172,   173,   174,   175,
      -1,    -1,    -1,   179,   180,   181,   182,   183,    -1,    -1,
     186,   187,   188,   189,   190,   191,   192,   193,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   201,   202,    -1,    -1,    -1,
      -1,    -1,   208,    -1,   210,   211,   212,   213,    -1,   215,
      -1,   217,    -1,    -1,    -1,    -1,   222,    -1,    -1,    -1,
      -1,   227,   228,    -1,    -1,    -1,   232,   233,   234,    -1,
     236,    -1,   238,    -1,   240,    -1,    -1,   243,    -1,    -1,
      -1,    -1,   248,   249,    -1,    -1,    -1,    -1,    -1,   255,
      -1,    -1,    -1,   259,   260,    -1,   262,   263,   264,    -1,
      -1,   267,    -1,   269,    -1,    -1,    -1,   273,    -1,    -1,
     276,   277,    -1,   279,   280,    -1,    -1,    -1,    -1,    -1,
     286,   287,    -1,   289,    -1,   291,    -1,   293,   294,    -1,
      -1,    -1,    -1,   299,    -1,    -1,   302,    -1,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,    -1,   323,   324,   325,
      -1,   327,   328,   329,   330,    -1,   332,   333,    -1,    -1,
      -1,    -1,   338,   339,   340,   341,   342,   343,    -1,    -1,
     346,   347,    -1,   349,    -1,   351,    -1,   353,   354,   355,
     356,   357,   358,   359,   360,   361,    -1,    -1,   364,   365,
      -1,    -1,   368,   369,   370,   371,   372,    -1,    -1,    -1,
      -1,   377,    -1,    -1,    -1,   381,    -1,   383,   384,    -1,
     386,   387,   388,    -1,    -1,   391,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   401,   402,   403,    -1,   405,
      -1,   407,    -1,   409,   410,   411,   412,   413,   414,   415,
     416,   417,   418,    -1,    -1,    -1,    -1,   423,   424,    -1,
     426,    -1,   428,   429,   430,   431,   432,    -1,   434,   435,
     436,    -1,    -1,   439,    -1,    -1,    -1,   443,   444,    -1,
     446,   447,    -1,    -1,   450,   451,   452,   453,   454,    -1,
     456,   457,    -1,   459,    -1,   461,   462,    -1,   464,   465,
     466,   467,   468,   469,   470,   471,    -1,    -1,    -1,   475,
     476,    -1,   478,   479,   480,   481,   482,    -1,    -1,    -1,
     486,   487,   488,    -1,   490,    -1,   492,   493,    -1,   495,
     496,    -1,    -1,   499,   500,    -1,    -1,    -1,   504,   505,
     506,   507,    -1,    -1,    -1,   511,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   519,    -1,   521,    -1,   523,   524,   525,
     526,   527,    -1,    -1,    -1,    -1,    -1,   533,   534,   535,
      -1,   537,    -1,    -1,   540,    -1,    -1,   543,    -1,   545,
      -1,   547,    -1,   549,   550,   551,   552,    -1,    -1,    -1,
     556,    -1,    -1,   559,   560,   561,   562,   563,   564,    -1,
      -1,   567,   568,   569,   570,    -1,   572,   573,   574,    -1,
      -1,   577,   578,   579,   580,    -1,    -1,   583,   584,    -1,
     586,   587,   588,   589,    -1,    -1,    -1,    -1,    -1,   595,
     596,    -1,    -1,    -1,    -1,   601,   602,    -1,    -1,   605,
     606,    -1,   608,   609,    -1,    -1,    -1,    -1,    -1,   615,
      -1,    -1,   618,    -1,   620,    -1,   622,   623,    -1,    -1,
      -1,    -1,    -1,   629,    -1,   631,    -1,    -1,   634,    -1,
      -1,    -1,    -1,   639,    -1,   641,   642,   643,   644,   645,
      -1,   647,    -1,    -1,    -1,   651,   652,   653,    -1,   655,
      -1,   657,   658,    -1,    -1,   661,    -1,    -1,   664,   665,
      -1,   667,   668,   669,   670,   671,    -1,   673,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   682,   683,   684,    -1,
     686,   687,   688,    -1,    -1,    -1,    -1,   693,    -1,   695,
      -1,    -1,    -1,    -1,    -1,    -1,   702,   703,    -1,    -1,
     706,    -1,   708,    -1,   710,   711,    -1,    -1,    -1,   715,
     716,   717,   718,   719,   720,   721,   722,    -1,   724,   725,
     726,    -1,   728,   729,   730,   731,   732,   733,    -1,   735,
     736,   737,   738,   739,   740,   741,   742,   743,   744,     5,
       6,    -1,     8,     9,    10,    11,    12,    -1,    -1,    15,
      -1,    -1,    -1,    -1,    20,    -1,    -1,    -1,    -1,    25,
      26,    27,    28,    29,    30,    -1,    32,    -1,    -1,    -1,
      36,    -1,    -1,    -1,    40,    -1,    -1,    43,    44,    45,
      -1,    47,    -1,    -1,    -1,    -1,    -1,    53,    54,    -1,
      56,    57,    -1,    59,    60,    -1,    -1,    -1,    -1,    65,
      66,    67,    68,    69,    70,    -1,    72,    73,    -1,    75,
      76,    -1,    78,    -1,    80,    81,    82,    83,    84,    85,
      -1,    -1,    88,    89,    -1,    91,    92,    93,    -1,    95,
      -1,    -1,    -1,    99,    -1,    -1,    -1,    -1,   104,    -1,
      -1,   107,    -1,    -1,    -1,   111,   112,   113,    -1,    -1,
     116,    -1,    -1,    -1,    -1,   121,    -1,    -1,    -1,    -1,
      -1,    -1,   128,   129,    -1,   131,    -1,    -1,    -1,    -1,
      -1,   137,    -1,    -1,    -1,    -1,   142,   143,   144,   145,
      -1,    -1,    -1,    -1,    -1,    -1,   152,   153,   154,    -1,
     156,    -1,   158,    -1,    -1,   161,   162,   163,   164,   165,
      -1,    -1,   168,   169,    -1,   171,   172,   173,   174,   175,
      -1,    -1,    -1,   179,   180,   181,   182,   183,    -1,    -1,
     186,   187,   188,   189,   190,   191,   192,   193,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   201,   202,    -1,    -1,    -1,
      -1,    -1,   208,    -1,   210,   211,   212,   213,    -1,   215,
      -1,   217,    -1,    -1,    -1,    -1,   222,    -1,    -1,    -1,
      -1,   227,   228,    -1,    -1,    -1,   232,   233,   234,    -1,
     236,    -1,   238,    -1,   240,    -1,    -1,   243,    -1,    -1,
      -1,    -1,   248,   249,    -1,    -1,    -1,    -1,    -1,   255,
      -1,    -1,    -1,   259,   260,    -1,   262,   263,   264,    -1,
      -1,   267,    -1,   269,    -1,    -1,    -1,   273,    -1,    -1,
     276,   277,    -1,   279,   280,    -1,    -1,    -1,    -1,    -1,
     286,   287,    -1,   289,    -1,   291,    -1,   293,   294,    -1,
      -1,    -1,    -1,   299,    -1,    -1,   302,    -1,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,    -1,   323,   324,   325,
      -1,   327,   328,   329,   330,    -1,   332,   333,    -1,    -1,
      -1,    -1,   338,   339,   340,   341,   342,   343,    -1,    -1,
     346,   347,    -1,   349,    -1,   351,    -1,   353,   354,   355,
     356,   357,   358,   359,   360,   361,    -1,    -1,   364,   365,
      -1,    -1,   368,   369,   370,   371,   372,    -1,    -1,    -1,
      -1,   377,    -1,    -1,    -1,   381,    -1,   383,   384,    -1,
     386,   387,   388,    -1,    -1,   391,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   401,   402,   403,    -1,   405,
      -1,   407,    -1,   409,   410,   411,   412,   413,   414,   415,
     416,   417,   418,    -1,    -1,    -1,    -1,   423,   424,    -1,
     426,    -1,   428,   429,   430,   431,   432,    -1,   434,   435,
     436,    -1,    -1,   439,    -1,    -1,    -1,   443,   444,    -1,
     446,   447,    -1,    -1,   450,   451,   452,   453,   454,    -1,
     456,   457,    -1,   459,    -1,   461,   462,    -1,   464,   465,
     466,   467,   468,   469,   470,   471,    -1,    -1,    -1,   475,
     476,    -1,   478,   479,   480,   481,   482,    -1,    -1,    -1,
     486,   487,   488,    -1,   490,    -1,   492,   493,    -1,   495,
     496,    -1,    -1,   499,   500,    -1,    -1,    -1,   504,   505,
     506,   507,    -1,    -1,    -1,   511,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   519,    -1,   521,    -1,   523,   524,   525,
     526,   527,    -1,    -1,    -1,    -1,    -1,   533,   534,   535,
      -1,   537,    -1,    -1,   540,    -1,    -1,   543,    -1,   545,
      -1,   547,    -1,   549,   550,   551,   552,    -1,    -1,    -1,
     556,    -1,    -1,   559,   560,   561,   562,   563,   564,    -1,
      -1,   567,   568,   569,   570,    -1,   572,   573,   574,    -1,
      -1,   577,   578,   579,   580,    -1,    -1,   583,   584,    -1,
     586,   587,   588,   589,    -1,    -1,    -1,    -1,    -1,   595,
     596,    -1,    -1,    -1,    -1,   601,   602,    -1,    -1,   605,
     606,    -1,   608,   609,    -1,    -1,    -1,    -1,    -1,   615,
      -1,    -1,   618,    -1,   620,    -1,   622,   623,    -1,    -1,
      -1,    -1,    -1,   629,    -1,   631,    -1,    -1,   634,    -1,
      -1,    -1,    -1,   639,    -1,   641,   642,   643,   644,   645,
      -1,   647,    -1,    -1,    -1,   651,   652,   653,    -1,   655,
      -1,   657,   658,    -1,    -1,   661,    -1,    -1,   664,   665,
      -1,   667,   668,   669,   670,   671,    -1,   673,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   682,   683,   684,    -1,
     686,   687,   688,    -1,    -1,    -1,    -1,   693,    -1,   695,
      -1,    -1,    -1,    -1,    -1,    -1,   702,   703,    -1,    -1,
     706,    -1,   708,    -1,   710,   711,    -1,    -1,    -1,   715,
     716,   717,   718,   719,   720,   721,   722,    -1,   724,   725,
     726,    -1,   728,   729,   730,   731,   732,   733,    -1,   735,
     736,   737,   738,   739,   740,   741,   742,   743,   744,     5,
       6,    -1,     8,     9,    10,    11,    12,    -1,    -1,    15,
      -1,    -1,    -1,    -1,    20,    -1,    -1,    -1,    -1,    25,
      26,    27,    28,    29,    30,    -1,    32,    -1,    -1,    -1,
      36,    -1,    -1,    -1,    40,    -1,    -1,    43,    44,    45,
      -1,    47,    -1,    -1,    -1,    -1,    -1,    53,    54,    -1,
      56,    57,    -1,    59,    60,    -1,    -1,    -1,    -1,    65,
      66,    67,    68,    69,    70,    -1,    72,    73,    -1,    75,
      76,    -1,    78,    -1,    80,    81,    82,    83,    84,    85,
      -1,    -1,    88,    89,    -1,    91,    92,    93,    -1,    95,
      -1,    -1,    -1,    99,    -1,    -1,    -1,    -1,   104,    -1,
      -1,   107,    -1,    -1,    -1,   111,   112,   113,    -1,    -1,
     116,    -1,    -1,    -1,    -1,   121,    -1,    -1,    -1,    -1,
      -1,    -1,   128,   129,    -1,   131,    -1,    -1,    -1,    -1,
      -1,   137,    -1,    -1,    -1,    -1,   142,   143,   144,   145,
      -1,    -1,    -1,    -1,    -1,    -1,   152,   153,   154,    -1,
      -1,    -1,   158,    -1,    -1,   161,   162,   163,   164,   165,
      -1,    -1,   168,   169,    -1,   171,   172,   173,   174,   175,
      -1,    -1,    -1,   179,   180,   181,   182,   183,    -1,    -1,
     186,   187,   188,   189,   190,   191,   192,   193,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   201,   202,    -1,    -1,    -1,
      -1,    -1,   208,    -1,   210,   211,   212,   213,    -1,   215,
      -1,   217,    -1,    -1,    -1,    -1,   222,    -1,    -1,    -1,
      -1,   227,   228,    -1,    -1,    -1,   232,   233,   234,    -1,
     236,    -1,   238,    -1,   240,    -1,    -1,   243,    -1,    -1,
      -1,    -1,   248,   249,    -1,    -1,    -1,    -1,    -1,   255,
      -1,    -1,    -1,   259,   260,    -1,   262,   263,   264,    -1,
      -1,   267,    -1,   269,    -1,    -1,    -1,   273,    -1,    -1,
     276,   277,    -1,   279,   280,    -1,    -1,    -1,    -1,    -1,
     286,   287,    -1,   289,    -1,   291,    -1,   293,   294,    -1,
      -1,    -1,    -1,   299,    -1,    -1,   302,    -1,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,    -1,   323,   324,   325,
      -1,   327,   328,   329,   330,    -1,   332,   333,    -1,    -1,
      -1,    -1,   338,   339,   340,   341,   342,   343,    -1,    -1,
     346,   347,    -1,   349,    -1,   351,    -1,   353,   354,   355,
     356,   357,   358,   359,   360,   361,    -1,    -1,   364,   365,
      -1,    -1,   368,   369,   370,   371,   372,    -1,    -1,    -1,
      -1,   377,    -1,    -1,    -1,   381,    -1,   383,   384,    -1,
     386,   387,   388,    -1,    -1,   391,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   401,   402,   403,    -1,   405,
      -1,   407,    -1,   409,   410,   411,   412,   413,   414,   415,
     416,   417,   418,    -1,    -1,    -1,    -1,   423,   424,    -1,
     426,    -1,   428,   429,   430,   431,   432,    -1,   434,   435,
     436,    -1,    -1,   439,    -1,    -1,    -1,   443,   444,    -1,
     446,   447,    -1,    -1,   450,   451,   452,   453,   454,    -1,
     456,   457,    -1,   459,    -1,   461,   462,    -1,   464,   465,
     466,   467,   468,   469,   470,   471,    -1,    -1,    -1,   475,
     476,    -1,   478,   479,   480,   481,   482,    -1,    -1,    -1,
     486,   487,   488,    -1,   490,    -1,   492,   493,    -1,   495,
     496,    -1,    -1,   499,   500,    -1,    -1,    -1,   504,   505,
     506,   507,    -1,    -1,    -1,   511,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   519,    -1,   521,    -1,   523,   524,   525,
     526,   527,    -1,    -1,    -1,    -1,    -1,   533,   534,   535,
      -1,   537,    -1,    -1,   540,    -1,    -1,   543,    -1,   545,
      -1,   547,    -1,   549,   550,   551,   552,    -1,    -1,    -1,
     556,    -1,    -1,   559,   560,   561,   562,   563,   564,    -1,
      -1,   567,   568,   569,   570,    -1,   572,   573,   574,    -1,
      -1,   577,   578,   579,   580,    -1,    -1,   583,   584,    -1,
     586,   587,   588,   589,    -1,    -1,    -1,    -1,    -1,   595,
     596,    -1,    -1,    -1,    -1,   601,   602,    -1,    -1,   605,
     606,    -1,   608,   609,    -1,    -1,    -1,    -1,    -1,   615,
      -1,    -1,   618,    -1,   620,    -1,   622,   623,    -1,    -1,
      -1,    -1,    -1,   629,    -1,   631,    -1,    -1,   634,    -1,
      -1,    -1,    -1,   639,    -1,   641,   642,   643,   644,    -1,
      -1,   647,    -1,    -1,    -1,   651,   652,   653,    -1,   655,
      -1,   657,   658,    -1,    -1,   661,    -1,    -1,   664,   665,
      -1,   667,   668,   669,   670,   671,    -1,   673,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   682,   683,   684,    -1,
     686,   687,   688,    -1,    -1,    -1,    -1,   693,    -1,   695,
      -1,    -1,    -1,    -1,    -1,    -1,   702,   703,    -1,    -1,
     706,    -1,   708,    -1,   710,   711,    -1,    -1,    -1,   715,
     716,   717,   718,   719,   720,   721,   722,    -1,   724,   725,
     726,    -1,   728,   729,   730,   731,   732,   733,    -1,   735,
     736,   737,   738,   739,   740,   741,   742,   743,   744,     5,
       6,    -1,     8,     9,    10,    11,    12,    -1,    -1,    15,
      -1,    -1,    -1,    -1,    20,    -1,    -1,    -1,    -1,    25,
      26,    27,    28,    29,    30,    -1,    32,    -1,    -1,    -1,
      36,    -1,    -1,    -1,    40,    -1,    -1,    43,    44,    45,
      -1,    47,    -1,    -1,    -1,    -1,    -1,    53,    54,    -1,
      56,    57,    -1,    59,    60,    -1,    -1,    -1,    -1,    65,
      66,    67,    68,    69,    70,    -1,    72,    73,    -1,    75,
      76,    -1,    78,    -1,    80,    81,    82,    83,    84,    85,
      -1,    -1,    88,    89,    -1,    91,    92,    93,    -1,    95,
      -1,    -1,    -1,    99,    -1,    -1,    -1,    -1,   104,    -1,
      -1,   107,    -1,    -1,    -1,   111,   112,   113,    -1,    -1,
     116,    -1,    -1,    -1,    -1,   121,    -1,    -1,    -1,    -1,
      -1,    -1,   128,   129,    -1,   131,    -1,    -1,    -1,    -1,
      -1,   137,    -1,    -1,    -1,    -1,   142,   143,   144,   145,
      -1,    -1,    -1,    -1,    -1,    -1,   152,   153,   154,    -1,
      -1,    -1,   158,    -1,    -1,   161,   162,   163,   164,   165,
      -1,    -1,   168,   169,    -1,   171,   172,   173,   174,   175,
      -1,    -1,    -1,   179,   180,   181,   182,   183,    -1,    -1,
     186,   187,   188,   189,   190,   191,   192,   193,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   201,   202,    -1,    -1,    -1,
      -1,    -1,   208,    -1,   210,   211,   212,   213,    -1,   215,
      -1,   217,    -1,    -1,    -1,    -1,   222,    -1,    -1,    -1,
      -1,   227,   228,    -1,    -1,    -1,   232,   233,   234,    -1,
     236,    -1,   238,    -1,   240,    -1,    -1,   243,    -1,    -1,
      -1,    -1,   248,   249,    -1,    -1,    -1,    -1,    -1,   255,
      -1,    -1,    -1,   259,   260,    -1,   262,   263,   264,    -1,
      -1,   267,    -1,   269,    -1,    -1,    -1,   273,    -1,    -1,
     276,   277,    -1,   279,   280,    -1,    -1,    -1,    -1,    -1,
     286,   287,    -1,   289,    -1,   291,    -1,   293,   294,    -1,
      -1,    -1,    -1,   299,    -1,    -1,   302,    -1,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,    -1,   323,   324,   325,
      -1,   327,   328,   329,   330,    -1,   332,   333,    -1,    -1,
      -1,    -1,   338,   339,   340,   341,   342,   343,    -1,    -1,
     346,   347,    -1,   349,    -1,   351,    -1,   353,   354,   355,
     356,   357,   358,   359,   360,   361,    -1,    -1,   364,   365,
      -1,    -1,   368,   369,   370,   371,   372,    -1,    -1,    -1,
      -1,   377,    -1,    -1,    -1,   381,    -1,   383,   384,    -1,
     386,   387,   388,    -1,    -1,   391,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   401,   402,   403,    -1,   405,
      -1,   407,    -1,   409,   410,   411,   412,   413,   414,   415,
     416,   417,   418,    -1,    -1,    -1,    -1,   423,   424,    -1,
     426,    -1,   428,   429,   430,   431,   432,    -1,   434,   435,
     436,    -1,    -1,   439,    -1,    -1,    -1,   443,   444,    -1,
     446,   447,    -1,    -1,   450,   451,   452,   453,   454,    -1,
     456,   457,    -1,   459,    -1,   461,   462,    -1,   464,   465,
     466,   467,   468,   469,   470,   471,    -1,    -1,    -1,   475,
     476,    -1,   478,   479,   480,   481,   482,    -1,    -1,    -1,
     486,   487,   488,    -1,   490,    -1,   492,   493,    -1,   495,
     496,    -1,    -1,   499,   500,    -1,    -1,    -1,   504,   505,
     506,   507,    -1,    -1,    -1,   511,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   519,    -1,   521,    -1,   523,   524,   525,
     526,   527,    -1,    -1,    -1,    -1,    -1,   533,   534,   535,
      -1,   537,    -1,    -1,   540,    -1,    -1,   543,    -1,   545,
      -1,   547,    -1,   549,   550,   551,   552,    -1,    -1,    -1,
     556,    -1,    -1,   559,   560,   561,   562,   563,   564,    -1,
      -1,   567,   568,   569,   570,    -1,   572,   573,   574,    -1,
      -1,   577,   578,   579,   580,    -1,    -1,   583,   584,    -1,
     586,   587,   588,   589,    -1,    -1,    -1,    -1,    -1,   595,
     596,    -1,    -1,    -1,    -1,   601,   602,    -1,    -1,   605,
     606,    -1,   608,   609,    -1,    -1,    -1,    -1,    -1,   615,
      -1,    -1,   618,    -1,   620,    -1,   622,   623,    -1,    -1,
      -1,    -1,    -1,   629,    -1,   631,    -1,    -1,   634,    -1,
      -1,    -1,    -1,   639,    -1,   641,   642,   643,   644,    -1,
      -1,   647,    -1,    -1,    -1,   651,   652,   653,    -1,   655,
      -1,   657,   658,    -1,    -1,   661,    -1,    -1,   664,   665,
      -1,   667,   668,   669,   670,   671,    -1,   673,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   682,   683,   684,    -1,
     686,   687,   688,    -1,    -1,    -1,    -1,   693,    -1,   695,
      -1,    -1,    -1,    -1,    -1,    -1,   702,   703,    -1,    -1,
     706,    -1,   708,    -1,   710,   711,    -1,    -1,    -1,   715,
     716,   717,   718,   719,   720,   721,   722,    -1,   724,   725,
     726,    -1,   728,   729,   730,   731,   732,   733,    -1,   735,
     736,   737,   738,   739,   740,   741,   742,   743,   744,     5,
       6,    -1,     8,     9,    10,    11,    12,    -1,    -1,    15,
      -1,    -1,    -1,    -1,    20,    -1,    -1,    -1,    -1,    25,
      26,    27,    28,    29,    30,    -1,    32,    -1,    -1,    -1,
      36,    -1,    -1,    -1,    40,    -1,    -1,    43,    44,    45,
      -1,    47,    -1,    -1,    -1,    -1,    -1,    53,    54,    -1,
      56,    57,    -1,    59,    60,    -1,    -1,    -1,    -1,    65,
      66,    67,    68,    69,    70,    -1,    72,    73,    -1,    75,
      76,    -1,    78,    -1,    80,    81,    82,    83,    84,    85,
      -1,    -1,    88,    89,    -1,    91,    92,    93,    -1,    95,
      -1,    -1,    -1,    99,    -1,    -1,    -1,    -1,   104,    -1,
      -1,   107,    -1,    -1,    -1,   111,   112,   113,    -1,    -1,
     116,    -1,    -1,    -1,    -1,   121,    -1,    -1,    -1,    -1,
      -1,    -1,   128,   129,    -1,   131,    -1,    -1,    -1,    -1,
      -1,   137,    -1,    -1,    -1,    -1,   142,   143,   144,   145,
      -1,    -1,    -1,    -1,    -1,    -1,   152,   153,   154,    -1,
      -1,    -1,   158,    -1,    -1,   161,   162,   163,   164,   165,
      -1,    -1,   168,   169,    -1,   171,   172,   173,   174,   175,
      -1,    -1,    -1,   179,   180,   181,   182,   183,    -1,    -1,
     186,   187,   188,   189,   190,   191,   192,   193,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   201,   202,    -1,    -1,    -1,
      -1,    -1,   208,    -1,   210,   211,   212,   213,    -1,   215,
      -1,   217,    -1,    -1,    -1,    -1,   222,    -1,    -1,    -1,
      -1,   227,   228,    -1,    -1,    -1,   232,   233,   234,    -1,
     236,    -1,   238,    -1,   240,    -1,    -1,   243,    -1,    -1,
      -1,    -1,   248,   249,    -1,    -1,    -1,    -1,    -1,   255,
      -1,    -1,    -1,   259,   260,    -1,   262,   263,   264,    -1,
      -1,   267,    -1,   269,    -1,    -1,    -1,   273,    -1,    -1,
     276,   277,    -1,   279,   280,    -1,    -1,    -1,    -1,    -1,
     286,   287,    -1,   289,    -1,   291,    -1,   293,   294,    -1,
      -1,    -1,    -1,   299,    -1,    -1,   302,    -1,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,    -1,   323,   324,   325,
      -1,   327,   328,   329,   330,    -1,   332,   333,    -1,    -1,
      -1,    -1,   338,   339,   340,   341,   342,   343,    -1,    -1,
     346,   347,    -1,   349,    -1,   351,    -1,   353,   354,   355,
     356,   357,   358,   359,   360,   361,    -1,    -1,   364,   365,
      -1,    -1,   368,   369,   370,   371,   372,    -1,    -1,    -1,
      -1,   377,    -1,    -1,    -1,   381,    -1,   383,   384,    -1,
     386,   387,   388,    -1,    -1,   391,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   401,   402,   403,    -1,   405,
      -1,   407,    -1,   409,   410,   411,   412,   413,   414,   415,
     416,   417,   418,    -1,    -1,    -1,    -1,   423,   424,    -1,
     426,    -1,   428,   429,   430,   431,   432,    -1,   434,   435,
     436,    -1,    -1,   439,    -1,    -1,    -1,   443,   444,    -1,
     446,   447,    -1,    -1,   450,   451,   452,   453,   454,    -1,
     456,   457,    -1,   459,    -1,   461,   462,    -1,   464,   465,
     466,   467,   468,   469,   470,   471,    -1,    -1,    -1,   475,
     476,    -1,   478,   479,   480,   481,   482,    -1,    -1,    -1,
     486,   487,   488,    -1,   490,    -1,   492,   493,    -1,   495,
     496,    -1,    -1,   499,   500,    -1,    -1,    -1,   504,   505,
     506,   507,    -1,    -1,    -1,   511,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   519,    -1,   521,    -1,   523,   524,   525,
     526,   527,    -1,    -1,    -1,    -1,    -1,   533,   534,   535,
      -1,   537,    -1,    -1,   540,    -1,    -1,   543,    -1,   545,
      -1,   547,    -1,   549,   550,   551,   552,    -1,    -1,    -1,
     556,    -1,    -1,   559,   560,   561,   562,   563,   564,    -1,
      -1,   567,   568,   569,   570,    -1,   572,   573,   574,    -1,
      -1,   577,   578,   579,   580,    -1,    -1,   583,   584,    -1,
     586,   587,   588,   589,    -1,    -1,    -1,    -1,    -1,   595,
     596,    -1,    -1,    -1,    -1,   601,   602,    -1,    -1,   605,
     606,    -1,   608,   609,    -1,    -1,    -1,    -1,    -1,   615,
      -1,    -1,   618,    -1,   620,    -1,   622,   623,    -1,    -1,
      -1,    -1,    -1,   629,    -1,   631,    -1,    -1,   634,    -1,
      -1,    -1,    -1,   639,    -1,   641,   642,   643,   644,    -1,
      -1,   647,    -1,    -1,    -1,   651,   652,   653,    -1,   655,
      -1,   657,   658,    -1,    -1,   661,    -1,    -1,   664,   665,
      -1,   667,   668,   669,   670,   671,    -1,   673,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   682,   683,   684,    -1,
     686,   687,   688,    -1,    -1,    -1,    -1,   693,    -1,   695,
      -1,    -1,    -1,    -1,    -1,    -1,   702,   703,    -1,    -1,
     706,    -1,   708,    -1,   710,   711,    -1,    -1,    -1,   715,
     716,   717,   718,   719,   720,   721,   722,    -1,   724,   725,
     726,    -1,   728,   729,   730,   731,   732,   733,    -1,   735,
     736,   737,   738,   739,   740,   741,   742,   743,   744,     5,
       6,    -1,     8,     9,    10,    11,    12,    -1,    -1,    15,
      -1,    -1,    -1,    -1,    20,    -1,    -1,    -1,    -1,    25,
      26,    27,    28,    29,    30,    -1,    32,    -1,    -1,    -1,
      36,    -1,    -1,    -1,    40,    -1,    -1,    43,    44,    45,
      -1,    47,    -1,    -1,    -1,    -1,    -1,    53,    54,    -1,
      56,    57,    -1,    59,    60,    -1,    -1,    -1,    -1,    65,
      66,    67,    68,    69,    70,    -1,    72,    73,    -1,    75,
      76,    -1,    78,    -1,    80,    81,    82,    83,    84,    85,
      -1,    -1,    88,    89,    -1,    91,    92,    93,    -1,    95,
      -1,    -1,    -1,    99,    -1,    -1,    -1,    -1,   104,    -1,
      -1,   107,    -1,    -1,    -1,   111,   112,   113,    -1,    -1,
     116,    -1,    -1,    -1,    -1,   121,    -1,    -1,    -1,    -1,
      -1,    -1,   128,   129,    -1,   131,    -1,    -1,    -1,    -1,
      -1,   137,    -1,    -1,    -1,    -1,   142,   143,   144,   145,
      -1,    -1,    -1,    -1,    -1,    -1,   152,   153,   154,    -1,
      -1,    -1,   158,    -1,    -1,   161,   162,   163,   164,   165,
      -1,    -1,   168,   169,    -1,   171,   172,   173,   174,   175,
      -1,    -1,    -1,   179,   180,   181,   182,   183,    -1,    -1,
     186,   187,   188,   189,   190,   191,   192,   193,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   201,   202,    -1,    -1,    -1,
      -1,    -1,   208,    -1,   210,   211,   212,   213,    -1,   215,
      -1,   217,    -1,    -1,    -1,    -1,   222,    -1,    -1,    -1,
      -1,   227,   228,    -1,    -1,    -1,   232,   233,   234,    -1,
     236,    -1,   238,    -1,   240,    -1,    -1,   243,    -1,    -1,
      -1,    -1,   248,   249,    -1,    -1,    -1,    -1,    -1,   255,
      -1,    -1,    -1,   259,   260,    -1,   262,   263,   264,    -1,
      -1,   267,    -1,   269,    -1,    -1,    -1,   273,    -1,    -1,
     276,   277,    -1,   279,   280,    -1,    -1,    -1,    -1,    -1,
     286,   287,    -1,   289,    -1,   291,    -1,   293,   294,    -1,
      -1,    -1,    -1,   299,    -1,    -1,   302,    -1,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,    -1,   323,   324,   325,
      -1,   327,   328,   329,   330,    -1,   332,   333,    -1,    -1,
      -1,    -1,   338,   339,   340,   341,   342,   343,    -1,    -1,
     346,   347,    -1,   349,    -1,   351,    -1,   353,   354,   355,
     356,   357,   358,   359,   360,   361,    -1,    -1,   364,   365,
      -1,    -1,   368,   369,   370,   371,   372,    -1,    -1,    -1,
      -1,   377,    -1,    -1,    -1,   381,    -1,   383,   384,    -1,
     386,   387,   388,    -1,    -1,   391,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   401,   402,   403,    -1,   405,
      -1,   407,    -1,   409,   410,   411,   412,   413,   414,   415,
     416,   417,   418,    -1,    -1,    -1,    -1,   423,   424,    -1,
     426,    -1,   428,   429,   430,   431,   432,    -1,   434,   435,
     436,    -1,    -1,   439,    -1,    -1,    -1,   443,   444,    -1,
     446,   447,    -1,    -1,   450,   451,   452,   453,   454,    -1,
     456,   457,    -1,   459,    -1,   461,   462,    -1,   464,   465,
     466,   467,   468,   469,   470,   471,    -1,    -1,    -1,   475,
     476,    -1,   478,   479,   480,   481,   482,    -1,    -1,    -1,
     486,   487,   488,    -1,   490,    -1,   492,   493,    -1,   495,
     496,    -1,    -1,   499,   500,    -1,    -1,    -1,   504,   505,
     506,   507,    -1,    -1,    -1,   511,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   519,    -1,   521,    -1,   523,   524,   525,
     526,   527,    -1,    -1,    -1,    -1,    -1,   533,   534,   535,
      -1,   537,    -1,    -1,   540,    -1,    -1,   543,    -1,   545,
      -1,   547,    -1,   549,   550,   551,   552,    -1,    -1,    -1,
     556,    -1,    -1,   559,   560,   561,   562,   563,   564,    -1,
      -1,   567,   568,   569,   570,    -1,   572,   573,   574,    -1,
      -1,   577,   578,   579,   580,    -1,    -1,   583,   584,    -1,
     586,   587,   588,   589,    -1,    -1,    -1,    -1,    -1,   595,
     596,    -1,    -1,    -1,    -1,   601,   602,    -1,    -1,   605,
     606,    -1,   608,   609,    -1,    -1,    -1,    -1,    -1,   615,
      -1,    -1,   618,    -1,   620,    -1,   622,   623,    -1,    -1,
      -1,    -1,    -1,   629,    -1,   631,    -1,    -1,   634,    -1,
      -1,    -1,    -1,   639,    -1,   641,   642,   643,   644,    -1,
      -1,   647,    -1,    -1,    -1,   651,   652,   653,    -1,   655,
      -1,   657,   658,    -1,    -1,   661,    -1,    -1,   664,   665,
      -1,   667,   668,   669,   670,   671,    -1,   673,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   682,   683,   684,    -1,
     686,   687,   688,    -1,    -1,    -1,    -1,   693,    -1,   695,
      -1,    -1,    -1,    -1,    -1,    -1,   702,   703,    -1,    -1,
     706,    -1,   708,    -1,   710,   711,    -1,    -1,    -1,   715,
     716,   717,   718,   719,   720,   721,   722,    -1,   724,   725,
     726,    -1,   728,   729,   730,   731,   732,   733,    -1,   735,
     736,   737,   738,   739,   740,   741,   742,   743,   744,     5,
       6,    -1,     8,     9,    10,    11,    12,    -1,    -1,    15,
      -1,    -1,    -1,    -1,    20,    -1,    -1,    -1,    -1,    25,
      26,    27,    28,    29,    30,    -1,    32,    -1,    -1,    -1,
      36,    -1,    -1,    -1,    40,    -1,    -1,    43,    44,    45,
      -1,    47,    -1,    -1,    -1,    -1,    -1,    53,    54,    -1,
      56,    57,    -1,    59,    60,    -1,    -1,    -1,    -1,    65,
      66,    67,    68,    69,    70,    -1,    72,    73,    -1,    75,
      76,    -1,    78,    -1,    80,    81,    82,    83,    84,    85,
      -1,    -1,    88,    89,    -1,    91,    92,    93,    -1,    95,
      -1,    -1,    -1,    99,    -1,    -1,    -1,    -1,   104,    -1,
      -1,   107,    -1,    -1,    -1,   111,   112,   113,    -1,    -1,
     116,    -1,    -1,    -1,    -1,   121,    -1,    -1,    -1,    -1,
      -1,    -1,   128,   129,    -1,   131,    -1,    -1,    -1,    -1,
      -1,   137,    -1,    -1,    -1,    -1,   142,   143,   144,   145,
      -1,    -1,    -1,    -1,    -1,    -1,   152,   153,   154,    -1,
      -1,    -1,   158,    -1,    -1,   161,   162,   163,   164,   165,
      -1,    -1,   168,   169,    -1,   171,   172,   173,   174,   175,
      -1,    -1,    -1,   179,   180,   181,   182,   183,    -1,    -1,
     186,   187,   188,   189,   190,   191,   192,   193,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   201,   202,    -1,    -1,    -1,
      -1,    -1,   208,    -1,   210,   211,   212,   213,    -1,   215,
      -1,   217,    -1,    -1,    -1,    -1,   222,    -1,    -1,    -1,
      -1,   227,   228,    -1,    -1,    -1,   232,   233,   234,    -1,
     236,    -1,   238,    -1,   240,    -1,    -1,   243,    -1,    -1,
      -1,    -1,   248,   249,    -1,    -1,    -1,    -1,    -1,   255,
      -1,    -1,    -1,   259,   260,    -1,   262,   263,   264,    -1,
      -1,   267,    -1,   269,    -1,    -1,    -1,   273,    -1,    -1,
     276,   277,    -1,   279,   280,    -1,    -1,    -1,    -1,    -1,
     286,   287,    -1,   289,    -1,   291,    -1,   293,   294,    -1,
      -1,    -1,    -1,   299,    -1,    -1,   302,    -1,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,    -1,   323,   324,   325,
      -1,   327,   328,   329,   330,    -1,   332,   333,    -1,    -1,
      -1,    -1,   338,   339,   340,   341,   342,   343,    -1,    -1,
     346,   347,    -1,   349,    -1,   351,    -1,   353,   354,   355,
     356,   357,   358,   359,   360,   361,    -1,    -1,   364,   365,
      -1,    -1,   368,   369,   370,   371,   372,    -1,    -1,    -1,
      -1,   377,    -1,    -1,    -1,   381,    -1,   383,   384,    -1,
     386,   387,   388,    -1,    -1,   391,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   401,   402,   403,    -1,   405,
      -1,   407,    -1,   409,   410,   411,   412,   413,   414,   415,
     416,   417,   418,    -1,    -1,    -1,    -1,   423,   424,    -1,
     426,    -1,   428,   429,   430,   431,   432,    -1,   434,   435,
     436,    -1,    -1,   439,    -1,    -1,    -1,   443,   444,    -1,
     446,   447,    -1,    -1,   450,   451,   452,   453,   454,    -1,
     456,   457,    -1,   459,    -1,   461,   462,    -1,   464,   465,
     466,   467,   468,   469,   470,   471,    -1,    -1,    -1,   475,
     476,    -1,   478,   479,   480,   481,   482,    -1,    -1,    -1,
     486,   487,   488,    -1,   490,    -1,   492,   493,    -1,   495,
     496,    -1,    -1,   499,   500,    -1,    -1,    -1,   504,   505,
     506,   507,    -1,    -1,    -1,   511,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   519,    -1,   521,    -1,   523,   524,   525,
     526,   527,    -1,    -1,    -1,    -1,    -1,   533,   534,   535,
      -1,   537,    -1,    -1,   540,    -1,    -1,   543,    -1,   545,
      -1,   547,    -1,   549,   550,   551,   552,    -1,    -1,    -1,
     556,    -1,    -1,   559,   560,   561,   562,   563,   564,    -1,
      -1,   567,   568,   569,   570,    -1,   572,   573,   574,    -1,
      -1,   577,   578,   579,   580,    -1,    -1,   583,   584,    -1,
     586,   587,   588,   589,    -1,    -1,    -1,    -1,    -1,   595,
     596,    -1,    -1,    -1,    -1,   601,   602,    -1,    -1,   605,
     606,    -1,   608,   609,    -1,    -1,    -1,    -1,    -1,   615,
      -1,    -1,   618,    -1,   620,    -1,   622,   623,    -1,    -1,
      -1,    -1,    -1,   629,    -1,   631,    -1,    -1,   634,    -1,
      -1,    -1,    -1,   639,    -1,   641,   642,   643,   644,    -1,
      -1,   647,    -1,    -1,    -1,   651,   652,   653,    -1,   655,
      -1,   657,   658,    -1,    -1,   661,    -1,    -1,   664,   665,
      -1,   667,   668,   669,   670,   671,    -1,   673,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   682,   683,   684,    -1,
     686,   687,   688,    -1,    -1,    -1,    -1,   693,    -1,   695,
      -1,    -1,    -1,    -1,    -1,    -1,   702,   703,    -1,    -1,
     706,    -1,   708,    -1,   710,   711,    -1,    -1,    -1,   715,
     716,   717,   718,   719,   720,   721,   722,    -1,   724,   725,
     726,    -1,   728,   729,   730,   731,   732,   733,    -1,   735,
     736,   737,   738,   739,   740,   741,   742,   743,   744,     5,
       6,    -1,     8,     9,    10,    11,    12,    -1,    -1,    15,
      -1,    -1,    -1,    -1,    20,    -1,    -1,    -1,    -1,    25,
      26,    27,    28,    29,    30,    -1,    32,    -1,    -1,    -1,
      36,    -1,    -1,    -1,    40,    -1,    -1,    43,    44,    45,
      -1,    47,    -1,    -1,    -1,    -1,    -1,    53,    54,    -1,
      56,    57,    -1,    59,    60,    -1,    -1,    -1,    -1,    65,
      66,    67,    68,    69,    70,    -1,    72,    73,    -1,    75,
      76,    -1,    78,    -1,    80,    81,    82,    83,    84,    85,
      -1,    -1,    88,    89,    -1,    91,    92,    93,    -1,    95,
      -1,    -1,    -1,    99,    -1,    -1,    -1,    -1,   104,    -1,
      -1,   107,    -1,    -1,    -1,   111,   112,   113,    -1,    -1,
     116,    -1,    -1,    -1,    -1,   121,    -1,    -1,    -1,    -1,
      -1,    -1,   128,   129,    -1,   131,    -1,    -1,    -1,    -1,
      -1,   137,    -1,    -1,    -1,    -1,   142,   143,   144,   145,
      -1,    -1,    -1,    -1,    -1,    -1,   152,   153,   154,    -1,
      -1,    -1,   158,    -1,    -1,    -1,   162,   163,   164,   165,
      -1,    -1,   168,   169,    -1,   171,   172,   173,   174,   175,
      -1,    -1,    -1,   179,   180,   181,   182,   183,    -1,    -1,
     186,   187,   188,   189,   190,   191,   192,   193,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   201,   202,    -1,    -1,    -1,
      -1,    -1,   208,    -1,   210,   211,   212,   213,    -1,   215,
      -1,   217,    -1,    -1,    -1,    -1,   222,    -1,    -1,    -1,
      -1,   227,   228,    -1,    -1,    -1,   232,   233,   234,    -1,
     236,    -1,   238,    -1,   240,    -1,    -1,   243,    -1,    -1,
      -1,    -1,   248,   249,    -1,    -1,    -1,    -1,    -1,   255,
      -1,    -1,    -1,   259,   260,    -1,   262,   263,   264,    -1,
      -1,   267,    -1,   269,    -1,    -1,    -1,   273,    -1,    -1,
     276,   277,    -1,   279,   280,    -1,    -1,    -1,    -1,    -1,
     286,   287,    -1,   289,    -1,   291,    -1,   293,   294,    -1,
      -1,    -1,    -1,   299,    -1,    -1,   302,    -1,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,    -1,   323,   324,   325,
      -1,   327,   328,   329,   330,    -1,   332,   333,    -1,    -1,
      -1,    -1,   338,   339,   340,   341,   342,   343,    -1,    -1,
     346,   347,    -1,   349,    -1,   351,    -1,   353,   354,   355,
     356,   357,   358,   359,   360,   361,    -1,    -1,   364,   365,
      -1,    -1,   368,   369,   370,   371,   372,    -1,    -1,    -1,
      -1,   377,    -1,    -1,    -1,   381,    -1,   383,   384,    -1,
     386,   387,   388,    -1,    -1,   391,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   401,   402,   403,    -1,   405,
      -1,   407,    -1,   409,   410,   411,   412,   413,   414,   415,
     416,   417,   418,    -1,    -1,    -1,    -1,   423,   424,    -1,
     426,    -1,   428,   429,   430,   431,   432,    -1,   434,   435,
     436,    -1,    -1,   439,    -1,    -1,    -1,   443,   444,    -1,
     446,   447,    -1,    -1,   450,   451,   452,   453,   454,    -1,
     456,   457,    -1,   459,    -1,   461,   462,    -1,   464,   465,
     466,   467,   468,   469,   470,   471,    -1,    -1,    -1,   475,
     476,    -1,   478,   479,   480,   481,   482,    -1,    -1,    -1,
     486,   487,   488,    -1,   490,    -1,   492,   493,    -1,   495,
     496,    -1,    -1,   499,   500,    -1,    -1,    -1,   504,   505,
     506,   507,    -1,    -1,    -1,   511,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   519,    -1,   521,    -1,   523,   524,   525,
     526,   527,    -1,    -1,    -1,    -1,    -1,   533,   534,   535,
      -1,   537,    -1,    -1,   540,    -1,    -1,   543,    -1,   545,
      -1,   547,    -1,   549,   550,   551,   552,    -1,    -1,    -1,
     556,    -1,    -1,   559,   560,   561,   562,   563,   564,    -1,
      -1,   567,   568,   569,   570,    -1,   572,   573,   574,    -1,
      -1,   577,   578,   579,   580,    -1,    -1,   583,   584,    -1,
     586,   587,   588,   589,    -1,    -1,    -1,    -1,    -1,   595,
     596,    -1,    -1,    -1,    -1,   601,   602,    -1,    -1,   605,
     606,    -1,   608,   609,    -1,    -1,    -1,    -1,    -1,   615,
      -1,    -1,   618,    -1,   620,    -1,   622,   623,    -1,    -1,
      -1,    -1,    -1,   629,    -1,   631,    -1,    -1,   634,    -1,
      -1,    -1,    -1,   639,    -1,   641,   642,   643,   644,    -1,
      -1,   647,    -1,    -1,    -1,   651,   652,   653,    -1,   655,
      -1,   657,   658,    -1,    -1,   661,    -1,    -1,   664,   665,
      -1,   667,   668,   669,   670,   671,    -1,   673,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   682,   683,   684,    -1,
     686,   687,   688,    -1,    -1,    -1,    -1,   693,    -1,   695,
      -1,    -1,    -1,    -1,    -1,    -1,   702,   703,    -1,    -1,
     706,    -1,   708,    -1,   710,   711,    -1,    -1,    -1,   715,
     716,   717,   718,   719,   720,   721,   722,    -1,   724,   725,
     726,    -1,   728,   729,   730,   731,   732,   733,    -1,   735,
     736,   737,   738,   739,   740,   741,   742,   743,   744,     5,
       6,    -1,     8,     9,    10,    11,    12,    -1,    -1,    15,
      -1,    -1,    -1,    -1,    20,    -1,    -1,    -1,    -1,    25,
      26,    27,    28,    29,    30,    -1,    32,    -1,    -1,    -1,
      36,    -1,    -1,    -1,    40,    -1,    -1,    43,    44,    45,
      -1,    47,    -1,    -1,    -1,    -1,    -1,    53,    54,    -1,
      56,    57,    -1,    59,    60,    -1,    -1,    -1,    -1,    65,
      66,    67,    68,    69,    70,    -1,    72,    73,    -1,    75,
      76,    -1,    78,    -1,    80,    81,    82,    83,    84,    85,
      -1,    -1,    88,    89,    -1,    91,    92,    93,    -1,    95,
      -1,    -1,    -1,    99,    -1,    -1,    -1,    -1,   104,    -1,
      -1,   107,    -1,    -1,    -1,   111,   112,   113,    -1,    -1,
     116,    -1,    -1,    -1,    -1,   121,    -1,    -1,    -1,    -1,
      -1,    -1,   128,   129,    -1,   131,    -1,    -1,    -1,    -1,
      -1,   137,    -1,    -1,    -1,    -1,   142,   143,   144,   145,
      -1,    -1,    -1,    -1,    -1,    -1,   152,   153,   154,    -1,
      -1,    -1,   158,    -1,    -1,    -1,   162,   163,   164,   165,
      -1,    -1,   168,   169,    -1,   171,   172,   173,   174,   175,
      -1,    -1,    -1,   179,   180,   181,   182,   183,    -1,    -1,
     186,   187,   188,   189,   190,   191,   192,   193,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   201,   202,    -1,    -1,    -1,
      -1,    -1,   208,    -1,   210,   211,   212,   213,    -1,   215,
      -1,   217,    -1,    -1,    -1,    -1,   222,    -1,    -1,    -1,
      -1,   227,   228,    -1,    -1,    -1,   232,   233,   234,    -1,
     236,    -1,   238,    -1,   240,    -1,    -1,   243,    -1,    -1,
      -1,    -1,   248,   249,    -1,    -1,    -1,    -1,    -1,   255,
      -1,    -1,    -1,   259,   260,    -1,   262,   263,   264,    -1,
      -1,   267,    -1,   269,    -1,    -1,    -1,   273,    -1,    -1,
     276,   277,    -1,   279,   280,    -1,    -1,    -1,    -1,    -1,
     286,   287,    -1,   289,    -1,   291,    -1,   293,   294,    -1,
      -1,    -1,    -1,   299,    -1,    -1,   302,    -1,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,    -1,   323,   324,   325,
      -1,   327,   328,   329,   330,    -1,   332,   333,    -1,    -1,
      -1,    -1,   338,   339,   340,   341,   342,   343,    -1,    -1,
     346,   347,    -1,   349,    -1,   351,    -1,   353,   354,   355,
     356,   357,   358,   359,   360,   361,    -1,    -1,   364,   365,
      -1,    -1,   368,   369,   370,   371,   372,    -1,    -1,    -1,
      -1,   377,    -1,    -1,    -1,   381,    -1,   383,   384,    -1,
     386,   387,   388,    -1,    -1,   391,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   401,   402,   403,    -1,   405,
      -1,   407,    -1,   409,   410,   411,   412,   413,   414,   415,
     416,   417,   418,    -1,    -1,    -1,    -1,   423,   424,    -1,
     426,    -1,   428,   429,   430,   431,   432,    -1,   434,   435,
     436,    -1,    -1,   439,    -1,    -1,    -1,   443,   444,    -1,
     446,   447,    -1,    -1,   450,   451,   452,   453,   454,    -1,
     456,   457,    -1,   459,    -1,   461,   462,    -1,   464,   465,
     466,   467,   468,   469,   470,   471,    -1,    -1,    -1,   475,
     476,    -1,   478,   479,   480,   481,   482,    -1,    -1,    -1,
     486,   487,   488,    -1,   490,    -1,   492,   493,    -1,   495,
     496,    -1,    -1,   499,   500,    -1,    -1,    -1,   504,   505,
     506,   507,    -1,    -1,    -1,   511,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   519,    -1,   521,    -1,   523,   524,   525,
     526,   527,    -1,    -1,    -1,    -1,    -1,   533,   534,   535,
      -1,   537,    -1,    -1,   540,    -1,    -1,   543,    -1,   545,
      -1,   547,    -1,   549,   550,   551,   552,    -1,    -1,    -1,
     556,    -1,    -1,   559,   560,   561,   562,   563,   564,    -1,
      -1,   567,   568,   569,   570,    -1,   572,   573,   574,    -1,
      -1,   577,   578,   579,   580,    -1,    -1,   583,   584,    -1,
     586,   587,   588,   589,    -1,    -1,    -1,    -1,    -1,   595,
     596,    -1,    -1,    -1,    -1,   601,   602,    -1,    -1,   605,
     606,    -1,   608,   609,    -1,    -1,    -1,    -1,    -1,   615,
      -1,    -1,   618,    -1,   620,    -1,   622,   623,    -1,    -1,
      -1,    -1,    -1,   629,    -1,   631,    -1,    -1,   634,    -1,
      -1,    -1,    -1,   639,    -1,   641,   642,   643,   644,    -1,
      -1,   647,    -1,    -1,    -1,   651,   652,   653,    -1,   655,
      -1,   657,   658,    -1,    -1,   661,    -1,    -1,   664,   665,
      -1,   667,   668,   669,   670,   671,    -1,   673,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   682,   683,   684,    -1,
     686,   687,   688,    -1,    -1,    -1,    -1,   693,    -1,   695,
      -1,    -1,    -1,    -1,    -1,    -1,   702,   703,    -1,    -1,
     706,    -1,   708,    -1,   710,   711,    -1,    -1,    -1,   715,
     716,   717,   718,   719,   720,   721,   722,    -1,   724,   725,
     726,    -1,   728,   729,   730,   731,   732,   733,    -1,   735,
     736,   737,   738,   739,   740,   741,   742,   743,   744,     5,
       6,    -1,     8,     9,    10,    11,    12,    -1,    -1,    15,
      -1,    -1,    -1,    -1,    20,    -1,    -1,    -1,    -1,    25,
      26,    27,    28,    29,    30,    -1,    -1,    -1,    -1,    -1,
      36,    -1,    -1,    -1,    40,    -1,    -1,    43,    44,    45,
      -1,    47,    -1,    -1,    -1,    -1,    -1,    53,    -1,    -1,
      56,    57,    -1,    59,    60,    -1,    -1,    -1,    -1,    65,
      66,    67,    68,    69,    70,    -1,    72,    73,    -1,    75,
      76,    -1,    78,    -1,    80,    81,    82,    83,    84,    85,
      -1,    -1,    88,    89,    -1,    91,    92,    93,    -1,    95,
      -1,    -1,    -1,    99,    -1,    -1,    -1,    -1,   104,    -1,
      -1,   107,    -1,    -1,    -1,   111,   112,   113,    -1,    -1,
     116,    -1,    -1,    -1,    -1,   121,    -1,    -1,    -1,    -1,
      -1,    -1,   128,   129,    -1,   131,    -1,    -1,    -1,    -1,
      -1,   137,    -1,    -1,    -1,    -1,   142,   143,   144,   145,
      -1,    -1,    -1,    -1,    -1,    -1,   152,   153,   154,    -1,
      -1,    -1,   158,    -1,    -1,    -1,   162,   163,   164,   165,
      -1,    -1,   168,   169,    -1,   171,   172,   173,   174,   175,
      -1,    -1,    -1,   179,   180,   181,   182,   183,    -1,    -1,
     186,   187,    -1,   189,   190,   191,   192,   193,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   201,   202,    -1,    -1,    -1,
      -1,    -1,   208,    -1,   210,   211,   212,   213,    -1,   215,
      -1,   217,    -1,    -1,    -1,    -1,   222,    -1,    -1,    -1,
      -1,   227,   228,    -1,    -1,    -1,   232,   233,   234,    -1,
      -1,    -1,   238,    -1,   240,    -1,    -1,   243,    -1,    -1,
      -1,    -1,   248,   249,    -1,    -1,    -1,    -1,    -1,   255,
      -1,    -1,    -1,   259,   260,    -1,   262,   263,    -1,    -1,
      -1,   267,    -1,   269,    -1,    -1,    -1,   273,    -1,    -1,
     276,    -1,    -1,   279,   280,    -1,    -1,    -1,    -1,    -1,
     286,   287,    -1,   289,    -1,   291,    -1,   293,   294,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   302,    -1,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,    -1,   323,   324,   325,
      -1,   327,   328,   329,   330,    -1,   332,   333,    -1,    -1,
      -1,    -1,   338,   339,   340,   341,   342,   343,    -1,    -1,
     346,   347,    -1,   349,    -1,   351,    -1,   353,   354,   355,
     356,   357,   358,   359,   360,   361,    -1,    -1,   364,   365,
      -1,    -1,   368,   369,   370,   371,   372,    -1,    -1,    -1,
      -1,   377,    -1,    -1,    -1,   381,    -1,   383,   384,    -1,
     386,   387,   388,    -1,    -1,   391,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   401,   402,   403,    -1,   405,
      -1,   407,    -1,   409,   410,   411,   412,   413,   414,   415,
     416,   417,   418,    -1,    -1,    -1,    -1,   423,   424,    -1,
     426,    -1,   428,   429,   430,   431,   432,    -1,   434,   435,
     436,    -1,    -1,   439,    -1,    -1,    -1,   443,   444,    -1,
     446,   447,    -1,    -1,   450,   451,   452,   453,   454,    -1,
     456,   457,    -1,   459,    -1,   461,    -1,    -1,   464,   465,
     466,   467,   468,   469,   470,   471,    -1,    -1,    -1,   475,
     476,    -1,   478,   479,   480,    -1,   482,    -1,    -1,    -1,
     486,   487,   488,    -1,   490,    -1,   492,   493,    -1,   495,
     496,    -1,    -1,   499,   500,    -1,    -1,    -1,   504,   505,
     506,   507,    -1,    -1,    -1,   511,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   519,    -1,   521,    -1,   523,   524,   525,
     526,   527,    -1,    -1,    -1,    -1,    -1,   533,   534,   535,
      -1,   537,    -1,    -1,   540,    -1,    -1,   543,    -1,   545,
      -1,   547,    -1,   549,   550,   551,   552,    -1,    -1,    -1,
     556,    -1,    -1,   559,   560,   561,   562,   563,   564,    -1,
      -1,   567,   568,   569,   570,    -1,   572,   573,   574,    -1,
      -1,   577,   578,   579,   580,    -1,    -1,   583,   584,    -1,
     586,   587,   588,   589,    -1,    -1,    -1,    -1,    -1,   595,
     596,    -1,    -1,    -1,    -1,   601,   602,    -1,    -1,   605,
     606,    -1,   608,   609,    -1,    -1,    -1,    -1,    -1,   615,
      -1,    -1,   618,    -1,   620,    -1,   622,   623,    -1,    -1,
      -1,    -1,    -1,   629,    -1,   631,    -1,    -1,   634,    -1,
      -1,    -1,    -1,   639,    -1,   641,   642,   643,   644,    -1,
      -1,    -1,    -1,    -1,    -1,   651,   652,   653,    -1,   655,
      -1,   657,   658,    -1,    -1,   661,    -1,    -1,   664,   665,
      -1,   667,   668,   669,   670,   671,    -1,   673,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   682,   683,   684,    -1,
     686,   687,   688,    -1,    -1,    -1,    -1,   693,    -1,   695,
      -1,    -1,    -1,    -1,    -1,    -1,   702,   703,    -1,    -1,
     706,    -1,   708,    -1,   710,   711,    -1,    -1,    -1,   715,
     716,   717,   718,   719,   720,   721,   722,    -1,   724,   725,
     726,    -1,   728,   729,   730,   731,   732,   733,    -1,   735,
     736,   737,   738,   739,   740,   741,   742,   743,   744
  };

  const short
  Parser::yystos_[] =
  {
       0,     0,    32,    79,   100,   122,   132,   133,   134,   150,
     176,   247,   271,   288,   292,   422,   485,   501,   509,   515,
     516,   548,   616,   619,   624,   648,   663,   761,   768,   769,
     770,   771,   775,   776,   777,   778,   779,   780,   781,   783,
     784,   827,   871,  1019,  1021,  1025,  1026,  1148,  1254,  1256,
    1257,  1286,  1299,  1313,  1317,  1318,  1320,  1328,  1329,  1331,
    1335,  1336,  1337,  1358,  1362,  1367,  1368,   652,  1363,  1363,
      12,   109,   129,   293,   397,   507,   574,   579,   610,   622,
     873,   875,   940,   941,   942,   943,   944,   237,   300,   436,
    1323,  1324,   109,   622,   873,     5,     6,     8,     9,    10,
      11,    12,    15,    20,    23,    25,    26,    27,    28,    29,
      30,    32,    36,    40,    43,    44,    45,    47,    49,    50,
      53,    56,    57,    59,    60,    61,    63,    65,    66,    67,
      68,    69,    70,    72,    73,    75,    76,    77,    78,    79,
      80,    81,    82,    83,    84,    85,    88,    89,    91,    92,
      93,    94,    95,    99,   104,   107,   111,   112,   113,   116,
     121,   122,   128,   129,   131,   137,   142,   143,   144,   145,
     149,   152,   153,   154,   158,   161,   162,   163,   164,   165,
     168,   169,   171,   172,   173,   174,   175,   176,   179,   180,
     181,   182,   183,   186,   187,   189,   190,   191,   192,   193,
     196,   197,   201,   202,   208,   210,   211,   212,   213,   215,
     217,   221,   222,   224,   227,   228,   232,   233,   234,   238,
     239,   240,   243,   248,   249,   250,   255,   259,   260,   262,
     263,   267,   269,   272,   273,   276,   279,   280,   286,   287,
     289,   291,   293,   294,   302,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   323,   324,   325,   327,   328,   329,   330,
     332,   333,   338,   339,   340,   341,   342,   343,   346,   347,
     349,   351,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   364,   365,   368,   369,   370,   371,   372,   376,   377,
     381,   383,   384,   386,   387,   388,   391,   401,   402,   403,
     405,   407,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,   420,   422,   423,   424,   426,   428,   429,   430,
     431,   432,   434,   435,   436,   439,   443,   444,   446,   447,
     450,   451,   452,   453,   454,   456,   457,   459,   460,   461,
     464,   465,   466,   467,   468,   469,   470,   471,   473,   475,
     476,   478,   479,   480,   482,   485,   486,   487,   488,   490,
     492,   493,   494,   495,   496,   499,   500,   504,   505,   506,
     507,   511,   516,   518,   519,   520,   521,   523,   524,   525,
     526,   527,   533,   534,   535,   537,   540,   543,   545,   547,
     548,   549,   550,   551,   552,   555,   556,   559,   560,   561,
     562,   563,   564,   567,   568,   569,   570,   572,   573,   574,
     577,   578,   579,   580,   583,   584,   586,   587,   588,   589,
     595,   596,   600,   601,   602,   605,   606,   608,   609,   611,
     612,   615,   618,   620,   622,   623,   629,   631,   634,   639,
     641,   642,   643,   644,   651,   652,   653,   655,   656,   657,
     658,   661,   664,   665,   667,   668,   669,   670,   671,   673,
     682,   683,   684,   686,   687,   688,   690,   693,   695,   702,
     703,   706,   708,   710,   711,   715,   716,   717,   718,   719,
     720,   721,   722,   724,   725,   726,   727,   728,   729,   730,
     731,   732,   733,   735,   736,   737,   738,   739,   740,   741,
     742,   743,   744,  1177,  1183,  1212,  1213,  1214,  1216,  1217,
    1219,   130,   226,   300,  1300,    88,   435,  1330,   112,   658,
    1338,   572,   576,   772,  1183,  1363,    13,   146,   226,   536,
     537,   539,   540,   541,   558,   789,   790,   791,   826,    61,
      62,   215,   289,   359,   411,   506,   595,   765,  1102,  1107,
    1108,  1177,  1213,  1214,  1216,  1217,  1218,  1226,  1285,  1287,
      35,    36,    61,    72,    98,   100,   110,   164,   169,   172,
     182,   204,   206,   215,   217,   289,   323,   388,   415,   426,
     427,   430,   431,   451,   506,   520,   556,   576,   642,  1103,
    1226,  1258,  1260,  1263,  1265,  1266,  1267,   595,   772,   300,
    1316,  1183,   674,  1149,  1150,  1183,     0,   769,     0,   761,
     395,   613,  1160,  1161,   422,   781,  1176,  1183,   201,  1319,
      19,  1364,   166,   236,   845,   166,   218,   463,   281,   582,
    1178,  1183,  1184,  1183,   574,   845,   576,   874,   874,   939,
     940,   941,   944,   203,  1183,  1325,  1326,  1323,   236,   872,
     872,   572,   639,   772,   773,   625,  1022,   237,  1301,     8,
      29,    35,    37,    54,    55,    62,    69,    87,    97,    98,
     103,   105,   108,   109,   114,   115,   116,   121,   123,   124,
     127,   141,   177,   184,   185,   194,   213,   219,   225,   232,
     236,   247,   251,   278,   297,   326,   331,   346,   348,   352,
     353,   363,   373,   374,   375,   379,   380,   404,   419,   484,
     491,   499,   561,   565,   566,   571,   582,   586,   587,   588,
     589,   598,   599,   600,   604,   607,   622,   626,   627,   628,
     630,   638,   661,   685,   691,   692,   694,   697,   698,   699,
     700,   701,   705,   707,   709,   746,   748,   756,   758,   763,
     765,   782,   796,   797,   798,   799,   803,   806,   807,   808,
     809,   810,   811,   815,   816,   817,   823,   825,  1027,  1029,
    1031,  1032,  1033,  1034,  1057,  1173,  1175,  1177,  1183,  1211,
      85,   300,  1340,  1176,  1332,  1333,   203,   593,  1364,   752,
     792,   793,   796,  1170,  1183,   791,   509,    35,   127,   166,
     510,  1055,  1088,  1184,   200,  1055,   262,   440,  1289,  1290,
    1292,  1294,   765,  1184,   595,  1099,  1106,  1108,   762,  1098,
    1055,    35,   127,  1089,  1090,  1184,   172,   282,   646,  1262,
     758,   109,   173,   206,   427,   497,   576,   597,   622,   639,
    1262,    13,  1184,   283,  1165,  1166,   203,   256,  1264,  1268,
     204,    70,   552,   200,   552,   572,    70,   552,    13,    43,
      95,    99,   260,   339,   403,   527,   569,  1222,  1223,  1224,
     172,   228,   552,   552,  1165,   552,   634,  1262,   294,   163,
     429,   596,   240,   241,   268,  1067,    73,   572,   440,   648,
    1359,  1360,  1361,  1301,  1149,   762,   758,  1151,    48,    13,
     146,   822,  1165,  1183,  1160,   582,  1028,  1179,  1183,  1255,
     764,   166,   779,    57,   376,   376,   455,  1365,   340,   580,
     606,   373,   374,   802,  1183,   105,   837,  1184,  1183,   199,
       7,   964,  1183,   837,   839,   840,   845,    11,   173,   206,
     427,   542,   597,   877,   945,   946,   951,   953,   954,   959,
    1229,   206,   876,   946,   951,   954,   959,  1229,   874,  1176,
    1183,  1325,   764,  1322,   203,   762,   177,  1183,   837,   838,
     872,   872,   765,  1023,  1024,   252,  1302,   758,   758,   806,
     796,  1117,   758,   758,   758,   758,   758,   758,   758,   795,
     795,   758,  1200,   758,   758,   758,   582,   758,   758,   758,
     758,   758,   824,   825,   758,   758,   758,   758,   758,   758,
     758,   796,   758,   758,  1115,  1116,  1173,  1183,   758,   758,
     758,   758,   758,   796,  1200,   758,   758,   758,   758,   758,
     758,   758,  1200,   582,   758,   758,   758,   582,   758,   758,
     758,    37,   225,   582,   758,   795,  1200,  1200,   758,   758,
     758,   758,   758,   758,   758,   758,   758,   758,   758,   758,
     758,   758,   758,   806,   806,   806,   780,   782,   796,   765,
    1058,  1184,    18,    19,   394,   397,   800,   801,   166,   167,
     207,   220,   261,   274,   301,   366,   804,    33,   147,   256,
     282,   352,   449,   513,   514,   526,   746,   748,   750,   751,
     752,   753,   754,   755,   802,   806,    71,   396,  1179,   758,
     764,   289,  1339,    21,  1142,  1143,   762,   765,  1020,  1178,
     494,  1366,  1365,   203,   762,   785,   786,   794,  1142,   764,
     796,    71,  1092,   837,   411,   582,  1288,   280,   387,   654,
     762,  1293,   762,  1291,   215,   289,   506,  1105,  1055,  1289,
    1098,  1055,  1100,  1101,  1102,  1107,    13,    35,   127,   385,
     491,   723,   796,  1109,   256,  1269,  1179,   796,   752,   845,
    1183,  1242,  1242,  1242,   845,  1176,  1242,   837,  1176,   294,
     357,   552,  1259,  1259,   297,   380,   604,  1029,  1167,  1168,
    1183,  1262,  1183,  1242,  1262,   837,  1264,  1242,  1262,   259,
     570,   187,   200,  1225,   762,  1269,   200,  1221,  1264,  1262,
    1262,  1264,  1268,  1268,  1264,   387,   654,    89,   762,   734,
     758,   788,   824,  1120,  1121,  1129,  1130,  1131,  1132,  1133,
    1134,  1176,  1150,  1152,  1183,    21,   796,  1162,  1171,   783,
    1165,  1183,  1184,    57,   455,   177,   127,   841,   842,   843,
     850,   851,   852,  1097,   795,   765,     7,   112,   111,   972,
     624,   968,     7,   234,   472,   762,   830,  1176,   206,   845,
    1183,  1242,  1242,   500,  1242,   639,   946,  1143,   764,   625,
     752,  1183,   788,  1326,   762,   857,  1176,   857,  1184,   762,
    1176,   796,    13,   146,  1111,  1144,   645,  1119,   796,   796,
    1114,  1114,   759,   796,   146,  1111,  1144,   759,   380,   759,
     759,   796,   796,   796,   796,  1173,   796,   782,   117,   118,
     119,   120,   121,   229,   230,   231,   232,   342,   344,   345,
     346,   353,   434,   498,   499,   582,   643,   660,   661,  1139,
    1140,   113,   116,   586,   589,  1141,   146,   818,   796,   796,
     796,   796,  1139,   796,  1116,    10,   762,   764,   146,  1111,
     796,   146,  1111,   796,   796,   799,   796,   796,   796,   796,
     796,   146,  1111,   796,  1140,  1140,   796,    46,   275,   594,
     796,   799,   759,  1174,  1175,  1183,   759,   796,  1114,   759,
     759,   796,   796,   796,   796,   796,   806,   759,   759,   759,
     759,   759,   759,   762,   215,   289,   506,  1104,   510,   796,
     796,   185,   379,   599,   615,   802,    13,    20,   798,   805,
     799,   799,   758,   824,   806,   799,   799,   799,   799,   282,
     251,   799,   251,   799,   799,   799,   799,   799,   799,   799,
      33,   256,   282,   449,  1184,   806,   796,   812,   813,   814,
    1183,   242,  1183,   300,   440,   654,  1334,  1333,  1184,  1183,
     151,   787,   788,   793,   646,  1145,  1146,  1178,  1183,   752,
    1183,  1091,  1184,  1055,   758,   440,   461,   504,  1295,  1292,
    1290,   764,   764,   764,  1108,   796,  1109,   762,  1106,  1178,
     203,  1270,   759,  1183,   764,  1183,   384,   762,   625,   282,
     646,  1261,   435,  1165,  1224,  1270,    60,  1262,  1262,  1176,
    1176,  1262,   523,  1361,   824,   788,  1121,  1130,  1131,  1132,
    1133,   509,   762,  1143,   101,   204,   244,   265,   278,   362,
     484,   558,  1122,  1123,  1124,   408,  1127,  1128,   759,   762,
     824,    22,   133,  1163,  1164,   762,   843,    71,    84,  1226,
    1184,   608,   976,   653,  1178,   293,    26,    77,    84,   183,
     190,   243,   330,   371,   377,   641,   969,   970,   971,   977,
     978,   979,   980,   983,   984,   985,   986,   987,   988,  1263,
     972,    48,   648,    65,   263,   372,   544,   562,   655,   828,
     829,   839,   648,   831,    21,    27,    28,    63,    77,    83,
      84,    88,   112,   131,   164,   237,   241,   248,   269,   282,
     329,   347,   402,   408,   411,   463,   490,   549,   550,   551,
     556,   574,   577,   613,   737,   758,   780,   782,   844,   846,
     848,   850,   851,   990,   991,   992,   993,   994,  1097,  1298,
    1183,  1242,   480,   758,   960,   129,   255,     9,    31,   923,
    1176,  1127,  1183,   788,   764,  1322,  1145,   837,    52,   477,
     762,   774,  1024,  1127,   762,  1111,   759,   796,   796,   156,
     645,  1118,    21,   759,   762,   759,   762,  1114,   759,   752,
     759,   762,   762,   759,   759,   759,   759,   203,   762,   762,
    1114,   759,   762,   762,   762,   746,   762,   759,  1173,  1183,
    1111,   759,   759,  1111,   759,   762,   759,   256,   762,   762,
     759,   762,   203,   762,  1111,   759,   759,   762,   762,   762,
     759,   203,   796,   203,   796,   203,   796,   203,   759,   762,
     759,   759,   759,   704,  1040,  1040,   759,   762,  1035,   759,
    1035,   762,   759,  1040,  1040,  1040,  1114,   764,   764,   764,
    1184,   796,   185,   379,   599,   615,   824,    19,   796,  1113,
     171,  1156,   799,   796,   796,   799,   758,   824,   806,   799,
     759,   762,   758,   764,   582,  1180,   654,   289,   796,   218,
    1157,   764,   411,  1288,  1288,    78,   605,   440,  1055,  1101,
     123,   194,   297,   380,   604,  1273,  1165,   169,   642,  1183,
    1168,  1168,   838,  1178,   796,   380,  1165,  1178,  1220,  1264,
    1264,  1143,   762,   759,   759,   759,   759,   759,  1174,  1314,
    1315,  1120,  1151,   265,   398,  1126,   265,  1126,   244,   278,
     484,  1125,  1126,  1129,  1120,  1120,   758,  1143,  1183,  1171,
    1055,  1056,  1056,  1056,  1178,   446,   609,   973,   974,   975,
     977,   981,   982,   983,   984,   985,   987,  1184,   218,  1056,
    1056,  1056,  1056,  1056,  1056,  1056,  1056,   762,   847,   164,
     965,   966,   967,   985,   582,  1181,  1184,   582,   582,   582,
      19,  1296,   327,   328,   332,   333,   832,   833,     5,   411,
     834,   835,   836,  1298,  1056,  1056,  1056,  1056,  1056,  1056,
    1056,   142,  1056,  1056,   142,  1056,  1056,  1176,  1056,  1056,
    1056,    48,  1056,  1056,  1056,  1056,  1056,   145,   339,  1056,
    1056,  1056,  1056,    90,   205,   241,   270,   282,   528,   858,
     859,   860,   862,   864,  1065,  1183,   993,   847,   991,   992,
     480,  1230,   125,   253,   254,   442,   559,   855,   955,   758,
     132,   247,   619,   924,  1151,  1145,  1145,  1176,   509,   630,
     631,   758,  1298,  1303,  1304,  1305,  1306,   251,   796,   759,
    1039,  1040,   585,   796,   796,   161,    34,    35,    62,   113,
     116,   125,   253,   267,   361,   364,   518,   589,   617,  1110,
    1190,   796,  1110,   759,  1039,   759,   251,   251,   796,   796,
     796,   395,   820,   796,   796,   796,   796,   796,   759,  1039,
     759,  1039,   796,   796,   796,  1114,   251,   796,   796,   796,
     759,  1039,   796,   796,   796,   796,   203,   796,   203,   796,
     203,   796,   806,   758,  1041,  1042,  1043,  1183,   237,   708,
    1037,  1029,  1032,   759,  1037,   759,   806,  1040,   759,   764,
    1087,   798,   759,   759,   762,   806,  1139,  1139,    19,   796,
    1113,  1156,   814,  1112,  1114,  1183,   844,  1341,    48,   223,
    1147,   752,   758,   759,  1109,  1221,  1146,  1262,  1151,  1120,
    1055,   762,  1145,   265,   265,  1126,  1126,   265,   265,   385,
     625,   385,   625,  1137,  1138,  1183,  1135,  1136,  1091,  1178,
    1088,  1056,  1056,   847,   391,  1183,   123,   194,   297,   380,
     604,   989,  1177,  1274,  1275,  1276,  1178,  1178,   989,   989,
     989,   989,   297,   380,   604,  1272,  1275,   971,  1056,   847,
      21,    48,   828,   123,   194,   297,   380,   604,  1271,  1271,
    1271,  1271,   833,   292,   616,   180,   472,   718,   719,   836,
    1273,  1271,  1271,  1178,  1178,  1178,  1178,  1056,  1271,  1184,
    1056,   192,   273,   376,   854,  1271,  1273,  1273,   127,   849,
    1271,   284,   287,   437,   995,   996,  1178,    80,    82,   127,
     154,   193,   447,   853,   849,   849,   127,  1271,  1183,  1271,
     758,   379,  1184,  1086,  1183,  1065,  1066,  1176,  1066,   759,
     762,    64,   199,   425,   614,   863,  1064,  1078,  1086,    34,
      35,    40,    42,    44,    45,    62,   113,   116,   125,   148,
     165,   193,   195,   211,   212,   253,   254,   267,   286,   295,
     296,   298,   335,   336,   337,   354,   355,   356,   361,   364,
     382,   383,   416,   417,   442,   505,   509,   522,   583,   586,
     589,   590,   591,   592,   632,   633,   661,  1185,  1188,  1189,
    1190,  1191,  1192,  1193,  1194,  1196,   848,   855,   385,   525,
    1183,  1247,  1248,  1249,   961,   385,    21,  1160,  1314,   759,
    1169,  1170,  1174,  1183,  1327,   385,  1312,  1312,   758,  1307,
    1308,   796,   759,  1039,   796,   585,   758,  1201,  1202,  1202,
     758,  1199,   758,  1197,  1198,  1201,    62,   253,  1199,   253,
     759,  1202,   759,  1039,  1039,   796,   796,   759,   759,   759,
      48,   503,   819,   762,   762,   759,   762,   759,  1039,  1039,
     759,   759,   759,   759,   796,   759,   200,   759,   759,   762,
    1039,   759,   762,   762,   759,   796,   759,   796,   759,   796,
     759,   759,  1042,  1044,  1045,   702,   702,  1040,   762,  1036,
    1036,  1037,  1040,  1037,   759,  1183,   796,   798,   759,   759,
     759,   252,   796,  1158,  1172,   796,   712,  1153,  1288,   759,
     127,   796,  1311,  1315,  1160,   265,   265,   796,   758,   796,
     758,   759,   762,   989,   989,   975,   758,  1184,   967,  1178,
    1182,  1181,   127,   251,   368,   104,   127,  1272,   251,  1178,
    1178,    73,   758,    73,   758,   409,   998,   222,   270,   856,
     857,  1086,   759,  1086,   990,   859,   758,   270,   270,  1066,
     374,   865,   866,   867,  1078,   758,   625,  1201,  1201,  1202,
      23,    35,    49,   611,   636,  1093,  1094,  1095,  1201,  1226,
    1199,   421,  1195,   758,  1095,    62,   632,  1095,  1191,  1095,
      62,   633,   633,   636,   758,  1202,  1199,  1199,  1095,  1201,
    1202,   448,   861,  1060,    27,    71,    75,    77,   127,   160,
     374,   379,   385,   425,   505,   556,   614,   720,   802,   864,
     867,  1092,  1204,  1205,  1206,  1297,    35,  1096,  1201,  1201,
    1201,  1202,   758,  1198,  1203,  1197,   525,   495,  1178,  1188,
     759,   762,   245,   256,   400,  1250,  1251,  1252,  1253,  1176,
     947,  1298,   283,  1321,  1312,  1298,  1305,   764,   759,   762,
     153,  1309,  1310,  1311,   762,  1139,   796,   123,   297,   380,
     604,   380,   380,  1139,  1139,   821,  1171,  1028,   759,   796,
     796,  1114,  1139,   796,   796,   796,   796,   759,   759,   759,
     759,   408,  1046,   796,  1040,  1040,   203,  1038,   576,   650,
     762,  1159,  1042,  1154,  1155,   759,  1321,  1137,  1137,  1183,
     109,   227,   401,   411,   418,   524,   622,  1227,  1228,  1272,
     127,   735,   127,  1272,   758,   799,   758,   799,  1272,   564,
     999,   758,    12,   997,   759,   758,   758,   796,  1086,   742,
     758,   758,  1083,  1084,  1085,  1183,    47,   222,   493,  1081,
      35,    23,   611,  1226,    35,  1095,  1088,  1028,  1059,  1095,
     636,  1059,  1095,   518,   617,   662,   868,   869,   870,  1176,
    1091,   127,   154,   193,  1208,  1178,   116,   586,   589,   746,
     748,   758,  1030,  1031,  1210,  1211,   138,   139,   140,  1207,
     619,   127,   127,   145,   339,  1209,   270,  1274,   379,   736,
     863,   209,  1186,    71,  1206,   270,  1096,  1095,  1096,   868,
     380,   868,   868,  1178,    25,   174,  1231,  1092,   956,  1249,
     759,   762,  1183,   200,   648,   948,  1168,  1183,  1298,  1305,
    1169,   270,   759,   762,  1308,   759,   759,   759,   759,   759,
     759,   762,   759,   759,   762,  1039,   759,   762,   759,   759,
     759,   759,   759,   759,    48,   395,  1047,   192,   273,  1037,
    1176,  1172,    21,   762,   759,   759,  1178,  1178,  1178,  1178,
    1271,  1178,  1178,   759,   762,   121,   121,  1001,  1183,   759,
    1001,   759,    48,   758,  1003,   799,   166,   758,  1084,  1084,
     759,   758,  1084,   796,   759,   762,   758,  1163,  1088,  1096,
     759,   762,   759,   870,   758,   582,  1032,  1032,   796,    21,
    1211,   631,    15,    21,  1091,   796,   796,   385,  1236,  1237,
     480,   962,  1252,  1188,   155,    53,    64,   289,   619,  1311,
     380,  1171,   796,  1158,    48,   437,   489,   696,  1048,  1054,
    1040,  1127,  1043,  1155,  1228,   759,   762,   759,   996,   408,
    1004,  1005,   759,  1272,  1000,  1001,   759,   759,  1082,  1083,
     759,   759,    77,   269,   602,   625,   670,   671,  1074,  1075,
    1076,  1077,  1079,  1080,  1085,   380,  1095,  1028,  1095,  1082,
     759,  1183,   758,  1139,    81,   143,   158,  1233,  1188,  1243,
    1092,   491,    64,   392,    64,  1314,   759,   759,  1162,    33,
     104,   251,   711,  1029,  1032,  1049,  1050,  1051,  1226,  1342,
    1183,   222,   270,  1183,   759,   762,   759,   648,  1068,  1069,
    1070,  1077,  1071,  1072,  1073,  1077,   759,   762,  1074,  1163,
    1178,  1056,  1081,  1081,  1076,   759,   759,   796,  1232,   374,
     423,   385,    77,  1238,  1092,    77,    94,   136,   272,   350,
     376,   438,   542,   802,   963,  1244,  1245,  1246,   197,   420,
     949,   950,   392,   392,   251,   711,  1029,  1032,  1050,  1052,
     491,   796,   706,   706,   706,   693,  1053,  1088,   489,  1349,
     758,   997,   630,  1006,  1005,   405,  1070,  1073,  1060,  1083,
    1271,  1163,   326,  1061,   759,   547,  1234,   423,   520,  1178,
     149,   957,  1178,   542,   542,   542,   542,   542,   500,   136,
      54,    68,   188,   236,   264,   277,   388,   481,   884,   885,
     888,   909,   911,   914,   915,   916,   925,   927,   928,   929,
     931,   932,   933,   934,   935,   936,   938,  1177,  1215,  1216,
    1217,  1219,  1284,  1184,   952,   796,   695,   695,   695,    19,
    1139,   104,   218,   376,   710,   234,    73,  1343,   799,   758,
     256,   279,    77,   112,   241,   329,   347,   371,   574,  1016,
    1017,  1018,  1263,  1177,   204,   407,   519,   385,  1062,   557,
     640,  1187,   796,   162,  1235,  1239,  1240,  1243,   112,   112,
     129,   255,   886,   889,  1183,   203,   370,   910,   926,  1284,
    1284,  1183,   930,    32,   899,   771,   299,   462,   647,   918,
     766,   909,  1139,  1052,   706,   491,   703,    48,   159,   170,
     393,   581,  1344,  1345,   285,  1346,   759,  1001,   758,  1008,
    1010,   584,  1056,   142,   142,  1056,  1056,  1056,  1056,   758,
    1013,  1018,   164,   132,   619,  1204,   796,   884,   911,   914,
     916,   925,   927,   929,   931,   933,   934,   935,   936,   938,
    1241,   958,   796,   645,   891,   895,   203,  1183,   879,   880,
     796,   900,   908,   909,   908,   919,   912,   917,   695,  1028,
      48,    48,   159,    48,  1345,   546,   581,  1347,  1348,   237,
    1350,   563,  1002,   759,   334,   758,   799,  1009,  1010,  1011,
    1012,   334,   758,  1007,  1010,  1178,  1056,  1056,  1274,  1274,
    1272,  1183,   564,  1014,  1015,  1056,    52,   376,   477,   509,
    1063,  1063,   909,   887,   896,   156,   895,   898,   252,   161,
     796,   901,   161,   909,   761,   618,   796,   918,   899,  1028,
    1028,    48,  1028,    48,    48,  1348,   380,   758,  1352,  1272,
    1002,   799,   759,   762,   759,   762,  1178,  1178,  1184,   759,
     762,  1184,     6,   127,   379,   385,   385,   645,   890,   892,
     796,   908,   161,   937,   236,   881,   126,   904,   907,   299,
     761,   921,   920,   913,  1284,   913,  1028,  1028,  1028,   285,
     489,  1351,   759,   765,  1174,  1353,  1354,   509,  1355,  1010,
    1012,  1016,  1015,   619,   132,   893,   892,   898,   897,    54,
     878,  1183,   585,    96,   178,   902,  1183,  1277,   761,   161,
     909,   796,   149,  1184,   759,   762,  1174,  1356,  1357,  1063,
    1063,   796,   161,   585,   762,   908,   762,  1188,    86,   106,
     221,   761,   922,   908,  1354,  1055,   762,   894,    54,   908,
    1183,   882,  1183,  1092,   200,   200,   200,   161,   161,  1311,
    1357,   585,   156,   157,   883,   127,   903,   531,  1271,  1280,
    1281,   906,   905,   462,   647,   908,   908,   879,   796,   631,
    1283,   779,   530,   532,   802,  1183,  1278,  1279,  1280,  1282,
    1179,   202,   762,   909,  1279
  };

  const short
  Parser::yyr1_[] =
  {
       0,   767,   768,   769,   769,   770,   770,   770,   771,   771,
     771,   771,   771,   771,   771,   771,   771,   771,   771,   771,
     771,   771,   771,   771,   771,   771,   771,   771,   771,   771,
     771,   771,   771,   771,   771,   772,   772,   773,   773,   774,
     774,   774,   775,   776,   777,   778,   779,   780,   780,   781,
     781,   782,   782,   783,   784,   785,   785,   786,   787,   787,
     788,   788,   789,   789,   790,   790,   791,   791,   792,   792,
     792,   793,   793,   794,   794,   794,   795,   795,   796,   796,
     796,   796,   796,   796,   796,   796,   796,   796,   797,   797,
     797,   797,   797,   798,   798,   798,   798,   798,   798,   798,
     798,   798,   798,   798,   798,   798,   798,   799,   799,   799,
     799,   799,   799,   799,   799,   799,   799,   799,   799,   799,
     799,   799,   800,   800,   801,   801,   802,   802,   803,   803,
     804,   804,   804,   804,   804,   804,   804,   805,   805,   806,
     806,   806,   806,   806,   806,   806,   806,   806,   806,   806,
     806,   806,   806,   806,   806,   806,   806,   806,   806,   806,
     806,   806,   806,   806,   806,   806,   806,   806,   806,   807,
     808,   808,   808,   808,   808,   808,   808,   808,   808,   808,
     808,   808,   808,   808,   808,   808,   808,   808,   808,   808,
     808,   808,   808,   808,   808,   808,   808,   808,   808,   808,
     809,   809,   809,   809,   809,   809,   809,   809,   809,   809,
     809,   809,   809,   809,   809,   809,   809,   809,   809,   809,
     809,   809,   809,   809,   810,   810,   811,   811,   811,   812,
     812,   813,   813,   814,   815,   815,   816,   817,   817,   817,
     817,   817,   817,   817,   817,   817,   817,   817,   817,   818,
     818,   819,   819,   820,   820,   821,   821,   822,   822,   822,
     823,   824,   825,   826,   826,   826,   826,   826,   826,   826,
     826,   827,   827,   827,   827,   827,   827,   827,   828,   828,
     829,   829,   829,   830,   830,   830,   830,   830,   831,   831,
     832,   832,   833,   833,   833,   833,   834,   834,   835,   835,
     836,   836,   836,   836,   836,   836,   836,   836,   836,   836,
     836,   836,   836,   837,   837,   837,   838,   838,   839,   839,
     839,   839,   839,   840,   840,   841,   841,   842,   842,   843,
     843,   843,   844,   844,   845,   845,   846,   846,   847,   847,
     848,   848,   848,   848,   848,   848,   848,   848,   848,   848,
     848,   848,   848,   848,   848,   848,   848,   848,   848,   848,
     848,   848,   848,   848,   848,   848,   848,   848,   848,   848,
     848,   849,   849,   850,   851,   852,   853,   853,   853,   853,
     853,   853,   854,   854,   854,   855,   855,   855,   855,   855,
     856,   856,   857,   857,   858,   858,   859,   859,   860,   861,
     861,   862,   862,   862,   862,   862,   862,   863,   864,   864,
     865,   865,   866,   866,   867,   868,   868,   869,   869,   870,
     870,   870,   871,   871,   871,   871,   872,   872,   873,   873,
     874,   875,   875,   875,   876,   876,   876,   876,   876,   877,
     877,   877,   877,   877,   877,   878,   878,   880,   881,   882,
     879,   883,   883,   883,   884,   884,   886,   887,   885,   889,
     888,   890,   890,   891,   891,   893,   894,   892,   896,   897,
     895,   898,   898,   900,   899,   901,   901,   902,   902,   903,
     903,   904,   904,   905,   904,   906,   904,   907,   907,   908,
     908,   909,   909,   909,   909,   909,   909,   909,   909,   909,
     909,   909,   909,   909,   910,   910,   910,   912,   911,   913,
     913,   915,   914,   917,   916,   918,   919,   920,   918,   921,
     922,   918,   923,   923,   924,   924,   924,   926,   925,   928,
     927,   930,   929,   932,   931,   933,   934,   935,   937,   936,
     938,   939,   939,   940,   941,   942,   942,   942,   943,   944,
     944,   944,   945,   945,   945,   946,   947,   948,   948,   948,
     948,   949,   949,   950,   950,   952,   951,   953,   953,   955,
     956,   957,   958,   954,   960,   961,   962,   963,   959,   964,
     964,   965,   965,   966,   966,   967,   968,   968,   969,   969,
     970,   970,   971,   971,   971,   971,   971,   971,   971,   971,
     971,   971,   972,   973,   973,   974,   974,   975,   975,   975,
     975,   975,   975,   975,   976,   977,   978,   979,   980,   981,
     982,   983,   984,   985,   986,   987,   987,   988,   989,   989,
     990,   990,   991,   991,   992,   992,   992,   993,   993,   994,
     995,   995,   995,   995,   995,   995,   996,   996,   997,   997,
     998,   998,   999,   999,   999,  1000,  1000,  1001,  1001,  1002,
    1002,  1003,  1003,  1004,  1004,  1005,  1006,  1006,  1006,  1007,
    1007,  1008,  1008,  1009,  1009,  1010,  1011,  1011,  1012,  1012,
    1013,  1013,  1014,  1014,  1015,  1016,  1016,  1017,  1017,  1018,
    1018,  1018,  1018,  1018,  1018,  1018,  1018,  1019,  1020,  1020,
    1021,  1022,  1022,  1023,  1023,  1024,  1025,  1026,  1026,  1027,
    1027,  1027,  1027,  1028,  1029,  1030,  1030,  1030,  1031,  1031,
    1031,  1031,  1031,  1031,  1031,  1031,  1031,  1031,  1032,  1032,
    1032,  1032,  1032,  1032,  1033,  1033,  1033,  1034,  1034,  1034,
    1034,  1034,  1034,  1034,  1034,  1034,  1034,  1034,  1035,  1035,
    1035,  1036,  1036,  1037,  1037,  1037,  1038,  1038,  1038,  1039,
    1039,  1040,  1041,  1041,  1042,  1043,  1044,  1045,  1045,  1046,
    1046,  1047,  1047,  1048,  1048,  1049,  1049,  1050,  1050,  1050,
    1050,  1050,  1051,  1052,  1052,  1052,  1052,  1052,  1053,  1053,
    1053,  1053,  1053,  1054,  1054,  1054,  1055,  1055,  1056,  1056,
    1057,  1058,  1058,  1058,  1059,  1059,  1060,  1061,  1061,  1061,
    1061,  1062,  1062,  1062,  1062,  1062,  1063,  1063,  1063,  1063,
    1063,  1064,  1064,  1065,  1065,  1066,  1066,  1067,  1067,  1067,
    1068,  1068,  1069,  1069,  1070,  1070,  1071,  1071,  1072,  1072,
    1073,  1074,  1074,  1075,  1075,  1076,  1076,  1077,  1077,  1077,
    1078,  1078,  1079,  1079,  1080,  1080,  1081,  1081,  1081,  1082,
    1082,  1083,  1083,  1084,  1084,  1085,  1085,  1086,  1086,  1087,
    1087,  1088,  1088,  1089,  1089,  1090,  1090,  1091,  1092,  1092,
    1093,  1093,  1093,  1094,  1094,  1094,  1095,  1095,  1095,  1095,
    1095,  1095,  1095,  1096,  1096,  1097,  1097,  1098,  1098,  1099,
    1099,  1100,  1100,  1101,  1101,  1102,  1102,  1102,  1103,  1103,
    1103,  1103,  1104,  1104,  1104,  1104,  1105,  1105,  1105,  1105,
    1106,  1107,  1107,  1107,  1107,  1107,  1107,  1107,  1108,  1109,
    1109,  1109,  1109,  1109,  1109,  1109,  1110,  1110,  1110,  1110,
    1110,  1110,  1110,  1110,  1110,  1110,  1110,  1110,  1110,  1110,
    1111,  1112,  1112,  1113,  1113,  1114,  1114,  1115,  1115,  1116,
    1116,  1117,  1117,  1118,  1118,  1119,  1119,  1120,  1120,  1121,
    1121,  1121,  1121,  1121,  1121,  1122,  1122,  1122,  1123,  1123,
    1123,  1123,  1124,  1124,  1124,  1125,  1125,  1126,  1126,  1127,
    1127,  1128,  1129,  1129,  1129,  1129,  1129,  1130,  1130,  1131,
    1131,  1132,  1133,  1133,  1134,  1134,  1135,  1136,  1137,  1138,
    1138,  1139,  1139,  1139,  1139,  1139,  1139,  1139,  1139,  1139,
    1139,  1139,  1139,  1139,  1140,  1140,  1140,  1140,  1140,  1140,
    1140,  1140,  1140,  1141,  1141,  1141,  1141,  1142,  1142,  1143,
    1143,  1144,  1144,  1145,  1146,  1146,  1147,  1147,  1148,  1148,
    1149,  1149,  1150,  1151,  1151,  1152,  1152,  1153,  1153,  1154,
    1154,  1155,  1156,  1156,  1157,  1157,  1158,  1158,  1159,  1159,
    1160,  1160,  1161,  1162,  1162,  1163,  1163,  1164,  1164,  1165,
    1165,  1166,  1167,  1167,  1167,  1168,  1168,  1168,  1168,  1168,
    1169,  1169,  1170,  1170,  1171,  1172,  1173,  1173,  1174,  1174,
    1175,  1175,  1176,  1176,  1177,  1178,  1179,  1180,  1181,  1182,
    1183,  1183,  1184,  1184,  1184,  1185,  1185,  1186,  1186,  1187,
    1187,  1187,  1188,  1188,  1188,  1188,  1188,  1188,  1188,  1188,
    1188,  1188,  1188,  1188,  1188,  1188,  1188,  1188,  1188,  1188,
    1188,  1188,  1188,  1188,  1188,  1188,  1188,  1188,  1188,  1188,
    1188,  1188,  1188,  1188,  1188,  1188,  1188,  1188,  1188,  1189,
    1189,  1189,  1189,  1189,  1189,  1189,  1189,  1190,  1190,  1191,
    1191,  1192,  1192,  1192,  1192,  1192,  1193,  1193,  1193,  1193,
    1193,  1193,  1194,  1194,  1195,  1195,  1196,  1196,  1196,  1196,
    1197,  1197,  1197,  1198,  1199,  1199,  1200,  1200,  1200,  1201,
    1201,  1201,  1201,  1202,  1202,  1203,  1203,  1204,  1204,  1205,
    1205,  1206,  1206,  1206,  1206,  1206,  1206,  1206,  1206,  1206,
    1206,  1206,  1206,  1206,  1206,  1206,  1206,  1206,  1206,  1206,
    1207,  1207,  1207,  1208,  1208,  1208,  1209,  1209,  1209,  1210,
    1210,  1211,  1212,  1212,  1212,  1212,  1212,  1213,  1213,  1213,
    1214,  1214,  1214,  1214,  1214,  1214,  1214,  1214,  1214,  1214,
    1214,  1214,  1214,  1214,  1214,  1214,  1214,  1214,  1214,  1214,
    1214,  1214,  1214,  1214,  1214,  1214,  1214,  1214,  1214,  1214,
    1214,  1214,  1214,  1214,  1214,  1215,  1215,  1215,  1216,  1216,
    1216,  1216,  1216,  1216,  1216,  1216,  1216,  1217,  1217,  1217,
    1217,  1217,  1217,  1217,  1217,  1217,  1217,  1217,  1217,  1217,
    1217,  1217,  1217,  1217,  1217,  1217,  1217,  1217,  1217,  1217,
    1217,  1217,  1217,  1217,  1217,  1217,  1217,  1217,  1217,  1217,
    1217,  1217,  1217,  1217,  1217,  1217,  1217,  1217,  1217,  1217,
    1217,  1217,  1217,  1217,  1217,  1217,  1217,  1217,  1217,  1217,
    1217,  1217,  1217,  1217,  1217,  1217,  1217,  1217,  1217,  1217,
    1217,  1217,  1217,  1217,  1217,  1217,  1217,  1217,  1217,  1217,
    1217,  1217,  1217,  1217,  1217,  1217,  1217,  1217,  1217,  1217,
    1217,  1217,  1217,  1217,  1217,  1217,  1217,  1217,  1217,  1217,
    1217,  1217,  1217,  1217,  1217,  1217,  1217,  1217,  1217,  1217,
    1217,  1217,  1217,  1217,  1217,  1217,  1217,  1217,  1217,  1217,
    1217,  1217,  1217,  1217,  1217,  1217,  1217,  1217,  1217,  1217,
    1217,  1217,  1217,  1217,  1217,  1217,  1217,  1217,  1217,  1217,
    1217,  1217,  1217,  1217,  1217,  1217,  1217,  1217,  1217,  1217,
    1217,  1217,  1217,  1217,  1217,  1217,  1217,  1217,  1217,  1217,
    1217,  1217,  1217,  1217,  1217,  1217,  1217,  1217,  1217,  1217,
    1217,  1217,  1217,  1217,  1217,  1217,  1217,  1217,  1217,  1217,
    1217,  1217,  1217,  1217,  1217,  1217,  1217,  1217,  1217,  1217,
    1217,  1217,  1217,  1217,  1217,  1217,  1217,  1217,  1217,  1217,
    1217,  1217,  1217,  1217,  1217,  1217,  1217,  1217,  1217,  1217,
    1217,  1217,  1217,  1217,  1217,  1217,  1217,  1217,  1217,  1217,
    1217,  1217,  1217,  1217,  1217,  1217,  1217,  1217,  1217,  1217,
    1217,  1217,  1217,  1217,  1217,  1217,  1217,  1217,  1217,  1217,
    1217,  1217,  1217,  1217,  1217,  1217,  1217,  1217,  1217,  1217,
    1217,  1217,  1217,  1217,  1217,  1217,  1217,  1217,  1217,  1217,
    1217,  1217,  1217,  1217,  1217,  1217,  1217,  1217,  1217,  1217,
    1217,  1217,  1217,  1217,  1217,  1217,  1217,  1217,  1217,  1217,
    1217,  1217,  1217,  1217,  1217,  1217,  1217,  1217,  1217,  1217,
    1217,  1217,  1217,  1217,  1217,  1217,  1217,  1217,  1217,  1217,
    1217,  1217,  1217,  1217,  1217,  1217,  1217,  1217,  1217,  1217,
    1217,  1217,  1217,  1217,  1217,  1217,  1217,  1217,  1217,  1217,
    1217,  1217,  1217,  1217,  1217,  1217,  1217,  1217,  1217,  1217,
    1217,  1217,  1217,  1217,  1217,  1217,  1217,  1217,  1217,  1217,
    1217,  1217,  1217,  1217,  1217,  1217,  1217,  1217,  1217,  1217,
    1217,  1217,  1217,  1217,  1217,  1217,  1217,  1217,  1217,  1217,
    1217,  1217,  1217,  1217,  1217,  1217,  1217,  1217,  1217,  1217,
    1217,  1217,  1218,  1218,  1218,  1218,  1219,  1219,  1219,  1219,
    1219,  1220,  1221,  1221,  1222,  1222,  1223,  1223,  1224,  1224,
    1224,  1224,  1224,  1224,  1224,  1224,  1224,  1225,  1225,  1226,
    1226,  1227,  1227,  1228,  1228,  1228,  1228,  1228,  1228,  1228,
    1230,  1229,  1232,  1231,  1231,  1233,  1233,  1233,  1233,  1234,
    1234,  1235,  1235,  1236,  1236,  1237,  1237,  1238,  1238,  1240,
    1239,  1241,  1241,  1241,  1241,  1241,  1241,  1241,  1241,  1241,
    1241,  1241,  1241,  1241,  1242,  1242,  1243,  1243,  1244,  1244,
    1244,  1244,  1244,  1244,  1244,  1245,  1245,  1245,  1246,  1246,
    1247,  1247,  1248,  1248,  1249,  1250,  1250,  1251,  1251,  1252,
    1253,  1253,  1253,  1253,  1254,  1254,  1255,  1255,  1255,  1256,
    1257,  1258,  1258,  1258,  1258,  1258,  1258,  1258,  1258,  1258,
    1258,  1258,  1258,  1258,  1258,  1258,  1258,  1258,  1258,  1258,
    1258,  1258,  1258,  1258,  1258,  1258,  1258,  1258,  1258,  1258,
    1258,  1258,  1258,  1258,  1258,  1258,  1258,  1258,  1258,  1258,
    1258,  1258,  1258,  1258,  1258,  1258,  1258,  1259,  1259,  1259,
    1260,  1260,  1261,  1261,  1261,  1262,  1262,  1262,  1263,  1263,
    1264,  1264,  1265,  1265,  1266,  1266,  1267,  1267,  1267,  1267,
    1268,  1268,  1269,  1269,  1270,  1270,  1271,  1271,  1271,  1271,
    1271,  1272,  1272,  1272,  1272,  1273,  1273,  1273,  1273,  1273,
    1274,  1274,  1274,  1274,  1275,  1276,  1276,  1277,  1277,  1278,
    1278,  1279,  1280,  1280,  1281,  1282,  1282,  1282,  1282,  1282,
    1283,  1283,  1284,  1284,  1285,  1285,  1286,  1287,  1287,  1287,
    1287,  1287,  1287,  1287,  1288,  1289,  1289,  1290,  1291,  1291,
    1292,  1293,  1293,  1294,  1294,  1295,  1295,  1295,  1295,  1296,
    1296,  1297,  1297,  1298,  1298,  1299,  1299,  1299,  1300,  1300,
    1300,  1300,  1301,  1301,  1302,  1302,  1303,  1303,  1303,  1304,
    1304,  1304,  1305,  1306,  1306,  1307,  1307,  1308,  1309,  1309,
    1310,  1310,  1311,  1311,  1312,  1312,  1313,  1314,  1314,  1315,
    1316,  1316,  1317,  1318,  1318,  1318,  1319,  1319,  1320,  1320,
    1320,  1321,  1321,  1322,  1322,  1323,  1323,  1324,  1324,  1324,
    1325,  1325,  1326,  1326,  1327,  1327,  1328,  1329,  1330,  1330,
    1330,  1331,   772,   772,  1332,  1332,  1333,  1334,  1334,  1334,
    1334,  1335,  1336,  1337,  1338,  1338,  1339,  1339,  1340,  1340,
    1340,  1341,  1341,   844,   844,  1342,  1342,  1343,  1343,  1344,
    1344,  1345,  1345,  1345,  1345,  1346,  1346,  1347,  1347,  1348,
    1348,  1349,  1349,  1350,  1350,  1351,  1351,  1352,  1352,  1352,
    1353,  1353,  1354,  1354,  1355,  1355,  1356,  1356,  1357,  1358,
    1359,  1359,  1360,  1360,  1361,  1361,  1361,  1362,  1363,  1363,
    1364,  1364,  1364,  1365,  1365,  1365,  1366,  1366,  1367,  1368,
    1368
  };

  const signed char
  Parser::yyr2_[] =
  {
       0,     2,     1,     1,     2,     1,     2,     2,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     0,
       1,     1,     6,     4,     5,     4,     1,     3,     4,     1,
       4,     3,     3,     1,     8,     0,     1,     2,     1,     1,
       1,     3,     0,     1,     2,     1,     1,     1,     3,     1,
       1,     1,     2,     0,     2,     2,     0,     2,     3,     3,
       2,     3,     4,     3,     4,     3,     4,     1,     3,     4,
       3,     4,     1,     3,     4,     5,     5,     6,     6,     5,
       6,     4,     4,     5,     3,     4,     1,     3,     3,     3,
       3,     3,     3,     5,     5,     3,     3,     3,     3,     3,
       3,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     3,     1,     1,     1,     1,
       3,     2,     2,     2,     2,     1,     3,     5,     6,     2,
       3,     2,     6,     6,     1,     6,     4,     4,     5,     5,
       4,     2,     3,     4,     2,     4,     4,    10,     6,     8,
       6,     4,     4,     6,     4,     4,     4,     6,     4,     7,
       7,     7,     6,     6,     6,     6,     3,     4,     4,     6,
       6,     8,     2,     2,     8,     8,     6,     6,     6,     1,
       6,     6,     8,     8,     6,     8,     6,     2,     8,     8,
       2,     2,     2,     4,     3,     8,     3,     4,     6,     0,
       1,     1,     3,     1,     1,     1,     4,     5,     6,     6,
       5,     6,     5,     6,     5,     6,     5,     6,     8,     0,
       1,     0,     2,     0,     3,     3,     1,     0,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     5,     2,     7,     7,     6,     7,    11,     3,     1,
       2,     2,     2,     0,     2,     2,     2,     2,     0,     2,
       2,     1,     2,     2,     2,     2,     0,     1,     1,     2,
       2,     2,     2,     5,     3,     3,     3,     3,     5,     4,
       3,     4,     4,     1,     3,     2,     1,     3,     4,     4,
       6,     6,     1,     1,     3,     0,     1,     1,     2,     1,
       1,     1,     1,     1,     0,     3,     1,     3,     0,     1,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       5,     1,     1,     3,     4,     4,     3,     2,     2,     3,
       3,     1,     1,     4,     4,     4,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       0,     1,     1,     3,     1,     3,     1,     1,     3,     0,
       1,     6,     7,     7,     7,     8,     3,     4,     0,     2,
       0,     1,     0,     1,     2,     0,     1,     2,     1,     1,
       1,     1,     9,     6,     7,     9,     0,     2,     0,     1,
       0,     3,     3,     4,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     3,     0,     0,     0,
       7,     0,     2,     2,     1,     1,     0,     0,     8,     0,
       6,     1,     2,     1,     2,     0,     0,     6,     0,     0,
       6,     0,     2,     0,     5,     0,     3,     1,     3,     0,
       2,     5,     5,     0,     7,     0,     6,     0,     3,     2,
       3,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     0,     2,     1,     0,     5,     0,
       1,     0,     2,     0,     5,     4,     0,     0,     8,     0,
       0,     8,     1,     1,     1,     1,     1,     0,     5,     0,
       2,     0,     3,     0,     2,     2,     2,     2,     0,     6,
       2,     1,     1,     0,     3,     1,     2,     1,     2,     3,
       3,     3,     0,     3,     3,     6,     2,     0,     3,     4,
       4,     1,     1,     0,     2,     0,    12,     7,     6,     0,
       0,     0,     0,    14,     0,     0,     0,     0,    11,     0,
       2,     0,     1,     1,     3,     1,     0,     4,     0,     1,
       1,     3,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     2,     0,     1,     1,     3,     1,     1,     1,
       1,     1,     1,     1,     2,     3,     3,     3,     3,     3,
       3,     3,     3,     4,     3,     1,     1,     3,     1,     1,
       2,     1,     2,     1,     0,     2,     1,     2,     1,     6,
       6,     5,     4,     5,     4,     5,     0,     1,     0,     3,
       0,     2,     0,     8,     9,     0,     1,     1,     3,     0,
       2,     0,     3,     1,     3,     5,     0,     4,     3,     1,
       1,     1,     3,     1,     3,     3,     1,     3,     1,     1,
       0,     3,     1,     3,     3,     0,     1,     2,     1,     3,
       4,     3,     3,     3,     4,     4,     3,     4,     1,     2,
       3,     0,     2,     1,     3,     2,     3,     1,     1,     1,
       1,     2,     2,     1,     1,     1,     2,     2,     1,     1,
       1,     1,     1,     1,     1,     1,     2,     2,     1,     1,
       1,     1,     1,     1,     2,     2,     2,     4,     4,     4,
       4,     4,     5,     7,     7,     6,     6,     9,     0,     3,
       3,     0,     2,     0,     2,     2,     0,     2,     2,     0,
       1,     2,     1,     1,     1,     3,     4,     0,     1,     0,
       3,     0,     3,     0,     3,     1,     1,     2,     2,     2,
       4,     2,     4,     1,     2,     2,     2,     4,     0,     3,
       2,     2,     3,     1,     1,     1,     1,     1,     0,     1,
       2,     3,     1,     4,     1,     3,     7,     0,     2,     2,
       2,     0,     3,     3,     6,     6,     1,     1,     2,     2,
       2,     2,     2,     1,     1,     0,     1,     1,     1,     1,
       0,     1,     1,     2,     1,     3,     0,     1,     1,     2,
       1,     0,     1,     1,     2,     1,     1,     3,     2,     1,
       1,     3,     2,     2,     1,     1,     1,     1,     1,     3,
       1,     2,     5,     3,     1,     1,     4,     0,     1,     0,
       2,     1,     1,     1,     1,     1,     1,     1,     0,     2,
       1,     2,     2,     1,     2,     2,     0,     1,     1,     1,
       3,     1,     3,     0,     1,     0,     1,     0,     2,     2,
       2,     1,     3,     2,     1,     1,     1,     1,     0,     1,
       1,     1,     0,     2,     2,     2,     0,     2,     2,     2,
       3,     3,     4,     6,     2,     3,     3,     2,     1,     1,
       1,     1,     1,     1,     1,     1,     2,     2,     2,     1,
       2,     1,     1,     1,     2,     1,     2,     2,     2,     1,
       2,     0,     1,     1,     3,     1,     3,     1,     3,     1,
       3,     0,     1,     0,     2,     4,     5,     1,     1,     5,
       7,     5,     7,     3,     3,     3,     4,     4,     1,     2,
       2,     1,     3,     3,     3,     0,     1,     0,     1,     0,
       1,     4,     1,     1,     1,     1,     1,     3,     5,     3,
       3,     4,     3,     3,     3,     4,     0,     1,     1,     1,
       3,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     0,     1,     0,
       2,     0,     1,     1,     0,     2,     0,     2,     2,     3,
       3,     1,     4,     0,     3,     1,     3,     0,     2,     1,
       3,     3,     2,     0,     0,     4,     3,     1,     0,     1,
       0,     1,     3,     3,     1,     0,     1,     1,     1,     0,
       1,     2,     1,     3,     3,     1,     1,     1,     1,     1,
       1,     1,     3,     5,     2,     1,     1,     1,     1,     1,
       3,     5,     1,     3,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     2,     9,     0,     2,     0,
       1,     1,     3,     3,     3,     1,     2,     1,     1,     3,
       2,     3,     2,     2,     1,     3,     3,     2,     3,     1,
       2,     2,     2,     1,     2,     1,     1,     1,     2,     3,
       2,     3,     2,     2,     5,     5,     2,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     2,     2,
       1,     2,     1,     2,     3,     2,     1,     1,     1,     1,
       1,     1,     1,     2,     0,     1,     1,     1,     1,     1,
       0,     1,     1,     5,     0,     3,     0,     2,     3,     3,
       3,     3,     3,     0,     1,     0,     1,     0,     1,     2,
       1,     1,     2,     2,     2,     4,     3,     1,     3,     2,
       1,     2,     2,     2,     2,     2,     2,     2,     1,     4,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     2,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     0,     3,     0,     1,     1,     3,     1,     1,
       2,     2,     2,     1,     1,     1,     1,     0,     3,     2,
       1,     1,     3,     2,     2,     2,     2,     2,     2,     2,
       0,    12,     0,     6,     2,     0,     1,     3,     1,     0,
       2,     0,     2,     0,     1,     3,     4,     0,     2,     0,
       2,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     3,     1,     0,     2,     2,     2,
       2,     2,     3,     3,     1,     1,     1,     2,     3,     3,
       0,     1,     3,     1,     3,     0,     1,     3,     1,     4,
       0,     1,     1,     1,     1,     1,     0,     1,     1,     3,
       2,     2,     4,     4,     3,     4,     4,     1,     3,     3,
       6,     2,     2,     5,     6,     6,     2,     5,     5,     2,
       2,     1,     4,     3,     2,     3,     2,     2,     1,     1,
       3,     5,     4,     4,     3,     3,     2,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     1,     1,     1,
       1,     1,     0,     2,     2,     0,     2,     2,     0,     1,
       0,     2,     0,     1,     0,     1,     0,     1,     1,     2,
       1,     1,     0,     2,     0,     2,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       3,     1,     1,     1,     3,     1,     1,     1,     2,     1,
       0,     1,     1,     1,     1,     1,     2,     2,     2,     2,
       3,     6,     5,     8,     1,     2,     2,     1,     0,     2,
       3,     0,     2,     2,     2,     2,     2,     2,     1,     0,
       1,     0,     1,     1,     1,     8,     9,     8,     0,     1,
       1,     1,     0,     1,     0,     1,     1,     3,     4,     1,
       3,     4,     2,     1,     1,     3,     1,     3,     0,     1,
       3,     1,     1,     1,     0,     5,     9,     3,     1,     3,
       0,     1,     3,     1,     1,     1,     0,     3,     9,     6,
       7,     0,     2,     0,     2,     0,     2,     1,     1,     1,
       1,     3,     2,     4,     3,     1,     2,     3,     0,     1,
       1,     3,     1,     1,     1,     3,     3,     1,     1,     2,
       2,     2,     1,    18,     1,     1,     0,     1,     0,     1,
       1,     0,     1,     1,     1,     0,     2,     0,     2,     2,
       1,     3,     4,     3,     3,     0,     2,     2,     1,     3,
       3,     0,     4,     0,     3,     1,     1,     0,     3,     2,
       3,     1,     1,     2,     0,     2,     3,     1,     3,     3,
       0,     1,     1,     3,     3,     2,     2,     2,     0,     1,
       0,     3,     2,     0,     1,     2,     0,     1,     4,     4,
       5
  };


#if ARIES_PARSERDEBUG
  // YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
  // First, the terminals, then, starting at \a yyntokens_, nonterminals.
  const char*
  const Parser::yytname_[] =
  {
  "END_OF_INPUT", "error", "$undefined", "ABORT_SYM", "ACCESSIBLE_SYM",
  "ACCOUNT_SYM", "ACTION", "ADD", "ADDDATE_SYM", "AFTER_SYM", "AGAINST",
  "AGGREGATE_SYM", "ALGORITHM_SYM", "ALL", "ALTER", "ALWAYS_SYM",
  "OBSOLETE_TOKEN_271", "ANALYZE_SYM", "AND_AND_SYM", "AND_SYM", "ANY_SYM",
  "AS", "ASC", "ASCII_SYM", "ASENSITIVE_SYM", "AT_SYM",
  "AUTOEXTEND_SIZE_SYM", "AUTO_INC", "AVG_ROW_LENGTH", "AVG_SYM",
  "BACKUP_SYM", "BEFORE_SYM", "BEGIN_SYM", "BETWEEN_SYM", "BIGINT_SYM",
  "BINARY_SYM", "BINLOG_SYM", "BIN_NUM", "BIT_AND", "BIT_OR", "BIT_SYM",
  "BIT_XOR", "BLOB_SYM", "BLOCK_SYM", "BOOLEAN_SYM", "BOOL_SYM", "BOTH",
  "BTREE_SYM", "BY", "BYTE_SYM", "CACHE_SYM", "CALL_SYM", "CASCADE",
  "CASCADED", "CASE_SYM", "CAST_SYM", "CATALOG_NAME_SYM", "CHAIN_SYM",
  "CHANGE", "CHANGED", "CHANNEL_SYM", "CHARSET", "CHAR_SYM",
  "CHECKSUM_SYM", "CHECK_SYM", "CIPHER_SYM", "CLASS_ORIGIN_SYM",
  "CLIENT_SYM", "CLOSE_SYM", "COALESCE", "CODE_SYM", "COLLATE_SYM",
  "COLLATION_SYM", "COLUMNS", "COLUMN_SYM", "COLUMN_FORMAT_SYM",
  "COLUMN_NAME_SYM", "COMMENT_SYM", "COMMITTED_SYM", "COMMIT_SYM",
  "COMPACT_SYM", "COMPLETION_SYM", "COMPRESSED_SYM", "COMPRESSION_SYM",
  "ENCRYPTION_SYM", "CONCURRENT", "CONDITION_SYM", "CONNECTION_ID_SYM",
  "CONNECTION_SYM", "CONSISTENT_SYM", "CONSTRAINT",
  "CONSTRAINT_CATALOG_SYM", "CONSTRAINT_NAME_SYM", "CONSTRAINT_SCHEMA_SYM",
  "CONTAINS_SYM", "CONTEXT_SYM", "CONTINUE_SYM", "CONVERT_SYM",
  "COUNT_SYM", "CPU_SYM", "CREATE", "CROSS", "CUBE_SYM", "CURDATE",
  "CURRENT_SYM", "CURRENT_USER", "CURSOR_SYM", "CURSOR_NAME_SYM",
  "CURTIME", "DATABASE", "DATABASES", "DATAFILE_SYM", "DATA_SYM",
  "DATETIME_SYM", "DATE_ADD_INTERVAL", "DATE_SUB_INTERVAL", "DATE_SYM",
  "DAY_HOUR_SYM", "DAY_MICROSECOND_SYM", "DAY_MINUTE_SYM",
  "DAY_SECOND_SYM", "DAY_SYM", "DEALLOCATE_SYM", "DECIMAL_NUM", "REAL_NUM",
  "DECIMAL_SYM", "DECLARE_SYM", "DEFAULT_SYM", "DEFAULT_AUTH_SYM",
  "DEFINER_SYM", "DELAYED_SYM", "DELAY_KEY_WRITE_SYM", "DELETE_SYM",
  "DESC", "DESCRIBE", "OBSOLETE_TOKEN_388", "DETERMINISTIC_SYM",
  "DIAGNOSTICS_SYM", "BYTEDICT_SYM", "SHORTDICT_SYM", "INTDICT_SYM",
  "DICT_INDEX_SYM", "DIRECTORY_SYM", "DISABLE_SYM", "DISCARD_SYM",
  "DISK_SYM", "DISTINCT", "DIV_SYM", "DOUBLE_SYM", "DO_SYM", "DROP",
  "DUAL_SYM", "DUMPFILE", "DUPLICATE_SYM", "DYNAMIC_SYM", "EACH_SYM",
  "ELSE", "ELSEIF_SYM", "ENABLE_SYM", "ENCLOSED", "ENCODING", "END",
  "ENDS_SYM", "ENGINES_SYM", "ENGINE_SYM", "ENUM_SYM", "EQ", "EQUAL_SYM",
  "ERROR_SYM", "ERRORS", "ESCAPED", "ESCAPE_SYM", "EVENTS_SYM",
  "EVENT_SYM", "EVERY_SYM", "EXCHANGE_SYM", "EXECUTE_SYM", "EXISTS",
  "EXIT_SYM", "EXPANSION_SYM", "EXPIRE_SYM", "EXPORT_SYM", "EXTENDED_SYM",
  "EXTENT_SIZE_SYM", "EXTRACT_SYM", "FALSE_SYM", "FAST_SYM", "FAULTS_SYM",
  "FETCH_SYM", "FILE_SYM", "FILE_BLOCK_SIZE_SYM", "FILTER_SYM",
  "FIRST_SYM", "FIXED_SYM", "FLOAT_NUM", "FLOAT_SYM", "FLUSH_SYM",
  "FOLLOWS_SYM", "FORCE_SYM", "FOREIGN", "FOR_SYM", "FORMAT_SYM",
  "FOUND_SYM", "FROM", "FULL", "FULLTEXT_SYM", "FUNCTION_SYM", "GE",
  "GENERAL", "GENERATED", "GROUP_REPLICATION", "GEOMETRYCOLLECTION_SYM",
  "GEOMETRY_SYM", "GET_FORMAT", "GET_SYM", "GLOBAL_SYM", "GRANT", "GRANTS",
  "GROUP_SYM", "GROUP_CONCAT_SYM", "GT_SYM", "HANDLER_SYM", "HASH_SYM",
  "HAVING", "HELP_SYM", "HEX_NUM", "HIGH_PRIORITY", "HOST_SYM",
  "HOSTS_SYM", "HOUR_MICROSECOND_SYM", "HOUR_MINUTE_SYM",
  "HOUR_SECOND_SYM", "HOUR_SYM", "IDENT", "IDENTIFIED_SYM", "IDENT_QUOTED",
  "IF", "IGNORE_SYM", "IGNORE_SERVER_IDS_SYM", "IMPORT", "INDEXES",
  "INDEX_SYM", "INFILE", "INITIAL_SIZE_SYM", "INNER_SYM", "INOUT_SYM",
  "INSENSITIVE_SYM", "INSERT_SYM", "INSERT_METHOD", "INSTANCE_SYM",
  "INSTALL_SYM", "INTERVAL_SYM", "INTO", "INT_SYM", "INTEGER_SYM",
  "INVOKER_SYM", "IN_SYM", "IO_AFTER_GTIDS", "IO_BEFORE_GTIDS", "IO_SYM",
  "IPC_SYM", "IS", "ISOLATION", "ISSUER_SYM", "ITERATE_SYM", "JOIN_SYM",
  "JSON_SEPARATOR_SYM", "JSON_SYM", "KEYS", "KEY_BLOCK_SIZE", "KEY_SYM",
  "KILL_SYM", "LANGUAGE_SYM", "LAST_SYM", "LE", "LEADING", "LEAVES",
  "LEAVE_SYM", "LEFT", "LESS_SYM", "LEVEL_SYM", "LEX_HOSTNAME", "LIKE",
  "LIMIT", "LINEAR_SYM", "LINES", "LINESTRING_SYM", "LIST_SYM", "LOAD",
  "LOCAL_SYM", "OBSOLETE_TOKEN_538", "LOCKS_SYM", "LOCK_SYM",
  "LOGFILE_SYM", "LOGS_SYM", "LONGBLOB_SYM", "LONGTEXT_SYM", "LONG_NUM",
  "LONG_SYM", "LOOP_SYM", "LOW_PRIORITY", "LT", "MASTER_AUTO_POSITION_SYM",
  "MASTER_BIND_SYM", "MASTER_CONNECT_RETRY_SYM", "MASTER_DELAY_SYM",
  "MASTER_HOST_SYM", "MASTER_LOG_FILE_SYM", "MASTER_LOG_POS_SYM",
  "MASTER_PASSWORD_SYM", "MASTER_PORT_SYM", "MASTER_RETRY_COUNT_SYM",
  "MASTER_SERVER_ID_SYM", "MASTER_SSL_CAPATH_SYM",
  "MASTER_TLS_VERSION_SYM", "MASTER_SSL_CA_SYM", "MASTER_SSL_CERT_SYM",
  "MASTER_SSL_CIPHER_SYM", "MASTER_SSL_CRL_SYM", "MASTER_SSL_CRLPATH_SYM",
  "MASTER_SSL_KEY_SYM", "MASTER_SSL_SYM",
  "MASTER_SSL_VERIFY_SERVER_CERT_SYM", "MASTER_SYM", "MASTER_USER_SYM",
  "MASTER_HEARTBEAT_PERIOD_SYM", "MATCH", "MAX_CONNECTIONS_PER_HOUR",
  "MAX_QUERIES_PER_HOUR", "MAX_ROWS", "MAX_SIZE_SYM", "MAX_SYM",
  "MAX_UPDATES_PER_HOUR", "MAX_USER_CONNECTIONS_SYM", "MAX_VALUE_SYM",
  "MEDIUMBLOB_SYM", "MEDIUMINT_SYM", "MEDIUMTEXT_SYM", "MEDIUM_SYM",
  "MEMORY_SYM", "MERGE_SYM", "MESSAGE_TEXT_SYM", "MICROSECOND_SYM",
  "MIGRATE_SYM", "MINUTE_MICROSECOND_SYM", "MINUTE_SECOND_SYM",
  "MINUTE_SYM", "MIN_ROWS", "MIN_SYM", "MODE_SYM", "MODIFIES_SYM",
  "MODIFY_SYM", "MOD_SYM", "MONTH_SYM", "MULTILINESTRING_SYM",
  "MULTIPOINT_SYM", "MULTIPOLYGON_SYM", "MUTEX_SYM", "MYSQL_ERRNO_SYM",
  "NAMES_SYM", "NAME_SYM", "NATIONAL_SYM", "NATURAL", "NCHAR_STRING",
  "NCHAR_SYM", "NDBCLUSTER_SYM", "NE", "NEG", "NEVER_SYM", "NEW_SYM",
  "NEXT_SYM", "NODEGROUP_SYM", "NONE_SYM", "NOT2_SYM", "NOT_SYM",
  "NOW_SYM", "NO_SYM", "NO_WAIT_SYM", "NO_WRITE_TO_BINLOG", "NULL_SYM",
  "NUM", "NUMBER_SYM", "NUMERIC_SYM", "NVARCHAR_SYM", "OFFSET_SYM",
  "ON_SYM", "ONE_SYM", "ONLY_SYM", "OPEN_SYM", "OPTIMIZE",
  "OPTIMIZER_COSTS_SYM", "OPTIONS_SYM", "OPTION", "OPTIONALLY", "OR2_SYM",
  "ORDER_SYM", "OR_OR_SYM", "OR_SYM", "OUTER", "OUTFILE", "OUT_SYM",
  "OWNER_SYM", "PACK_KEYS_SYM", "PAGE_SYM", "PARAM_MARKER", "PARSER_SYM",
  "OBSOLETE_TOKEN_654", "PARTIAL", "PARTITION_SYM", "PARTITIONS_SYM",
  "PARTITIONING_SYM", "PASSWORD", "PHASE_SYM", "PLUGIN_DIR_SYM",
  "PLUGIN_SYM", "PLUGINS_SYM", "\".\"", "POLYGON_SYM", "PORT_SYM",
  "POSITION_SYM", "PRECEDES_SYM", "PRECISION", "PREPARE_SYM",
  "PRESERVE_SYM", "PREV_SYM", "PRIMARY_SYM", "PRIVILEGES", "PROCEDURE_SYM",
  "PROCESS", "PROCESSLIST_SYM", "PROFILE_SYM", "PROFILES_SYM", "PROXY_SYM",
  "PURGE", "QUARTER_SYM", "QUERY_SYM", "QUICK", "RANGE_SYM", "READS_SYM",
  "READ_ONLY_SYM", "READ_SYM", "READ_WRITE_SYM", "REAL_SYM", "REBUILD_SYM",
  "RECOVER_SYM", "OBSOLETE_TOKEN_693", "REDO_BUFFER_SIZE_SYM",
  "REDUNDANT_SYM", "REFERENCES", "REGEXP", "RELAY", "RELAYLOG_SYM",
  "RELAY_LOG_FILE_SYM", "RELAY_LOG_POS_SYM", "RELAY_THREAD", "RELEASE_SYM",
  "RELOAD", "REMOVE_SYM", "RENAME", "REORGANIZE_SYM", "REPAIR",
  "REPEATABLE_SYM", "REPEAT_SYM", "REPLACE_SYM", "REPLICATION",
  "REPLICATE_DO_DB", "REPLICATE_IGNORE_DB", "REPLICATE_DO_TABLE",
  "REPLICATE_IGNORE_TABLE", "REPLICATE_WILD_DO_TABLE",
  "REPLICATE_WILD_IGNORE_TABLE", "REPLICATE_REWRITE_DB", "REQUIRE_SYM",
  "RESET_SYM", "RESIGNAL_SYM", "RESOURCES", "RESTORE_SYM", "RESTRICT",
  "RESUME_SYM", "RETURNED_SQLSTATE_SYM", "RETURNS_SYM", "RETURN_SYM",
  "REVERSE_SYM", "REVOKE", "RIGHT", "ROLLBACK_SYM", "ROLLUP_SYM",
  "ROTATE_SYM", "ROUTINE_SYM", "ROWS_SYM", "ROW_FORMAT_SYM", "ROW_SYM",
  "ROW_COUNT_SYM", "RTREE_SYM", "SAVEPOINT_SYM", "SCHEDULE_SYM",
  "SCHEMA_NAME_SYM", "SCHEMA", "SECOND_MICROSECOND_SYM", "SECOND_SYM",
  "SECURITY_SYM", "SELECT_SYM", "SENSITIVE_SYM", "SEPARATOR_SYM",
  "SERIALIZABLE_SYM", "SERIAL_SYM", "SESSION_SYM", "SERVER_SYM",
  "OBSOLETE_TOKEN_755", "SET", "SET_VAR", "SHARE_SYM", "SHARES_SYM",
  "SHIFT_LEFT", "SHIFT_RIGHT", "SHOW", "SHUTDOWN", "SIGNAL_SYM",
  "SIGNED_SYM", "SIMPLE_SYM", "SLAVE", "SLOW", "SMALLINT_SYM",
  "SNAPSHOT_SYM", "SOCKET_SYM", "SONAME_SYM", "SOUNDS_SYM", "SOURCE_SYM",
  "SPATIAL_SYM", "SPECIFIC_SYM", "SQLEXCEPTION_SYM", "SQLSTATE_SYM",
  "SQLWARNING_SYM", "SQL_AFTER_GTIDS", "SQL_AFTER_MTS_GAPS",
  "SQL_BEFORE_GTIDS", "SQL_BIG_RESULT", "SQL_BUFFER_RESULT",
  "OBSOLETE_TOKEN_784", "SQL_CALC_FOUND_ROWS", "SQL_NO_CACHE_SYM",
  "SQL_SMALL_RESULT", "SQL_SYM", "SQL_THREAD", "SSL_SYM", "STACKED_SYM",
  "STARTING", "STARTS_SYM", "START_SYM", "STATS_AUTO_RECALC_SYM",
  "STATS_PERSISTENT_SYM", "STATS_SAMPLE_PAGES_SYM", "STATUS_SYM",
  "STDDEV_SAMP_SYM", "STD_SYM", "STOP_SYM", "STORAGE_SYM", "STORED_SYM",
  "STRAIGHT_JOIN", "STRING_SYM", "SUBCLASS_ORIGIN_SYM", "SUBDATE_SYM",
  "SUBJECT_SYM", "SUBPARTITIONS_SYM", "SUBPARTITION_SYM", "SUBSTRING",
  "SUM_SYM", "SUPER_SYM", "SUSPEND_SYM", "SWAPS_SYM", "SWITCHES_SYM",
  "SYSDATE", "TABLES", "VIEWS", "TABLESPACE_SYM", "OBSOLETE_TOKEN_820",
  "TABLE_SYM", "TABLE_CHECKSUM_SYM", "TABLE_NAME_SYM", "TEMPORARY",
  "TEMPTABLE_SYM", "TERMINATED", "TEXT_STRING", "TEXT_SYM", "THAN_SYM",
  "THEN_SYM", "TIMESTAMP_SYM", "TIMESTAMP_ADD", "TIMESTAMP_DIFF",
  "TIME_SYM", "TINYBLOB_SYM", "TINYINT_SYM", "TINYTEXT_SYN", "TO_SYM",
  "TRAILING", "TRANSACTION_SYM", "TRIGGERS_SYM", "TRIGGER_SYM", "TRIM",
  "TRUE_SYM", "TRUNCATE_SYM", "TYPES_SYM", "TYPE_SYM",
  "OBSOLETE_TOKEN_848", "ULONGLONG_NUM", "UNCOMMITTED_SYM",
  "UNDEFINED_SYM", "UNDERSCORE_CHARSET", "UNDOFILE_SYM",
  "UNDO_BUFFER_SIZE_SYM", "UNDO_SYM", "UNICODE_SYM", "UNINSTALL_SYM",
  "UNION_SYM", "UNIQUE_SYM", "UNKNOWN_SYM", "UNLOCK_SYM", "UNSIGNED_SYM",
  "UNTIL_SYM", "UPDATE_SYM", "UPGRADE_SYM", "USAGE", "USER", "USE_FRM",
  "USE_SYM", "USING", "UTC_DATE_SYM", "UTC_TIMESTAMP_SYM", "UTC_TIME_SYM",
  "VALIDATION_SYM", "VALUES", "VALUE_SYM", "VARBINARY_SYM", "VARCHAR_SYM",
  "VARIABLES", "VARIANCE_SYM", "VARYING", "VAR_SAMP_SYM", "VERSION_SYM",
  "VIEW_SYM", "VIRTUAL_SYM", "WAIT_SYM", "WARNINGS", "WEEK_SYM",
  "WEIGHT_STRING_SYM", "WHEN_SYM", "WHERE", "WHILE_SYM", "WITH",
  "OBSOLETE_TOKEN_893", "WITH_ROLLUP_SYM", "WITHOUT_SYM", "WORK_SYM",
  "WRAPPER_SYM", "WRITE_SYM", "X509_SYM", "XA_SYM", "XID_SYM", "XML_SYM",
  "XOR", "YEAR_MONTH_SYM", "YEAR_SYM", "ZEROFILL_SYM", "EXPLAIN_SYM",
  "TREE_SYM", "TRADITIONAL_SYM", "JSON_UNQUOTED_SEPARATOR_SYM",
  "PERSIST_SYM", "ROLE_SYM", "ADMIN_SYM", "INVISIBLE_SYM", "VISIBLE_SYM",
  "EXCEPT_SYM", "COMPONENT_SYM", "RECURSIVE_SYM", "GRAMMAR_SELECTOR_EXPR",
  "GRAMMAR_SELECTOR_GCOL", "GRAMMAR_SELECTOR_PART", "GRAMMAR_SELECTOR_CTE",
  "JSON_OBJECTAGG", "JSON_ARRAYAGG", "OF_SYM", "SKIP_SYM", "LOCKED_SYM",
  "NOWAIT_SYM", "GROUPING_SYM", "PERSIST_ONLY_SYM", "HISTOGRAM_SYM",
  "BUCKETS_SYM", "OBSOLETE_TOKEN_930", "CLONE_SYM", "CUME_DIST_SYM",
  "DENSE_RANK_SYM", "EXCLUDE_SYM", "FIRST_VALUE_SYM", "FOLLOWING_SYM",
  "GROUPS_SYM", "LAG_SYM", "LAST_VALUE_SYM", "LEAD_SYM", "NTH_VALUE_SYM",
  "NTILE_SYM", "NULLS_SYM", "OTHERS_SYM", "OVER_SYM", "PERCENT_RANK_SYM",
  "PRECEDING_SYM", "RANK_SYM", "RESPECT_SYM", "ROW_NUMBER_SYM", "TIES_SYM",
  "UNBOUNDED_SYM", "WINDOW_SYM", "EMPTY_SYM", "JSON_TABLE_SYM",
  "NESTED_SYM", "ORDINALITY_SYM", "PATH_SYM", "HISTORY_SYM", "REUSE_SYM",
  "SRID_SYM", "THREAD_PRIORITY_SYM", "RESOURCE_SYM", "SYSTEM_SYM",
  "VCPU_SYM", "MASTER_PUBLIC_KEY_PATH_SYM", "GET_MASTER_PUBLIC_KEY_SYM",
  "RESTART_SYM", "DEFINITION_SYM", "DESCRIPTION_SYM", "ORGANIZATION_SYM",
  "REFERENCE_SYM", "ACTIVE_SYM", "INACTIVE_SYM", "LATERAL_SYM",
  "OPTIONAL_SYM", "SECONDARY_SYM", "SECONDARY_ENGINE_SYM",
  "SECONDARY_LOAD_SYM", "SECONDARY_UNLOAD_SYM", "RETAIN_SYM", "OLD_SYM",
  "ENFORCED_SYM", "OJ_SYM", "NETWORK_NAMESPACE_SYM", "ADD_SYM", "'+'",
  "MINUS_SYM", "'-'", "CONDITIONLESS_JOIN", "'|'", "'&'", "'*'", "'/'",
  "'%'", "'^'", "'~'", "SUBQUERY_AS_EXPR", "'('", "')'",
  "EMPTY_FROM_CLAUSE", "';'", "','", "'!'", "'.'", "'@'", "':'", "$accept",
  "start_entry", "sql_statements", "sql_statement", "simple_statement",
  "table_or_tables", "view_or_views", "opt_restrict", "drop_table_stmt",
  "drop_user_stmt", "drop_view_stmt", "drop_database_stmt", "select_stmt",
  "query_expression", "query_expression_body", "query_expression_parens",
  "query_primary", "query_specification", "opt_from_clause", "from_clause",
  "from_tables", "table_reference_list", "select_options",
  "select_option_list", "select_option", "select_item_list", "select_item",
  "select_alias", "optional_braces", "expr", "bool_pri", "predicate",
  "bit_expr", "or", "and", "not", "not2", "comp_op", "all_or_any",
  "simple_expr", "case_expr", "function_call_keyword",
  "function_call_nonkeyword", "function_call_conflict",
  "function_call_generic", "opt_udf_expr_list", "udf_expr_list",
  "udf_expr", "set_function_specification", "grouping_operation",
  "sum_expr", "opt_distinct", "opt_gconcat_separator", "opt_gorder_clause",
  "gorder_list", "union_option", "row_subquery", "table_subquery",
  "subquery", "query_spec_option", "create", "require_list",
  "require_list_element", "require_clause", "connect_options",
  "connect_option_list", "connect_option",
  "opt_account_lock_password_expire_options",
  "opt_account_lock_password_expire_option_list",
  "opt_account_lock_password_expire_option", "user", "user_list",
  "create_user", "create_user_list", "opt_create_database_options",
  "create_database_options", "create_database_option", "duplicate",
  "opt_if_not_exists", "create_table_options", "opt_comma",
  "create_table_option", "ternary_option", "default_charset",
  "default_collation", "default_encryption", "row_types",
  "merge_insert_types", "udf_type", "opt_table_list", "table_list",
  "table_element_list", "table_element", "column_def", "opt_references",
  "table_constraint_def", "check_constraint", "opt_constraint_name",
  "opt_not", "opt_constraint_enforcement", "constraint_enforcement",
  "field_options", "field_opt_list", "field_option", "create_table_stmt",
  "if_exists", "opt_temporary", "init_lex_create_info",
  "view_or_trigger_or_sp_or_event", "definer_tail", "no_definer_tail",
  "sp_fetch_list", "sp_if", "$@1", "$@2", "$@3", "sp_elseifs",
  "case_stmt_specification", "simple_case_stmt", "$@4", "$@5",
  "searched_case_stmt", "$@6", "simple_when_clause_list",
  "searched_when_clause_list", "simple_when_clause", "$@7", "$@8",
  "searched_when_clause", "$@9", "$@10", "else_clause_opt",
  "sp_block_content", "$@11", "sp_decls", "sp_decl_idents",
  "sp_opt_default", "sp_decl", "$@12", "$@13", "sp_proc_stmts",
  "sp_proc_stmts1", "sp_proc_stmt", "sp_opt_fetch_noise",
  "sp_labeled_control", "$@14", "sp_opt_label", "sp_unlabeled_block",
  "$@15", "sp_labeled_block", "$@16", "sp_unlabeled_control", "$@17",
  "$@18", "$@19", "$@20", "trg_action_time", "trg_event",
  "sp_proc_stmt_if", "$@21", "sp_proc_stmt_statement", "$@22",
  "sp_proc_stmt_return", "$@23", "sp_proc_stmt_unlabeled", "$@24",
  "sp_proc_stmt_leave", "sp_proc_stmt_iterate", "sp_proc_stmt_open",
  "sp_proc_stmt_fetch", "$@25", "sp_proc_stmt_close", "definer_opt",
  "no_definer", "definer", "view_replace_or_algorithm", "view_replace",
  "view_algorithm", "view_suid", "view_tail", "view_select",
  "view_check_option", "trigger_action_order",
  "trigger_follows_precedes_clause", "trigger_tail", "$@26", "udf_tail",
  "sf_tail", "$@27", "$@28", "$@29", "$@30", "sp_tail", "$@31", "$@32",
  "$@33", "$@34", "opt_ts_datafile_name", "opt_undo_tablespace_options",
  "undo_tablespace_option_list", "undo_tablespace_option",
  "opt_logfile_group_name", "opt_tablespace_options",
  "tablespace_option_list", "tablespace_option", "ts_datafile",
  "opt_logfile_group_options", "logfile_group_option_list",
  "logfile_group_option", "lg_undofile", "ts_option_initial_size",
  "ts_option_autoextend_size", "ts_option_max_size",
  "ts_option_extent_size", "ts_option_undo_buffer_size",
  "ts_option_redo_buffer_size", "ts_option_nodegroup", "ts_option_comment",
  "ts_option_engine", "ts_option_file_block_size", "ts_option_wait",
  "ts_option_encryption", "size_number", "opt_create_table_options_etc",
  "opt_create_partitioning_etc", "opt_duplicate_as_qe",
  "as_create_query_expression", "partition_clause", "part_type_def",
  "opt_linear", "opt_key_algo", "opt_num_parts", "opt_sub_part",
  "opt_name_list", "name_list", "opt_num_subparts", "opt_part_defs",
  "part_def_list", "part_definition", "opt_part_values", "part_func_max",
  "part_values_in", "part_value_list", "part_value_item_list_paren",
  "part_value_item_list", "part_value_item", "opt_sub_partition",
  "sub_part_list", "sub_part_definition", "opt_part_options",
  "part_option_list", "part_option", "prepare", "prepare_src", "execute",
  "execute_using", "execute_var_list", "execute_var_ident", "deallocate",
  "deallocate_or_drop", "text_literal", "text_string", "param_marker",
  "signed_literal", "literal", "NUM_literal", "temporal_literal",
  "window_func_call", "opt_lead_lag_info", "opt_ll_default",
  "opt_null_treatment", "opt_from_first_last", "opt_windowing_clause",
  "windowing_clause", "window_name_or_spec", "window_name", "window_spec",
  "window_spec_details", "opt_existing_window_name",
  "opt_partition_clause", "opt_window_order_by_clause",
  "opt_window_frame_clause", "window_frame_extent", "window_frame_start",
  "window_frame_between", "window_frame_bound",
  "opt_window_frame_exclusion", "window_frame_units", "equal", "opt_equal",
  "variable", "variable_aux", "string_list", "references",
  "opt_match_clause", "opt_on_update_delete", "delete_option",
  "constraint_key_type", "key_or_index", "opt_key_or_index",
  "keys_or_index", "opt_fulltext_index_options", "fulltext_index_options",
  "fulltext_index_option", "opt_spatial_index_options",
  "spatial_index_options", "spatial_index_option", "opt_index_options",
  "index_options", "index_option", "common_index_option",
  "opt_index_name_and_type", "index_type_clause", "visibility",
  "index_type", "key_list", "key_part", "key_list_with_expression",
  "key_part_with_expression", "opt_ident", "opt_component", "charset_name",
  "old_or_new_charset_name", "old_or_new_charset_name_or_default",
  "collation_name", "opt_collate", "ascii", "unicode",
  "opt_charset_with_opt_binary", "opt_bin_mod", "opt_default",
  "option_value_list_continued",
  "start_option_value_list_following_option_type", "option_value_list",
  "option_value", "option_type", "opt_var_type", "opt_var_ident_type",
  "opt_set_var_ident_type", "option_value_following_option_type",
  "option_value_no_option_type", "internal_variable_name",
  "set_expr_or_default", "cast_type", "in_sum_expr", "opt_expr_list",
  "expr_list_in", "expr_list", "ident_list_arg", "ident_list", "opt_expr",
  "opt_else", "when_list", "table_reference", "joined_table",
  "natural_join_type", "inner_join_type", "outer_join_type", "opt_inner",
  "opt_outer", "opt_use_partition", "use_partition", "table_factor",
  "table_reference_list_parens", "single_table_parens", "single_table",
  "joined_table_parens", "derived_table", "opt_index_hints_list",
  "opt_key_definition", "using_list", "ident_string_list", "interval",
  "interval_time_stamp", "date_time_type", "opt_as", "opt_table_alias",
  "opt_all", "opt_where_clause", "opt_where_clause_expr",
  "opt_having_clause", "with_clause", "with_list", "common_table_expr",
  "opt_derived_column_list", "simple_ident_list", "opt_window_clause",
  "window_definition_list", "window_definition", "opt_escape",
  "opt_group_clause", "group_list", "olap_opt", "opt_order_clause",
  "order_clause", "order_list", "opt_ordering_direction",
  "ordering_direction", "opt_limit_clause", "limit_clause",
  "limit_options", "limit_option", "insert_ident", "table_wild",
  "order_expr", "grouping_expr", "simple_ident", "simple_ident_nospvar",
  "simple_ident_q", "table_ident", "IDENT_sys", "TEXT_STRING_sys",
  "TEXT_STRING_literal", "TEXT_STRING_filesystem", "TEXT_STRING_password",
  "TEXT_STRING_hash", "ident", "ident_or_text", "field_def",
  "opt_generated_always", "opt_stored_attribute", "type", "spatial_type",
  "nchar", "varchar", "nvarchar", "int_type", "real_type", "opt_PRECISION",
  "numeric_type", "float_options", "precision", "type_datetime_precision",
  "func_datetime_precision", "field_length", "opt_field_length",
  "opt_precision", "opt_column_attribute_list", "column_attribute_list",
  "column_attribute", "encode_type", "column_format", "storage_media",
  "now_or_signed_literal", "now", "ident_keyword",
  "ident_keywords_ambiguous_1_roles_and_labels",
  "ident_keywords_ambiguous_2_labels", "label_keyword",
  "ident_keywords_ambiguous_3_roles", "ident_keywords_unambiguous",
  "lvalue_keyword", "ident_keywords_ambiguous_4_system_variables",
  "TEXT_STRING_sys_nonewline", "opt_channel", "opt_profile_defs",
  "profile_defs", "profile_def", "opt_profile_args", "character_set",
  "server_options_list", "server_option", "event_tail", "$@35",
  "ev_schedule_time", "$@36", "opt_ev_status", "ev_starts", "ev_ends",
  "opt_ev_on_completion", "ev_on_completion", "opt_ev_comment",
  "ev_sql_stmt", "$@37", "ev_sql_stmt_inner", "sp_name", "sp_c_chistics",
  "sp_chistic", "sp_c_chistic", "sp_suid", "sp_fdparam_list",
  "sp_fdparams", "sp_fdparam", "sp_pdparam_list", "sp_pdparams",
  "sp_pdparam", "sp_opt_inout", "describe_command", "opt_describe_column",
  "describe_stmt", "show", "show_param", "show_engine_param",
  "master_or_binary", "opt_wild_or_where", "opt_wild_or_where_for_show",
  "opt_storage", "opt_db", "opt_full", "opt_extended", "opt_show_cmd_type",
  "from_or_in", "binlog_in", "binlog_from", "ulong_num", "real_ulong_num",
  "ulonglong_num", "real_ulonglong_num", "dec_num_error", "dec_num",
  "sp_handler_type", "sp_hcond_list", "sp_hcond_element", "sp_cond",
  "sqlstate", "sp_hcond", "opt_value", "label_ident", "lvalue_ident",
  "set", "start_option_value_list", "password",
  "transaction_characteristics", "transaction_access_mode",
  "opt_transaction_access_mode", "isolation_level", "opt_isolation_level",
  "transaction_access_mode_types", "isolation_types", "opt_and",
  "opt_primary", "query_expression_or_parens", "insert_stmt",
  "insert_lock_option", "opt_ignore", "opt_INTO",
  "insert_query_expression", "insert_from_constructor", "insert_values",
  "value_or_values", "values_list", "row_value", "opt_values", "values",
  "expr_or_default", "opt_insert_update_list", "update_stmt",
  "update_list", "update_elem", "opt_low_priority", "explain_stmt",
  "explain_cmd", "explain_option", "delete_stmt", "opt_simple_limit",
  "opt_wild", "opt_delete_options", "opt_delete_option",
  "table_alias_ref_list", "table_ident_opt_wild", "fields", "use", "kill",
  "kill_option", "lock", "table_lock_list", "table_lock", "lock_option",
  "unlock", "shutdown_stmt", "load_stmt", "data_or_xml", "opt_local",
  "load_data_lock", "opt_duplicate", "opt_load_data_charset",
  "opt_field_term", "field_term_list", "field_term", "opt_line_term",
  "line_term_list", "line_term", "opt_xml_rows_identified_by",
  "opt_ignore_lines", "lines_or_rows", "opt_field_or_var_spec",
  "fields_or_vars", "field_or_var", "opt_load_data_set_spec",
  "load_data_set_list", "load_data_set_elem", "start",
  "opt_start_transaction_option_list", "start_transaction_option_list",
  "start_transaction_option", "begin_stmt", "opt_work", "opt_chain",
  "opt_release", "opt_savepoint", "commit", "rollback", YY_NULLPTR
  };


  const short
  Parser::yyrline_[] =
  {
       0,  1007,  1007,  1011,  1012,  1016,  1017,  1018,  1022,  1029,
    1036,  1041,  1046,  1051,  1056,  1061,  1066,  1071,  1076,  1081,
    1086,  1091,  1094,  1097,  1102,  1107,  1112,  1117,  1122,  1127,
    1132,  1137,  1142,  1147,  1152,  1163,  1164,  1167,  1168,  1171,
    1172,  1173,  1176,  1184,  1191,  1196,  1202,  1206,  1217,  1227,
    1228,  1236,  1237,  1241,  1245,  1271,  1272,  1276,  1289,  1290,
    1294,  1299,  1306,  1307,  1311,  1312,  1316,  1317,  1321,  1328,
    1333,  1341,  1342,  1351,  1352,  1353,  1358,  1359,  1365,  1369,
    1372,  1375,  1379,  1383,  1387,  1391,  1395,  1399,  1409,  1416,
    1424,  1427,  1428,  1434,  1444,  1454,  1461,  1473,  1480,  1492,
    1495,  1500,  1501,  1510,  1519,  1520,  1521,  1525,  1526,  1527,
    1528,  1529,  1532,  1535,  1548,  1561,  1564,  1567,  1570,  1573,
    1576,  1577,  1581,  1582,  1586,  1587,  1591,  1592,  1596,  1597,
    1612,  1615,  1618,  1621,  1624,  1627,  1630,  1636,  1637,  1651,
    1654,  1655,  1656,  1657,  1658,  1659,  1660,  1663,  1664,  1665,
    1666,  1668,  1671,  1697,  1698,  1700,  1701,  1702,  1710,  1711,
    1717,  1718,  1721,  1724,  1731,  1732,  1735,  1736,  1737,  1740,
    1751,  1752,  1755,  1758,  1761,  1764,  1767,  1768,  1769,  1770,
    1771,  1772,  1773,  1776,  1777,  1778,  1779,  1780,  1781,  1782,
    1783,  1784,  1785,  1786,  1787,  1788,  1789,  1790,  1791,  1794,
    1812,  1819,  1832,  1833,  1834,  1847,  1860,  1869,  1878,  1879,
    1880,  1881,  1882,  1883,  1893,  1903,  1913,  1923,  1924,  1925,
    1926,  1927,  1928,  1929,  1940,  1944,  1967,  1970,  1974,  1978,
    1979,  1983,  1989,  1997,  2004,  2005,  2008,  2012,  2016,  2020,
    2025,  2028,  2035,  2043,  2047,  2051,  2055,  2058,  2061,  2069,
    2070,  2072,  2074,  2076,  2078,  2081,  2082,  2091,  2092,  2093,
    2097,  2104,  2108,  2112,  2113,  2114,  2115,  2116,  2117,  2118,
    2119,  2123,  2126,  2132,  2138,  2143,  2148,  2153,  2199,  2200,
    2204,  2208,  2212,  2217,  2219,  2222,  2226,  2230,  2235,  2236,
    2240,  2241,  2245,  2248,  2251,  2254,  2260,  2261,  2265,  2266,
    2270,  2273,  2276,  2279,  2282,  2285,  2288,  2291,  2294,  2297,
    2300,  2303,  2306,  2311,  2315,  2319,  2326,  2331,  2338,  2343,
    2348,  2355,  2361,  2368,  2373,  2380,  2381,  2385,  2386,  2390,
    2393,  2397,  2405,  2406,  2409,  2410,  2414,  2418,  2423,  2425,
    2429,  2433,  2437,  2441,  2445,  2449,  2453,  2457,  2460,  2464,
    2468,  2472,  2476,  2480,  2484,  2499,  2503,  2507,  2511,  2515,
    2519,  2523,  2527,  2530,  2534,  2538,  2542,  2546,  2550,  2554,
    2558,  2565,  2576,  2579,  2586,  2590,  2593,  2594,  2595,  2596,
    2597,  2598,  2602,  2603,  2604,  2607,  2608,  2609,  2610,  2611,
    2614,  2615,  2618,  2623,  2631,  2637,  2645,  2646,  2650,  2657,
    2658,  2666,  2672,  2677,  2682,  2691,  2696,  2703,  2707,  2708,
    2712,  2713,  2717,  2718,  2722,  2726,  2727,  2731,  2736,  2739,
    2740,  2744,  2751,  2756,  2762,  2767,  2775,  2776,  2780,  2781,
    2792,  2797,  2801,  2805,  2810,  2811,  2812,  2813,  2814,  2818,
    2821,  2822,  2823,  2824,  2825,  2829,  2832,  2838,  2841,  2845,
    2838,  2852,  2854,  2855,  2858,  2859,  2864,  2867,  2863,  2879,
    2878,  2890,  2891,  2895,  2896,  2901,  2904,  2900,  2914,  2917,
    2913,  2927,  2929,  2934,  2933,  2947,  2949,  2958,  2962,  2969,
    2971,  2976,  2983,  2987,  2986,  2996,  2992,  3004,  3005,  3008,
    3009,  3013,  3014,  3015,  3016,  3017,  3018,  3019,  3020,  3021,
    3022,  3023,  3024,  3025,  3028,  3030,  3031,  3036,  3035,  3044,
    3045,  3048,  3048,  3056,  3055,  3063,  3068,  3071,  3067,  3082,
    3085,  3079,  3092,  3094,  3099,  3101,  3103,  3108,  3107,  3115,
    3115,  3124,  3123,  3132,  3132,  3140,  3146,  3152,  3159,  3158,
    3167,  3179,  3180,  3185,  3190,  3203,  3205,  3207,  3212,  3217,
    3219,  3221,  3227,  3228,  3230,  3235,  3253,  3260,  3261,  3262,
    3263,  3273,  3275,  3281,  3284,  3300,  3290,  3314,  3318,  3328,
    3332,  3337,  3340,  3325,  3350,  3353,  3357,  3360,  3348,  3379,
    3380,  3385,  3386,  3390,  3393,  3399,  3402,  3403,  3409,  3410,
    3414,  3417,  3423,  3424,  3425,  3426,  3427,  3428,  3429,  3430,
    3431,  3432,  3436,  3440,  3441,  3445,  3448,  3454,  3455,  3456,
    3457,  3458,  3459,  3460,  3463,  3466,  3472,  3478,  3484,  3490,
    3496,  3502,  3508,  3514,  3520,  3526,  3529,  3535,  3541,  3542,
    3574,  3580,  3588,  3592,  3597,  3599,  3604,  3611,  3612,  3626,
    3641,  3645,  3653,  3661,  3665,  3673,  3680,  3681,  3686,  3687,
    3694,  3695,  3702,  3703,  3707,  3715,  3716,  3721,  3724,  3731,
    3732,  3744,  3745,  3749,  3754,  3762,  3772,  3775,  3781,  3790,
    3795,  3799,  3804,  3811,  3816,  3824,  3831,  3836,  3844,  3848,
    3855,  3856,  3863,  3866,  3872,  3878,  3879,  3883,  3886,  3892,
    3894,  3896,  3898,  3900,  3902,  3904,  3906,  3915,  3932,  3936,
    3943,  3949,  3950,  3956,  3959,  3966,  3973,  3980,  3981,  3988,
    3989,  3990,  3991,  3995,  4008,  4014,  4015,  4018,  4025,  4028,
    4029,  4030,  4033,  4036,  4039,  4040,  4041,  4042,  4046,  4049,
    4052,  4055,  4058,  4061,  4068,  4069,  4070,  4075,  4077,  4079,
    4081,  4083,  4085,  4087,  4088,  4089,  4091,  4093,  4096,  4098,
    4100,  4103,  4106,  4110,  4113,  4115,  4120,  4123,  4125,  4129,
    4131,  4135,  4140,  4142,  4147,  4152,  4157,  4163,  4166,  4170,
    4173,  4177,  4180,  4184,  4187,  4194,  4195,  4200,  4202,  4204,
    4206,  4208,  4213,  4218,  4220,  4222,  4224,  4226,  4230,  4233,
    4235,  4237,  4239,  4243,  4244,  4245,  4249,  4250,  4253,  4255,
    4259,  4266,  4267,  4271,  4278,  4281,  4287,  4315,  4316,  4317,
    4318,  4323,  4325,  4328,  4331,  4335,  4342,  4343,  4344,  4345,
    4346,  4349,  4350,  4355,  4356,  4360,  4361,  4365,  4366,  4367,
    4371,  4372,  4376,  4379,  4385,  4386,  4392,  4393,  4397,  4400,
    4406,  4410,  4411,  4415,  4418,  4424,  4425,  4430,  4431,  4434,
    4457,  4458,  4463,  4464,  4468,  4469,  4473,  4474,  4475,  4479,
    4484,  4491,  4495,  4502,  4507,  4515,  4516,  4522,  4523,  4526,
    4527,  4531,  4535,  4539,  4542,  4546,  4547,  4551,  4557,  4558,
    4562,  4563,  4564,  4567,  4570,  4573,  4579,  4581,  4584,  4587,
    4590,  4593,  4596,  4602,  4603,  4606,  4607,  4612,  4613,  4618,
    4623,  4635,  4641,  4649,  4653,  4657,  4660,  4661,  4664,  4665,
    4666,  4667,  4671,  4672,  4673,  4674,  4678,  4681,  4682,  4683,
    4688,  4699,  4705,  4709,  4714,  4720,  4727,  4733,  4742,  4756,
    4757,  4758,  4762,  4766,  4770,  4774,  4781,  4782,  4786,  4787,
    4790,  4793,  4796,  4799,  4800,  4801,  4804,  4807,  4810,  4825,
    4829,  4833,  4834,  4839,  4843,  4850,  4854,  4863,  4864,  4868,
    4869,  4873,  4874,  4878,  4879,  4883,  4889,  4897,  4898,  4980,
    4997,  5003,  5020,  5025,  5033,  5040,  5041,  5042,  5046,  5047,
    5048,  5049,  5054,  5055,  5056,  5059,  5061,  5064,  5066,  5073,
    5075,  5082,  5108,  5109,  5110,  5111,  5113,  5118,  5119,  5125,
    5126,  5130,  5142,  5143,  5147,  5157,  5164,  5169,  5173,  5177,
    5178,  5182,  5183,  5184,  5185,  5186,  5187,  5188,  5189,  5190,
    5191,  5192,  5193,  5194,  5198,  5199,  5200,  5201,  5202,  5203,
    5204,  5205,  5206,  5210,  5211,  5212,  5213,  5216,  5218,  5222,
    5223,  5226,  5228,  5232,  5235,  5236,  5241,  5242,  5249,  5251,
    5256,  5257,  5261,  5265,  5268,  5276,  5280,  5287,  5290,  5297,
    5298,  5302,  5306,  5307,  5315,  5316,  5326,  5330,  5338,  5340,
    5359,  5360,  5364,  5375,  5379,  5387,  5388,  5392,  5393,  5397,
    5398,  5402,  5407,  5412,  5417,  5425,  5427,  5429,  5431,  5433,
    5443,  5444,  5447,  5451,  5456,  5466,  5476,  5478,  5482,  5487,
    5491,  5497,  5505,  5508,  5514,  5518,  5522,  5526,  5546,  5550,
    5554,  5555,  5559,  5560,  5561,  5565,  5569,  5577,  5579,  5583,
    5584,  5585,  5588,  5592,  5596,  5600,  5604,  5608,  5612,  5616,
    5620,  5624,  5628,  5632,  5636,  5640,  5644,  5648,  5652,  5656,
    5660,  5664,  5668,  5672,  5676,  5680,  5681,  5685,  5689,  5693,
    5697,  5702,  5712,  5718,  5724,  5728,  5732,  5736,  5740,  5747,
    5749,  5751,  5753,  5755,  5757,  5759,  5761,  5766,  5769,  5774,
    5775,  5778,  5779,  5780,  5781,  5782,  5786,  5787,  5788,  5789,
    5790,  5791,  5795,  5799,  5802,  5804,  5808,  5809,  5810,  5811,
    5815,  5818,  5821,  5825,  5831,  5832,  5836,  5837,  5838,  5844,
    5845,  5846,  5847,  5850,  5851,  5855,  5858,  5861,  5862,  5866,
    5884,  5900,  5904,  5908,  5913,  5917,  5921,  5926,  5931,  5936,
    5940,  5944,  5948,  5952,  5956,  5961,  5966,  5971,  5976,  5989,
    5996,  6001,  6006,  6014,  6015,  6016,  6020,  6021,  6022,  6025,
    6026,  6031,  6052,  6053,  6054,  6055,  6056,  6063,  6064,  6065,
    6072,  6073,  6074,  6075,  6076,  6077,  6078,  6079,  6080,  6081,
    6082,  6083,  6084,  6085,  6086,  6087,  6088,  6089,  6090,  6091,
    6092,  6093,  6094,  6095,  6096,  6097,  6098,  6099,  6100,  6101,
    6102,  6103,  6104,  6105,  6106,  6121,  6122,  6123,  6130,  6131,
    6132,  6133,  6134,  6135,  6136,  6137,  6138,  6146,  6147,  6148,
    6149,  6150,  6151,  6152,  6153,  6154,  6155,  6156,  6157,  6158,
    6159,  6160,  6161,  6162,  6163,  6164,  6165,  6166,  6167,  6168,
    6169,  6170,  6171,  6172,  6173,  6174,  6175,  6176,  6177,  6178,
    6179,  6180,  6181,  6182,  6183,  6184,  6185,  6186,  6187,  6188,
    6189,  6190,  6191,  6192,  6193,  6194,  6195,  6196,  6197,  6198,
    6199,  6200,  6201,  6202,  6203,  6204,  6205,  6206,  6207,  6208,
    6209,  6210,  6211,  6212,  6213,  6214,  6215,  6216,  6217,  6218,
    6219,  6220,  6221,  6222,  6223,  6224,  6225,  6226,  6227,  6228,
    6229,  6230,  6231,  6232,  6233,  6234,  6235,  6236,  6237,  6238,
    6239,  6240,  6241,  6242,  6243,  6244,  6245,  6246,  6248,  6249,
    6250,  6251,  6252,  6253,  6254,  6255,  6256,  6257,  6258,  6259,
    6260,  6261,  6262,  6263,  6264,  6265,  6266,  6267,  6268,  6269,
    6270,  6271,  6272,  6273,  6274,  6275,  6276,  6277,  6278,  6279,
    6280,  6281,  6282,  6283,  6284,  6285,  6286,  6287,  6288,  6289,
    6290,  6291,  6292,  6293,  6294,  6295,  6296,  6297,  6298,  6299,
    6300,  6301,  6302,  6303,  6304,  6305,  6306,  6307,  6308,  6309,
    6310,  6311,  6312,  6313,  6314,  6315,  6316,  6317,  6318,  6319,
    6320,  6321,  6322,  6323,  6324,  6325,  6326,  6327,  6328,  6329,
    6330,  6331,  6332,  6333,  6334,  6335,  6336,  6337,  6338,  6339,
    6340,  6341,  6342,  6343,  6344,  6345,  6346,  6347,  6348,  6349,
    6350,  6351,  6352,  6353,  6354,  6355,  6356,  6357,  6358,  6359,
    6360,  6361,  6362,  6363,  6364,  6365,  6366,  6367,  6368,  6369,
    6370,  6371,  6372,  6373,  6374,  6375,  6376,  6377,  6378,  6379,
    6380,  6381,  6382,  6383,  6384,  6385,  6386,  6387,  6388,  6389,
    6390,  6391,  6392,  6393,  6394,  6395,  6396,  6397,  6398,  6399,
    6400,  6401,  6402,  6403,  6404,  6405,  6406,  6407,  6408,  6409,
    6410,  6411,  6412,  6413,  6414,  6415,  6416,  6417,  6418,  6419,
    6420,  6421,  6422,  6423,  6424,  6425,  6426,  6427,  6428,  6429,
    6430,  6431,  6432,  6433,  6434,  6435,  6436,  6437,  6438,  6439,
    6440,  6441,  6442,  6443,  6444,  6445,  6446,  6447,  6448,  6449,
    6450,  6451,  6452,  6453,  6454,  6455,  6456,  6457,  6458,  6459,
    6460,  6461,  6462,  6463,  6464,  6465,  6466,  6467,  6468,  6469,
    6470,  6471,  6472,  6473,  6474,  6475,  6476,  6477,  6478,  6479,
    6480,  6481,  6482,  6483,  6484,  6485,  6486,  6487,  6488,  6489,
    6490,  6491,  6492,  6493,  6494,  6495,  6496,  6497,  6498,  6499,
    6500,  6501,  6502,  6503,  6504,  6505,  6506,  6507,  6508,  6509,
    6510,  6511,  6537,  6538,  6539,  6540,  6549,  6550,  6551,  6552,
    6553,  6557,  6564,  6566,  6577,  6579,  6582,  6583,  6586,  6589,
    6592,  6595,  6598,  6601,  6604,  6607,  6610,  6617,  6619,  6625,
    6626,  6630,  6631,  6635,  6638,  6641,  6644,  6647,  6650,  6653,
    6660,  6659,  6673,  6672,  6677,  6683,  6684,  6687,  6690,  6697,
    6699,  6704,  6706,  6712,  6713,  6717,  6720,  6726,  6727,  6733,
    6733,  6741,  6742,  6743,  6744,  6745,  6746,  6747,  6748,  6749,
    6750,  6751,  6752,  6753,  6757,  6761,  6768,  6769,  6774,  6776,
    6778,  6780,  6782,  6784,  6786,  6792,  6793,  6794,  6798,  6801,
    6807,  6809,  6813,  6814,  6818,  6824,  6826,  6830,  6831,  6835,
    6841,  6842,  6843,  6844,  6847,  6848,  6851,  6852,  6853,  6860,
    6867,  6871,  6874,  6877,  6880,  6883,  6886,  6889,  6894,  6897,
    6900,  6908,  6911,  6916,  6919,  6922,  6930,  6952,  6957,  6962,
    6965,  6968,  6971,  6974,  6986,  6989,  6992,  6995,  6998,  7003,
    7006,  7009,  7012,  7015,  7018,  7021,  7024,  7029,  7032,  7035,
    7038,  7041,  7045,  7049,  7053,  7057,  7060,  7066,  7068,  7070,
    7075,  7076,  7080,  7081,  7085,  7089,  7090,  7091,  7094,  7096,
    7100,  7101,  7105,  7106,  7110,  7111,  7115,  7116,  7117,  7118,
    7122,  7123,  7127,  7128,  7132,  7133,  7137,  7139,  7140,  7141,
    7142,  7146,  7148,  7149,  7150,  7154,  7155,  7156,  7157,  7158,
    7162,  7164,  7165,  7166,  7169,  7174,  7175,  7178,  7179,  7184,
    7186,  7191,  7196,  7199,  7203,  7216,  7219,  7222,  7225,  7228,
    7234,  7235,  7239,  7240,  7245,  7246,  7257,  7265,  7269,  7276,
    7281,  7289,  7293,  7300,  7308,  7314,  7317,  7323,  7330,  7331,
    7335,  7341,  7342,  7346,  7347,  7351,  7352,  7353,  7354,  7356,
    7358,  7360,  7362,  7366,  7369,  7379,  7395,  7411,  7428,  7429,
    7430,  7431,  7434,  7435,  7437,  7439,  7442,  7446,  7450,  7457,
    7461,  7465,  7471,  7476,  7477,  7481,  7485,  7491,  7499,  7502,
    7506,  7511,  7519,  7520,  7527,  7529,  7538,  7558,  7564,  7572,
    7580,  7581,  7585,  7590,  7591,  7592,  7595,  7596,  7606,  7619,
    7629,  7642,  7643,  7651,  7653,  7656,  7657,  7661,  7662,  7663,
    7666,  7671,  7678,  7682,  7689,  7694,  7703,  7711,  7718,  7719,
    7720,  7726,  7731,  7732,  7736,  7737,  7741,  7745,  7746,  7747,
    7750,  7753,  7758,  7767,  7818,  7819,  7823,  7824,  7828,  7829,
    7830,  7834,  7835,  7839,  7840,  7844,  7845,  7848,  7849,  7853,
    7858,  7862,  7867,  7873,  7878,  7886,  7887,  7891,  7896,  7900,
    7905,  7913,  7914,  7917,  7918,  7922,  7923,  7926,  7927,  7928,
    7932,  7935,  7941,  7942,  7948,  7949,  7953,  7956,  7962,  7967,
    7977,  7980,  7987,  7991,  7997,  8001,  8005,  8011,  8019,  8020,
    8024,  8025,  8026,  8030,  8031,  8032,  8036,  8037,  8040,  8047,
    8051
  };

  // Print the state stack on the debug stream.
  void
  Parser::yystack_print_ ()
  {
    *yycdebug_ << "Stack now";
    for (stack_type::const_iterator
           i = yystack_.begin (),
           i_end = yystack_.end ();
         i != i_end; ++i)
      *yycdebug_ << ' ' << int (i->state);
    *yycdebug_ << '\n';
  }

  // Report on the debug stream that the rule \a yyrule is going to be reduced.
  void
  Parser::yy_reduce_print_ (int yyrule)
  {
    int yylno = yyrline_[yyrule];
    int yynrhs = yyr2_[yyrule];
    // Print the symbols being reduced, and their result.
    *yycdebug_ << "Reducing stack by rule " << yyrule - 1
               << " (line " << yylno << "):\n";
    // The symbols being reduced.
    for (int yyi = 0; yyi < yynrhs; yyi++)
      YY_SYMBOL_PRINT ("   $" << yyi + 1 << " =",
                       yystack_[(yynrhs) - (yyi + 1)]);
  }
#endif // ARIES_PARSERDEBUG

  Parser::token_number_type
  Parser::yytranslate_ (int t)
  {
    // YYTRANSLATE[TOKEN-NUM] -- Symbol number corresponding to
    // TOKEN-NUM as returned by yylex.
    static
    const token_number_type
    translate_table[] =
    {
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   763,     2,     2,     2,   754,   751,     2,
     758,   759,   752,   746,   762,   748,   764,   753,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,   766,   761,
       2,     2,     2,     2,   765,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,   755,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,   750,     2,   756,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
     125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
     135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,   163,   164,
     165,   166,   167,   168,   169,   170,   171,   172,   173,   174,
     175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,   196,   197,   198,   199,   200,   201,   202,   203,   204,
     205,   206,   207,   208,   209,   210,   211,   212,   213,   214,
     215,   216,   217,   218,   219,   220,   221,   222,   223,   224,
     225,   226,   227,   228,   229,   230,   231,   232,   233,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,   517,   518,   519,   520,   521,   522,   523,   524,
     525,   526,   527,   528,   529,   530,   531,   532,   533,   534,
     535,   536,   537,   538,   539,   540,   541,   542,   543,   544,
     545,   546,   547,   548,   549,   550,   551,   552,   553,   554,
     555,   556,   557,   558,   559,   560,   561,   562,   563,   564,
     565,   566,   567,   568,   569,   570,   571,   572,   573,   574,
     575,   576,   577,   578,   579,   580,   581,   582,   583,   584,
     585,   586,   587,   588,   589,   590,   591,   592,   593,   594,
     595,   596,   597,   598,   599,   600,   601,   602,   603,   604,
     605,   606,   607,   608,   609,   610,   611,   612,   613,   614,
     615,   616,   617,   618,   619,   620,   621,   622,   623,   624,
     625,   626,   627,   628,   629,   630,   631,   632,   633,   634,
     635,   636,   637,   638,   639,   640,   641,   642,   643,   644,
     645,   646,   647,   648,   649,   650,   651,   652,   653,   654,
     655,   656,   657,   658,   659,   660,   661,   662,   663,   664,
     665,   666,   667,   668,   669,   670,   671,   672,   673,   674,
     675,   676,   677,   678,   679,   680,   681,   682,   683,   684,
     685,   686,   687,   688,   689,   690,   691,   692,   693,   694,
     695,   696,   697,   698,   699,   700,   701,   702,   703,   704,
     705,   706,   707,   708,   709,   710,   711,   712,   713,   714,
     715,   716,   717,   718,   719,   720,   721,   722,   723,   724,
     725,   726,   727,   728,   729,   730,   731,   732,   733,   734,
     735,   736,   737,   738,   739,   740,   741,   742,   743,   744,
     745,   747,   749,   757,   760
    };
    const int user_token_number_max_ = 1004;

    if (t <= 0)
      return yyeof_;
    else if (t <= user_token_number_max_)
      return translate_table[t];
    else
      return yy_undef_token_;
  }

} // aries_parser
#line 34639 "parser.cc"

#line 8061 "parser.yy"
/*** Additional Code ***/

void aries_parser::Parser::error(const aries_parser::Parser::location_type& l,
                const string& m)
{
    driver.error(l, m);
}
